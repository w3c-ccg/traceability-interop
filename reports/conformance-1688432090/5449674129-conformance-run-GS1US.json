{
  "collection": {
    "info": {
      "_postman_id": "4bd78d4a-8f35-432a-a4e9-9e5a47c7c93c",
      "name": "Conformance Suite",
      "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
    },
    "item": [
      {
        "id": "571543b7-0735-4276-acd9-9d21288680e4",
        "name": "Clear Cache",
        "item": [
          {
            "id": "80ab0d01-76f0-4773-b033-9a2096024783",
            "name": "Clear Token Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "7a1ce23a-8d7c-4f8d-968a-0545628e2ce0",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"tokenCache\");",
                    ""
                  ],
                  "_lastExecutionId": "71f71a61-e3c2-4f7c-8b0c-85b817e5dc85"
                }
              }
            ]
          },
          {
            "id": "e38c2030-38c5-4fc3-8595-0be7859c9da8",
            "name": "Clear DID Web Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "a0b9b896-294a-4d1c-8326-ec5ea5c21496",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"didWebCache\");",
                    ""
                  ],
                  "_lastExecutionId": "2367d86d-9ea6-4254-98e8-ac7faa985aad"
                }
              }
            ]
          }
        ],
        "event": []
      },
      {
        "id": "392a92b2-3936-48c0-b7fa-c16dde59ae52",
        "name": "Discovery - API Configuration",
        "item": [
          {
            "id": "83ca37e4-54e6-49ee-8b88-f654caa79cc3",
            "name": "Positive Testing",
            "item": [
              {
                "id": "a342fafa-6e89-46fa-b14f-e4c5cad670ff",
                "name": "did_json",
                "request": {
                  "url": {
                    "host": [
                      "{{did_web_endpoint}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "57faa705-e247-45f1-b957-16796d2d934e",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200ApiConfiguration\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "cbd34e18-cf8d-4373-98fa-6356ffb4c3c5"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "020054f9-59f2-4d3f-ab9a-b9c5c07e467b",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "403dceb5-8abd-4d50-8097-1f9086c8ba86"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "8e7210a7-552b-4281-9d36-fb4fb014f1d4",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "a2d062b0-6d29-4c3f-b4cf-d76339ad2a7c"
                }
              }
            ]
          }
        ],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "3910d950-33bb-4b3e-8267-1aa039b537ca",
              "type": "text/javascript",
              "exec": [
                "// Discovery requires a multi-tenant aware did web endpoint",
                "const did_web = pm.environment.get(\"ORGANIZATION_DID_WEB\");",
                "const did_web_endpoint = utils(pm).convertDidWebToEndpoint(did_web);",
                "pm.variables.set('did_web_endpoint', did_web_endpoint);",
                ""
              ],
              "_lastExecutionId": "bcfcd959-097e-47d4-8fe4-881cda0ddbf3"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "cd3e3eb5-dd53-4c54-8866-8e7aa817a949",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "47d2a3cf-7a4f-4ff6-8012-1ece666fadbe"
            }
          }
        ]
      },
      {
        "id": "ea428a36-9d24-46e7-b62f-eac59e2780fd",
        "name": "Identifiers - Resolve",
        "item": [
          {
            "id": "81249321-5c9d-4ff3-b10d-df56a1da7a01",
            "name": "Negative Testing",
            "item": [
              {
                "id": "31e46de2-f120-4a46-8509-43dd3c086780",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "d1167c6d-a242-4b65-ae33-ab0cf0816034",
                    "name": "did:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "invalid_did"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "92adad66-9802-40b8-84c0-ecd7d3d5c19c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400Identifiers\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "62b4156b-c2f3-4419-86d7-2e8add4718a4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f96ba8fa-c976-4e43-94d3-7a6bdb4d43c9",
                    "name": "did:not_found:did_web",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "did:web:example.com"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8cb64dec-8772-4ee6-bcd5-cbf1edf07212",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "6cb7f936-9dd4-4180-9369-0a0f9e833526"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a573ab63-7b6a-45d6-9a56-62faa0cee031",
                    "name": "did:not_found:urn",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "urn:uuid:{{$randomUUID}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "23a5f39c-1e86-437e-8cd7-48e3e9202b5e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "efb0eec1-86c4-4bc4-8927-ff7d40a2c235"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "f7017901-fd9f-44f0-bf88-e36b6c9c6b22",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "685cb299-1177-4a96-8daa-8d72f7c8c53f",
                    "name": "identifiers:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET",
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e83d29d4-fd7a-4168-8cc7-ab3a1878ad5c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "3dc0899d-b682-405b-828a-f7c67f5eb718"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b56cc4bd-38fc-4786-9a2d-fdd17e08adff",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5c162cb6-6dee-4835-91f4-42d9c4750a43"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "6090da16-06df-4d39-bfa9-e54ecea078df",
            "name": "Positive Testing",
            "item": [
              {
                "id": "144541af-dd80-4e8d-9ae4-17b685065c06",
                "name": "identifiers",
                "request": {
                  "url": {
                    "path": [
                      "identifiers",
                      "{{ORGANIZATION_DID_WEB}}"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "43e3bd7d-da74-4275-a607-4634727e8235",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200Identifiers\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString), {",
                        "     strict: true,",
                        "     strictSchema: true,",
                        " });",
                        "});"
                      ],
                      "_lastExecutionId": "ae0bbcf4-4cfd-4343-b1ee-0296f656c258"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "50da25d0-28b2-4f4d-906a-e56bc34b6131",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                ""
              ],
              "_lastExecutionId": "56766663-9ccd-4710-8fbc-bf7a883b9f60"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "2131eee1-3f12-4a24-adf1-e77bee1806f4",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "99866408-2852-4716-a193-830149a7dac1"
            }
          }
        ]
      },
      {
        "id": "5b4a8c19-c1dc-47c1-9213-4d840e8bb4d2",
        "name": "Credentials - Create",
        "item": [
          {
            "id": "9a65febb-c5fa-44cd-9f53-5f17da9a087c",
            "name": "Negative Testing",
            "item": [
              {
                "id": "7c67d2a7-ed29-417a-961d-4e2f8d71e606",
                "name": "Bad Request",
                "description": {
                  "content": "This folder contains requests which mutate a valid request body in a way that should provoke a \"400 Bad Request\" response from the server.",
                  "type": "text/plain"
                },
                "item": [
                  {
                    "id": "671e0622-0b40-4e9d-9ff4-ba21bc9f8de5",
                    "name": "credentials_issue:credential:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c658f47a-362a-4325-a812-6fc6dcc4629f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6d75ef68-80dd-4fbb-be1a-82930ab9c8aa"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "072aca6a-3158-4d9e-b568-d1dd376a54d9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential\" is a required field",
                            "    delete req.credential;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "9077648d-51f7-4334-a930-be162ece8627"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5809948d-4df1-4068-9dee-440de13e61c8",
                    "name": "credentials_issue:credential.@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a2dda9ee-49ec-4e94-bde4-14d1c348ab15",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "217d77cc-b29a-45c5-9214-b1f821a23431"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b43732d3-d765-49a4-8c78-9c479a877e97",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" is a required field",
                            "    delete req.credential[\"@context\"];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "90f61bcd-66c2-49a0-9863-7e1336ba8f96"
                        }
                      }
                    ]
                  },
                  {
                    "id": "854d4a8b-c734-4ff9-a380-90bbc55444aa",
                    "name": "credentials_issue:credential.@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dfced2e2-53e6-4081-93af-13e2a9768186",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "083703c8-48d3-4011-aeb3-632a6fa07e20"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ba29ae63-f76a-40e6-bff5-c22101386aad",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a boolean",
                            "    req.credential[\"@context\"] = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "704aaddb-d891-447f-b17a-f2f2e8eea612"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1b97de44-212c-4b54-a970-beb54adcf11e",
                    "name": "credentials_issue:credential.@context:integer Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2aaf3f33-fa2c-4846-acec-1020170b634a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b06ae21c-6742-43b8-961d-3317cddec9db"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f70fc3c6-abc3-47d2-933b-b6a0cd4e6761",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an integer",
                            "    req.credential[\"@context\"] = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "a63c6a53-b49b-4525-94ae-961fba6b885e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f4a5a3cf-c1ff-4335-abee-0b1dcc004c36",
                    "name": "credentials_issue:credential.@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8371a27b-5aad-4fd2-aaff-7789ac83cc66",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ef0adf3e-0395-458a-af69-8046bc2e0210"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bbb316ab-6df2-418f-b9a7-29197e0c2961",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not null",
                            "    req.credential[\"@context\"] = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "45c93a01-8f1d-4b8b-92d1-062311ea236e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9a7f747c-dfe6-493d-b259-234088bf68d9",
                    "name": "credentials_issue:credential.@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4208c028-1359-41b0-9ee6-437db6983239",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "38d84db3-87c0-4ac6-bb4f-5e0f8f81db8a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1d735669-8566-4f98-b578-0fc75fc7fea8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an object",
                            "    req.credential[\"@context\"] = {\"@vocab\": \"https://www.w3.org/2018/credentials/v1\"};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "954c4982-bc0a-4151-ba55-5df3a6fa1786"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d490674b-0fe8-48ba-926e-38366de03321",
                    "name": "credentials_issue:credential.@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7208299d-5dec-4323-84ad-e9beb4d38351",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1b98aecc-cf03-4511-a080-3742782fd092"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1e9a095a-98ee-41c4-a65b-0bfe953ed3cf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a string",
                            "    req.credential[\"@context\"] = \"https://www.w3.org/2018/credentials/v1\";",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "edcde700-a7c3-48ff-944a-adf67a10992f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3e9d6671-3519-4034-98ea-5bbd047c556e",
                    "name": "credentials_issue:credential.@context.item.array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e6f29db3-9db7-4a4b-80ea-25e11b852cf6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dbd00585-6106-49e0-bd85-d9abd0012b20"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d6554c80-b90e-44c3-978e-1c730a40078b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not array",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        [\"https://w3id.org/traceability/v1\"],",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "e05eeb5a-4a29-49b2-a453-0a790ef62c95"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b0a9f328-556d-487a-8bea-5727cdf8cca7",
                    "name": "credentials_issue:credential.@context.item.boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d2e584e1-9cf9-4e39-a6da-64241aabc5c4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "806e97e3-47b1-412e-8760-29d102915bdc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5b091624-b797-44bc-bc6c-e2519e1863c3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not boolean",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        false,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "fed4ecd4-94a0-4a67-b29e-535c2bd76c2c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8d5132d6-cb4b-478b-ad04-68e583e869e2",
                    "name": "credentials_issue:credential.@context.item.integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "94ee7011-0d00-48fe-99e3-e5c7b20fbe0e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8c9b9dbc-5293-43b9-a687-05c82e7ac9a7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4ded805e-6034-493d-a5a6-0718ee90fda6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        42,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "84a3654e-1853-4355-a344-eb67d8867c21"
                        }
                      }
                    ]
                  },
                  {
                    "id": "398b148c-ba3b-40dc-ba98-94d386ea2ad8",
                    "name": "credentials_issue:credential.@context.item.null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "017b1daa-9212-4681-8cf5-02b2d466fa12",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6fbb7650-081f-4a16-86ec-5a4f993a9c73"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "594d4b51-b72a-4160-8c7b-e93162ff45cc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        null,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "062f5587-4d90-482c-b604-22070bdf41b6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e97614ee-5672-4d3e-bf77-80763085d9a2",
                    "name": "credentials_issue:credential.@context.item.object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b9d494db-a0b9-4595-963b-a238401c0da7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1adcd49a-608c-4fa8-8683-db92673494e4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e940c5f5-37c5-4e3e-b71e-e3907ef9a692",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not object",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        {\"@vocab\": \"https://w3id.org/traceability/v1\"},",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "663455a3-20fc-4499-a206-29cb7547eba4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1ef6236d-329b-4769-af64-0187ab279f37",
                    "name": "credentials_issue:credential.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e2ba6458-f31a-43b8-b096-f31b510aaac0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9841b7e1-c446-4c35-8986-054e67b06c9a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5976d913-b176-4182-9c9b-5e37edaa8135",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not array",
                            "    req.credential.id = [pm.variables.get(\"credentialId\")];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "5f9f75f7-ebbc-4d74-acd4-70f90521ffd8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "468b3a53-2ca1-4f19-a377-055d30da0bcc",
                    "name": "credentials_issue:credential.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6260da49-da20-44d7-9e44-79293a4e9b86",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e781cc12-b234-4141-b3e9-338c071573a8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a35818d9-67e6-4696-b89a-8529c209b6ca",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not boolean",
                            "    req.credential.id = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "84a63d2c-57f8-4ee9-8c54-5dabbf302563"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a1db0467-a9c5-4197-b0d6-34e30b091d03",
                    "name": "credentials_issue:credential.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1ddf48ff-4b9b-4151-a89a-c260176aec38",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d916aec3-ae48-47b3-bd68-3fcbdc8cd119"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1c257db6-1b92-446b-aba0-a2c4077a4a6a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not integer",
                            "    req.credential.id = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "28ced43e-de5d-4abc-819b-ecad8dff0644"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a7a43501-26d6-4b2c-819f-ffd7629862c7",
                    "name": "credentials_issue:credential.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "55507c67-a951-4cda-8c1a-0ce5140a8211",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3fe97a92-b409-4a09-890c-b24920589b97"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c1223616-2348-42ef-9efb-ea3878c7e15b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not null",
                            "    req.credential.id = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "686c4c40-5f36-45cc-aec0-071e70f4be19"
                        }
                      }
                    ]
                  },
                  {
                    "id": "36417561-ef68-414a-a92a-16eba3048b77",
                    "name": "credentials_issue:credential.id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "37df7ed9-857f-446f-95b5-167765d84f17",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "177cbf96-ddd0-4936-88b8-7473373d47c7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2f3b07a1-5818-4dec-85d1-87a62f7b0fbf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not object",
                            "    req.credential.id = {\"id\": pm.variables.get(\"credentialId\")};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "5010b3bf-4a0a-409d-88dc-cb2ae3e658b7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7fa73539-b864-46c6-af85-3153464e8247",
                    "name": "credentials_issue:credential.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "94e766d5-c205-4658-ba2e-62c58420c35e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c3901a86-0241-454a-9b09-9e842abb7228"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "741197d8-77a3-4c78-9c74-95ae0188f1b3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type is a required property",
                            "    delete req.credential.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "0b5bf7c8-760c-43ad-ada1-c50d04004d01"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b093502d-2be1-49cb-b312-3404a72cee7a",
                    "name": "credentials_issue:credential.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "478a3501-75d1-4936-990c-6600cdd3f536",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fb666e0d-6c03-43de-a3f2-be3786aba46b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d910bb6e-9adb-440a-80f4-5314cb71ccce",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not boolean",
                            "    req.credential.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "eb9de342-70b9-4a28-b2f0-d2517c630121"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2875137e-14f3-46fd-8803-20ccda5812a8",
                    "name": "credentials_issue:credential.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "daff2c75-de0c-4b67-b67d-a7ea8b20c3ca",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bb86a799-f2ad-4567-9f79-27023bf8d698"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "baec93d6-3221-4cd7-8216-8ab55066a7ba",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not integer",
                            "    req.credential.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "2026df45-86e0-4b64-ae30-a183dda6cf74"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7ccf545f-823e-43b1-8de1-03f935e49dda",
                    "name": "credentials_issue:credential.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "77903045-4fae-4b99-9e79-2eaef2ee7d18",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f06a5aaf-bbc8-432d-b8fe-76f51828d320"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d32b4ad4-ec17-4ee3-957f-a7065bb5e601",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not null",
                            "    req.credential.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "540548f8-c72c-4189-a2ac-3e3e3a4c2beb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d7da43b9-163a-4819-9455-681acf12208e",
                    "name": "credentials_issue:credential.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "10d034f8-94ac-4116-bc45-db09a0a5895e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f353327d-9794-4ce8-a31b-c6b597b5e438"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "928852d5-16a5-4a6f-b540-478dd1575d8c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not object",
                            "    req.credential.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "af242389-8c02-4fc1-8e73-a19835c91745"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f60986f1-c7e2-4bc0-9581-4efaf5a512b7",
                    "name": "credentials_issue:credential.type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "05b27f64-909a-44ca-a044-c064a9378c24",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "71fae874-d034-46ea-b962-a461eb7ef7c0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "42aaea76-21d7-47d7-9c2f-8297feed84bd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not string",
                            "    req.credential.type = \"VerifiableCredential\";",
                            "}));"
                          ],
                          "_lastExecutionId": "d9ac772f-71f1-4ccb-97fa-3ab3ac7eb7fb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "de0742cc-6486-44db-b177-d9b26bee5ea4",
                    "name": "credentials_issue:credential.type.item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d51f4dc4-2633-4bcd-af02-b7012b329038",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "62d8b526-b04a-43f1-a2a6-af3a7ea268b4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "796bc761-9902-4761-adc9-dc4bdf9d9506",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must have at least one element",
                            "    req.credential.type = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "819d12e7-c04e-4cf9-80cf-02638b58486b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f781513a-3c37-44af-aa59-fb7e8b594e9f",
                    "name": "credentials_issue:credential.type.item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e394d384-3fae-47a8-b91f-75f69d5950b8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "399ab27c-0829-4b4f-876f-fa7dbff42b07"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9f4b7b14-9484-4abc-9dab-605a0bedaef2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not array",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        [\"AnotherType\"],",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "b23b5ec2-8f7e-4ba3-9e5c-74de938cb828"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ceb8baf1-8829-44bf-a02a-56d3c55a6df7",
                    "name": "credentials_issue:credential.type.item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fc1b4c49-cba1-4531-84f9-063384ee2cec",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "208d3c36-d75b-4d2d-844a-a7eb194cf05a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fcd74315-1b91-44da-9f9b-da077834489c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not boolean",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        false,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "f9566e83-28bf-438a-957a-4c19d53613a9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ed864b3f-1add-48e1-b50f-f1569aca4b5d",
                    "name": "credentials_issue:credential.type.item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3fce0862-344c-41e9-95e3-8f532ee8eaaa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4452da2c-4924-4ac4-9092-5ea729e34517"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6fd314fe-2dea-457c-a705-322ac850f872",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not integer",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        42,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "9c21be8b-f124-47d8-9048-249bfb2b37fe"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a9b1516f-343b-4cbe-90c2-962ef54b722e",
                    "name": "credentials_issue:credential.type.item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cfe4c163-163b-4cdd-a652-9c5ff4cafdb4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9bf436c0-22d0-4162-b961-e0ec76fadb05"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4918bd0e-777f-4fbf-af99-12f7c45dea9e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not null",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        null,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "53b1f513-06b1-476c-bf92-d7597a151358"
                        }
                      }
                    ]
                  },
                  {
                    "id": "01f7afda-0219-4266-ac8c-049c6c98f8a6",
                    "name": "credentials_issue:credential.type.item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a98deff3-c6a4-43a6-806c-a1e648ef4cd0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7d890320-ce3e-4a3d-a0e6-5302e7d37a99"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "737cccdc-2e8a-4f64-83b6-7fe4a499651f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not object",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        {},",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "36faa8b6-027f-4b21-b7fa-8fcb93087bb6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0fcedca4-36c9-4909-a0ef-df4051d9e16d",
                    "name": "credentials_issue:credential.issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7254b98f-86ce-4e03-a1c5-545a3252d596",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1895daba-cd58-4ddb-b70d-760e3826a22a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e753d4a3-269f-44c7-9718-9cbd46850781",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer is a required property",
                            "    delete req.credential.issuer;",
                            "}));"
                          ],
                          "_lastExecutionId": "af6e44cd-3ea3-4bc9-ab08-117c156ff3b7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a36af6ba-1e46-4c13-8648-a366cfcda6c4",
                    "name": "credentials_issue:credential.issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2ff6df3c-cbde-4c32-ba25-21a9994ca47a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a0ccefa2-4b89-48e0-aaf2-70e3a70eda4f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9d8fa108-3cf4-41fb-b1fb-2fe02da08513",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not array",
                            "    req.credential.issuer = [pm.variables.get(\"issuer\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "0967a670-4fc8-4e0e-b13c-38c18d707863"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b1206089-d694-4310-aea2-19804d997cad",
                    "name": "credentials_issue:credential.issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1470e9c6-a70a-4acf-8720-d39e52cbb3a6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "187bcf7b-7eb9-4678-ac42-183116bf9b29"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0e2f9bf8-a4cf-4427-a1cd-1498fb442aa2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not boolean",
                            "    req.credential.issuer = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "88e5428f-9608-46ea-8f16-dfc30740b622"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aed619d5-94d5-4ae1-a748-a1229658b74b",
                    "name": "credentials_issue:credential.issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f901ed78-0a69-435b-b109-f1588f0b69c6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "56706e9c-ffb8-4331-8b8f-6663e00e8ec4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7a0594b3-210c-4a18-9d20-5d0a7c38b30f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not integer",
                            "    req.credential.issuer = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "0ee1b77e-145c-4887-8ac1-1e4ae550332a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "66870dca-c97d-4fb7-af82-1e8f79a449d3",
                    "name": "credentials_issue:credential.issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "126807b0-8102-4ae1-a5d0-b543dc165807",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e243e0dd-a75d-44f6-9d74-08ebb1ab15d2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bd8468bb-6553-47c1-aaed-59eab77f25ad",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not null",
                            "    req.credential.issuer = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "6df2046e-879f-472e-b18d-59f4fb738cf9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "447ce344-8e49-45f6-9381-16c1c6672452",
                    "name": "credentials_issue.credential.issuer:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "896af6e2-ab02-4019-b7d8-531bb3cfb06c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f18394b8-f654-42cb-8f4f-3d32317a0f83"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0a68d053-0928-457b-9ca0-041b2918255e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be a valid URI",
                            "    req.credential.issuer = \"not.a.uri\"",
                            "}));"
                          ],
                          "_lastExecutionId": "7c8e3113-790d-4a9c-aa16-b7cd11ac3fb2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0c82674f-5919-4eba-a336-31fbe9221cbf",
                    "name": "credentials_issue.credential.issuer:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d386f495-53c0-48b1-91f5-705e850d9131",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "a9aefb63-d9d1-442f-b8b8-3bbb3a0432c7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "744f9cc6-7f9c-4caa-95aa-6abd379a4c68",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be known to the endpoint.",
                            "    req.credential.issuer = \"urn:uuid:{{$randomUUID}}\";",
                            "}));"
                          ],
                          "_lastExecutionId": "bfe14db2-d29d-4d5c-a02f-5d464264a61a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f0626da3-d37c-420f-94cd-30d885b76a38",
                    "name": "credentials_issue:credential.issuer.id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "587cd3a9-ee43-434b-aca3-316c1fef0826",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "540ae592-fd13-46cc-8708-09fa83d49e1c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "61ffa9e5-2492-42f9-85ae-89743af1892c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id is required when issuer is in object format",
                            "    req.credential.issuer = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "1002ac70-213d-419a-ad2e-533bc3500b12"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aef8ad1f-a848-417b-8372-0005c1b04de9",
                    "name": "credentials_issue:credential.issuer.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "67e4a47d-cbaa-418a-8867-443f220b6dda",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "560f8a84-d3a1-4978-a5c3-b5483df94614"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "92af6ca2-5392-453e-93a7-d9b5c76107a6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not array",
                            "    req.credential.issuer = {\"id\": [pm.variables.get(\"issuer\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "bef0a5bf-26e7-4d23-b2c2-6cf9899d048d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "efb4787d-7817-4f12-80a2-9b77927e660e",
                    "name": "credentials_issue:credential.issuer.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "57cf37ea-c898-46ab-bc61-1cbb59d5efd0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "50eef629-c682-4197-83cc-7ff83c7a504e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "aff13e57-5c02-4e1a-85df-b1237a183b4e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not boolean",
                            "    req.credential.issuer = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "e0b04291-1c8b-4a50-a7e8-15a192750b24"
                        }
                      }
                    ]
                  },
                  {
                    "id": "81ca060d-3771-4b9f-b96c-62103cef66b7",
                    "name": "credentials_issue:credential.issuer.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0f32a829-adcb-4f50-9827-81a2b67016d4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "45762c0f-2a57-4cd5-bb43-0180662f1798"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "975e403f-5850-4832-a306-0ec8354b16db",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not integer",
                            "    req.credential.issuer = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "ba0df0c0-70fa-4320-badf-f5eb330eb24e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eaff7123-6076-453f-adcf-2f87e5df43ed",
                    "name": "credentials_issue:credential.issuer.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7301be67-0900-4940-8fbf-613af3580660",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6be434f5-f62b-4700-9398-fe3551d6a5f5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bd9ed1d4-2de0-467c-a9ca-ec053ffb8bbd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not null",
                            "    req.credential.issuer = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "cbf71ca7-f367-447e-ba21-52d4f59f4e23"
                        }
                      }
                    ]
                  },
                  {
                    "id": "df90ba7b-43c3-4f4f-a72a-b1ba1350f82c",
                    "name": "credentials_issue.credential.issuer.id:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5a1dff8b-8c8d-47cf-906b-39bb2d3d1f88",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a0ad3e1d-89c0-4f58-887e-9c5f171ddc45"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6b61297f-bce9-4547-966c-231db7cc8891",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be a valid URI",
                            "    req.credential.issuer = {\"id\": \"not.a.uri\"}",
                            "}));"
                          ],
                          "_lastExecutionId": "d3e0a86d-9e16-4f55-a35e-2c516467c1c7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8d2e55d8-7842-48a2-a8b7-b69e5125163e",
                    "name": "credentials_issue.credential.issuer.id:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b52057ad-7cac-40de-9a61-705e669281ca",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cc60995e-bf80-410a-9c34-2dbf415865f7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3a3fb6e3-d789-4eb9-a80d-81925db29f4a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be known to the endpoint.",
                            "    req.credential.issuer = {\"id\": \"urn:uuid:{{$randomUUID}}\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "7cb4731f-6f89-4f1e-8f5b-ba8b2a271123"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bb118b11-754c-40ae-91cc-0d838719be1a",
                    "name": "credentials_issue:credential.issuanceDate.missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3cc99bbf-bad8-45b8-927a-f40d7973d8a6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6baaa65c-c28b-43e4-b4dc-07ddb3ad7c6c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8d0f661f-6188-4936-8de4-e07a6a48a632",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate is a required property",
                            "    delete req.credential.issuanceDate;",
                            "}));"
                          ],
                          "_lastExecutionId": "3e93d542-522c-40d7-9c5a-120141329410"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2fd773ed-54c4-4b22-948d-811e2b61543f",
                    "name": "credentials_issue:credential.issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fe67a452-fcd8-4229-9f78-aee9fdd69f49",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2e1bc26a-215a-47df-a3e5-adb04fc04b19"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6ce3c6a9-9672-4d65-9d9b-3ac509e5269a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not array",
                            "    req.credential.issuanceDate = [pm.variables.get(\"issuanceDate\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "ec434b02-8b52-4e76-8df5-2952315e8e23"
                        }
                      }
                    ]
                  },
                  {
                    "id": "294ca80d-bda0-45fd-8751-1d8015d1947b",
                    "name": "credentials_issue:credential.issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3ba9ca91-c631-45fd-8bea-5f4ce79a28ac",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "85c7f9a5-e10b-4faf-9793-a5fc663b1003"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "aaf93c88-24e9-40e1-b3c6-90f141f44394",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not boolean",
                            "    req.credential.issuanceDate = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "207cd849-7523-4e37-9737-075e8a8b5f79"
                        }
                      }
                    ]
                  },
                  {
                    "id": "be2ee959-17de-4355-8d0c-2dc636e8ca9f",
                    "name": "credentials_issue:credential.issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "008a8722-2679-4465-b633-5d05b56759f1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e960d836-3d71-432b-8d74-ea4c248d60de"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b6a1cccf-a146-44fb-b841-d84f6bd17509",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not integer",
                            "    req.credential.issuanceDate = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "60ddad58-bdbc-430f-bb5f-c0e23846e135"
                        }
                      }
                    ]
                  },
                  {
                    "id": "59bba2d1-5042-46f8-8659-dbb3482c111f",
                    "name": "credentials_issue:credential.issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "98e372ac-1999-432a-99ca-ad21659b7eb5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f4411c16-4788-4f00-b7d9-f23fd4831eb3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1caf17ab-295b-416d-ab1e-8aabb006dbba",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not null",
                            "    req.credential.issuanceDate = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "a6272b02-fa89-4e4b-a48e-322a60fb8a4e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "88183505-6c0c-4aa8-b60f-f40453270e76",
                    "name": "credentials_issue:credential.issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "96268c51-1b78-48f3-adf9-c96215b6c3f5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6133c19f-6f78-4ed8-86c9-d9bd0ca2b639"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "07efc306-e1a9-42a5-85b4-515bb059e507",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not object",
                            "    req.credential.issuanceDate = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "6aaf44b2-0d54-474c-8bbc-f1fb265fc946"
                        }
                      }
                    ]
                  },
                  {
                    "id": "443a6827-2193-4695-9428-b9d155415c29",
                    "name": "credentials_issue:credential.issuanceDate:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a4bd1a2d-efed-4d56-8749-da242e6d58a2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "37290b2a-e26d-4185-92f7-73e03d830697"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0093950e-52af-412e-b812-4b6b5d492f3e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be a valid XML date time string",
                            "    req.credential.issuanceDate = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "d19803bf-92c1-4421-9344-064653f278be"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dc212476-bb69-425a-846f-ff114c857a31",
                    "name": "credentials_issue:credential.credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a74da678-74ed-4fe6-baec-d630ab3afb20",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2fc939a2-def7-4f08-9efa-8a52384c5255"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f5edb010-aec9-4a77-899d-cc5e4a19f6a9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject is a required property",
                            "    delete req.credential.credentialSubject;",
                            "}));"
                          ],
                          "_lastExecutionId": "c6a54ab6-4206-443b-ac76-9f9dd37fb870"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6d1c1532-1cf3-4332-8de2-c65afdb57363",
                    "name": "credentials_issue:credential.credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bb282c7e-9a52-404d-b730-abe8f308109a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0c66d4c7-a721-4ae5-b35a-a8bd6bdeaae4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a0f98c2f-213c-404c-ad18-89ae2fff6cc3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not array",
                            "    req.credential.credentialSubject = [pm.variables.get(\"credentialSubject\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "6fd3e4a3-d9d7-4184-8b93-ca8786ebe8c2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a6a03656-910e-40db-9b48-1f47b75caacb",
                    "name": "credentials_issue:credential.credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "eaceaeb0-1190-41b1-836c-7e06842ca936",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "de6c1524-25f2-4a49-b3fe-8acc02a48844"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "37babc91-792d-49ec-bbf7-ca439ed59280",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not boolean",
                            "    req.credential.credentialSubject = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "a788b88a-23d1-4aa2-961a-011fe3fe3e85"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5337a6c6-f504-4648-8c99-1d023e022449",
                    "name": "credentials_issue:credential.credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "02d4d253-c216-43c7-b0d8-72d102b982f5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "092be975-efb2-4cde-b001-7b03c73a93b2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b46ff3d0-264b-4e5b-85da-f12eb7f4b942",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not integer",
                            "    req.credential.credentialSubject = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "bb41b72e-f8be-404e-8672-e504a0a06d41"
                        }
                      }
                    ]
                  },
                  {
                    "id": "832847a4-33f2-44ce-bc2c-c3c9b2485556",
                    "name": "credentials_issue:credential.credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "535e41ef-6329-4bc8-a1d2-86ec7a74c8e2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a4bda4c7-96c9-4d2e-adbd-73c6beb3523d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "17a19ed8-4857-4704-a5b6-4479411393bb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not null",
                            "    req.credential.credentialSubject = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "80eaa730-c586-4413-97b6-5a470c6c06ba"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a443a138-6401-4888-a133-3971610dfbf1",
                    "name": "credentials_issue:credential.credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2f2c1241-cfac-4894-9d93-d548b1a493dc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ff63d7d7-5d84-419e-8a97-f4e001a41c38"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bcf0fa83-b686-4f06-ad50-bfc205e524bb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not string.",
                            "    req.credential.credentialSubject = pm.variables.get(\"credentialSubject\");",
                            "}));"
                          ],
                          "_lastExecutionId": "6b025b16-b9f7-40f5-bdcf-d3c7dc4ae580"
                        }
                      }
                    ]
                  },
                  {
                    "id": "06b2149d-8b38-4472-98cf-2b7b1a52e5cc",
                    "name": "credentials_issue:credential.credentialSubject.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f56f9df4-d1d9-4132-a261-7dc66bfb3bb5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "86079f46-8ecd-40bb-b491-474086762f7b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "281146b0-99e1-4c9e-98ed-f44fc73c0543",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not array",
                            "    req.credential.credentialSubject = {\"id\": [pm.variables.get(\"credentialSubject\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "1d577312-0797-49a6-9ede-0c5f3c8001a3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1c34f0c4-797e-4815-abf3-a06d017d971b",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4fc5b781-f05a-42f3-acfa-16b57cd4838d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "60836b6e-9a67-4248-84af-c6663352685d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "77aca23c-4158-41f9-8b99-fc3df6f4f854",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not boolean",
                            "    req.credential.credentialSubject = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "ff7c10f9-79b4-48b6-b821-e24c5d424b3f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a277de42-0154-4b55-a962-155b42443409",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 2",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2ae61565-782f-4423-b65e-9104fb028f8c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "02abc5d1-3123-47bf-898d-81686c358553"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bd2bb2d6-8b84-4d29-94d8-c6f6776ee4ed",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not integer",
                            "    req.credential.credentialSubject = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "961ceb24-0de6-48b0-b4b0-d81481cb25ea"
                        }
                      }
                    ]
                  },
                  {
                    "id": "12969779-b86b-4889-82c2-572e9a925899",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 3",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "53c8fe2c-7467-4e70-8874-9bd11f3b7dc2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "af830ef4-879a-4ae0-8699-92b4356b5bbd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2a993f55-b11d-4777-80e5-735e95cde6c8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not null",
                            "    req.credential.credentialSubject = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "2ded7765-6a18-4bde-9695-85ecba539fa8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4a1ff952-b243-4496-acd5-b30c6629769b",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 4",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "99595567-6bc5-453e-83e7-a8dc19bf9c71",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9669ac34-bd58-46c3-a48e-fe187e9f0623"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "93d96326-26eb-4193-92fb-d4ea696f230f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not object",
                            "    req.credential.credentialSubject = {\"id\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "9a88cb25-1830-4c99-b4d1-3c23f81c741f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9e420872-ebcf-4286-a5c5-b736346c9523",
                    "name": "credentials_issue:options:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d9782c32-7f10-4c9c-9371-00cd92bc5a1c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cf74a0d1-07e0-4787-9cf0-c53e15602157"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b809157a-639a-438f-b41e-a926f3bf7ad1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options is a required property",
                            "    delete req.options;",
                            "}));"
                          ],
                          "_lastExecutionId": "09a118ae-9c61-4f53-821b-81c67a799cb4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e1dade53-27de-4eea-854a-6672b2fa4eb0",
                    "name": "credentials_issue:options:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e97804bf-f0df-4105-a885-c8992c180fca",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c216ac9d-ef76-427d-a1a1-e3d4e97773fe"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5f9a4cb6-c374-4810-9e5d-b1d06f9be2b6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not array",
                            "    req.options = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "8253b974-5e52-40d9-a02a-908340400c32"
                        }
                      }
                    ]
                  },
                  {
                    "id": "623adfc8-858e-41d9-84b4-3c0dc73fe25d",
                    "name": "credentials_issue:options:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e14a01a6-a7b9-4fca-bf75-9d3ca19174e9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6f9d5b9d-d049-433d-abc5-a2dc040d69af"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dab49bf8-80dd-42f0-8c9f-8046377dd951",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not boolean",
                            "    req.options = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "95b75ca7-443c-48e5-9fe5-74cd4ff38cd2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e06eacf5-adb9-4ed6-8dcd-a842915f344b",
                    "name": "credentials_issue:options:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "10597db3-3734-4e70-b7b4-75bc7f85de69",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7dfe4b2b-be7e-4ff9-beca-4c706ba3793a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0edd9b69-47d0-4a89-8915-4431c7574ab9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not integer",
                            "    req.options = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "6d1acb27-bc37-4043-b1f8-1775bb4bcbe8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "618ff7a3-0aa0-4548-9080-72ee0a4ffbf2",
                    "name": "credentials_issue:options:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5e4c5ba5-33b9-47c1-90ec-7f545a5366cb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "af5514a5-dce1-42b9-bb91-0d119248ba7b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5d2b87ee-a5cd-45d5-9ed7-380360c2bcf3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not null",
                            "    req.options = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "6bb89f39-866c-4b6e-ae84-b18ef93c2209"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fca92965-a12e-4221-8061-1be039d21914",
                    "name": "credentials_issue:options:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d8411471-86e7-4bf4-b109-cbb60f1dee83",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "63fe055a-5bca-4de0-a6c2-c9d62dd28915"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8a843589-26d2-46f2-9357-8584d346a36c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not string",
                            "    req.options = \"\";",
                            "}));"
                          ],
                          "_lastExecutionId": "d586d29d-8545-4e7d-807b-39fc85a1d2a6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ad210a28-94da-4ef5-8d4f-d1b952dd7708",
                    "name": "credentials_issue:options.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1d874940-5467-4988-ae5b-965d1ff4fdc2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "090b1e48-8e40-4a9e-9530-e34b06d47ba7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "978a7ed8-17f9-41d3-ac93-73a487bd569f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type is a required property",
                            "    delete req.options.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "70d4547f-d8a4-4ddb-a159-7b27e9c148d3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f5f7abf3-e2d3-4d2c-8088-9a0f37ba2ac9",
                    "name": "credentials_issue:options.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c1c50aea-f56c-4ea7-ba62-2c5cf9584cc7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4a20b55f-a343-4697-8a97-adf25f60799a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3056ca1e-ed69-48a0-9df0-3bfb73e519dd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not array",
                            "    req.options.type = [\"Ed25519Signature2018\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "df5cbf71-c033-4978-b73e-411ed1470c2c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bc9df82c-91a5-4066-ab30-2d991dcc3890",
                    "name": "credentials_issue:options.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a93d7edb-f100-43cc-b943-f3ea8dace457",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d26a8b63-914d-4d37-96c8-e4e2c52f8f60"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "438a12da-b5c4-47bf-ad29-05fa9101ebf1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not boolean",
                            "    req.options.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "1abcc25a-7bec-4803-a72b-a700fa4dfe7a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "00186163-0109-454c-94dc-500c0f6d66fc",
                    "name": "credentials_issue:options.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ff209571-a0ef-4b87-b43a-7760b1db4409",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c19127eb-4bb7-40b9-b14b-3c856714cf4e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a3984d33-4f2d-4a70-86ae-51277599bc62",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not integer",
                            "    req.options.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "72bb1620-e5a1-48a1-a0c5-252f460dec30"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b1e2d107-ba53-42bd-bbd0-6be7cad69318",
                    "name": "credentials_issue:options.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4211623b-52a9-4219-bad7-b79fab0b83da",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ace002de-92c0-4739-8faa-d2d7f47aabbe"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "af84dc94-4fc7-4914-b204-4d851afa7ee1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not null",
                            "    req.options.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "4f76ff07-422a-49dd-8e40-53d78f775cf7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "601b61e3-a863-4fa6-b4f5-0f15933b6ac6",
                    "name": "credentials_issue:options.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "47ee85e9-ce23-4f51-930d-c7196b7ea6a1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d871b0d8-a7b3-46d1-ad01-d2713b9e2904"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "15669e9f-218e-4cad-b614-ab9ab23b1312",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not object",
                            "    req.options.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "90418025-b523-4e91-8d9a-21eea728a685"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b971b2e8-f31f-4930-8845-ba17fa2030be",
                    "name": "credentials_issue:options.type:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6f190662-07a0-4406-bb3c-ba43edf62430",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "407ba8ed-b02e-4098-aba6-23e645117cc1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f6566ca4-4e39-4452-88ca-bd1412c4851a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be one of the valid values",
                            "    req.options.type = \"invalid value\";",
                            "}));"
                          ],
                          "_lastExecutionId": "b26b2327-4bd4-491b-a09c-c2cb6de8dad9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "738345ac-f2fa-44af-8a02-7448d05c297a",
                    "name": "credentials_issue:options.created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4158762e-ef91-43d5-8466-7400daa5c8e3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d1e2d476-cf06-4fec-aa9b-a9e11f67d2ef"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7fd83bda-766a-4bca-9a93-ae1210cb9fdc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not array",
                            "    req.options.created = [pm.variables.get(\"created\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "5e68159d-987c-4b94-909d-0d8967bfb0af"
                        }
                      }
                    ]
                  },
                  {
                    "id": "43f6b2e5-26bd-4e2b-9277-f558dafecfb8",
                    "name": "credentials_issue:options.created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b3d385f7-0b8c-4816-8dcf-9e054b79c5f6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "02098783-b2f1-486b-9b4e-1dd054569738"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e1a1240d-65b2-455f-aeca-5f5ed885c2ba",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not boolean",
                            "    req.options.created = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "67171dde-b3ba-40fd-a82d-5fb449a60e0d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d892731f-d516-4dc1-9964-6c4281fe1238",
                    "name": "credentials_issue:options.created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f38cbf8a-03ab-401b-b1e0-8771c5542b60",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2dcb9656-9195-48b2-be3d-17585995d2f1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "195a349d-883b-498f-ada5-b6c0b0264200",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not integer",
                            "    req.options.created = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "7353786c-6de2-47bd-b67d-926a3fb6b604"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fa065324-27ba-4312-a29e-b81cd7010406",
                    "name": "credentials_issue:options.created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e3cfe415-0fd2-4090-8317-d959ed1c05b6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "02eaae69-9514-46dd-986f-06c867ad375a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6ac10189-29db-4721-aa39-427cf1646652",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not null",
                            "    req.options.created = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "b0f2a7b9-0bf3-4bcd-9e3a-e3d334dadb1c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "37a87efc-40fd-4b95-8158-dd4f00d7a88f",
                    "name": "credentials_issue:options.created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "76b87c54-f0b6-4e12-a8db-a3eeca2c26b1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "36573795-0570-4248-99f4-661b3a5598c0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b24018f8-8019-42ab-87f6-cbcea97652da",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not object",
                            "    req.options.created = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "fdf509db-7ab1-4405-9fb0-48734e1d28a6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b72b42f5-7216-4b96-8979-28c71db474eb",
                    "name": "credentials_issue:options.created:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3cc1cabb-319b-4c47-be87-31a927b477b6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7eaf46a1-5109-4d3e-9a0a-dc5e1a0a59de"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3161575d-b0b3-4b73-974b-7d3011f888cd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be a valid XML date time string",
                            "    req.options.created = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "02a2f46a-29bf-4efb-aa67-aa76ea0efa71"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d36d9bf9-816b-457d-a830-9b888020602f",
                    "name": "credentials_issue:options.credentialStatus:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "097c7649-62ab-46c4-a700-7c04344900e3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "adf94a41-0e60-4fd5-860e-d17cc6250729"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "30a66acf-8599-4557-aa3a-2599e534eae2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not array",
                            "    req.options.credentialStatus = [\"StatusList2021Entry\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "f3134c24-a107-4320-9511-f10c7e060ad1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cd98afc3-3dd1-4950-afe5-2f5a8cff14e6",
                    "name": "credentials_issue:options.credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7ff5b3ed-9bac-4ae0-9a11-8c03d748c279",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "00d72039-d0e0-47cc-bd28-f7f5c406ad75"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3513349e-e93d-4032-9fd4-0fd519e5ca9c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not boolean",
                            "    req.options.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "0968efc1-ba07-4e8e-a1dc-a84414b4c7f1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "54c1eb97-1136-4f8f-80db-6bc98d451747",
                    "name": "credentials_issue:options.credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1804db43-f69f-4b7b-8479-e4ba23c1dbfc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7c3d4131-f73a-4acf-889c-be6cfa7ef67f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "54188d92-78d6-4c57-902a-f328820f593b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not integer",
                            "    req.options.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "807d1f89-69bc-43b3-ac2f-d857c950d565"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e0553379-062d-44d1-94b0-7cadfc4758ed",
                    "name": "credentials_issue:options.credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c4c425bb-32f2-49b8-ba6d-0f145c535b7b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2ad9b772-bd4e-4523-978a-05ecbff4aa49"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fc5c5ac6-6298-4009-86bf-4a40cd5cf352",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not null",
                            "    req.options.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "96bbd6c2-895b-41c6-973c-370d3a71a3f1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eb62cd4e-f4be-4234-9d88-e306a7bf90e3",
                    "name": "credentials_issue:options.credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7e08f07c-e79c-4174-8417-9663ba0a6915",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bdf7c989-aa37-462c-a450-8a8aa93aae02"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ac979248-cc8d-41ef-8d77-7cc04756b6a7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not string",
                            "    req.options.credentialStatus = \"StatusList2021Entry\";",
                            "}));"
                          ],
                          "_lastExecutionId": "d3eea395-1a85-45a0-a758-d8b3f50895f2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bdeee120-0f3d-4086-ad30-dd6f301af43b",
                    "name": "credentials_issue:options.credentialStatus.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d4279a1f-b49a-426c-9a1e-b26714020a41",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "032b0e8c-3e04-4890-9811-333978de5164"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f6a4811a-ec17-4482-8915-d5576ac9e0ad",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must contain \"type\" when present    ",
                            "    req.options.credentialStatus = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "40800f11-587d-445c-8a8e-450180fd8413"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d65ace44-2ac6-475c-8751-3bfd14ceac83",
                    "name": "credentials_issue:options.credentialStatus.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4ac5fbeb-b9a1-4b30-aaa0-4cf5ed81d217",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1ab5de4f-6eab-4e01-9950-4ca1036c523f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b00bd20a-2cbe-4bd9-8f60-331e4b1acfcf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not array",
                            "    req.options.credentialStatus = {\"type\": [\"StatusList2021Entry\"]};",
                            "}));"
                          ],
                          "_lastExecutionId": "154eb52a-0d33-48ff-98d0-3277cfe14e63"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8edf28e4-7a4a-459d-88e4-a6b1c269b0a2",
                    "name": "credentials_issue:options.credentialStatus.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e09cb09d-3501-4c52-87d2-b6357ec660a3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1e0db4da-9244-448f-8fc8-8cb7d628d92b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3ec39c3b-2698-4317-af34-0abc5e233d9a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not boolean",
                            "    req.options.credentialStatus = {\"type\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "e679b3b3-5ddf-415e-9967-cc03e1cff1cb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "87e7af86-47ac-43d5-a8c0-318ccade28ab",
                    "name": "credentials_issue:options.credentialStatus.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b8edfb3c-9080-4f5b-892f-ae0c9c2c25df",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8d2a5fbf-9bac-41a0-8286-ba8e4b3d7e53"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0bcfec50-cb8c-4872-9182-1c93ea06d153",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not integer",
                            "    req.options.credentialStatus = {\"type\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "28d16107-6e8d-45ca-bf25-199d4d32a12d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "73da2784-82a0-4002-a9ea-899735a39ef3",
                    "name": "credentials_issue:options.credentialStatus.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1e00684e-1884-4f0e-85bd-08decc349a77",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fe15afed-2356-4a3c-bb3a-47e54c55ba7e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3710af8a-51ad-4735-9e26-fd84e0b852bf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not null",
                            "    req.options.credentialStatus = {\"type\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "3801c57c-5532-4b95-90b9-7a134b1b69e9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0b24011b-d196-4351-8d90-66e9e1915dc8",
                    "name": "credentials_issue:options.credentialStatus.type:null Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b417d1d6-d8d8-4f3d-9bb7-df37f03bd23d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6c060a1e-d552-4a9c-9f48-922a247bbe31"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8950bb53-304f-4caf-8d37-61462aa1900c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not object",
                            "    req.options.credentialStatus = {\"type\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "b9e7f21a-b4a9-439c-a4cb-0aa7114b44a7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4f1075f4-676e-472f-beca-64e62954ed0b",
                    "name": "credentials_issue:options.credentialStatus.type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ba8a2551-7268-4b63-8715-85eba9be179b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "abd4dc57-9008-4150-a9ed-d8d1abca0e00"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "56169fac-9546-43a3-bda7-173cbe9bb881",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be a valid value",
                            "    req.options.credentialStatus = {\"type\": \"invalid value\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "80ea9e48-94a2-4cb9-b1d8-d38dea7d4ea3"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "a81bc699-1ef3-4b6f-858e-15921eecde8b",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "6bb87cd8-7a93-4df8-9544-02d8367dd477",
                    "name": "credentials_issue:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7eb2eb66-f400-49ea-b05b-0a304312410b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "1ddcbadd-79f8-4e13-b3ff-8eb216cfd277"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "327dc664-f429-49b3-a5f1-5dab6ebcd6fa",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "84327579-ec8b-4714-bc3e-7c828df2c1b7"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "b0e08bfc-89e9-4f97-8620-8bdd5bd57c3c",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "f85f7bef-7dc2-42f0-b685-d1e1b16111ba"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "6f994ee1-8609-49a3-92d1-5ad2f7595869",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "9455396b-4300-4b34-bbeb-254cba66164a"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "a1e47016-6a41-4789-95e1-d54f9209626f",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "e1926dca-f207-4613-8e01-7e20efe01b16"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "6c2831d7-77d9-4310-940b-afed59bc55b2",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "8ff16080-b83f-4224-a7df-e93234fb634d"
                }
              }
            ]
          },
          {
            "id": "36daccb0-b8c8-4e50-a5af-3ee8a20e3128",
            "name": "Positive Testing",
            "item": [
              {
                "id": "cb305c5c-efdf-4618-84b2-8113e9b13ef1",
                "name": "credentials_issue",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "30890690-e598-4f3e-bbcf-d5db21448e6d",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject matches request credential.credentialSubject\", function() {",
                        " const { credentialSubject } = pm.response.json().verifiableCredential;",
                        " pm.expect(credentialSubject).to.be.empty;",
                        "});",
                        "",
                        "pm.test(\"response issuanceDate matches request credential.issuanceDate\", function() {",
                        " const { issuanceDate } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuanceDate).to.equal(pm.variables.get(\"issuanceDate\"))",
                        "});",
                        "",
                        "pm.test(\"response proof.created is close to 'now'\", function() {",
                        " const { proof } = pm.response.json().verifiableCredential;",
                        " const delta = Math.abs(Date.parse(proof.created) - Date.now());",
                        " const tenSecondsInMs = 10000;",
                        " pm.expect(delta).to.be.lessThan(tenSecondsInMs);",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "84573d97-e655-4e87-87ed-34003785614f"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "5d07b60f-58ee-45d9-b3a9-afe2125ce2c2",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // noop",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "0bab4e5a-b1a8-4bea-bf01-476a85608356"
                    }
                  }
                ]
              },
              {
                "id": "5a4f841f-e6f5-4de4-a21b-c0f282d93dcb",
                "name": "credentials_issue:credential.opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "eb69a98b-797c-4767-a380-a0ad6020a83a",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verifiableCredential.id matches request credential.id\", function() {",
                        " const { id } = pm.response.json().verifiableCredential.id;",
                        " pm.expect(id).to.equal(pm.variables.get(\"id\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "cb77552c-bbed-43e6-980d-b551ad797773"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "ae5aed73-9229-4867-a56a-cb63424e6810",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.credential.id = pm.variables.get(\"credentialId\");",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "749d30f4-f43b-4a6d-a8c8-1fe3c75ce81f"
                    }
                  }
                ]
              },
              {
                "id": "94fb1351-82a6-420e-a6fc-27ad7b95419e",
                "name": "credentials_issue:credential:alt.issuer.object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "3206499b-eb50-40b8-bed4-7a1f06aeb6a1",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer.id\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " // Implementations may reduce object with just \"id\" property to a bare string",
                        " if (typeof issuer === 'string') {",
                        "  pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        " } else {",
                        "  pm.expect(issuer.id).to.equal(pm.variables.get(\"issuer\"))",
                        " }",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "b8577f73-1d0e-47f6-96b0-5c881b6e050c"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "ae6402b0-6782-4347-99ef-7e852009c651",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.issuer can be an object with required 'id' element",
                        "    req.credential.issuer = {\"id\": pm.variables.get(\"issuer\") };",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "21fb964a-c27c-4ede-b3b5-0159bcf10fd6"
                    }
                  }
                ]
              },
              {
                "id": "24675865-fc11-457d-92bb-268af7b91a9e",
                "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "04d24947-3986-48fd-a221-f7dde316e31e",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject.id matches request credential.credentialSubject.id\", function() {",
                        " const { credentialSubject } = pm.response.json().verifiableCredential;",
                        " pm.expect(credentialSubject.id).to.equal(pm.variables.get(\"credentialSubject\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "2b28335a-26e9-49f2-848f-b2a0f29f979a"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "fc7b969a-9778-444b-a37c-98fad0f3fbc9",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.credentialSubject can be an object with optional 'id' element",
                        "    req.credential.credentialSubject = {\"id\": pm.variables.get(\"credentialSubject\") };",
                        "}));"
                      ],
                      "_lastExecutionId": "d9b06899-abd7-4a2c-a3e2-f67026e4e5f7"
                    }
                  }
                ]
              },
              {
                "id": "6821a9cc-017e-4a6f-8db0-1bfa31fc3a03",
                "name": "credentials_issue:options:opt.created",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "91fdcb91-89c7-4ff1-8ac8-6bf547cf9b88",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response proof.created matches request options.created\", function() {",
                        " const { created } = pm.response.json().verifiableCredential.proof;",
                        " pm.expect(created).to.equal(pm.variables.get(\"created\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "c160e887-3595-44f6-885b-dab77be93d09"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "9733300f-32b5-4791-8b60-f812e66e4bac",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.options.created = pm.variables.get(\"created\");",
                        "}));"
                      ],
                      "_lastExecutionId": "0acc9439-b7ae-441b-a2d8-d8a99d7ab1b5"
                    }
                  }
                ]
              },
              {
                "id": "d6c7f606-63c0-4d66-b094-bf6ca239191a",
                "name": "credentials_issue:options:opt.credentialStatus",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "ce65c7be-37d1-492d-b1d5-382b7924e08b",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "c3abc797-8e13-4c4b-8a70-455d1cc3c4c2"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "8180f11b-4028-4e3b-89f2-08fe21d492af",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // options.credentialStatus can be an optional object",
                        "    req.options.credentialStatus = {\"type\": \"StatusList2021Entry\"};",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "25d6f758-e0dc-4e55-9cc0-f46a4626f0a6"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "3326272e-f055-4464-85a7-11b0c793d592",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "a55f82c2-1a06-4184-8d9a-52fce65e0e5d"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "8f228c40-2950-48a1-ad30-7f6c5e0fc177",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "80e9fd4e-b686-4361-be4d-d76e5098f498"
                }
              }
            ]
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "156567d4-3703-4179-b9da-239bdcc7a114",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "pm.variables.set(\"credentialSubject\", \"did:example:123\")",
                "pm.variables.set(\"issuanceDate\", \"2006-01-02T15:04:05Z\");",
                "pm.variables.set(\"issuer\", pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "pm.variables.set(\"created\", \"2006-01-02T15:04:05Z\");",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credential\": {",
                "        \"@context\": [",
                "            \"https://www.w3.org/2018/credentials/v1\",",
                "            \"https://w3id.org/traceability/v1\"",
                "        ],",
                "        \"type\": [",
                "            \"VerifiableCredential\"",
                "        ],",
                "        \"issuer\": pm.variables.get(\"issuer\"),",
                "        \"issuanceDate\": pm.variables.get(\"issuanceDate\"),",
                "        \"credentialSubject\": {}",
                "    },",
                "    \"options\": {",
                "        \"type\": \"Ed25519Signature2018\"",
                "    }",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};",
                ""
              ],
              "_lastExecutionId": "42779e04-5fdf-4823-982a-b14aeb376cc3"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "f792e82f-8a5b-421c-8831-05bfa1fca388",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "e29701cb-892d-457b-aade-4ce5f4723a2a"
            }
          }
        ]
      },
      {
        "id": "120f3ab9-df2c-487e-a6b2-820267f4e64f",
        "name": "Credentials - Update Status",
        "item": [
          {
            "id": "4f982dfb-6bc6-4703-8281-c4d83e2b4b3b",
            "name": "Negative Testing",
            "item": [
              {
                "id": "586f935c-075f-465f-88fc-05156d269fe1",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "68ef3794-bfd2-4357-af13-37323f98287f",
                    "name": "credentials_status:credentialId:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1e53e475-147c-480a-af82-45b9eb1153fd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2e77a440-548f-4078-9df5-e9c31b497758"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "92076506-701f-42c3-9663-8577f146f2d9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId is a required property",
                            "    delete req.credentialId;",
                            "}));"
                          ],
                          "_lastExecutionId": "4ac7e2da-0ae6-498d-aebd-82c81faadb63"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ffaf347f-70c1-49d1-9b9a-c774e1ea9eae",
                    "name": "credentials_status:credentialId:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8963e032-0b16-43f3-a00f-647f9a0c8f9c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4fa893b1-e420-4d3a-bc72-4c53544ee6d6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "360ecc64-4af6-4927-adf1-ed12277ee72c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not array",
                            "    req.credentialId = [pm.variables.get(\"credentialId\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "b3791d46-d0bf-4fa5-a8f4-d9159a746ae1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ac121641-8046-4373-951a-84fa3497da01",
                    "name": "credentials_status:credentialId:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8a3a4e11-588d-4091-a616-758cabb1b9ac",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "38be0c63-94b5-411e-8a12-4d97a9bf7759"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "130fc3a5-ce46-4c04-8421-f92f5fd71537",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not boolean",
                            "    req.credentialId = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "9195db59-88a7-4b6e-8f4a-a99257c5766c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e81c19c0-3585-429f-a6ba-17100b045849",
                    "name": "credentials_status:credentialId:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ce6f718d-2903-4118-ac63-f60e610d621d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "304e2446-28e4-41b8-bfc7-9787f2d2728f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "07e602bd-bfd8-4dba-8da7-e584ec1bda47",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not integer",
                            "    req.credentialId = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "786da7a8-99ee-472e-853e-66f7d9acdfff"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b0a7cea0-4978-404c-9d1d-8bc85ef72847",
                    "name": "credentials_status:credentialId:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e0c4e48c-2cd1-4be8-b36a-952b462e9c1d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2ba7353a-afdf-4427-a481-56d8aa011ce0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "74b34440-9b1c-4c1d-92ef-27f5a1a37c30",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not null",
                            "    req.credentialId = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "9165405b-df8d-4fd8-ace5-1148a7fe755f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bdc5df83-0af8-46aa-8ad2-7bb1282cb2d4",
                    "name": "credentials_status:credentialId:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "10977f9f-a645-4bff-b8df-35962a1a2986",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ec8bd878-239a-4638-a09b-de4cbb0ee274"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0e98c980-7049-4922-b067-640b8a00958b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not object",
                            "    req.credentialId = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "9af0b0af-e610-4292-8953-a70238c2dfaa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e2daed6a-baa4-4fd5-9a45-95010533261f",
                    "name": "credentials_status:credentialStatus:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "40cb54b2-0757-482c-9e07-97260b70a5a2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f58af05b-8988-4178-9e90-ad4f4a6cae68"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "89d81c43-3701-49b4-8b8c-1abefe72e4ae",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus is a required property",
                            "    delete req.credentialStatus;",
                            "}));"
                          ],
                          "_lastExecutionId": "dc380d71-3240-4ec8-8661-ad8bf9049535"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f19ba462-1e3c-47ca-b879-9eb83ca0fffb",
                    "name": "credentials_status:credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7a9b0920-5d54-4e6d-be82-f5e66ed77286",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7f7cf3ef-1f2b-4155-9357-1c45262d30ee"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "42735365-339e-4693-bc35-47032438aa2d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not boolean",
                            "    req.credentialstatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "e004d862-e712-4c7c-bef6-47c2767099c1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b20d7dfc-2ad5-4aa5-9dff-cfbc29fb9778",
                    "name": "credentials_status:credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7d16cb30-c17c-4521-831c-75ee28ab188e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a3a75220-d6a7-4a11-9f81-8976cdf82b38"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8a081728-6dd2-462c-ba0e-3f3c1d0f3c14",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not integer",
                            "    req.credentialstatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "faad51b7-f156-417d-a3e3-32c1a2915e07"
                        }
                      }
                    ]
                  },
                  {
                    "id": "80c91c81-6fdb-4d61-a4fe-62ccdcdf4b6a",
                    "name": "credentials_status:credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0ed20851-7faf-48ff-becb-ef1458366ca2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5dcc794b-ff19-4ec0-98aa-71a5f42073ad"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "31dfbd81-2245-4147-8437-5d70a8fcf499",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not null",
                            "    req.credentialstatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "88a5cecc-4287-4a3c-b1a7-c9bd769bf38f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7f2b251d-8205-42b2-a810-99cfa03bbe33",
                    "name": "credentials_status:credentialStatus:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5eb51846-da84-4259-b072-5ce836900384",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5c41d15f-7e03-444d-b71f-077f239aa664"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "46d87510-257a-4c74-a2d9-a52c8fbe1827",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not object",
                            "    req.credentialstatus = {",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"0\"",
                            "    };",
                            "}));"
                          ],
                          "_lastExecutionId": "990f8f4f-9176-47cb-8714-74f5c163c786"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bb8478d7-8b37-46be-80a8-68333207303e",
                    "name": "credentials_status:credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "632c15a5-664c-44eb-be24-092607811e71",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f8820319-ac18-45e5-9a8c-ff9d1d9680e6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "13ce7cdf-627d-4371-8fbf-cf8d12c6ad60",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not string",
                            "    req.credentialstatus = \"RevocationList2020Status\";",
                            "}));"
                          ],
                          "_lastExecutionId": "2548c77a-d7b3-4e1c-ac56-ecff7d18a7cd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "276c5367-793a-4a8d-979d-e1e4e9bdb8b8",
                    "name": "credentials_status:credentialStatus:too_long",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bd0e1920-0737-400a-8aa6-152decd20598",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "383798eb-6712-4dbf-833d-0904fcdf5282"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "109282fa-3978-400f-84be-9a0b8f4927fc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus can only have zero or one elements.",
                            "    req.credentialstatus = [",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"0\",",
                            "        },",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"1\",",
                            "        }",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "26650cee-0f8f-4d21-8c04-c604040591af"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1b5d034e-dc8e-4e37-b561-08f7b1023a19",
                    "name": "credentials_status:credentialStatus:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d6a7ae11-9a5a-4239-813b-f5588d8097e4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e6fa0429-42b7-4cdd-a55b-8853fcf1c713"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c65b90e9-1e7b-4897-8eaa-bae2b912b72a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not array",
                            "    req.credentialstatus = [[]];",
                            "}));"
                          ],
                          "_lastExecutionId": "b0c6edfc-2845-416a-bbfc-4c476b83d58e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "69b29635-acc8-4fdc-8829-8493d35401e2",
                    "name": "credentials_status:credentialStatus:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1f250859-3ecb-4454-abaf-f3ad9a02e1cd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cfcdc76c-298c-43d1-bc0b-bc6cf861353b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e302fe15-801d-45ac-966c-7aa114db1585",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not boolean",
                            "    req.credentialstatus = [false];",
                            "}));"
                          ],
                          "_lastExecutionId": "2a63fe51-b799-46aa-a1fd-78b7b4c9fe71"
                        }
                      }
                    ]
                  },
                  {
                    "id": "48a18e1d-9ce1-49cf-bdb1-38cee1fc0840",
                    "name": "credentials_status:credentialStatus:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4b6ff121-df14-4ad8-b117-996f021b66e3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ef33b11c-3b24-4e80-a5d9-63769c3529f0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "983a2736-7f7c-4d6b-87e1-e38af775a9be",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not integer",
                            "    req.credentialstatus = [42];",
                            "}));"
                          ],
                          "_lastExecutionId": "0b5f98ce-6840-4900-85fe-210888e4c6ec"
                        }
                      }
                    ]
                  },
                  {
                    "id": "56b57519-21fb-4c6e-af80-220610ef97fd",
                    "name": "credentials_status:credentialStatus:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c768969f-493b-4895-b531-255cdd8121ba",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "118d5e1f-fc61-4e02-a657-9f3d28baae1b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "caffb415-7fdb-4092-8994-d5a734c74707",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not null",
                            "    req.credentialstatus = [null];",
                            "}));"
                          ],
                          "_lastExecutionId": "c6f84821-e892-442d-a743-5550c982af78"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d47cd243-66b8-436c-8380-d4565e32068c",
                    "name": "credentials_status:credentialStatus:item:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "90bc2d10-b391-432f-b089-4300d7f5eff8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a97cc089-374d-4fde-b8f7-6faa49f802c4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9f6bcc5a-67f4-49d7-b176-1762441877a4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not string",
                            "    req.credentialstatus = [\"RevocationList2020Status\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "c21c1215-069e-4007-8ca6-6dc35f380223"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dfd9fd13-1665-4c0d-a85e-c587975a20b6",
                    "name": "credentials_status:credentialStatus:item:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2eef622e-3ade-4c64-acdd-331127167c85",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "431e1a9c-d572-42fc-baf0-f60bae4b8943"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "372a287f-67ca-47d9-9bd4-58cf0f4271ab",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type is a required property",
                            "    req.credentialstatus = [{",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "d1260884-b7dc-4dfc-83b9-0a03c1396b4f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3758b343-0c52-4139-8f27-af0cd25913d8",
                    "name": "credentials_status:credentialStatus:item:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fad85974-0064-4f1e-afeb-9475dc65fdd3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a7359a24-0435-4de7-87eb-f6e71ab866e0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "40613bd9-9589-4c9f-9efd-4fff5d119b81",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": [\"RevocationList2020Status\"],",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "38dc117b-9638-4e56-891c-e2a3fba4183a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "60a26103-0f46-40a5-85e9-d1ab3562b6d7",
                    "name": "credentials_status:credentialStatus:item:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3c0323a6-6811-4a74-b3cd-834e76959db3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1bac95a1-2cd6-43be-ba41-2084dd60caf5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9440bcc8-d204-423a-8051-9dbbe36c545d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": false,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "f75f9b4a-8865-41e9-8ec9-055c19db2cc2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "45c986ee-ed87-4a94-872d-651a5652b245",
                    "name": "credentials_status:credentialStatus:item:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "89924cc1-9474-4dbf-9f21-b381f14266eb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e927bfca-da19-43f7-947f-97019b4963d4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "87a28a9c-8d6e-422c-aa76-1c320f4aa38d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": 42,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "47a7f590-18cd-400e-8b83-f7c6fe876393"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5ebb4251-fe96-4e95-8faf-86a4c7c2a45e",
                    "name": "credentials_status:credentialStatus:item:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a374f4d1-d32f-4260-bf3f-df5f4eb291fb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e56dcbf7-a6d8-4b56-b5b3-3b2e45c018b6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "79a53fd9-65aa-443d-bd18-95c9cbd4612b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": null,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "d3a89893-40fe-4059-9397-265bfac72aba"
                        }
                      }
                    ]
                  },
                  {
                    "id": "141328d0-fc67-4a0b-94d7-0f37d73772bd",
                    "name": "credentials_status:credentialStatus:item:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3845ffce-fce2-48e7-bc76-9f1c3293ca81",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d2edba5a-c273-4c95-825a-5aed9d2fe6f4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "380f1cfb-baa8-4749-89fb-c8f9cc783de2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": {},",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "7a3ed116-e8da-45f6-a20a-3052a2f56ed2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "054d7c43-f283-42c7-bbcb-95096b9bc5b9",
                    "name": "credentials_status:credentialStatus:item:type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "27d5f532-1796-4b74-8e89-0138ee0d58cc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8c85fec3-d4ed-431d-a290-25fd6307ac92"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9397c650-4608-4215-8b64-52b40c728819",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"invalid value\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "e91ca205-2503-4aeb-9384-7336c45ea7bc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8aaf329c-46a7-4b67-8613-02b4c3a2f49e",
                    "name": "credentials_status:credentialStatus:item:status:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e9515b5d-85d5-4bb7-8ad3-bc2bce1a4cb7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d830912c-4c8a-49bc-82b4-1b5230293c96"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eabfc6fd-312e-4c7f-981d-c30914c319b9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "111bc1a9-6c8e-4c8f-a9fc-ab72fce4f7fd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ae86c2a2-d21d-4664-8869-ab79a2017b45",
                    "name": "credentials_status:credentialStatus:item:status:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bc5e86d9-2516-498f-b7f6-16077ee337a9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5a04f56f-5356-49ba-b9e6-07e36c74a5fd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "16717a9c-ea0c-4b4c-8f63-73fc7c513c96",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": [\"0\"],",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "e030af88-2fa6-4c36-83f8-959bf2ebaf41"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f57bec9f-5457-4bd5-b3ea-2b336b1780ff",
                    "name": "credentials_status:credentialStatus:item:status:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "eee78981-bd68-4f62-94d3-6b281b648773",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "31393fef-8570-4950-9af6-cee806ef3c59"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "98bbe81f-f47c-4ec0-ab2d-cfa9dc7bf7f4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": false,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "0a336fa1-0e01-491f-bccf-7651618e28cf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3862c665-9bbb-4512-988c-26b131260f9f",
                    "name": "credentials_status:credentialStatus:item:status:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "99ecfe10-2fda-477f-b0da-5831be0c4206",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ea9e28fc-9ba3-4801-bb56-4c85fd050c91"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0f70cab4-b376-43d9-a527-eb5365915a6c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": 1,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "bbc9c222-1f09-4af5-9e64-28758503cf0a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "46a45ff8-92fd-41a4-b428-0879b7f4eec5",
                    "name": "credentials_status:credentialStatus:item:status:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a9c9e65b-3c1a-4365-89a5-ef679a0c8db8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "390f8bbe-d82a-4a1e-af37-e13ff00e72c1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "291aad57-120b-4237-9069-b5e7fe90e608",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": null,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "55cd8124-4c86-4a70-9923-79d2131bb6e9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f8d08c57-cfd5-4674-9db7-bf383195e603",
                    "name": "credentials_status:credentialStatus:item:status:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "aa967933-4a71-4e10-971a-c1e0608abd1f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c2b8fc87-0ce7-4251-82b2-8ae475dc29f8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "523a84e9-b06e-44db-86a4-4386577759bf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": {},",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "7e6bd635-5efb-42e2-bad9-87d9954a417b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2b19ddef-5d98-4608-9ec8-927dbd22b05a",
                    "name": "credentials_status:credentialStatus:item:status:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "35dac4da-e130-4add-bc4b-a4969fb1dc7b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a562f0df-400c-442e-9545-db0ccc39dde4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e1de6fb5-a27c-4056-99e0-54bde63395c9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"invalid value\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "d282387d-8e4e-4e2d-aa5c-09253b91fe5c"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "3e8cf339-f39c-495e-b218-0f997568e8fd",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "d71c6ebc-3ae7-45ae-8788-68d190781614",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a050952d-9429-48af-a974-47eb18bc3c29",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "29fc4223-2b15-49fe-b247-957a87dc821f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f7ef5db3-4d86-47db-9e5a-2ff39fc0c6e1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "2abae902-dcf5-42ff-ac3c-4b511909bb8b"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "1c451bc0-54f4-4a47-bf05-fbf792ff52c8",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "36cd1769-b991-4f22-9b41-1718b0be9f46"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "935601ce-d48d-48d3-a65e-ae381f922d60",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "e2cc5460-5e33-4135-add4-0bab65b202c0"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "efca8722-826c-4ba5-aff7-5a3be85b5df1",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credentialId\": pm.variables.get(\"credentialId\"),",
                "    \"credentialStatus\": [],",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "4f19a52e-becb-440d-8064-9387ab712192"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "c333f7ef-58f5-4d6e-a6fd-97dabf30ffcf",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "e275279a-cf80-4425-ae89-0169273f7032"
            }
          }
        ]
      },
      {
        "id": "2f7f8002-1ef9-46ef-b6c1-8c98b418cd51",
        "name": "Credentials - Update Status (StatusList2021)",
        "item": [
          {
            "id": "3615db96-37b1-4ff8-867f-5ef375b8508b",
            "name": "Negative Testing",
            "item": [
              {
                "id": "d8c3b8e4-9113-47b7-bce3-703292fccaa8",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "337c1506-ad72-4b20-89b7-dee7bf3c97f0",
                    "name": "credentials_status:credentialId:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0fa1d71c-7ffc-4fb0-9021-341147f9720d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ff974423-a1b0-4d31-9e8c-9a3a30d8545c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7e987df8-8986-418a-9fe3-73101ed96dbb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId is a required property",
                            "    delete req.credentialId;",
                            "}));"
                          ],
                          "_lastExecutionId": "7f7752d7-7c32-4c00-9efa-94e061b2c794"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eb2702fd-43eb-4346-be1b-092dcffff855",
                    "name": "credentials_status:credentialId:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ddc1da25-49fc-49b2-a842-f6043fd19080",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "eec08937-e9a6-494e-8d42-c2ac471c5a23"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "185e44f1-9f6f-4102-b493-ccbb6a09869c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not array",
                            "    req.credentialId = [pm.variables.get(\"credentialId\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "b15b64e6-eca1-4340-b2ce-3d545f10662b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4de8abd9-f419-46e9-922f-97f838d14b90",
                    "name": "credentials_status:credentialId:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2aed5771-3b28-49ce-98ab-38abad4debef",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2ca087ed-9f71-44a7-812b-67204aa3c7d0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cca85efd-cb48-4dcc-b56e-afca6c7022b6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not boolean",
                            "    req.credentialId = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "6202d3bf-9720-4bbc-8c3a-e03f7b7913fd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cd5c1998-0d16-4fce-9e57-c323bbc51432",
                    "name": "credentials_status:credentialId:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "16ae9f01-da37-4a6e-b286-774fcb1453de",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9b96510c-8c30-4c98-8a44-c56aeaa85ec6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "99bfe650-a7f0-41de-9ed0-bdce76444d75",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not integer",
                            "    req.credentialId = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "04573cad-b001-4f7b-8db6-02f6ea66e400"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7db212b9-9b46-4767-a64c-a3368634b4d1",
                    "name": "credentials_status:credentialId:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "21f69b19-4814-4974-9625-aa26c4e2e4cb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ca39aa09-1c24-487c-b712-551dc83a7a0c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "578ceecf-b31c-41b1-8a5d-da0f9a9d21b2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not null",
                            "    req.credentialId = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "e8f4088d-2d44-4c4b-adf0-b6f147a9adfb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e46cc98c-d8ae-4136-af67-1c75548ffe2e",
                    "name": "credentials_status:credentialId:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "aa0381b0-9a69-4cf3-bb17-3e3543981a42",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ec46e861-39c5-4baa-8c51-cc5297244e23"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "27501c31-e8c6-4973-bd66-638e1a5b1a33",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not object",
                            "    req.credentialId = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "e4c158ab-6d36-4504-abed-4a44d76888b2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9ab7d33f-8cce-4032-9ddf-abd7daedb517",
                    "name": "credentials_status:credentialStatus:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fb4d406e-fd4f-4342-8aed-f4656fe1763a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "94625575-27d5-4b26-b6f0-c004b6481259"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "199c500b-d562-4b2f-9c19-0ea24583fcb9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus is a required property",
                            "    delete req.credentialStatus;",
                            "}));"
                          ],
                          "_lastExecutionId": "0a161166-af50-4b45-adc1-9925977e1acb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5f9856f5-03ee-46f1-9e4b-a5f1c46fc984",
                    "name": "credentials_status:credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "20e4e3db-6755-419c-a072-761606789210",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6876e841-885b-467d-b762-ffc3ec535227"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b25c94cf-0422-40bd-8f0b-da3619fe9dcc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not boolean",
                            "    req.credentialstatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "57acc659-121a-4675-9dab-73f1bd4bb80c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d9199dfe-cc10-4662-9829-f10acbe6a94b",
                    "name": "credentials_status:credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0b2accd0-41f4-4bc0-bddc-79b6a9860aa4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3476e371-be80-47af-9439-639df475a96f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c6748bb1-c9a8-4fca-8847-9016af114e69",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not integer",
                            "    req.credentialstatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "4478bef3-fced-4888-9af9-a82056850ff3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4540941b-c280-44c5-a8c1-36895e748706",
                    "name": "credentials_status:credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "42942ba9-0775-4aed-b62d-c74f62d6225d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2b8bce7f-6ef3-467c-8858-1226359ca3e3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0d692dba-e9f5-427f-abbf-e3638f30e020",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not null",
                            "    req.credentialstatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "3c86da39-96e6-4a19-9a70-df239d7d585a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9641adae-a366-4db6-8fb3-b4bfb3e63bd1",
                    "name": "credentials_status:credentialStatus:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c1c02388-57a9-4402-97a6-0f507bfc24c7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c80b096d-e93e-4305-9a5c-e1b7415a592c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "093105da-7030-4da2-a724-7c02ca9f2c86",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not object",
                            "    req.credentialstatus = {",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"statusPurpose\": \"revocation\",",
                            "        \"status\": \"0\"",
                            "    };",
                            "}));"
                          ],
                          "_lastExecutionId": "4e3c7815-4c70-4ccd-b43a-c180e34f77de"
                        }
                      }
                    ]
                  },
                  {
                    "id": "28639697-d6f2-44f1-ae2e-03cc543c7c14",
                    "name": "credentials_status:credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "aa9646eb-9a52-4b57-ab7f-d0843a4d3010",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f55314c5-5f25-4802-80ac-ff32c254b876"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "720fd8a1-f0da-42e3-a07a-227f71799542",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not string",
                            "    req.credentialstatus = \"StatusList2021Entry\";",
                            "}));"
                          ],
                          "_lastExecutionId": "7cc449b7-0f16-41c6-9dc3-8798a0813aac"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0385d4d5-df5f-4124-8fcc-30dfa1c015ab",
                    "name": "credentials_status:credentialStatus:too_long",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2092f1e8-723d-4e92-890a-203e8833f2cd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cadedba1-3d64-42c6-9198-41cb02c6c7a3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d8a370bb-f0e7-4799-b4e9-82dfd49fe3ea",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus can only have zero or one elements.",
                            "    req.credentialstatus = [",
                            "        {",
                            "            \"type\": \"StatusList2021Entry\",",
                            "            \"statusPurpose\": \"revocation\",",
                            "            \"status\": \"0\",",
                            "        },",
                            "        {",
                            "            \"type\": \"StatusList2021Entry\",",
                            "            \"statusPurpose\": \"revocation\",",
                            "            \"status\": \"1\",",
                            "        }",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "7de8ef69-bf08-4c7b-b18d-9ba9fb5f5979"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a1b6681b-dd7e-44a1-8756-2256c148fdbd",
                    "name": "credentials_status:credentialStatus:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9a355135-4619-4bd0-a01f-a51ee38c96bd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "edc09a74-cb1a-4027-a94b-7f0c2ee10827"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2ba499a0-67a2-4e0b-8572-ef510f9c1bb3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not array",
                            "    req.credentialstatus = [[]];",
                            "}));"
                          ],
                          "_lastExecutionId": "ceb685c8-ed4d-4c9e-b4a6-8d865c0b67b2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c047d5fe-895c-4aa7-8e2c-6b8e9e93fe8e",
                    "name": "credentials_status:credentialStatus:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4d36fe18-7f83-4bf2-a531-bd13d9ac310a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "62f2e9c6-933c-4c56-98de-9aaf2cc2b8fb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4bd43f40-a3bc-444c-bbf3-c6189d2ed038",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not boolean",
                            "    req.credentialstatus = [false];",
                            "}));"
                          ],
                          "_lastExecutionId": "10eb050b-81ba-4c6e-90ba-0c5dbe6ecf93"
                        }
                      }
                    ]
                  },
                  {
                    "id": "475b4fb7-c011-400e-ab45-435fc09416f8",
                    "name": "credentials_status:credentialStatus:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d9139bb6-530a-4ca8-a415-bc1bef03489c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0ff87f07-2107-4067-b232-39cf5e59ae76"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2d6c9559-a008-465a-a94e-72d405f8d282",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not integer",
                            "    req.credentialstatus = [42];",
                            "}));"
                          ],
                          "_lastExecutionId": "e3310d9d-e188-4047-9856-b7d887a4e0dd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2f66a4db-9cdb-4095-af50-f42e3a4a82d9",
                    "name": "credentials_status:credentialStatus:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "679f602d-a1e8-4874-a4b9-6241853bde5f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "820b8c84-822a-4f5e-b159-e6fd67e4ff2d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e4c830e6-c15d-4e0c-ae52-f1d7e54c9bc6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not null",
                            "    req.credentialstatus = [null];",
                            "}));"
                          ],
                          "_lastExecutionId": "f426c9f3-595e-43bc-85de-3446d3d896a5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "85fb69f5-cd8e-4b5f-81f4-301d614f0208",
                    "name": "credentials_status:credentialStatus:item:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0cebca23-e14d-404c-8fc6-a08b10f82f25",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5a2b2ca9-1e0a-44f1-b6c8-6dfbdf56b0ec"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ed7cb854-dbb4-4a03-939d-58fd6ea0b5f7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not string",
                            "    req.credentialstatus = [\"StatusList2021Entry\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "9ea2b0a7-9f05-4562-8704-fdd9e9c4499f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cd345a4d-c0bc-4022-a778-16acf65e4069",
                    "name": "credentials_status:credentialStatus:item:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c1359eec-4917-4308-ac27-650b64f8c60c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "582eb33e-6966-4c6d-9c0a-87bf2c2a8b9a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d951590c-1637-4ba2-9dec-73e1ea4d9c8e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type is a required property",
                            "    req.credentialstatus = [{",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "aac52db0-c378-45ba-aa5d-ce969945f134"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e00b3703-8ff2-4458-94ca-a50b4064ba84",
                    "name": "credentials_status:credentialStatus:item:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0bf6435c-6ef4-4c51-90ff-ebdbb4fed89e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ddc1d80e-574a-43e8-b397-8f2df0c69908"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9d2d6857-89f4-4433-a09a-59e1c963b774",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": [\"StatusList2021Entry\"],",
                            "        \"statusPurpose\": \"revocation\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "2a6afded-9a1e-4bd7-8bc7-e9fafb4d370d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d9af93ce-dad4-4ae4-8141-28f194b44126",
                    "name": "credentials_status:credentialStatus:item:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dc48e09b-caeb-4613-b4bd-d71bc48baffe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c39fe5b3-30cd-4e7a-ae03-cb8938444ea3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fd8529fc-646e-4f9a-a415-872d025d216e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": false,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "87dad13f-4a11-4421-ba3d-14a9ed20a98b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6e61ffcf-5c1f-4b6c-956e-4ad1f09fafcf",
                    "name": "credentials_status:credentialStatus:item:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c0e0f034-8a10-4179-971a-4dedff8f4004",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "375ec572-cc20-44d7-8476-8cfeab92944f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "12a97a54-ee00-46c2-80f0-3a9e318a4f70",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": 42,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "7b0fb2a6-297c-406e-abde-a54816a0e79b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6fc89e84-17de-471b-a9d2-13bd457d6ed8",
                    "name": "credentials_status:credentialStatus:item:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "81b24662-4904-4c57-9f2a-dfb6a22ad0e3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d28f1a30-dad8-4ebf-843d-2c43ef5e8f95"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "91c86e9e-6cf7-40c3-99b0-37ddcfacf96f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": null,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "d07e20df-f290-437d-bc2d-cdfe0ae6fc16"
                        }
                      }
                    ]
                  },
                  {
                    "id": "993d3c39-7e7e-4926-b901-0a1515d612da",
                    "name": "credentials_status:credentialStatus:item:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c3d5a361-dcee-4e32-a6a5-50bcdd1396c8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "edfc5df0-e67d-4378-9dc0-375f9e87ec04"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0503a0b3-4c80-4f93-ac81-9dbfe0d4f23e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": {},",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "2eed59ff-bd75-456b-b032-c6ef40827a8e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0dcd8341-f8a7-462e-8b29-139dd2e5c7b3",
                    "name": "credentials_status:credentialStatus:item:type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7daf237a-0559-46fa-a6c6-0d69cf5d950a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dee81cdd-0fab-4e4c-a0ce-f55bcb3ac9db"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9040686c-84b9-4f91-a90d-91ed0515dc92",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"invalid value\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "7c34d05d-38e4-4361-a0d2-b1afbdc7573a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c067edc7-51d6-406f-8c99-df67452c7852",
                    "name": "credentials_status:credentialStatus:item:status:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7a7e9022-2721-4f6a-b2ed-0d4d980f71ea",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "afe7664b-3569-4fac-b101-a341d7932704"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e33687e0-9569-48f7-9033-efa05bccf195",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "898833b2-9536-4878-a736-df47800e9681"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7b97eefc-d437-434a-a148-0fc9272d3a23",
                    "name": "credentials_status:credentialStatus:item:status:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cd79afef-bbbc-46d1-9d4f-0cc6b0817f66",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c2cd0158-52f4-435a-8427-8bb75eb8029f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5dd9822d-00fe-4255-bbcf-636e083c8038",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": [\"0\"],",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "baba5758-3f5b-4807-9af8-3c86778a5cf3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "045142b4-a1bb-48fa-9ef3-ce10acf3ec30",
                    "name": "credentials_status:credentialStatus:item:status:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2185b58c-dc56-4d92-9c34-630352a42b5f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d4acb4f3-5757-40be-934d-25c4587ac891"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8bff4827-172b-4142-bf0d-8c8bc2f3322f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": false,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "2bb53af8-62fe-460d-86f0-86150a4d2d24"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bc90a8d5-8023-4e46-aa36-3b7d2c481fb7",
                    "name": "credentials_status:credentialStatus:item:status:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f734e0f9-346d-4cfc-9880-8ca1e549418c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "22c07bac-9ac4-4874-b782-836252476ed5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8ac6c4c4-a652-426b-8763-d4da0da4dcf8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": 1,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "481ed174-3af4-4d68-be63-b8333eac6875"
                        }
                      }
                    ]
                  },
                  {
                    "id": "312f5db0-1b77-4a03-b77c-397ab15365a8",
                    "name": "credentials_status:credentialStatus:item:status:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c219aac3-b80f-4fbb-bcd6-bdafb7cb86e4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dd5cd9b3-541d-4769-ba55-0c4589b715f0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "38eb92c7-3131-4c53-8321-a44e78e7011d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": null,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "3ce641cd-60d4-4bbd-8816-0f3e8a23cf9e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3905141d-fdba-46ff-b89d-d42092daa1cf",
                    "name": "credentials_status:credentialStatus:item:status:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e236750b-dec5-4917-8943-9e06b2b1a864",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5b2d3a84-95c6-4abd-b877-213f7657c99a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "288169e9-7b80-466e-a230-00e8ea3c7a3b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": {},",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "f9f34156-b06a-430c-a197-63a74e2d895b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2601e774-aa46-4bf8-a6c7-82705f9b4799",
                    "name": "credentials_status:credentialStatus:item:purpose:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "75c18cb8-3911-4596-baea-85d1abd92c8d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "85129fe7-8ec8-4d84-b72f-cde34b3d8b51"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a2d00906-c506-46fc-b004-1e0d41e0212a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "4b861d29-8d15-455a-84d2-79a640cde151"
                        }
                      }
                    ]
                  },
                  {
                    "id": "38544a40-6216-4001-a54d-12821b363303",
                    "name": "credentials_status:credentialStatus:item:purpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "177edf46-c3de-4efa-a601-057af3a75cb5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "75a2ae59-1b67-4658-88ec-f99ea0e1ed0d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8d574f64-8122-47b9-805e-21a5cd76bd9e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": [\"revocation\"],",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "71493135-5e17-4554-a8e1-95f246035c8f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "90956d9a-a2fd-4ffa-8e56-ffbeb4e95495",
                    "name": "credentials_status:credentialStatus:item:purpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7b76681c-d5de-47c5-8f0a-ed9417cca53c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b09eb0d3-2584-4cf6-a8b7-28570394c667"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "47a292ba-efd7-48bf-b10a-38d18c5ad17b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": false,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "64fa7d89-a6a8-45ce-b20a-d866a545d009"
                        }
                      }
                    ]
                  },
                  {
                    "id": "58dd8d3a-a04f-488d-aee5-90302f064389",
                    "name": "credentials_status:credentialStatus:item:purpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "367c526f-481b-4a44-ad04-b74f45d1ad1c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "216756ad-abee-4a0a-b957-c496757cc70b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "232fd470-3a4e-4459-9f7c-f24f193133fd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": 42,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "c8e0e185-7009-4e0f-970e-5fa47b7221ec"
                        }
                      }
                    ]
                  },
                  {
                    "id": "945fdfbc-e39f-4cdb-b018-357a84e672c8",
                    "name": "credentials_status:credentialStatus:item:purpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cfa5c8fe-e9d9-4ead-832d-8ff1c655858c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5f4f66dd-82d2-4e59-840a-2adfc1e737a7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f725ca5a-d966-46f5-babf-71473ca7d643",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": null,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "a4cddcad-6a21-4b32-9ee9-b345bd22fb01"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e89b3fd7-e243-41a8-8b94-ab3168c40290",
                    "name": "credentials_status:credentialStatus:item:purpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e46de05d-95c8-4da8-925a-8668f3983e6a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e50ea69b-1ef2-4bc8-910e-da8340e1d960"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f6af702f-b31e-4aee-a25c-3131a3fae521",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": {},",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "a5c30918-a53e-4290-b475-ba1322407e4d"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "fb7dd675-5aeb-41e7-b0a3-7c1447f33b13",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "06ebf3e2-c0f0-4cad-b295-e4518c518a99",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c2d937f6-55b4-47e5-83f5-a9ce4389deca",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "1f79e793-d14f-4c0c-9c57-e25dbc794c4b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a5de35cb-6b86-423d-b47c-c60cc913f2fc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "ecc797ab-5f3d-4cb7-89bb-fdd6d8d36fa7"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "b339637c-1590-495b-ae19-105b58ad200d",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "42b570c7-5173-4ec0-9dd4-f603eeb6014e"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "0e58796a-d87d-496f-854a-d798b7e1899c",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "6454af6f-3a2c-41e5-9bcf-f4c172fca770"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "20210368-2ddc-4cc1-9da1-e9f8722da2fc",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credentialId\": pm.variables.get(\"credentialId\"),",
                "    \"credentialStatus\": [],",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "2db90c50-d3da-486f-80cd-310211c233e7"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "8e37b7b4-b5f4-4b2c-a516-a04a86aa080c",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "1175c026-2401-4779-ad63-68ad4da057e7"
            }
          }
        ]
      },
      {
        "id": "f4e4d375-1377-4778-8d2e-69473bb66225",
        "name": "Credentials - Verify",
        "item": [
          {
            "id": "1f031697-377d-43f4-a99a-829bcc17bb3c",
            "name": "Negative Testing",
            "item": [
              {
                "id": "c54a2a05-f5d6-4de4-a11f-097ea93cd43c",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "484c7da8-cfd1-4a2c-8850-0b27a2ac3701",
                    "name": "credentials_verify:vc:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5157c916-7b8f-4df8-b5e0-bcfdcb5b96d1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c7b5ca34-8b23-4192-b38f-2c9a8366d364"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8774367b-c1aa-4f9f-a700-f9f9fb7b5107",
                    "name": "credentials_verify:vc:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": \"string\"\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e2e12c82-34f1-48a9-b6bc-a74b9582b6f4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c9ee20b7-2e1d-47d6-95c7-408b2f39e657"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1ce4fda5-ddc5-4e36-bbfb-350c9e317f14",
                    "name": "credentials_verify:vc:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": null\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "684903a6-0ce0-4353-a803-f5cdffe59d40",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "57635c7d-1163-41d4-880d-a17f41ed5a2a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8b017753-493b-417b-b6a5-f99fdbff4d56",
                    "name": "credentials_verify:vc:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": 123\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0bd9fa7b-0923-4bdb-8e01-ab2330ec449e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "27e710dc-d415-4f88-8603-b85df7ae48bd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "19b57ded-dbe7-4c82-97fb-638cf0b58a0c",
                    "name": "credentials_verify:vc:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": true\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "de71143a-340d-4f6b-b6cd-220cdb868956",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "00a39573-2b3b-47ba-97fa-8960ae3b2100"
                        }
                      }
                    ]
                  },
                  {
                    "id": "28363613-558b-4432-bdf8-e8ab7d94ced8",
                    "name": "credentials_verify:vc:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": []\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e000c197-3962-453a-8a6a-a85dfeedeace",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "78881acb-59fe-49f0-8575-c8ddef86ac0e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "80e3ece2-8607-48bf-842a-a714f7ba486d",
                    "name": "credentials_verify:vc:@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..V5PnQzCWxrPiCYT-WAyKAnypebgwYeD7lX_hyIjFa_lbJje23pZAfFdgnlqBnXLd19Ksa8fZpCE9TN7kAjzxDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7033c87a-b127-46f0-8e9b-7266b2c1722c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6581e1f7-1aaa-4a68-957b-517108a81b34"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "20fce705-f14a-4e65-bce9-540a85f3ae7c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "78b6347f-7d7c-4075-b9b5-5768503c86fe"
                        }
                      }
                    ]
                  },
                  {
                    "id": "896b71c0-b939-4dbb-bd6b-0398dccb0be2",
                    "name": "credentials_verify:vc:@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "60f9fa68-6bdb-46dd-820c-46bbe32ea7ac",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "70107f8f-1e22-48a3-9fed-2e778e027950"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4a450e3c-0b81-425b-91c6-2328a6705ad8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "09128b1f-07ca-4c3e-b042-6afa165d9736"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c870419e-0adb-4d9a-9d8a-08b4805cff6a",
                    "name": "credentials_verify:vc:@context:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "94553689-dae7-4fe4-b757-00e236a05406",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e5ef0ff8-fc5d-45d3-9721-1ca4181a5edb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "00c793d5-7b1c-4a4c-afc7-03f2bccc700c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8f27277c-50f6-4de4-b801-faad7ee5709c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5bb47f93-d097-46d9-87dc-b9eb12470575",
                    "name": "credentials_verify:vc:@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c5ce43d0-1e83-41e9-8b44-826accdd6a61",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "bf6b320a-345f-4ba7-bc1e-8d249d533acb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4006e7d0-e1cd-4cac-9788-bdc63c54a8c0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "94de26a1-1b93-4a3a-acff-d3ef3098b4e6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2dc0c339-6b3f-427b-a688-4e76e88404d1",
                    "name": "credentials_verify:vc:@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": {\n            \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n        },\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..w4xJhf2l_4JzwE4kp8pD8dNJdWSaws5HiBgal8zFzB6i9p05tmPITdsrUttpUwopW5UAq9M_EZVqlz-kRfSFBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a99f6f89-4200-4894-be0c-51390adaa7fe",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "325e4acc-5a44-48e0-94e8-1faf68716ea6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ce32b5bd-8783-4db5-b1eb-dc8bd490f13e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7e9459bf-48b2-47c4-84a9-05f38a55cd9e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d183b163-0cb2-42e6-a2a6-7410b98d4963",
                    "name": "credentials_verify:vc:@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": \"https://www.w3.org/2018/credentials/v1\",\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c3c629db-40a5-4c24-a84f-3e57bc8fb098",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "119c84e9-fc13-4aac-99ba-7091931c8c42"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "25496628-a559-442f-966b-7ea3a7aa001c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c8554c2b-538d-44e8-843b-cd2019c3e5c9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2e3760f6-2d4e-4316-876d-9ef32ccd00c8",
                    "name": "credentials_verify:vc:@context:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "80a48c84-0240-4bfa-8ae2-8ada0f80afdc",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "95f7bf5b-df2c-434d-a38f-3db1cf356c12"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a79559e4-b8ba-412f-ac17-e54cb80ddbbd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ab344241-7be7-42b5-913d-f75fc5b0f46b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "11d98cdd-0216-4c58-92b1-cf71f6ffc47c",
                    "name": "credentials_verify:vc:@context:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c814ccf0-ae0c-47c0-93c0-da7052e0a406",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d8ba9ac7-1447-401b-a05f-3272120a3993"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "93fe464a-f357-4e87-a270-bb60dfc82b2d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "873a9d50-57c0-4bb4-a9a3-44e261b93067"
                        }
                      }
                    ]
                  },
                  {
                    "id": "61fb0333-7e74-4389-a7f8-395e3def0525",
                    "name": "credentials_verify:vc:@context:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1cd8e146-2246-4bbb-b963-72f7a762f349",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "54383d44-9018-466b-a864-29739dc4c1a5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c9a4b38b-556c-401c-a153-69da28347b40",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c9285133-0af6-4a93-824d-d73c282dc1ea"
                        }
                      }
                    ]
                  },
                  {
                    "id": "be1dab8e-d8ea-4f76-9b49-804d0e41ebef",
                    "name": "credentials_verify:vc:@context:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "92fd512d-a2c0-4718-b5df-39a58c2d124e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "69e6ca30-0808-4965-a524-889d25d72775"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2897cfa9-5c2d-486e-a160-0e634d26b547",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1310eeae-5869-472f-b874-f175bc376f2d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "873927aa-725c-4169-8bf8-63da02f27426",
                    "name": "credentials_verify:vc:@context:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            {\n                \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n            }\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b8102fcc-84eb-4e2a-ace4-e87137079c10",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "743b7277-e60f-4081-a44a-fc97616eb21f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "798ae35f-09f2-48c4-8d14-99643bc8e415",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "47bd2d10-5374-4074-8699-ca477b7f7654"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4289cb81-9087-4819-a310-97b3c0a2392b",
                    "name": "credentials_verify:vc:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": [\n            \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        ],\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..iom-sOLAz9-9FhadLRpqOYXXBhx4Rgwa3I3w1oh087xFQqIMhVTzcSpHCGdGWu2QT1KwrrgVAXPeTT2EthmxBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2303c8fe-9149-4389-b1bf-f7bf7ab1c9c6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d57565b9-82ee-4683-ac20-dcd06aa5b753"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "51e7df90-c657-4551-b250-eef0bb3ae2f3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5f66f35f-8018-4476-abde-e8ee78d6d4fe"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ad5b9e91-7e90-444a-9b3c-770e83bfc9cb",
                    "name": "credentials_verify:vc:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": false,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..xftqB9cBFsSe226cWEZ4wr5sfxlAOJYYo6yjwPCVeHDdk6OoWGjZQGO7xXpSidrrr6e1imP18LiFK34xtRWADQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7fb61bcf-3d28-48be-85f8-aa8781a177d0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d5b4df8d-98c0-4f2f-a091-0fcb6b23985d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c381236f-30b6-4493-b3f6-acfaff2553b8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2256d484-5057-4aad-82ec-2a602486e172"
                        }
                      }
                    ]
                  },
                  {
                    "id": "14e37fef-c6d7-49b0-84bf-13b48de60a56",
                    "name": "credentials_verify:vc:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": 123,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ZqV-qqLOh_Kb4vAdXKBfmFdNyv3FzXJAIYV9JltcYGDAefU3OUOnoaAU2WSEufkuYkvczxfRLhrMKgkoVoIRAA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "91e45ba8-bd4f-464d-b387-c9958bfe16de",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fe806c73-5c45-4092-bc06-386eaf36adf8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "12c88b17-caa1-4dfa-8f2f-bbd0576e2594",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "54dfd354-e3a9-48f6-bd03-3d3a51c27579"
                        }
                      }
                    ]
                  },
                  {
                    "id": "627e5858-e629-4d28-8543-8dbeeb7e4ec7",
                    "name": "credentials_verify:vc:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": null,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "989e1ce7-f732-4d6d-8965-dcff953dc0f7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cabc5a10-f98a-43a3-81f7-7cb23908bcde"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "569a5733-a1b3-4eed-bf56-0924d20168e9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e277719d-6f11-4b3b-b30a-321750bd570f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9d603d38-389b-4432-82ca-b36eafa55f22",
                    "name": "credentials_verify:vc:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": {\n            \"key\": \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..0Nrj_srTLYyA-9ZVA_dkVGjUcKx6xELHjbbdppEMFPGEN5c2gPXgstNRjnrr8hhMMegSAbvGASKWseBXGR9uAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f5b27641-2dcb-432d-9b51-eb6acf5d8157",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9640c208-3df7-4beb-90af-7b6ebe5bfbe3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b72fcf8d-bc18-4401-8295-77caea8f9bb3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d2ddbaf0-fe84-49b5-b560-4d2fbe6f6b28"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a2e0fc0e-8784-4fd5-8a81-bc9231193c6e",
                    "name": "credentials_verify:vc:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Bx6sv21fSmT7fCCxU3fDaLhEOhfRK8llXSiFTgApd4PHot00nVjhaKQyhBW9FfFmJljstlOV_Zff164cxOKiCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "18cd8f1d-0ca3-4b22-8e43-15fd71a6cac3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "08c4b711-3c59-47c8-97b5-d0cd7cba6130"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2b9b48b5-61aa-4b34-a636-7944228363c0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "83dca673-2ae9-4e3f-ab5b-ae75cf3c97df"
                        }
                      }
                    ]
                  },
                  {
                    "id": "78cd9cc2-f81d-4c24-9e76-555e422a1b4f",
                    "name": "credentials_verify:vc:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3a5fc005-51d2-41bc-8b67-43507897d7dd",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ac10cd83-3170-405f-9393-77b2bd689358"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7c4b489b-4216-40ab-b8f4-ed7d95907883",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e14313a1-5d67-4d4a-9357-2f9ce3a52822"
                        }
                      }
                    ]
                  },
                  {
                    "id": "54d496f3-b901-47c1-9f03-c365931f6b1b",
                    "name": "credentials_verify:vc:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dbafdfa1-5469-42de-b37d-bff391d191b8",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f322dbb2-5738-46ad-84f0-9f89eaf75505"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "752685f5-1c96-46be-b5ae-82b281c004a4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "42e09cfa-cee3-47d1-8037-329425569d47"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f125fd32-013f-4423-b19b-5d935dc6173c",
                    "name": "credentials_verify:vc:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5c46f2a2-eafc-4fb6-9336-fdac2de11778",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "bb06d41c-42cc-42f7-b411-89a90eb6e30a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "dee7d114-c0f9-445f-9368-7310f49df49a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "85ad16dc-e500-4981-b575-9bd6729f2f46"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ead5e93f-9b42-48ed-9473-0f5264b01716",
                    "name": "credentials_verify:vc:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5efee999-0cf3-414c-aa28-0ff51c886177",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = {\"key\": \"VerifiableCredential\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7d212a0a-56f9-4a31-9878-baa59bc3e560"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7aa2ce71-e406-43e1-8357-1e1ab02bd583",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "11ec968f-ddc3-43cc-bdfa-920f1f09bafe"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4f126d16-1d34-4cfb-a27b-dc2192e02c97",
                    "name": "credentials_verify:vc:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": \"VerifiableCredential\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "82af082b-34ad-4bff-8f39-a24a5750a525",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "55026ff1-50ee-4325-8cd6-c3e17b198d45"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7079899a-6641-47b0-9b22-6490ed78dd13",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c14ee2b1-af95-462d-8a5e-30f820f1023e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "137eb181-4e8f-4403-87a6-735a21a0a651",
                    "name": "credentials_verify:vc:type:item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "36c97ffd-e925-4cb2-bae1-50715e371d62",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must have at least one element",
                            "rawBody.type = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "76e81e6e-6e51-450d-9783-e7079d7ddb18"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0f8583eb-a436-4b37-9296-921be1799f18",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d4b8d043-bf50-42b4-b566-fbad1b4e448a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c2ef3ad5-5636-45fc-8e68-a5804aad6b54",
                    "name": "credentials_verify:vc:type:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fbadd9e7-9959-47f9-abf5-55930a94bca8",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5bf68971-cf3c-4ba7-9804-a419831fb1cd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a6364acc-b4db-4356-a85d-b60fba435212",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fa501fdb-82be-4952-9006-4cd63749321a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3d6fd065-7b98-4ca0-b01f-4d0d82cded14",
                    "name": "credentials_verify:vc:type:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fa5909fa-96de-413e-a95d-44696b80639b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f73fbe59-97af-44cb-b1a3-1bc886a46150"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e3c4db46-3108-4dea-982e-5d105dce04e2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fa45df53-1aef-4cee-b17a-624a24d68f84"
                        }
                      }
                    ]
                  },
                  {
                    "id": "60e0a53f-4c96-47a8-a7df-6ac193e12f22",
                    "name": "credentials_verify:vc:type:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f71c8718-1923-45c9-80b5-bb3878799f24",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ef1201e0-6321-42f7-ac42-8ae399849476"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e72286b2-2f89-4570-93e0-46ff4879f63a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "02791190-f424-4eb1-bc4c-0a457b7a006b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f982b04e-f392-4d6e-8acb-72d8a8da69d2",
                    "name": "credentials_verify:vc:type:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0ab7f064-ebc0-42d4-83b5-11c17580aa4b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "82b4d7aa-8fdb-4b6c-80f8-ec165bb15245"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "55a133cc-9165-41b7-be6d-d045a15a73c4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e441dec5-e702-47fe-9b63-c2808da8fa97"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5a55bf5a-d433-464f-b54d-8f7f03b3e4b5",
                    "name": "credentials_verify:vc:type:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1c64a15c-dc8e-44e3-af9d-84f4df0b49df",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", {\"key\": \"VerifiableCredential\"}];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d49ea704-6503-44f1-a805-e1b132e640d3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0bf59daf-19f0-4ea4-a127-c2d5424d5a16",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9528c39d-1c08-4267-93bc-e7fbd1e18a51"
                        }
                      }
                    ]
                  },
                  {
                    "id": "11a8d633-9551-410a-b9f0-fa4495772888",
                    "name": "credentials_verify:vc:issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a0e4e0bd-74a6-4558-9eef-ef666858451e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6f12440c-acd8-46b6-a372-58159031202e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "38dc5f81-b456-4929-ae5f-df4f22623ba3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1a571a7d-74be-4dbb-a40c-eca5035970c2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3fe0bb34-3b65-4682-a5ee-39bb69330726",
                    "name": "credentials_verify:vc:issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": [\n            \"did:example:123\"\n        ],\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Mdpb0nbZLuHLqh6IBr6ouahKZNFB-cIKJXn-b-O6Pt6HyJaECfc399qgMTWovf-l04XYEpuYDmfZeYVThBeMDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "86ed802b-52dd-4d18-acb1-f0759b4c6cb7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "afdf9fb9-ddbd-4c4b-83a3-e75281e114ef"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "54ab3c7c-35b3-4406-aa1f-cd08ca8922f9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dc59da6a-d680-4fba-b63c-0d869b369e98"
                        }
                      }
                    ]
                  },
                  {
                    "id": "173598a1-bed4-45b6-9c1d-627c98daf0af",
                    "name": "credentials_verify:vc:issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": false,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ryGzH1cVI0oyA0eBPKjIBDGJ8FYapvVnUEcovWWepoAASL3SzOOUvcQ9XOnQlclFU8dYhkEN2L8TQAj2OHlcBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a8434c70-51ef-4b2f-8fc3-53fa3ee3537a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1bbde93b-c766-4e60-b5d4-68168a4d9749"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fe81867a-8ab1-44eb-9f70-56fc1824aba6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "53540526-b6ed-4f37-ac34-3f702cb64c5d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c869697d-3db2-4c1b-9787-f14e6443cffb",
                    "name": "credentials_verify:vc:issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": 123,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..kEE8wQKYgVQlcBvJeVeV151aR_iD6vPrlW2bgXPW8NvJx9AOuW5eGtL3j_I3xIGR_JWDA5jGy6KDVkqJNEDHAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3f86003b-2712-47ab-9277-206c0bf48335",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "31bb0ce9-2093-4c6d-9ad9-4816454e6610"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "87158dbf-29e7-493e-ba68-3f115d8e01ca",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "98b5e028-5a34-40ce-8641-fc291532bb45"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c196e4bb-bdfe-4158-88cc-ea0d79313984",
                    "name": "credentials_verify:vc:issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": null,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fb71a0c5-ae9d-4248-a532-2cb8e8c6984e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2235c0a5-9c08-43ab-b91c-a8fb5185ce3b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c901344b-ba64-43b4-a5ed-07e03b6e06a2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5abff15e-bb5d-4ae0-b799-be786b98a6da"
                        }
                      }
                    ]
                  },
                  {
                    "id": "af45feac-bd10-4f3b-b8f0-8769efb95798",
                    "name": "credentials_verify:vc:issuer:id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {},\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c0536abe-b08d-435c-8b51-c8f75da5f6a8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7436188a-35e4-4ff4-a1b6-da9bab9649d7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8eb22575-ab8b-4f6a-98cb-efa9f5ea8031",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e8ec7018-414f-443b-919e-2cadd07cc111"
                        }
                      }
                    ]
                  },
                  {
                    "id": "602baf3f-3087-4b47-8a99-57f2a0b0123a",
                    "name": "credentials_verify:vc:issuer:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TsN_31UJYzTTx1xh5CB9PjhnehJza3N5gAEFoNO55HLtQvoqGiEd-SI_4Xy7cpuYMbHdYf5CKHwP0eooyzjrAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c06414cc-176f-43a5-823d-6562caa7ef32",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "16c9c188-95c3-49e6-bd94-5b709df5a8aa"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "51683ea8-28eb-4a80-b0da-b630876079bb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "539b0be7-8cf5-4d28-a3f5-1d3ff2897653"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ab9dac75-190f-491a-bbc5-f34125d7141f",
                    "name": "credentials_verify:vc:issuer:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": false\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JOl3FF8mG94K8DDAtSYeirCtE5GRVHXYZcIbf3JRCquZ7obaBm1wh3rEzbG-t8kjdWMn7Zwy8q4zw7pMC2-gAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8e5c5643-ed54-4bef-9a6f-a4d77621ef3f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d9829e0e-e43e-43c2-8907-48fff12b84f2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b12b9b9b-1fb7-47f3-986e-1594460afe44",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "416d6ff2-bf79-47d0-9440-cc2b5730b2f4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f22249f2-6aa1-4e6b-af09-af60386641eb",
                    "name": "credentials_verify:vc:issuer:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": 123\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Ibp_FWO5FwzfTfd_PeTgedqAEcbS7dtCOoREanyZP0yAg63ZGay4hjjd-NwZfmWG8LRbMSqtjX2_Cu5BbBEoAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ac1fc943-07cb-4284-b39e-1336c9135f9c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "936b080a-25ed-4702-8711-c05369765cf2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a00ee90b-8394-489e-8b9a-76dc10a53e7e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9873fdd1-68b7-49e4-808a-1a0cb23a1a7c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "37272416-1965-470e-b121-e05138af9a01",
                    "name": "credentials_verify:vc:issuer:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": null\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "78777426-6abc-49f9-b492-21340b650af5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bc756884-aa2e-4cac-9831-d496f8fe6531"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ef01610d-7648-4e75-a142-10498a3c2587",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1d808de8-4b6a-40d0-a63a-9190bfa4a386"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1a39e39f-fb5c-44af-8c61-4ce8b5c1c715",
                    "name": "credentials_verify:vc:issuer:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..n3pFfPx4jY7EjlOpLNJT4CAJYI1roVE6LoUgLQhJ1bMgS5xUKbsIhynp7xDW-vSGzIcu58w-Z8_d9--99NCDBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c62e86c8-2b65-4e32-b4cd-fec0083da0b3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "59eb25e8-6aac-4d9e-b248-f0de6bb4d4b9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ad16f783-3427-406c-8856-46ca4c4106be",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d22a8928-2942-406e-b605-5d377e4327d3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "003f3d1d-2347-4af2-8242-f0802db21b22",
                    "name": "credentials_verify:vc:issuanceDate:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dc39977e-6ec9-4d11-a0f9-12e1a3bfb759",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a9833c96-006d-45b2-9f65-7cfe69acf9bc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ff065352-0796-48fa-9a16-13dd3c766573",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bae3c4b1-5e5d-44ae-8dc1-bc45f802cba6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c199158a-7898-409e-a4c3-b26637358caf",
                    "name": "credentials_verify:vc:issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": [\n            \"2010-01-01T19:23:24Z\"\n        ],\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..eJGt2anEVhR3qXrd8726C2a8PNJ-S4SnhIUB2YpAUiLJhTQ4FcY_nONpl-U0MbpWgwlpJ7xa1_uk4EMrGmOUBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f13f5965-0778-482b-a551-4f4c20116dd6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ff44e52a-d765-481c-9ef8-364dc63f8718"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "02256747-65f7-405e-8766-11c6938e3ce4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "682124c4-c32c-42d3-8326-9e6e5aeee5cf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d61c93c9-0a44-4893-9840-c6143098f535",
                    "name": "credentials_verify:vc:issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": false,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8Ax_d8Yp8MIszSaGQa1WkiT4xktUk0Ltg7EF3QQ-GGY8JaV_jR6-zRUlEF2iW0HcK6C8ZoAt0KrllUUDdJkdDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ad28f064-fe94-4cea-9bd0-f0838229ca36",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "52ff2e96-225c-4447-abed-d4f3b0b65be6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4d55e151-d42b-4801-b53b-e98104f3f675",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e8f29fbe-d014-42ae-9f75-5809bd4aaae4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a1c661d1-ced4-4aca-a4ed-b8c0e277b383",
                    "name": "credentials_verify:vc:issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": 123,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..x-sSX9vqc6977YPFhNbzjKdisDv4qD2mx-yBSH_EG-UQCpyH_ErCzoFWnpJzRJKIKbOLEvvZ5SO_fWbNWyNdCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "82c96606-8b40-4cbc-982e-5a86abdabfe8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fc14b421-d34d-4f0b-b93f-833dd3015df8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b28b7fb2-11f1-4e45-b37f-4dae7c669d00",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a01df385-810a-4eb2-84d1-bec4c44340b9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "11304e20-49dc-4dd4-83d5-7592fdd32ab9",
                    "name": "credentials_verify:vc:issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": null,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0e0115be-4eab-4c9e-8638-13144db333bb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f6c2e7f8-f7b4-4e85-a395-f83e70b14a1f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "82219481-d5ba-45af-bf72-e5342966d281",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4e1ec78a-651c-4091-ba3a-bcd5f9a0db64"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bb092f86-a299-48a0-8250-d374214ce814",
                    "name": "credentials_verify:vc:issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": {\n            \"key\": \"2010-01-01T19:23:24Z\"\n        },\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Z1GVMKiJuJeJMpR_Ag4Wpv6940N3WUreYSxEsPaZgU_J1C_EDUj8ycRJitlJNEBBuGhibJ0GWyK-WW9RO2WCDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2de053f2-ff26-4d87-bb20-d433a0900ea8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fb7c0206-b88c-4443-8748-066f8bf0d15a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bd4e6e50-a06f-45b6-b85f-f3a78ee16b2e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "66c5cc12-818b-4f74-b214-e6ce25743c8d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c01693f9-222d-49e5-9c4d-c3ffcd706c2f",
                    "name": "credentials_verify:vc:issuanceDate:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"not a valid XML Date Time string\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ebrsCszvH6TQHw1QhA8laajPRWL_zGvQ96Up8A4TiJrY7ueFm3V-Suk-KNd6JKckpOxLoF-Cb24KG_g73AqHAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d46c7a84-1178-4182-a9f6-ab0c7de6ec36",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9846b471-3fe6-4538-8c2c-180d7457c7f6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e122d7b1-2f26-4d56-aa94-820e8b8861f7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "46583de5-8b4d-4532-bd73-9b83c82d4de9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "152f7676-8171-4ab9-b579-94367a87db80",
                    "name": "credentials_verify:vc:credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b8934b54-3ff2-450e-adf3-992f830e65a8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5ccb8f8c-a776-4120-99fe-1383a4ed3fc2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a7b5b951-c73d-4670-90b3-61d2add31bf6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "30da31c9-87ff-40d2-b075-b0bf86024c2b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f78bc0f2-b0a6-44c1-90a2-c14a157431b5",
                    "name": "credentials_verify:vc:credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": [\n            \"did:example:123\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "660b4936-23dd-417c-b5b7-d630be988566",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "06b27c9d-60d0-4d18-8b6c-ac279b80dcb3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7b4090c3-d8dc-482d-a743-ec089a3e1cee",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1b78bec2-9329-4886-a070-0f6568357c16"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5024fee6-3538-462c-9f1f-e0a67c619af7",
                    "name": "credentials_verify:vc:credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": false,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..VK75R0RpQX9g4E_vGExhb_aDUNycy1UlQYvhCL1Ydl9bWiT1oUPeHEUgJMRGzmRRvyByyj13oHI2yB3cOLWXCA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4b1da5f5-5d13-4cc3-9799-5cb8b38e178f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "12357853-3afb-4cee-8350-bcd4d8647448"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "aaccd170-d56b-414d-9e96-02ede99fea72",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f8320cb1-566b-44d8-aca1-136991039d89"
                        }
                      }
                    ]
                  },
                  {
                    "id": "367df5a8-e850-473e-b753-77c7e1bd4f63",
                    "name": "credentials_verify:vc:credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": 123,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..dQnu8mT7YMECvDQPODQ1YUudQIO9Yx7WsZ07UWpHRqw0iV3ZvJOebbBoY0gFvsF9t6foFFEaaWcKi4vNgIdfCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1d995dc2-4f1a-4603-88d5-b1df11df231d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "aa808a7c-8f09-4074-856b-0c175f945978"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b6bb1e7a-eb81-4464-83a7-e526f6395f8d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b9df45ec-f277-4572-aba5-7ca8383ba1b3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "27f865b7-4e0d-4963-8671-1cb981dde519",
                    "name": "credentials_verify:vc:credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": null,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6bb2b72e-e4a3-475b-baab-0f5dcda97793",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "71691e84-258c-46c0-a98b-cc1308b9be6f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "acbdb896-bc44-42ab-b250-8c607cb351ee",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "37ec7f98-1d84-4d03-8ed5-008425bef44e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b9c63277-44c4-4059-a0be-4a610bb5f411",
                    "name": "credentials_verify:vc:credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": \"did:example:123\",\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6827a538-1d1e-40c2-b610-5fa7f244fdc7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "757272c6-8d49-463e-9d62-366173fa0eee"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4a3e678a-1b14-4f12-b82f-e9844a1f29a7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "62574700-b442-43b2-9900-0316e085ceec"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cdbae07c-9c99-4ff6-950e-e5c78b21d7e8",
                    "name": "credentials_verify:vc:credentialSubject:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8KJ136ciaI5X01UO8dPG0KMcsxmd7qzxvrahflTNqsrjjd-vF8bBKpjVDLOOj7bUolO277JWFCPX1xvvAVAvAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c5a2f6dc-c75e-4961-853d-4764a3f70874",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "44ee2a21-d2b9-4f2c-8f7c-8c53eb8e5daf"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "915ea1f1-5949-4b99-bf6e-9fde052a43ef",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ceedccac-d10c-4a5f-888c-748929854bbe"
                        }
                      }
                    ]
                  },
                  {
                    "id": "880abd5c-164b-4238-a3a1-2e6dd7eb3e9f",
                    "name": "credentials_verify:vc:credentialSubject:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": false\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..1Tatn2a45JYHHvhGvCLNbO1VUDV_lkvRVosGzDXDF-DseqRorDTFmY7XSyYqrl5yc6B200ET0RBvgK2vyEC6BA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ebee12a4-2b99-49cb-a6e3-c34160214cb6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "db0850b9-253e-47a4-bbc3-f8aad1b9f3fd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0cad5db5-59ad-4675-af0f-ce0b45909af3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "16c67af1-bef0-491e-84f9-1792b17e589a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "61f8e5e8-950d-4b91-b40d-1a8b06601bd5",
                    "name": "credentials_verify:vc:credentialSubject:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": 123\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..qPc7PrMuniibwI74A9ELPRd1YyUjNyeccnUFc4GCfj7I3oREDl0RT6PEt1pEY81mq7vlIsNG1myE86igC__qBA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "512c5dd6-a462-4afc-b004-889603a40748",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "80dcfdd2-dc5b-40dd-abe6-a94cb22a20d5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "34377efe-760e-4343-8fb8-59c926221853",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c0bbee97-20ad-429e-8a28-816d537a7564"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6b00be88-cede-4c3a-a235-dc95b82fcc68",
                    "name": "credentials_verify:vc:credentialSubject:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": null\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..10vzNYPpxv6gZwVR-V23lgvIgseVOwxT6Tc1Zbn5T6pWGmUhrkur_O-OexNVjkVSf7Qu_6NDnIL1m0KcNKGBCg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c44295fe-0fe9-4808-870b-d9a409e1d16a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8960a652-b381-4a38-b6d7-4a8c19235d2b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9cd3d995-e7bf-4a1a-9258-cde2f14911c8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "58a06dd8-e7b2-4522-9500-d7aaa8ad2eed"
                        }
                      }
                    ]
                  },
                  {
                    "id": "70f4baac-b7a2-406e-9a0b-ecc1e133ae88",
                    "name": "credentials_verify:vc:credentialSubject:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..tQJMGZTsqt1RhpxKkq647EHc3pjQ183zd4KchfvD3dXWVfL9X1fUedMbj33l8eev6YWua2-6_4_sUTDr2MLEDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "685e88b1-ff7c-4547-aedd-4c60716fd161",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b4ae5164-16a7-4eb1-aba6-67e26b6ba746"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c9b2ae29-63e3-4cbb-a961-c834cdeb7c76",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ce3094cc-6969-42e5-bcee-6fcf89a5e858"
                        }
                      }
                    ]
                  },
                  {
                    "id": "77c1bf43-895c-4d17-a727-0c967ae086fe",
                    "name": "credentials_verify:proof:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e72c5ba9-02bf-46d8-a5a3-fdb09cdb9adc",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required for embedded proof VCs",
                            "delete rawBody.proof",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "cdc1215d-ec7c-4882-ad07-d0ba9246eb77"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0d77786a-7881-4b5b-a194-67400868026b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "05348938-bc91-4c55-967e-b14f6b39e521"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fc4b2a25-c9df-4426-b7c6-7378286b420c",
                    "name": "credentials_verify:proof:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "342d4847-68bf-43e7-ae42-b698e363d0b5",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ff2616fd-d2d5-4b1c-8b2b-56be03a2c7cb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1ea68981-7010-4bb6-ac5a-08804071bf36",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6533b949-3346-4752-ad5d-7e309c381737"
                        }
                      }
                    ]
                  },
                  {
                    "id": "504a5c89-33b1-4871-b20b-4cb2b9519d20",
                    "name": "credentials_verify:proof:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "50299937-0618-4801-9722-f81fbdd2b494",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "65ad0fb5-6737-436f-8f2d-50d325ad099e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e61cc59f-f23e-4958-a150-85317ecdd59f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9046e70c-4185-40a9-a919-56504546b7a9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b5478113-a2cf-48c7-91ca-d12d30fff492",
                    "name": "credentials_verify:proof:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "85474f53-5bc2-41ac-989b-126b2e8049c6",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = 10;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "83b9cb3b-ff7e-466a-b92d-09217e995016"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6eb7b079-088f-43e6-b983-c076805e97c5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0c010672-4653-42c0-8bd6-6120d4dca43a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8e4520e9-783d-4bd8-9539-3c5ec45f6d2a",
                    "name": "credentials_verify:proof:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d8422922-fcc1-47d4-aa8c-a085d995c1e5",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ddaed67a-e1bc-4210-b590-7d106372af9f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0751a517-8e51-4882-9ce7-816ad4d0bfa9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3b33311d-94ba-467e-9fcc-a3220cac7010"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c1ff9be4-52b4-4ffd-8871-372bfc67b00c",
                    "name": "credentials_verify:proof:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "62d5280a-4d54-4a92-a9b1-955a45be766e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = \"string\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2077452a-8a0c-4f5f-9570-788beb37ed0f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e2efe568-4682-4c6c-81c7-61fb5ac94ceb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6b5e9c4d-68a9-42f5-a9f6-32d433d25730"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3dd4c1a8-387f-40e4-b60c-2e054f6ab7af",
                    "name": "credentials_verify:proof:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a8010e0e-88b8-4741-82c9-e8acd7c544e8",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required for embedded proof VCs",
                            "delete rawBody.proof.type",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "87cba552-706a-4cc5-bedc-8e2756d2e177"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ad40e0cc-a970-4fb5-bdb4-d3730ce1b0d2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6de05871-7cc4-4bad-9ac8-88237af30d5b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "85172bf1-425d-4be7-a327-804d0accb816",
                    "name": "credentials_verify:proof:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4aab215d-9df0-49be-ba10-7d2bf9610b21",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = [\"Ed25519Signature2018\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "74fa19e2-655a-4dad-a8f2-b7bee3d50bbf"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9e3530b1-6af0-4a0c-bcbf-8b66484df92c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ff3f52f3-b44f-4cb8-84a0-27409337f04c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7b978ee2-5971-4634-85f3-1e63334bff8c",
                    "name": "credentials_verify:proof:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "56a67ce5-747c-4429-9314-1ec701fe12c4",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "867fa99f-9648-4d79-8d4a-db779afd9a54"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c75ce9e0-1e7b-41b7-a9ae-f8ac5f51bcf4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d06554d5-0164-45c5-9975-a61a0df69c49"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9650d2c4-1fea-49a9-a49c-ccee1017b4c5",
                    "name": "credentials_verify:proof:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "56ec37c3-e754-4aee-bf31-72474ab4f5ae",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "cf79111e-83dc-4cd6-b811-2a38279892c5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f021614d-c0a5-4713-9c33-453a808df708",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "659d4755-8a30-4f08-a49e-bd05810728a4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b4ae632d-4575-4fa5-a723-cc214cca797b",
                    "name": "credentials_verify:proof:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2423afd1-bd26-44e3-af56-21f9fbbe9767",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e4e7d269-b18c-426c-8899-35246cba62fa"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "11013203-bac2-44cb-8707-3401c4ec8238",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5411ae91-acba-47ac-a7a1-b6314fa9b9a1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f32c0f93-6170-4e0e-8e9f-20de80065a6d",
                    "name": "credentials_verify:proof:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3f2ff448-b4b3-4761-a9d9-ab433e0bcc8b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = {\"key\": \"Ed25519Signature2018\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a119b3dd-1622-4da4-ba11-3a8847a8d5ff"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d85aa68b-90bc-4034-88dd-a40e233f175b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "058678c3-0c26-4f74-8f4b-1b0d7a56ee8f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8285ef92-bc82-4b8b-9e69-3907401728b3",
                    "name": "credentials_verify:proof:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "87697187-ede8-4e31-9792-a6cf0fc39231",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = \"not one of the valid values\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "222a05b1-0cbb-4627-9000-478af41dfe06"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e31d10ec-0b38-449d-b27a-9b8fab31a284",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4929e506-df66-40fe-ac16-02d7f1ecd15c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d4614230-0fa7-495e-8f3a-8e22ae0fb10d",
                    "name": "credentials_verify:proof:created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7500a97f-ef48-42b9-a8db-21b6eb7b99d6",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = [\"2020-04-02T18:28:08Z\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "db3661ed-09ec-4158-8135-7b404452e432"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f977d59b-773f-4a5f-a563-4c1ae5cf017d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "18328741-a4be-44db-9be3-0c9ac62e5781"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5aa89ffd-f6e8-40ee-8da0-90a442d66be9",
                    "name": "credentials_verify:proof:created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "58478950-2e8c-4338-8166-971fb7b57503",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "68a3fe45-cafd-4946-8635-6c3243aee636"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9dd30e42-55b2-48e4-8428-20c623ba8b44",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4d6d4707-e54e-42a6-9fc3-07095bf1d5c7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "52898290-67e4-4012-a555-edbf39bee274",
                    "name": "credentials_verify:proof:created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2b09922d-99a8-4111-bb03-406e2dd274af",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d81a7cf8-ff50-4a79-bc3f-7610595bd74c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "83906726-eae2-4c13-8671-75c96c28c36e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7c82e153-4889-4fdc-8b4e-6bbbcccb62d4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "235f6d49-7f5e-4238-995a-cced55888d40",
                    "name": "credentials_verify:proof:created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9b46f362-2f45-451a-9259-444439244db8",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f3f2103c-9d34-4ee4-aa4f-d57f09b96486"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6263ada9-49cf-406c-9311-f2dd5904215d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e8f2dfe3-13cb-4234-bd6b-f13397922926"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fbe1888e-6c29-4345-a630-c361146445f5",
                    "name": "credentials_verify:proof:created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8c3d56ae-7622-4615-ad17-7b092cc53278",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = {\"key\": \"2020-04-02T18:28:08Z\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "78fd4d8b-36f7-4cea-bf58-48ac2f86a9dc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2a4c950b-7638-462b-9808-fead744e1cd5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "407cc121-d878-499a-8b8a-f14a2a859409"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c17574af-e71f-4489-b585-82aa32b2a8d9",
                    "name": "credentials_verify:proof:verificationMethod:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9105d4ac-5c47-4c27-a958-9db2726085ed",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = [\"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8b4edd50-22b1-42a4-af97-0abb1f408a00"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "786ca9c2-2d7f-49d2-a48d-6917fe5ce9a1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a2e17c28-c0b7-4957-b3bb-a3ba0c69f512"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4a46275f-67fe-40fc-ad18-aee784d5d806",
                    "name": "credentials_verify:proof:verificationMethod:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fdcc8088-d04d-4600-9448-4601c1b7dee1",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d38034fe-b6de-4c90-a56a-bad76e9804a9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f82c152f-698f-4dcf-a4fd-550ac05fae06",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fe2e0d7b-14cf-4771-991e-c2d3a53ec585"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f78718f1-e6e0-49d8-8f4b-ae89e926df47",
                    "name": "credentials_verify:proof:verificationMethod:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bcb766b9-e74e-4337-8c33-97d8cbacca84",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "92bfe553-cba1-4bd2-b77e-80d4bf5dc89d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8946c75e-e91d-4176-8c49-f5291ba41349",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "27b56670-55a4-4a3c-8caa-3d995d7f6bf7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "08d51c8e-df14-4492-91c8-90b9f95f2663",
                    "name": "credentials_verify:proof:verificationMethod:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ff1714c6-6637-4cf3-a41d-4a70643776ce",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8143e04d-a364-48e9-9519-c4c8b7ae5285"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a084e8e4-f8e6-4ede-8eb3-72c65fa0c9d1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "adca99ab-9c74-418d-bb35-5858df2f9626"
                        }
                      }
                    ]
                  },
                  {
                    "id": "73b0ae25-edef-477f-8c5a-636bd3078176",
                    "name": "credentials_verify:proof:verificationMethod:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7f0e488e-704e-4dba-ad91-7f79430dc470",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = {\"key\": \"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c0a5749c-edf8-4f34-9e29-f1f48e48387c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ab1c48a6-c2c9-408d-b0d1-343ddc0f3131",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ec3127bf-88b5-4a00-b508-4593a53a7314"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1720e8d0-bd63-4e1a-95c1-d1fa02d33267",
                    "name": "credentials_verify:proof:jws:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "20c5541e-cec0-45c4-9797-b2c428f5e034",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = [\"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "78ddab14-6aea-4d64-b33c-0b8fea230095"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f6f8ae11-4a28-4eeb-99a9-5c3a11890570",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4126bc79-6f96-4dc2-9f33-3bb233bc0106"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e82425e9-305d-4376-9941-5a6c6fd3fce0",
                    "name": "credentials_verify:proof:jws:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "742a01cc-7d7f-441e-a685-3d1c8ccd2856",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "80f79cf0-6e73-45b7-9175-952d62157ba9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "19ca9923-5df0-44f2-b011-f4a6e84e46cd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0134ac58-13b4-400a-934c-1f59ba3d2233"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c15f7816-3735-447c-937c-75e714048565",
                    "name": "credentials_verify:proof:jws:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fe00b0dd-fd44-4b69-87e5-983a4a2de5a5",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "24947aaf-a62e-4072-a243-6accb6055604"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b6e55cae-8bd3-4e2e-acce-4bc47c973682",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6fed8191-5717-41f6-bfdb-b3e7e4e04ffe"
                        }
                      }
                    ]
                  },
                  {
                    "id": "091eac36-f68f-40dd-a3f3-b9abec3f0a0d",
                    "name": "credentials_verify:proof:jws:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e0173534-3d05-417a-816c-22f9a043464b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "23cd3bb8-b622-4c17-9ffe-8e8a0967be94"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "964e7669-1257-455e-b191-1ac2a84962bb",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "350f9fc1-2ca5-47d9-a512-d12214789927"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cec0e29c-e29b-48d6-add1-002fc0690bfc",
                    "name": "credentials_verify:proof:jws:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "02f8d362-e52d-4808-94ae-65cf589a0fc7",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = {\"key\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7e7c3b7e-655a-4af6-98aa-19a52e6dfa52"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "064ee6fc-0120-4653-8337-12dad3ba4844",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e8fb2863-3b21-4439-8b9b-9e483d10d98b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9c72df32-952b-414f-8f77-d37a2d514e56",
                    "name": "credentials_verify:proof:proofPurpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4de19ee2-c6ee-41b3-ab6f-763419bdd161",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = [\"assertionMethod\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "120ad063-92d9-4c44-b871-70f110cf77b4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c91f4e87-6c64-4660-a2f3-c86c36ce3ba5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "47acfcec-4dd2-4d92-bb9f-6cb9f228f9f9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "822e9d4a-4740-42d5-8b67-cb95ef7899c6",
                    "name": "credentials_verify:proof:proofPurpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "513096c7-0dd9-4865-9b76-512b4780f864",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "24e644fc-213f-414e-b13c-a5745ee7b8ff"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fb581076-9630-4166-8ec5-a966eb32f2f5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "92a6bb39-d882-4a8f-8f04-3bf3b2fd490d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f9be5e12-98b4-4b11-b4d8-d206048d6892",
                    "name": "credentials_verify:proof:proofPurpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "51964b01-4254-4da3-af0d-cbaab6458172",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2001d3a2-566a-4dd0-bf69-5b33d15275bc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5c3eda03-0941-4f52-9618-e3019d4c7bcb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e4cb1cd2-ff28-493f-b772-a73fc1d44eef"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0fe773e0-1451-4812-afaa-af555b4cdce5",
                    "name": "credentials_verify:proof:proofPurpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a5f148c6-ca81-4c40-aba1-e2274ffef626",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "27a01c79-6777-4335-8745-ff5239043609"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "89ebab40-bd23-4be2-8b50-9217fcdf6057",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e2be3f1b-f376-4365-8a88-339aa328256d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "210fee2e-8c22-4956-ab62-6e43bd27dfee",
                    "name": "credentials_verify:proof:proofPurpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3bcf666c-dcb1-4027-827f-d3faacc48c6b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = {\"key\": \"assertionMethod\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "70dd8654-c8c0-4e12-aa68-f72fd3c624e4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "95325caa-83a0-4e24-8bcb-5901b3cf1af2",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f4fd580b-c67c-4e09-b084-f43f6554fe81"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0ab35076-b579-4699-8942-58078528fd6a",
                    "name": "credentials_verify:proof:proofPurpose:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a41d8ba1-7f0d-4fb2-94b0-04ce2834aab2",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = \"not a valid value\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c3136f4d-ef54-4379-becb-aeffcbeadb52"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a7ffec60-0800-46af-ab93-d9a7da07dfab",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0dd26833-86e7-4634-b0e4-77b74d8cfdaa"
                        }
                      }
                    ]
                  }
                ],
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "852ef152-9b69-4e7c-ac1c-d419c9b85120",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "99b89901-e595-4dc2-8c74-c1a4d92810ea"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "5b5a29f1-9a58-4b94-958f-b1719f91ba78",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 400\", function () {",
                        " pm.response.to.have.status(400);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "5c4b56d7-0c0f-4e3a-ab3f-08055f38c30a"
                    }
                  }
                ]
              },
              {
                "id": "c30a34d7-39de-469c-9c52-b30be1758d66",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "503e5289-ae0b-4f7c-a1f5-864adbf5dd33",
                    "name": "credentials_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "742e9811-52a7-4124-9e83-e713d5e96ac1",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"valid_vc\")));"
                          ],
                          "_lastExecutionId": "78097564-5c16-4fa5-8bc8-0b64b0971a8e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d5824047-cc9a-4e3e-bf95-ba244887541c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "60093545-0d2e-4bc5-b37e-812f81ff6761"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "4c8a4df7-aed8-4649-8c38-531fe9f93157",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "bdf17867-8325-4bc7-ad5c-5d7f38167f2d"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "b09e54f9-6a32-4791-9a94-526778269436",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "c5c25d07-9990-42b9-9e07-9a09dd17bd6b"
                    }
                  }
                ]
              },
              {
                "id": "8486ac01-95af-4a67-b74e-472bfe88f336",
                "name": "Bad Signature",
                "item": [
                  {
                    "id": "823bbdac-bcbb-40a1-926b-49514add8251",
                    "name": "credentials_verify:bad_signature",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"id\": \"urn:uuid:e22ccc92-2c81-411f-a80f-e7f8334000a7\",\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..mvbcalofPOi7o7nxByyxXCuSOKXuGFM7_W9a8N62-EERarrH4p4T_0c2ZfGnGLiHOvY6Q-dyy38t9HPvXy-MBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c975b0b8-2fc5-4030-b4e8-616b4b837638",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 200\", function () {",
                            " pm.response.to.have.status(200);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            "pm.test(\"response verified is false\", function() {",
                            " const { verified } = pm.response.json();",
                            " pm.expect(verified).to.be.false;",
                            "});"
                          ],
                          "_lastExecutionId": "e6b472da-e87a-4f6e-96b4-9d81a0eed690"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c8b52b31-69e8-45f4-8a11-9eed87de7a14",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "71fb1110-100f-4515-8f7e-1ad21f6cd659"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "ca0b1444-02dc-40ea-a2e3-63671e24d9d8",
            "name": "Positive Testing",
            "item": [
              {
                "id": "3e4054c4-51ff-4a45-ba6b-0b63b011b59d",
                "name": "credentials_verify",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "0eb02420-e262-443d-898f-d411a77218c4",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "316326ec-9a41-4a2b-9d6e-a8657f685f22"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "fa13428a-ee54-4fbf-9dcd-be01b3c2d763",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "44f4b1b0-615b-4fc7-bee7-785a3b74a4f1"
                    }
                  }
                ]
              },
              {
                "id": "a1650b86-d7ce-4351-b542-c8e640318885",
                "name": "credentials_verify:issuer:object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\"\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "59d3d4c5-f5a6-4266-bd08-c726dd595dab",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "ac5c1236-58d8-48e9-9da8-7382182e99ae"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "e788b568-c7c2-4dd2-ae3d-313c12233074",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "4e4456c7-8fa2-468d-8b79-666d64459b2f"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "3b2f444d-f0ef-4d96-8cb1-4c26b566e6a1",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Dummy VC issued for testing",
                "pm.variables.set(\"valid_vc\", {",
                "    \"@context\": [",
                "        \"https://www.w3.org/2018/credentials/v1\"",
                "    ],",
                "    \"credentialSubject\": {",
                "        \"id\": \"did:example:123\"",
                "    },",
                "    \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",",
                "    \"issuanceDate\": \"2006-01-02T15:04:05Z\",",
                "    \"issuer\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\",",
                "    \"proof\": {",
                "        \"created\": \"2020-04-02T18:48:36Z\",",
                "        \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..R618vVfGIF2jTe5dVkzMqQYIFKoIkyK_3_35z15tp_aFzew_4ruQt2DcaxdtkwsRff7bFsrVfigTl_XeE3tPDA\",",
                "        \"proofPurpose\": \"assertionMethod\",",
                "        \"type\": \"Ed25519Signature2018\",",
                "        \"verificationMethod\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV#z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\"",
                "    },",
                "    \"type\": \"VerifiableCredential\"",
                "});",
                ""
              ],
              "_lastExecutionId": "24bc7ba8-eea7-4431-b6b2-37448898a5de"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "9209154e-ddf6-4eb9-a6b7-b4359894caf3",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "c6d36bc6-6b84-4e6e-8b41-69b072b64abe"
            }
          }
        ]
      },
      {
        "id": "85c7971d-3d43-4400-a75b-e4ebb23cc0bb",
        "name": "Presentations - Present",
        "item": [
          {
            "id": "7b24cb6e-fdd3-4e4d-84d2-0ea4ad4dac11",
            "name": "Negative Testing",
            "item": [
              {
                "id": "1fbe6cc7-dddc-402a-a6bb-166e9ba94a0d",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "cb569072-0a89-4a9c-ad61-58eccb59370f",
                    "name": "presentations:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a9f5bd42-dda2-4904-a445-3d8277b0d351",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "0df2dbe0-7f2b-47be-9aa7-15fda2bfc105"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8f93931b-9508-4871-a312-bd895e29ad77",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "dad58560-c77d-40c1-be2e-38e323d2677d"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "497943c8-06b7-41c0-b6fc-d8c1c8fd018e",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "c6a952b2-efae-4d60-9be0-ae197c06ea20"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "c51b7dc9-a7fd-4b22-9ae8-5bccec2e51d9",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "9f19841c-e89e-43ba-84cc-a0fefcbaf585"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "8154388b-e5df-43ef-b976-8bfe3d72a6f7",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "6957aa96-c5b9-4ab1-b55f-7a7547c8d18e"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "1677d664-e8ea-46ee-a444-0a16d010e9d6",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "a752a3bc-3077-40f1-8e7a-1a22df0b61fb"
            }
          }
        ]
      },
      {
        "id": "71733561-1f53-4d48-9ad7-5549c8e44a72",
        "name": "Presentations - Create",
        "item": [
          {
            "id": "a646f8e3-5c75-4ee6-b769-3f511869aa1a",
            "name": "Negative Testing",
            "item": [
              {
                "id": "4274a12c-a4ad-41a9-af68-7764a73bb877",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "bd8ce02f-6bbb-4f10-8678-3fe4875eac50",
                    "name": "presentations_prove:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "073e0502-bc80-4fef-b3fd-3b649d956122",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "dd240b45-2543-4a8c-b726-4a4400c899b9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "11bf038e-3a28-4d8d-87d4-4f1cc2202fcc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "24f9e10e-96e7-433b-a761-6f3d23573969"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "981a74c4-651d-4dae-ad2b-9f68a87f544b",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "3732e229-5468-4650-a916-d9c3cce0013a"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "7e2736c1-acaf-45f1-8e11-501dfd308339",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "5c0fd717-3b8f-4b42-8ac4-a7361de40bf8"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "d31a27d1-0d75-409e-8268-744ef35c7a87",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "a114f810-5db9-4cb5-97ea-970a78b501b9"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "611d5950-05c4-4124-8b1a-d9526970e357",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "f7666b1a-df42-41ed-bb22-cad0d8b44535"
            }
          }
        ]
      },
      {
        "id": "1cc1492d-b7aa-42dd-88a0-61d36c5d4351",
        "name": "Presentations - Verify",
        "item": [
          {
            "id": "8fa7df02-4e41-4ec4-9aa8-b73ed5248d2c",
            "name": "Negative Testing",
            "item": [
              {
                "id": "238566ed-1f92-42cc-840c-3be41324af67",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "bed4f180-f7d1-4cc7-8e39-fc77a5298954",
                    "name": "presentations_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e9ee541d-1a6d-4f55-86f1-1fc6ebd099ee",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "fb854030-4326-4653-8b0f-e79630a6149d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fa111116-f842-44a7-9188-6ce0ac44c616",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "fa9c5bbb-5859-4187-a901-75d51eb5a513"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "eb65dc7a-07bb-4d24-9ce8-7fcd514bb99b",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "70a32536-e3b8-4b99-aa67-cc749c4a81e5"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "6bd08d1f-b923-44c4-a00c-ecff5b610dfb",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "cd4b3054-4bfe-4d83-bf4d-850c7ef3b6cb"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "b4b8367e-216f-4fea-9983-72335c6be7b4",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "3c777eb8-6a86-4031-b91d-48f1a57a041d"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "d2ae4644-2302-41c0-bf5a-60f98d01880a",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "32d44812-3b25-4db3-b5ca-a8722310aae5"
            }
          }
        ]
      },
      {
        "id": "cdc81bed-6373-4df6-a832-d570ca6205f0",
        "name": "Presentations - Notify",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "15fe89f4-28be-410c-b3ef-9115aaab59bc",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "b6ef0e60-627d-47d0-afb8-c902103b4e0e",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      },
      {
        "id": "b9ef2324-1b99-4b41-adce-d481a448e671",
        "name": "Presentations - Submit",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "4b4c6a5f-3a58-48e6-87d1-25437feaf388",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "7e9e6cdc-5cf9-472a-a878-3eb5a42d2dfb",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      }
    ]
  },
  "run": {
    "stats": {
      "iterations": {
        "total": 1,
        "pending": 0,
        "failed": 0
      },
      "items": {
        "total": 282,
        "pending": 0,
        "failed": 0
      },
      "scripts": {
        "total": 2083,
        "pending": 0,
        "failed": 0
      },
      "prerequests": {
        "total": 282,
        "pending": 0,
        "failed": 0
      },
      "requests": {
        "total": 284,
        "pending": 0,
        "failed": 0
      },
      "tests": {
        "total": 282,
        "pending": 0,
        "failed": 0
      },
      "assertions": {
        "total": 571,
        "pending": 0,
        "failed": 33
      },
      "testScripts": {
        "total": 1046,
        "pending": 0,
        "failed": 0
      },
      "prerequestScripts": {
        "total": 1037,
        "pending": 0,
        "failed": 0
      }
    },
    "timings": {
      "responseAverage": 204.28521126760552,
      "responseMin": 11,
      "responseMax": 6375,
      "responseSd": 734.552440859632,
      "dnsAverage": 0,
      "dnsMin": 0,
      "dnsMax": 0,
      "dnsSd": 0,
      "firstByteAverage": 0,
      "firstByteMin": 0,
      "firstByteMax": 0,
      "firstByteSd": 0,
      "started": 1688431687942,
      "completed": 1688431757669
    },
    "executions": [
      {
        "id": "80ab0d01-76f0-4773-b033-9a2096024783",
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 282,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "491e4d7f-1619-4f45-9d31-a14addba8be8",
          "httpRequestId": "96e56796-5cde-45fb-9a99-908c02d70bcc"
        },
        "item": {
          "id": "80ab0d01-76f0-4773-b033-9a2096024783",
          "name": "Clear Token Cache"
        },
        "response": {
          "id": "1684a750-3895-4b25-aca4-5c30a8577ecb",
          "status": "OK",
          "code": 200,
          "responseTime": 116,
          "responseSize": 0
        }
      },
      {
        "id": "e38c2030-38c5-4fc3-8595-0be7859c9da8",
        "cursor": {
          "ref": "e13e3856-9a00-4f42-a29c-44669dbae497",
          "length": 282,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "1554ddcd-bd2b-47b0-a38f-5c33e5791903"
        },
        "item": {
          "id": "e38c2030-38c5-4fc3-8595-0be7859c9da8",
          "name": "Clear DID Web Cache"
        },
        "response": {
          "id": "be19764c-7317-4bd6-adf6-7f898c4d1a07",
          "status": "OK",
          "code": 200,
          "responseTime": 18,
          "responseSize": 0
        }
      },
      {
        "id": "a342fafa-6e89-46fa-b14f-e4c5cad670ff",
        "cursor": {
          "ref": "aa4008b5-6dfc-4fbc-8f4c-b17b7014ce46",
          "length": 282,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "2682b528-801d-4f3b-a024-316a0a25a8ff"
        },
        "item": {
          "id": "a342fafa-6e89-46fa-b14f-e4c5cad670ff",
          "name": "did_json"
        },
        "response": {
          "id": "d92a6836-e9a5-4833-9b7a-ecc6d3e44c39",
          "status": "OK",
          "code": 200,
          "responseTime": 423,
          "responseSize": 2778
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d1167c6d-a242-4b65-ae33-ab0cf0816034",
        "cursor": {
          "ref": "98ab148e-3d3e-4a2a-ac4d-df18687a5505",
          "length": 282,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "64e181ef-f660-4911-a113-fbf98b7005b7"
        },
        "item": {
          "id": "d1167c6d-a242-4b65-ae33-ab0cf0816034",
          "name": "did:invalid"
        },
        "response": {
          "id": "712c6bb3-31a8-4aa1-9c15-b8428581a054",
          "status": "Not Found",
          "code": 404,
          "responseTime": 1123,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 404",
              "stack": "AssertionError: expected response to have status code 400 but got 404\n   at Object.eval sandbox-script.js:1:4)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:4)"
            }
          }
        ]
      },
      {
        "id": "d1167c6d-a242-4b65-ae33-ab0cf0816034",
        "cursor": {
          "ref": "98ab148e-3d3e-4a2a-ac4d-df18687a5505",
          "length": 282,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "64e181ef-f660-4911-a113-fbf98b7005b7"
        },
        "item": {
          "id": "d1167c6d-a242-4b65-ae33-ab0cf0816034",
          "name": "did:invalid"
        },
        "response": {
          "id": "712c6bb3-31a8-4aa1-9c15-b8428581a054",
          "status": "Not Found",
          "code": 404,
          "responseTime": 1123,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 404",
              "stack": "AssertionError: expected response to have status code 400 but got 404\n   at Object.eval sandbox-script.js:1:4)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:4)"
            }
          }
        ]
      },
      {
        "id": "f96ba8fa-c976-4e43-94d3-7a6bdb4d43c9",
        "cursor": {
          "ref": "3f7bfb67-d73c-47c5-bbe8-0a3938796f6a",
          "length": 282,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "0bd683d4-90f5-42a3-8e54-c1d7f36c5765"
        },
        "item": {
          "id": "f96ba8fa-c976-4e43-94d3-7a6bdb4d43c9",
          "name": "did:not_found:did_web"
        },
        "response": {
          "id": "8e2f28a9-a038-4a51-8fc6-fb8796b175ee",
          "status": "Not Found",
          "code": 404,
          "responseTime": 22,
          "responseSize": 127
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a573ab63-7b6a-45d6-9a56-62faa0cee031",
        "cursor": {
          "ref": "a596dc23-6b47-41e9-81ec-5551a19e378a",
          "length": 282,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "29997181-a439-4d6a-9f67-8a4bb58df4c0"
        },
        "item": {
          "id": "a573ab63-7b6a-45d6-9a56-62faa0cee031",
          "name": "did:not_found:urn"
        },
        "response": {
          "id": "0abe2429-0e0d-48aa-97c1-837d73e608ff",
          "status": "Not Found",
          "code": 404,
          "responseTime": 51,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "685cb299-1177-4a96-8daa-8d72f7c8c53f",
        "cursor": {
          "ref": "547266fb-d303-4d4e-b8f9-683c575da5e4",
          "length": 282,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "3508730f-686a-4017-b924-b4edf11b185d"
        },
        "item": {
          "id": "685cb299-1177-4a96-8daa-8d72f7c8c53f",
          "name": "identifiers:missing_auth"
        },
        "response": {
          "id": "4517c437-2970-4518-855d-85195b0a9d5c",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 18,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:7)"
            }
          }
        ]
      },
      {
        "id": "144541af-dd80-4e8d-9ae4-17b685065c06",
        "cursor": {
          "ref": "f9d0d0b5-c635-4c34-a7d6-288dd487c9cc",
          "length": 282,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "d3f60e76-83c2-46da-b16b-602d69cfd617"
        },
        "item": {
          "id": "144541af-dd80-4e8d-9ae4-17b685065c06",
          "name": "identifiers"
        },
        "response": {
          "id": "3ca9664c-65cb-445a-aecb-91d4e9ec5c8d",
          "status": "OK",
          "code": 200,
          "responseTime": 101,
          "responseSize": 2450
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "671e0622-0b40-4e9d-9ff4-ba21bc9f8de5",
        "cursor": {
          "ref": "ad4ba4e5-1a9e-4ac1-a756-a26c94a39d5b",
          "length": 282,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "a50eb245-a6f1-4826-bad0-42e7afa28e00"
        },
        "item": {
          "id": "671e0622-0b40-4e9d-9ff4-ba21bc9f8de5",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "940afe54-c289-4c11-a0f0-762614eba41e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 56,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5809948d-4df1-4068-9dee-440de13e61c8",
        "cursor": {
          "ref": "1d0b7867-2c00-4c31-958f-08438ed3833c",
          "length": 282,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "727ab0ed-2ed4-4d0b-a5fd-6b4031e6989f"
        },
        "item": {
          "id": "5809948d-4df1-4068-9dee-440de13e61c8",
          "name": "credentials_issue:credential.@context:missing"
        },
        "response": {
          "id": "27777624-54f5-4e4f-8193-d308b1dd0187",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 21,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "854d4a8b-c734-4ff9-a380-90bbc55444aa",
        "cursor": {
          "ref": "29f17e05-fa7c-4f4b-9287-c57912c4a9c4",
          "length": 282,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "c6710679-b66e-48fd-a44d-598df07cacdb"
        },
        "item": {
          "id": "854d4a8b-c734-4ff9-a380-90bbc55444aa",
          "name": "credentials_issue:credential.@context:boolean"
        },
        "response": {
          "id": "de2a4eea-0cbf-47ee-8bfe-7a704cea92fb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 126,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1b97de44-212c-4b54-a970-beb54adcf11e",
        "cursor": {
          "ref": "2c65f70c-3633-40af-802b-d88813669a45",
          "length": 282,
          "cycles": 1,
          "position": 11,
          "iteration": 0,
          "httpRequestId": "4fec72a4-51ab-4272-b7df-3657fa528eb8"
        },
        "item": {
          "id": "1b97de44-212c-4b54-a970-beb54adcf11e",
          "name": "credentials_issue:credential.@context:integer Copy"
        },
        "response": {
          "id": "98401e0a-c6c6-44b8-8543-b041720fcf72",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f4a5a3cf-c1ff-4335-abee-0b1dcc004c36",
        "cursor": {
          "ref": "03f2b945-7fa8-4c04-867f-e9ca291b6afd",
          "length": 282,
          "cycles": 1,
          "position": 12,
          "iteration": 0,
          "httpRequestId": "31163984-7926-4a86-b384-d27ee231f543"
        },
        "item": {
          "id": "f4a5a3cf-c1ff-4335-abee-0b1dcc004c36",
          "name": "credentials_issue:credential.@context:null"
        },
        "response": {
          "id": "ddc997cf-eda1-459d-9477-b9e682674da5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9a7f747c-dfe6-493d-b259-234088bf68d9",
        "cursor": {
          "ref": "0a08f7e0-4b53-40e9-86f1-4f69e514ddd5",
          "length": 282,
          "cycles": 1,
          "position": 13,
          "iteration": 0,
          "httpRequestId": "0d3034a6-fc30-4f89-bbc3-604890eaaa8e"
        },
        "item": {
          "id": "9a7f747c-dfe6-493d-b259-234088bf68d9",
          "name": "credentials_issue:credential.@context:object"
        },
        "response": {
          "id": "d45a1485-60f7-48b7-8017-195b640f5fe3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d490674b-0fe8-48ba-926e-38366de03321",
        "cursor": {
          "ref": "3b3c3a6f-3824-4440-bade-cbb6aaa0eaa8",
          "length": 282,
          "cycles": 1,
          "position": 14,
          "iteration": 0,
          "httpRequestId": "351b08dd-af06-4a48-982f-05c23a030df4"
        },
        "item": {
          "id": "d490674b-0fe8-48ba-926e-38366de03321",
          "name": "credentials_issue:credential.@context:string"
        },
        "response": {
          "id": "7d6792f3-db73-46a0-9d88-c38ec947db3a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3e9d6671-3519-4034-98ea-5bbd047c556e",
        "cursor": {
          "ref": "2ae8e392-eb0b-4180-98a0-e8ad10ea2e15",
          "length": 282,
          "cycles": 1,
          "position": 15,
          "iteration": 0,
          "httpRequestId": "2c2021c7-49b4-487e-9a6f-b5765cb67fac"
        },
        "item": {
          "id": "3e9d6671-3519-4034-98ea-5bbd047c556e",
          "name": "credentials_issue:credential.@context.item.array"
        },
        "response": {
          "id": "31e6ab5a-7cf0-452c-8709-aee8b2325b64",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b0a9f328-556d-487a-8bea-5727cdf8cca7",
        "cursor": {
          "ref": "7c3810f2-8cda-49ce-9c3b-c69777385a52",
          "length": 282,
          "cycles": 1,
          "position": 16,
          "iteration": 0,
          "httpRequestId": "e650f7f5-c146-4f19-86cf-b44cdfb07939"
        },
        "item": {
          "id": "b0a9f328-556d-487a-8bea-5727cdf8cca7",
          "name": "credentials_issue:credential.@context.item.boolean"
        },
        "response": {
          "id": "317dcfa4-eef0-4d10-87dc-5595a78ff593",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8d5132d6-cb4b-478b-ad04-68e583e869e2",
        "cursor": {
          "ref": "9206f0b0-a7c2-4919-a7c7-9791b28cacbf",
          "length": 282,
          "cycles": 1,
          "position": 17,
          "iteration": 0,
          "httpRequestId": "d436fdaa-b92d-4ef6-b7a2-bfee9ee2adf0"
        },
        "item": {
          "id": "8d5132d6-cb4b-478b-ad04-68e583e869e2",
          "name": "credentials_issue:credential.@context.item.integer"
        },
        "response": {
          "id": "f7d74a59-782f-419e-aa94-5bd0da599f5b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "398b148c-ba3b-40dc-ba98-94d386ea2ad8",
        "cursor": {
          "ref": "f8e3d5c9-b68d-482d-bae2-4ff9d70f23f9",
          "length": 282,
          "cycles": 1,
          "position": 18,
          "iteration": 0,
          "httpRequestId": "65e85cfd-d241-45f1-99b0-f0fca5b09d4b"
        },
        "item": {
          "id": "398b148c-ba3b-40dc-ba98-94d386ea2ad8",
          "name": "credentials_issue:credential.@context.item.null"
        },
        "response": {
          "id": "3c7e1672-86bc-4162-86a8-d6b24d91fae5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e97614ee-5672-4d3e-bf77-80763085d9a2",
        "cursor": {
          "ref": "e1dcfef2-3046-45b7-8129-cc0038df262f",
          "length": 282,
          "cycles": 1,
          "position": 19,
          "iteration": 0,
          "httpRequestId": "117d0173-4ffa-4645-b184-c7b3ec301d3b"
        },
        "item": {
          "id": "e97614ee-5672-4d3e-bf77-80763085d9a2",
          "name": "credentials_issue:credential.@context.item.object"
        },
        "response": {
          "id": "8880e9c8-44f6-434b-a8f1-599c369a5eef",
          "status": "Created",
          "code": 201,
          "responseTime": 607,
          "responseSize": 980
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:20)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:20)"
            }
          }
        ]
      },
      {
        "id": "1ef6236d-329b-4769-af64-0187ab279f37",
        "cursor": {
          "ref": "1dca4fd1-230b-4ecc-b16d-31342c0b655c",
          "length": 282,
          "cycles": 1,
          "position": 20,
          "iteration": 0,
          "httpRequestId": "8db18282-093a-4c1e-9cdf-45544e2aa6bc"
        },
        "item": {
          "id": "1ef6236d-329b-4769-af64-0187ab279f37",
          "name": "credentials_issue:credential.id:array"
        },
        "response": {
          "id": "3356e54a-6957-48ec-af15-03d5c3a6d964",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 26,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "468b3a53-2ca1-4f19-a377-055d30da0bcc",
        "cursor": {
          "ref": "29fc996a-f05a-4aee-9c1d-f3efce744ca1",
          "length": 282,
          "cycles": 1,
          "position": 21,
          "iteration": 0,
          "httpRequestId": "44c10af1-c1c4-449d-9977-ae295f97d02d"
        },
        "item": {
          "id": "468b3a53-2ca1-4f19-a377-055d30da0bcc",
          "name": "credentials_issue:credential.id:boolean"
        },
        "response": {
          "id": "11154024-df13-43fd-893b-c4921872ace4",
          "status": "Created",
          "code": 201,
          "responseTime": 6375,
          "responseSize": 971
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:22)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:22)"
            }
          }
        ]
      },
      {
        "id": "a1db0467-a9c5-4197-b0d6-34e30b091d03",
        "cursor": {
          "ref": "b6a0ea92-956f-4d6c-b1ac-22aa81ed05ca",
          "length": 282,
          "cycles": 1,
          "position": 22,
          "iteration": 0,
          "httpRequestId": "2fe80712-eb29-4b3a-8636-7891d011104c"
        },
        "item": {
          "id": "a1db0467-a9c5-4197-b0d6-34e30b091d03",
          "name": "credentials_issue:credential.id:integer"
        },
        "response": {
          "id": "57014fc7-520f-4963-a993-97e74519860b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a7a43501-26d6-4b2c-819f-ffd7629862c7",
        "cursor": {
          "ref": "266c92f7-91ab-41c3-80df-2db275b2f9b2",
          "length": 282,
          "cycles": 1,
          "position": 23,
          "iteration": 0,
          "httpRequestId": "5dda5178-ccc7-468c-950b-a357fbdc57d0"
        },
        "item": {
          "id": "a7a43501-26d6-4b2c-819f-ffd7629862c7",
          "name": "credentials_issue:credential.id:null"
        },
        "response": {
          "id": "50cfe9ce-08b6-470c-936a-d9e602090cbf",
          "status": "Created",
          "code": 201,
          "responseTime": 3801,
          "responseSize": 971
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:24)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:24)"
            }
          }
        ]
      },
      {
        "id": "36417561-ef68-414a-a92a-16eba3048b77",
        "cursor": {
          "ref": "c77bd574-d768-49ea-ae7e-f62d8bd3ebcb",
          "length": 282,
          "cycles": 1,
          "position": 24,
          "iteration": 0,
          "httpRequestId": "2adf0c88-9b95-459e-a0d6-b022e7723446"
        },
        "item": {
          "id": "36417561-ef68-414a-a92a-16eba3048b77",
          "name": "credentials_issue:credential.id:object"
        },
        "response": {
          "id": "8053019e-297d-44fe-8b58-1f5660716c49",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7fa73539-b864-46c6-af85-3153464e8247",
        "cursor": {
          "ref": "b972d8e3-3483-49ad-b440-eef8cfe6bc4e",
          "length": 282,
          "cycles": 1,
          "position": 25,
          "iteration": 0,
          "httpRequestId": "3c680608-344c-4082-87f0-f1f827093c00"
        },
        "item": {
          "id": "7fa73539-b864-46c6-af85-3153464e8247",
          "name": "credentials_issue:credential.type:missing"
        },
        "response": {
          "id": "c28c9eff-5366-402d-879e-0332929d6aea",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 23,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b093502d-2be1-49cb-b312-3404a72cee7a",
        "cursor": {
          "ref": "0a40f9a0-414d-4207-ae9a-34f760855728",
          "length": 282,
          "cycles": 1,
          "position": 26,
          "iteration": 0,
          "httpRequestId": "60180a7b-f601-4680-a2a5-c75156cc39b6"
        },
        "item": {
          "id": "b093502d-2be1-49cb-b312-3404a72cee7a",
          "name": "credentials_issue:credential.type:boolean"
        },
        "response": {
          "id": "afbd1dae-309d-4954-b3a4-763cc3dd2743",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 22,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2875137e-14f3-46fd-8803-20ccda5812a8",
        "cursor": {
          "ref": "5899110f-abc3-4e9f-81e6-5f4225a2d815",
          "length": 282,
          "cycles": 1,
          "position": 27,
          "iteration": 0,
          "httpRequestId": "89db6a8f-28cf-4079-8f59-301df3120102"
        },
        "item": {
          "id": "2875137e-14f3-46fd-8803-20ccda5812a8",
          "name": "credentials_issue:credential.type:integer"
        },
        "response": {
          "id": "3817a3a3-b231-4a23-8bdf-24441f0cbda4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 79,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7ccf545f-823e-43b1-8de1-03f935e49dda",
        "cursor": {
          "ref": "cb5f7fd9-d154-4ced-ab7d-f50521410bfe",
          "length": 282,
          "cycles": 1,
          "position": 28,
          "iteration": 0,
          "httpRequestId": "0c75eed6-e32c-4edc-aae7-dc22d3138396"
        },
        "item": {
          "id": "7ccf545f-823e-43b1-8de1-03f935e49dda",
          "name": "credentials_issue:credential.type:null"
        },
        "response": {
          "id": "ff78a2ef-b72b-4ce2-836c-6be95aa06dff",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 21,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d7da43b9-163a-4819-9455-681acf12208e",
        "cursor": {
          "ref": "5eb79912-2fc8-453f-ae2a-5b7534cd660d",
          "length": 282,
          "cycles": 1,
          "position": 29,
          "iteration": 0,
          "httpRequestId": "1cfc0ca5-eb16-400d-ba92-482ca6a9669a"
        },
        "item": {
          "id": "d7da43b9-163a-4819-9455-681acf12208e",
          "name": "credentials_issue:credential.type:object"
        },
        "response": {
          "id": "7db8782b-1a22-47d7-b018-f9ef1fe4de2b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 22,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f60986f1-c7e2-4bc0-9581-4efaf5a512b7",
        "cursor": {
          "ref": "570cecc4-679c-4115-9060-32a7ac6188e8",
          "length": 282,
          "cycles": 1,
          "position": 30,
          "iteration": 0,
          "httpRequestId": "68786f38-dc1f-40e3-b74b-335cb0b63fca"
        },
        "item": {
          "id": "f60986f1-c7e2-4bc0-9581-4efaf5a512b7",
          "name": "credentials_issue:credential.type:string"
        },
        "response": {
          "id": "2d67f187-fc3e-470c-a615-76f49fe338de",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 21,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "de0742cc-6486-44db-b177-d9b26bee5ea4",
        "cursor": {
          "ref": "142a0be3-83da-410b-91d4-0866d79f1300",
          "length": 282,
          "cycles": 1,
          "position": 31,
          "iteration": 0,
          "httpRequestId": "ef39e827-8874-477c-a4bc-789dd4812dee"
        },
        "item": {
          "id": "de0742cc-6486-44db-b177-d9b26bee5ea4",
          "name": "credentials_issue:credential.type.item:missing"
        },
        "response": {
          "id": "76c0d9a3-5f89-481b-a500-e3c8a1de5cc1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 21,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f781513a-3c37-44af-aa59-fb7e8b594e9f",
        "cursor": {
          "ref": "455211ae-0cc3-4249-a7ba-9d7b3d33a1b3",
          "length": 282,
          "cycles": 1,
          "position": 32,
          "iteration": 0,
          "httpRequestId": "c81db1d0-c0e7-4977-be78-29492b7688c9"
        },
        "item": {
          "id": "f781513a-3c37-44af-aa59-fb7e8b594e9f",
          "name": "credentials_issue:credential.type.item:array"
        },
        "response": {
          "id": "13843092-b9bf-452b-8285-063c998da900",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 22,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ceb8baf1-8829-44bf-a02a-56d3c55a6df7",
        "cursor": {
          "ref": "176adb47-7a31-490f-ada9-699c27618cd6",
          "length": 282,
          "cycles": 1,
          "position": 33,
          "iteration": 0,
          "httpRequestId": "294e1c6f-428e-4c31-bf6e-1f3768936852"
        },
        "item": {
          "id": "ceb8baf1-8829-44bf-a02a-56d3c55a6df7",
          "name": "credentials_issue:credential.type.item:boolean"
        },
        "response": {
          "id": "cf7649ed-2a14-4dec-ac45-8d54f66d93a1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 563,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ed864b3f-1add-48e1-b50f-f1569aca4b5d",
        "cursor": {
          "ref": "7fc9a648-c7e1-49c3-a075-8a53264218a7",
          "length": 282,
          "cycles": 1,
          "position": 34,
          "iteration": 0,
          "httpRequestId": "d694e6d3-4755-4d23-8378-d3926b9dd946"
        },
        "item": {
          "id": "ed864b3f-1add-48e1-b50f-f1569aca4b5d",
          "name": "credentials_issue:credential.type.item:integer"
        },
        "response": {
          "id": "ed62da2e-d168-46d7-8683-a614150b23eb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 21,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a9b1516f-343b-4cbe-90c2-962ef54b722e",
        "cursor": {
          "ref": "63259f37-a5a6-4104-9c78-ce5fd5b965df",
          "length": 282,
          "cycles": 1,
          "position": 35,
          "iteration": 0,
          "httpRequestId": "5395bfec-9587-4bce-b81e-21c0fe8a19ae"
        },
        "item": {
          "id": "a9b1516f-343b-4cbe-90c2-962ef54b722e",
          "name": "credentials_issue:credential.type.item:null"
        },
        "response": {
          "id": "297cc3c5-ed6e-4e73-a1ae-43bf9c01cca3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "01f7afda-0219-4266-ac8c-049c6c98f8a6",
        "cursor": {
          "ref": "693aa6aa-da14-457f-9c80-a96b73bcb8ca",
          "length": 282,
          "cycles": 1,
          "position": 36,
          "iteration": 0,
          "httpRequestId": "c3be8891-df17-486f-9361-2b72e2d874fd"
        },
        "item": {
          "id": "01f7afda-0219-4266-ac8c-049c6c98f8a6",
          "name": "credentials_issue:credential.type.item:object"
        },
        "response": {
          "id": "cf870791-28f6-4149-bf4e-1165c255f4d5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 22,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0fcedca4-36c9-4909-a0ef-df4051d9e16d",
        "cursor": {
          "ref": "323b51e0-740e-47cb-b278-91273024eb5c",
          "length": 282,
          "cycles": 1,
          "position": 37,
          "iteration": 0,
          "httpRequestId": "acbac44b-924b-4ac3-bda8-4b816b01f00b"
        },
        "item": {
          "id": "0fcedca4-36c9-4909-a0ef-df4051d9e16d",
          "name": "credentials_issue:credential.issuer:missing"
        },
        "response": {
          "id": "178d7930-ed12-41fe-9ddc-615ec3f3106e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a36af6ba-1e46-4c13-8648-a366cfcda6c4",
        "cursor": {
          "ref": "092d6272-9977-4b3c-ba80-4774a91eb3b7",
          "length": 282,
          "cycles": 1,
          "position": 38,
          "iteration": 0,
          "httpRequestId": "d62c5dd8-e12b-4a2c-aca2-27111d03515d"
        },
        "item": {
          "id": "a36af6ba-1e46-4c13-8648-a366cfcda6c4",
          "name": "credentials_issue:credential.issuer:array"
        },
        "response": {
          "id": "e27b8b24-3015-4503-a4a1-eddc66d3c86a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 25,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b1206089-d694-4310-aea2-19804d997cad",
        "cursor": {
          "ref": "d13c1a87-26a0-4892-97c6-5978beb0dbb8",
          "length": 282,
          "cycles": 1,
          "position": 39,
          "iteration": 0,
          "httpRequestId": "b15be929-edaa-4350-af90-609e495f673e"
        },
        "item": {
          "id": "b1206089-d694-4310-aea2-19804d997cad",
          "name": "credentials_issue:credential.issuer:boolean"
        },
        "response": {
          "id": "0f24109f-d48c-4cab-b3fc-1ed8b09364a2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 22,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "aed619d5-94d5-4ae1-a748-a1229658b74b",
        "cursor": {
          "ref": "fd5d79db-3ec0-4c55-a72d-28f88413cb40",
          "length": 282,
          "cycles": 1,
          "position": 40,
          "iteration": 0,
          "httpRequestId": "3f331bcb-743b-4bbe-9da1-c67d584e2de0"
        },
        "item": {
          "id": "aed619d5-94d5-4ae1-a748-a1229658b74b",
          "name": "credentials_issue:credential.issuer:integer"
        },
        "response": {
          "id": "423fdc64-5a28-4637-891b-2ce50207b0e2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 20,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "66870dca-c97d-4fb7-af82-1e8f79a449d3",
        "cursor": {
          "ref": "9c829bf3-0323-4344-b5ad-ca48b842c3a0",
          "length": 282,
          "cycles": 1,
          "position": 41,
          "iteration": 0,
          "httpRequestId": "14ac9c49-389c-43b5-9aac-5019fd668258"
        },
        "item": {
          "id": "66870dca-c97d-4fb7-af82-1e8f79a449d3",
          "name": "credentials_issue:credential.issuer:null"
        },
        "response": {
          "id": "0d75239b-9898-4383-9747-e8f7580ea3dc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "447ce344-8e49-45f6-9381-16c1c6672452",
        "cursor": {
          "ref": "796cdab1-0eeb-4da1-8b2f-74b3474b42b8",
          "length": 282,
          "cycles": 1,
          "position": 42,
          "iteration": 0,
          "httpRequestId": "15a3ad6d-478e-4858-bedc-9d34b985091b"
        },
        "item": {
          "id": "447ce344-8e49-45f6-9381-16c1c6672452",
          "name": "credentials_issue.credential.issuer:invalid"
        },
        "response": {
          "id": "06390390-82ff-4eac-8fc5-beae05bfe61a",
          "status": "Created",
          "code": 201,
          "responseTime": 2777,
          "responseSize": 970
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:43)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:43)"
            }
          }
        ]
      },
      {
        "id": "0c82674f-5919-4eba-a336-31fbe9221cbf",
        "cursor": {
          "ref": "9c7b28a0-6621-4127-85dc-464104b419e7",
          "length": 282,
          "cycles": 1,
          "position": 43,
          "iteration": 0,
          "httpRequestId": "1c6e54dc-c54c-471b-ad40-04d530ad6450"
        },
        "item": {
          "id": "0c82674f-5919-4eba-a336-31fbe9221cbf",
          "name": "credentials_issue.credential.issuer:unknown"
        },
        "response": {
          "id": "c69f941f-bf81-43f8-8df2-fbc57033af19",
          "status": "Created",
          "code": 201,
          "responseTime": 2821,
          "responseSize": 971
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 201",
              "stack": "AssertionError: expected response to have status code 422 but got 201\n   at Object.eval sandbox-script.js:1:44)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:44)"
            }
          }
        ]
      },
      {
        "id": "f0626da3-d37c-420f-94cd-30d885b76a38",
        "cursor": {
          "ref": "c9d90494-fcb0-4761-8aae-df669738d8e1",
          "length": 282,
          "cycles": 1,
          "position": 44,
          "iteration": 0,
          "httpRequestId": "c919d843-bda6-4ad8-b5c1-560a6f32cb09"
        },
        "item": {
          "id": "f0626da3-d37c-420f-94cd-30d885b76a38",
          "name": "credentials_issue:credential.issuer.id:missing"
        },
        "response": {
          "id": "cc942bae-daf1-4cc8-b074-be24d15572f4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 23,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "aef8ad1f-a848-417b-8372-0005c1b04de9",
        "cursor": {
          "ref": "3f5644a8-8127-42b4-a15a-07aadb3e7d19",
          "length": 282,
          "cycles": 1,
          "position": 45,
          "iteration": 0,
          "httpRequestId": "fa137616-3517-4cda-b4f1-0f7c84888c02"
        },
        "item": {
          "id": "aef8ad1f-a848-417b-8372-0005c1b04de9",
          "name": "credentials_issue:credential.issuer.id:array"
        },
        "response": {
          "id": "36210496-5e1b-4d4d-874f-92bcee5dcb9a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 24,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "efb4787d-7817-4f12-80a2-9b77927e660e",
        "cursor": {
          "ref": "b5f818fb-d37b-4b29-a240-3b35d80848a9",
          "length": 282,
          "cycles": 1,
          "position": 46,
          "iteration": 0,
          "httpRequestId": "3d7212dd-ec16-4ec6-8ed5-3e9895e1f80c"
        },
        "item": {
          "id": "efb4787d-7817-4f12-80a2-9b77927e660e",
          "name": "credentials_issue:credential.issuer.id:boolean"
        },
        "response": {
          "id": "23e00b35-97bb-4321-b766-2e7b3442f300",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 22,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "81ca060d-3771-4b9f-b96c-62103cef66b7",
        "cursor": {
          "ref": "77fb4cd1-c7d2-4062-82b2-f2f6bc7db01a",
          "length": 282,
          "cycles": 1,
          "position": 47,
          "iteration": 0,
          "httpRequestId": "d016837a-6df4-47e6-86f0-66ddf49a5278"
        },
        "item": {
          "id": "81ca060d-3771-4b9f-b96c-62103cef66b7",
          "name": "credentials_issue:credential.issuer.id:integer"
        },
        "response": {
          "id": "6c216fe7-048b-4f1a-aafd-ac0ee7e69247",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 26,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "eaff7123-6076-453f-adcf-2f87e5df43ed",
        "cursor": {
          "ref": "3f86c6a1-7dde-4d35-90f8-85323f290f7f",
          "length": 282,
          "cycles": 1,
          "position": 48,
          "iteration": 0,
          "httpRequestId": "822e6ce7-dcf7-4a86-a92d-56338c0c9bf3"
        },
        "item": {
          "id": "eaff7123-6076-453f-adcf-2f87e5df43ed",
          "name": "credentials_issue:credential.issuer.id:null"
        },
        "response": {
          "id": "dcd73a9d-7b82-40c5-9ed5-209608943269",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 20,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "df90ba7b-43c3-4f4f-a72a-b1ba1350f82c",
        "cursor": {
          "ref": "05b72fb3-ae2b-45db-afec-090a76144f37",
          "length": 282,
          "cycles": 1,
          "position": 49,
          "iteration": 0,
          "httpRequestId": "91fda2c7-0ca3-4ed5-bb74-4528f0899c80"
        },
        "item": {
          "id": "df90ba7b-43c3-4f4f-a72a-b1ba1350f82c",
          "name": "credentials_issue.credential.issuer.id:invalid"
        },
        "response": {
          "id": "70f5531b-c42c-4ef7-b12d-7ca7d4de2f12",
          "status": "Created",
          "code": 201,
          "responseTime": 2843,
          "responseSize": 971
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:50)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:50)"
            }
          }
        ]
      },
      {
        "id": "8d2e55d8-7842-48a2-a8b7-b69e5125163e",
        "cursor": {
          "ref": "45564822-28c4-40ba-980d-c47248384c74",
          "length": 282,
          "cycles": 1,
          "position": 50,
          "iteration": 0,
          "httpRequestId": "bc5e6a33-77a2-4dd6-92d2-f7e69e18a22c"
        },
        "item": {
          "id": "8d2e55d8-7842-48a2-a8b7-b69e5125163e",
          "name": "credentials_issue.credential.issuer.id:unknown"
        },
        "response": {
          "id": "14abc137-8905-411f-ae88-7dc0889eb1ef",
          "status": "Created",
          "code": 201,
          "responseTime": 2178,
          "responseSize": 970
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 201",
              "stack": "AssertionError: expected response to have status code 422 but got 201\n   at Object.eval sandbox-script.js:1:51)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:51)"
            }
          }
        ]
      },
      {
        "id": "bb118b11-754c-40ae-91cc-0d838719be1a",
        "cursor": {
          "ref": "824ca284-fa8f-4f74-a3a8-f784f8e1ef11",
          "length": 282,
          "cycles": 1,
          "position": 51,
          "iteration": 0,
          "httpRequestId": "ecc1024e-d70c-4246-a5ab-0c9696b93e0b"
        },
        "item": {
          "id": "bb118b11-754c-40ae-91cc-0d838719be1a",
          "name": "credentials_issue:credential.issuanceDate.missing"
        },
        "response": {
          "id": "449b89b7-6072-47ef-9664-35fa173081df",
          "status": "Created",
          "code": 201,
          "responseTime": 2547,
          "responseSize": 970
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:52)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:52)"
            }
          }
        ]
      },
      {
        "id": "2fd773ed-54c4-4b22-948d-811e2b61543f",
        "cursor": {
          "ref": "b0aa5be4-35a0-4380-b85c-e007d29f7420",
          "length": 282,
          "cycles": 1,
          "position": 52,
          "iteration": 0,
          "httpRequestId": "2b8d686f-90b9-4b78-a759-e0b0e4caddf6"
        },
        "item": {
          "id": "2fd773ed-54c4-4b22-948d-811e2b61543f",
          "name": "credentials_issue:credential.issuanceDate:array"
        },
        "response": {
          "id": "29047933-7393-4251-ba6b-80e751cf7a12",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "294ca80d-bda0-45fd-8751-1d8015d1947b",
        "cursor": {
          "ref": "38e1fa7c-ae22-46b8-a1cf-15f786f0c6f1",
          "length": 282,
          "cycles": 1,
          "position": 53,
          "iteration": 0,
          "httpRequestId": "c4d48267-602c-49af-a09e-aa80cc769ad9"
        },
        "item": {
          "id": "294ca80d-bda0-45fd-8751-1d8015d1947b",
          "name": "credentials_issue:credential.issuanceDate:boolean"
        },
        "response": {
          "id": "21516632-2d66-497e-aec4-47bab186742d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 99,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "be2ee959-17de-4355-8d0c-2dc636e8ca9f",
        "cursor": {
          "ref": "8ad6ea8e-d57d-4134-8712-ce1b937b3227",
          "length": 282,
          "cycles": 1,
          "position": 54,
          "iteration": 0,
          "httpRequestId": "bf5970ca-f5ac-4f65-b3f1-37a1d4e12203"
        },
        "item": {
          "id": "be2ee959-17de-4355-8d0c-2dc636e8ca9f",
          "name": "credentials_issue:credential.issuanceDate:integer"
        },
        "response": {
          "id": "086d219f-0c26-495a-8df5-d5ac4d613534",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 97,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "59bba2d1-5042-46f8-8659-dbb3482c111f",
        "cursor": {
          "ref": "de896277-c143-43fd-adbf-86ad57ed1e67",
          "length": 282,
          "cycles": 1,
          "position": 55,
          "iteration": 0,
          "httpRequestId": "22adb0d1-b78b-4f96-940e-c29db55b42d4"
        },
        "item": {
          "id": "59bba2d1-5042-46f8-8659-dbb3482c111f",
          "name": "credentials_issue:credential.issuanceDate:null"
        },
        "response": {
          "id": "13371778-9a8e-4c3e-9d1d-328279a6a96c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 56,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "88183505-6c0c-4aa8-b60f-f40453270e76",
        "cursor": {
          "ref": "6fb10aca-6b24-464f-8717-03f43b6291d0",
          "length": 282,
          "cycles": 1,
          "position": 56,
          "iteration": 0,
          "httpRequestId": "c0c979e8-c0dd-4f7d-b142-7073ab57341e"
        },
        "item": {
          "id": "88183505-6c0c-4aa8-b60f-f40453270e76",
          "name": "credentials_issue:credential.issuanceDate:object"
        },
        "response": {
          "id": "9eb3917c-66a4-4e6f-b5c9-d7d2b4b87b83",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "443a6827-2193-4695-9428-b9d155415c29",
        "cursor": {
          "ref": "6787d2e1-91ea-40d5-b2b0-13062eb58de5",
          "length": 282,
          "cycles": 1,
          "position": 57,
          "iteration": 0,
          "httpRequestId": "7638c6fc-ec60-49b4-a8fd-49a3e65931a4"
        },
        "item": {
          "id": "443a6827-2193-4695-9428-b9d155415c29",
          "name": "credentials_issue:credential.issuanceDate:invalid_value"
        },
        "response": {
          "id": "78e59d06-059b-4c7a-aa2d-ed8e0e8c9c0c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dc212476-bb69-425a-846f-ff114c857a31",
        "cursor": {
          "ref": "dc2dd8de-b5b3-4907-8ade-eebee47a1d3a",
          "length": 282,
          "cycles": 1,
          "position": 58,
          "iteration": 0,
          "httpRequestId": "a7392af3-a615-47cd-9eae-b5a6ed2a6802"
        },
        "item": {
          "id": "dc212476-bb69-425a-846f-ff114c857a31",
          "name": "credentials_issue:credential.credentialSubject:missing"
        },
        "response": {
          "id": "20376071-a7f4-4e8d-8831-a28ec55d7097",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 76,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6d1c1532-1cf3-4332-8de2-c65afdb57363",
        "cursor": {
          "ref": "2507efbf-fdd0-4280-b5e4-9224ec1209d7",
          "length": 282,
          "cycles": 1,
          "position": 59,
          "iteration": 0,
          "httpRequestId": "188c128b-9974-46e7-980b-6cf3698baf29"
        },
        "item": {
          "id": "6d1c1532-1cf3-4332-8de2-c65afdb57363",
          "name": "credentials_issue:credential.credentialSubject:array"
        },
        "response": {
          "id": "0f6d286a-6722-40d3-a2db-1a0a1f7c6d51",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a6a03656-910e-40db-9b48-1f47b75caacb",
        "cursor": {
          "ref": "d7535256-eab3-424d-a99d-5b89a0df31b9",
          "length": 282,
          "cycles": 1,
          "position": 60,
          "iteration": 0,
          "httpRequestId": "452b1c9f-9003-4f0e-a86b-856bd643f27f"
        },
        "item": {
          "id": "a6a03656-910e-40db-9b48-1f47b75caacb",
          "name": "credentials_issue:credential.credentialSubject:boolean"
        },
        "response": {
          "id": "24afd8d9-12be-42f5-98bd-f7aacbf1a797",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 21,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5337a6c6-f504-4648-8c99-1d023e022449",
        "cursor": {
          "ref": "674f6023-110a-4316-97c3-8a8d51bcbd53",
          "length": 282,
          "cycles": 1,
          "position": 61,
          "iteration": 0,
          "httpRequestId": "afb09013-cdbe-4197-8b21-dba72a315140"
        },
        "item": {
          "id": "5337a6c6-f504-4648-8c99-1d023e022449",
          "name": "credentials_issue:credential.credentialSubject:integer"
        },
        "response": {
          "id": "f4362d62-7826-486b-8500-651cf3afebdb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 22,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "832847a4-33f2-44ce-bc2c-c3c9b2485556",
        "cursor": {
          "ref": "7b67bfc6-acd7-4ffb-ac0d-1cb53a52bc95",
          "length": 282,
          "cycles": 1,
          "position": 62,
          "iteration": 0,
          "httpRequestId": "e4d4f57d-6626-4dd2-a75d-70f94b20d403"
        },
        "item": {
          "id": "832847a4-33f2-44ce-bc2c-c3c9b2485556",
          "name": "credentials_issue:credential.credentialSubject:null"
        },
        "response": {
          "id": "ed7d3dca-50b2-4186-8cad-ce96b6a01b82",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 21,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a443a138-6401-4888-a133-3971610dfbf1",
        "cursor": {
          "ref": "33b8eff3-e4ed-4a9c-984a-e25334929ca5",
          "length": 282,
          "cycles": 1,
          "position": 63,
          "iteration": 0,
          "httpRequestId": "480a0f61-db81-4147-99e8-bd15f43fdaa1"
        },
        "item": {
          "id": "a443a138-6401-4888-a133-3971610dfbf1",
          "name": "credentials_issue:credential.credentialSubject:string"
        },
        "response": {
          "id": "d9f59c05-6566-48d2-a2df-747af89c89c1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 20,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "06b2149d-8b38-4472-98cf-2b7b1a52e5cc",
        "cursor": {
          "ref": "012a0904-5688-4e2e-b364-ac1ac1882858",
          "length": 282,
          "cycles": 1,
          "position": 64,
          "iteration": 0,
          "httpRequestId": "3037b891-8832-4983-ac76-3fa41520dd64"
        },
        "item": {
          "id": "06b2149d-8b38-4472-98cf-2b7b1a52e5cc",
          "name": "credentials_issue:credential.credentialSubject.id:array"
        },
        "response": {
          "id": "55775871-8938-4125-8cea-965cd8d7a5ef",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 21,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1c34f0c4-797e-4815-abf3-a06d017d971b",
        "cursor": {
          "ref": "71ab071b-6957-4d47-9c86-25b7f2016b9d",
          "length": 282,
          "cycles": 1,
          "position": 65,
          "iteration": 0,
          "httpRequestId": "9168885e-76f6-466d-ac71-4c273a5930e5"
        },
        "item": {
          "id": "1c34f0c4-797e-4815-abf3-a06d017d971b",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy"
        },
        "response": {
          "id": "dbd9d084-3e0b-48b7-8100-af9930d3b6c4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 21,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a277de42-0154-4b55-a962-155b42443409",
        "cursor": {
          "ref": "b19d6082-fd6b-480f-a46f-afe3ff8ae39d",
          "length": 282,
          "cycles": 1,
          "position": 66,
          "iteration": 0,
          "httpRequestId": "2ec0c4ba-b2ca-4a5a-a2ae-e889678fb287"
        },
        "item": {
          "id": "a277de42-0154-4b55-a962-155b42443409",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 2"
        },
        "response": {
          "id": "0fc4a718-1f71-4f6f-b6cf-04bd0b84ac0f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 21,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "12969779-b86b-4889-82c2-572e9a925899",
        "cursor": {
          "ref": "d051162b-0808-45ec-bf8a-aa70fb80363b",
          "length": 282,
          "cycles": 1,
          "position": 67,
          "iteration": 0,
          "httpRequestId": "e83bc530-f46a-44e3-a917-082fb3644232"
        },
        "item": {
          "id": "12969779-b86b-4889-82c2-572e9a925899",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 3"
        },
        "response": {
          "id": "d35822b1-f54e-4b39-b848-c56b3d23594d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 21,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4a1ff952-b243-4496-acd5-b30c6629769b",
        "cursor": {
          "ref": "4a26a395-ed12-43bb-9156-e230b0704c67",
          "length": 282,
          "cycles": 1,
          "position": 68,
          "iteration": 0,
          "httpRequestId": "1d968a43-fcd0-4c0c-93aa-96df35457b91"
        },
        "item": {
          "id": "4a1ff952-b243-4496-acd5-b30c6629769b",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 4"
        },
        "response": {
          "id": "5f41ec6c-fb3a-4bdd-865c-e06037aa6b86",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 21,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9e420872-ebcf-4286-a5c5-b736346c9523",
        "cursor": {
          "ref": "50a05b69-6b8a-4e3b-80a5-0a2136c11e84",
          "length": 282,
          "cycles": 1,
          "position": 69,
          "iteration": 0,
          "httpRequestId": "bc5856ee-61da-4084-94a4-401a4e0d6a85"
        },
        "item": {
          "id": "9e420872-ebcf-4286-a5c5-b736346c9523",
          "name": "credentials_issue:options:missing"
        },
        "response": {
          "id": "d49cc718-75b4-437e-8c2a-4edb14a7fd6d",
          "status": "Created",
          "code": 201,
          "responseTime": 2333,
          "responseSize": 977
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:70)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:70)"
            }
          }
        ]
      },
      {
        "id": "e1dade53-27de-4eea-854a-6672b2fa4eb0",
        "cursor": {
          "ref": "51db9439-8e89-4014-a6ad-f46bcd8fcad8",
          "length": 282,
          "cycles": 1,
          "position": 70,
          "iteration": 0,
          "httpRequestId": "006ac0b5-d4f3-4fa9-8063-b9d7b9a2a42d"
        },
        "item": {
          "id": "e1dade53-27de-4eea-854a-6672b2fa4eb0",
          "name": "credentials_issue:options:array"
        },
        "response": {
          "id": "66cea626-9713-4046-8296-00640796709a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 134,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "623adfc8-858e-41d9-84b4-3c0dc73fe25d",
        "cursor": {
          "ref": "2daadf03-2ad9-49ee-ad82-cb12da8ed6de",
          "length": 282,
          "cycles": 1,
          "position": 71,
          "iteration": 0,
          "httpRequestId": "e71587f2-015e-4e63-8d9d-ceb4fe591fc6"
        },
        "item": {
          "id": "623adfc8-858e-41d9-84b4-3c0dc73fe25d",
          "name": "credentials_issue:options:boolean"
        },
        "response": {
          "id": "e5a7702e-fd54-4801-bcba-f7b06a5b29e3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e06eacf5-adb9-4ed6-8dcd-a842915f344b",
        "cursor": {
          "ref": "300a2e01-8707-4e63-b217-5b54eae16697",
          "length": 282,
          "cycles": 1,
          "position": 72,
          "iteration": 0,
          "httpRequestId": "0738e174-70f1-4709-bd21-9f718702ad0a"
        },
        "item": {
          "id": "e06eacf5-adb9-4ed6-8dcd-a842915f344b",
          "name": "credentials_issue:options:integer"
        },
        "response": {
          "id": "7b979533-9ef3-4331-86c1-7017c41f1299",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "618ff7a3-0aa0-4548-9080-72ee0a4ffbf2",
        "cursor": {
          "ref": "596a8c12-65f8-4b3f-8c97-9760804d50d2",
          "length": 282,
          "cycles": 1,
          "position": 73,
          "iteration": 0,
          "httpRequestId": "d382acc6-1fe1-4a82-aa14-c00712e520de"
        },
        "item": {
          "id": "618ff7a3-0aa0-4548-9080-72ee0a4ffbf2",
          "name": "credentials_issue:options:null"
        },
        "response": {
          "id": "93efed9a-20f9-496f-b6fd-2071d3b50006",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fca92965-a12e-4221-8061-1be039d21914",
        "cursor": {
          "ref": "31d907a2-90c8-4bab-a857-b758189cd27e",
          "length": 282,
          "cycles": 1,
          "position": 74,
          "iteration": 0,
          "httpRequestId": "b4acc2e3-b1d6-4ee2-b7a3-9e14ff99cb41"
        },
        "item": {
          "id": "fca92965-a12e-4221-8061-1be039d21914",
          "name": "credentials_issue:options:string"
        },
        "response": {
          "id": "0fa40cf2-8f56-494d-ac42-86810b569978",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ad210a28-94da-4ef5-8d4f-d1b952dd7708",
        "cursor": {
          "ref": "b6fde647-177f-470e-9e9e-2c083753ebea",
          "length": 282,
          "cycles": 1,
          "position": 75,
          "iteration": 0,
          "httpRequestId": "276c9f66-4b69-4539-87ff-d043c29492d3"
        },
        "item": {
          "id": "ad210a28-94da-4ef5-8d4f-d1b952dd7708",
          "name": "credentials_issue:options.type:missing"
        },
        "response": {
          "id": "c682b551-cd5e-4f49-a365-7b6044c12ebf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f5f7abf3-e2d3-4d2c-8088-9a0f37ba2ac9",
        "cursor": {
          "ref": "ae8e5cdf-6d22-44f3-a171-98d7dd8ae888",
          "length": 282,
          "cycles": 1,
          "position": 76,
          "iteration": 0,
          "httpRequestId": "9327b823-dabb-489d-be50-d619e757c46e"
        },
        "item": {
          "id": "f5f7abf3-e2d3-4d2c-8088-9a0f37ba2ac9",
          "name": "credentials_issue:options.type:array"
        },
        "response": {
          "id": "993c635b-d59e-4c8d-9ad4-a9d7e4c1daac",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bc9df82c-91a5-4066-ab30-2d991dcc3890",
        "cursor": {
          "ref": "a6f68fcc-6d57-458d-a694-81e2f631525b",
          "length": 282,
          "cycles": 1,
          "position": 77,
          "iteration": 0,
          "httpRequestId": "999322c4-9178-4d4c-8c59-e726819cc419"
        },
        "item": {
          "id": "bc9df82c-91a5-4066-ab30-2d991dcc3890",
          "name": "credentials_issue:options.type:boolean"
        },
        "response": {
          "id": "703e4e32-96df-479f-a134-61704db9dfcb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 25,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "00186163-0109-454c-94dc-500c0f6d66fc",
        "cursor": {
          "ref": "1dc6c6d7-074b-4cc8-949d-edf6b6776775",
          "length": 282,
          "cycles": 1,
          "position": 78,
          "iteration": 0,
          "httpRequestId": "a2338b18-cca3-4efe-b406-2b521db42c25"
        },
        "item": {
          "id": "00186163-0109-454c-94dc-500c0f6d66fc",
          "name": "credentials_issue:options.type:integer"
        },
        "response": {
          "id": "42a6f392-7312-4b65-83f2-ff9a99102d07",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 24,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b1e2d107-ba53-42bd-bbd0-6be7cad69318",
        "cursor": {
          "ref": "7975f285-c06b-4b76-9014-350f054ccaa8",
          "length": 282,
          "cycles": 1,
          "position": 79,
          "iteration": 0,
          "httpRequestId": "780049e8-8b76-418c-a7c6-df1c4b8ee22f"
        },
        "item": {
          "id": "b1e2d107-ba53-42bd-bbd0-6be7cad69318",
          "name": "credentials_issue:options.type:null"
        },
        "response": {
          "id": "8b68ca4b-20f5-4f1a-855d-35fe357dc959",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 20,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "601b61e3-a863-4fa6-b4f5-0f15933b6ac6",
        "cursor": {
          "ref": "91246cc4-8405-4026-96c0-68bd9594508b",
          "length": 282,
          "cycles": 1,
          "position": 80,
          "iteration": 0,
          "httpRequestId": "80ee5099-3201-405b-ace0-2cf24a5eb5c7"
        },
        "item": {
          "id": "601b61e3-a863-4fa6-b4f5-0f15933b6ac6",
          "name": "credentials_issue:options.type:object"
        },
        "response": {
          "id": "d2afde7f-ea0d-4f1e-867f-50ce9bf5ac5d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 21,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b971b2e8-f31f-4930-8845-ba17fa2030be",
        "cursor": {
          "ref": "6938e0a2-07ce-4a83-82b8-d3050ad2eafa",
          "length": 282,
          "cycles": 1,
          "position": 81,
          "iteration": 0,
          "httpRequestId": "f2c3f4b6-016c-468a-a92e-6b7b3b86aff6"
        },
        "item": {
          "id": "b971b2e8-f31f-4930-8845-ba17fa2030be",
          "name": "credentials_issue:options.type:invalid_value"
        },
        "response": {
          "id": "9d2d8dfd-6e50-41f8-bfd0-fee9b92aa39b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 23,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "738345ac-f2fa-44af-8a02-7448d05c297a",
        "cursor": {
          "ref": "cbba6f0f-142f-4af1-880d-62edb718e2fe",
          "length": 282,
          "cycles": 1,
          "position": 82,
          "iteration": 0,
          "httpRequestId": "d281dd46-5ea3-4253-a32d-b9d033dd29c8"
        },
        "item": {
          "id": "738345ac-f2fa-44af-8a02-7448d05c297a",
          "name": "credentials_issue:options.created:array"
        },
        "response": {
          "id": "bc4dc095-7c06-4a0b-ae32-e87c7cb242a3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 23,
          "responseSize": 136
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "43f6b2e5-26bd-4e2b-9277-f558dafecfb8",
        "cursor": {
          "ref": "f4dc2c82-093c-40be-ba15-895a79466db0",
          "length": 282,
          "cycles": 1,
          "position": 83,
          "iteration": 0,
          "httpRequestId": "a780c5b5-687d-49a4-a168-6cdef631c7fc"
        },
        "item": {
          "id": "43f6b2e5-26bd-4e2b-9277-f558dafecfb8",
          "name": "credentials_issue:options.created:boolean"
        },
        "response": {
          "id": "f0385210-622e-4741-89b5-bab0df803c02",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 136
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d892731f-d516-4dc1-9964-6c4281fe1238",
        "cursor": {
          "ref": "76be0e6b-0e78-4593-833e-19fd62062331",
          "length": 282,
          "cycles": 1,
          "position": 84,
          "iteration": 0,
          "httpRequestId": "42d718b2-181d-4b3b-aa69-01ceb957e94a"
        },
        "item": {
          "id": "d892731f-d516-4dc1-9964-6c4281fe1238",
          "name": "credentials_issue:options.created:integer"
        },
        "response": {
          "id": "08873459-9131-482e-9cf6-dbadd6f8d5a2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 136
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fa065324-27ba-4312-a29e-b81cd7010406",
        "cursor": {
          "ref": "61ef000b-ba0f-4216-bc45-5a2be38ba06a",
          "length": 282,
          "cycles": 1,
          "position": 85,
          "iteration": 0,
          "httpRequestId": "7ab12593-d1b4-4100-8aa3-fe231531958e"
        },
        "item": {
          "id": "fa065324-27ba-4312-a29e-b81cd7010406",
          "name": "credentials_issue:options.created:null"
        },
        "response": {
          "id": "46af347d-5cb3-47dd-b734-4384b6448130",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 23,
          "responseSize": 136
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "37a87efc-40fd-4b95-8158-dd4f00d7a88f",
        "cursor": {
          "ref": "c7755de6-2eb2-47b4-b868-0fbe7da635e7",
          "length": 282,
          "cycles": 1,
          "position": 86,
          "iteration": 0,
          "httpRequestId": "6c863f31-39e7-402a-a722-56c82a154799"
        },
        "item": {
          "id": "37a87efc-40fd-4b95-8158-dd4f00d7a88f",
          "name": "credentials_issue:options.created:object"
        },
        "response": {
          "id": "5482790c-9dee-41fb-80cc-82256e4f558e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 26,
          "responseSize": 136
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b72b42f5-7216-4b96-8979-28c71db474eb",
        "cursor": {
          "ref": "23ffb780-fed0-4909-b61e-769fe80597d7",
          "length": 282,
          "cycles": 1,
          "position": 87,
          "iteration": 0,
          "httpRequestId": "fcaa1be2-4e6c-4a67-bc93-a604164694cc"
        },
        "item": {
          "id": "b72b42f5-7216-4b96-8979-28c71db474eb",
          "name": "credentials_issue:options.created:invalid"
        },
        "response": {
          "id": "d877a508-9e17-4e83-839d-b43a69ad84b8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 136
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d36d9bf9-816b-457d-a830-9b888020602f",
        "cursor": {
          "ref": "d451e835-0c05-4d8a-b547-1f0f587795b7",
          "length": 282,
          "cycles": 1,
          "position": 88,
          "iteration": 0,
          "httpRequestId": "5ffe88d6-d9df-4a67-b4b8-8dee01e2c5b3"
        },
        "item": {
          "id": "d36d9bf9-816b-457d-a830-9b888020602f",
          "name": "credentials_issue:options.credentialStatus:array"
        },
        "response": {
          "id": "7fbfdee7-a8fe-4887-8ecf-a5981a42a12c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cd98afc3-3dd1-4950-afe5-2f5a8cff14e6",
        "cursor": {
          "ref": "67d8e17f-d825-4372-87b6-82656a9db82c",
          "length": 282,
          "cycles": 1,
          "position": 89,
          "iteration": 0,
          "httpRequestId": "d9e830ab-ae67-4f89-bc12-07c7c9389d26"
        },
        "item": {
          "id": "cd98afc3-3dd1-4950-afe5-2f5a8cff14e6",
          "name": "credentials_issue:options.credentialStatus:boolean"
        },
        "response": {
          "id": "49eb5aa0-1e8c-4856-adf6-bd05e4b6ae89",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 22,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "54c1eb97-1136-4f8f-80db-6bc98d451747",
        "cursor": {
          "ref": "eb9b3149-2ac2-4a78-82b2-c6bca3dd88ea",
          "length": 282,
          "cycles": 1,
          "position": 90,
          "iteration": 0,
          "httpRequestId": "cb29db79-3459-4b47-8ef1-f349140bb994"
        },
        "item": {
          "id": "54c1eb97-1136-4f8f-80db-6bc98d451747",
          "name": "credentials_issue:options.credentialStatus:integer"
        },
        "response": {
          "id": "7898f58b-ee0e-4bb9-ad71-3c1180409106",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 21,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e0553379-062d-44d1-94b0-7cadfc4758ed",
        "cursor": {
          "ref": "bc23f791-8d69-40eb-85f3-f64d362ab41c",
          "length": 282,
          "cycles": 1,
          "position": 91,
          "iteration": 0,
          "httpRequestId": "6d6cac8a-3bcd-43cc-8620-d65ff3f9b4db"
        },
        "item": {
          "id": "e0553379-062d-44d1-94b0-7cadfc4758ed",
          "name": "credentials_issue:options.credentialStatus:null"
        },
        "response": {
          "id": "e7908ace-f3ba-42fd-b61a-a61256779169",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 20,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "eb62cd4e-f4be-4234-9d88-e306a7bf90e3",
        "cursor": {
          "ref": "5a0c7132-5721-41bc-99d1-0bec0ef856e9",
          "length": 282,
          "cycles": 1,
          "position": 92,
          "iteration": 0,
          "httpRequestId": "8d5b16bc-a43e-441f-b4d0-8fc9d4423921"
        },
        "item": {
          "id": "eb62cd4e-f4be-4234-9d88-e306a7bf90e3",
          "name": "credentials_issue:options.credentialStatus:string"
        },
        "response": {
          "id": "40c10b9e-ff13-4b5e-bfae-2429569d8a0f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 20,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bdeee120-0f3d-4086-ad30-dd6f301af43b",
        "cursor": {
          "ref": "cbc6248f-41f9-4aec-baa3-22a3d2558cd7",
          "length": 282,
          "cycles": 1,
          "position": 93,
          "iteration": 0,
          "httpRequestId": "41cbc72a-ce3b-494e-8be0-9c47a5781d23"
        },
        "item": {
          "id": "bdeee120-0f3d-4086-ad30-dd6f301af43b",
          "name": "credentials_issue:options.credentialStatus.type:missing"
        },
        "response": {
          "id": "86dbea49-e980-4f08-86a4-479a908ea9c7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 96,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d65ace44-2ac6-475c-8751-3bfd14ceac83",
        "cursor": {
          "ref": "702a71c9-294d-427c-8985-e35d3a6bb76c",
          "length": 282,
          "cycles": 1,
          "position": 94,
          "iteration": 0,
          "httpRequestId": "47edb969-dd6d-453f-81eb-b0fa8450f70b"
        },
        "item": {
          "id": "d65ace44-2ac6-475c-8751-3bfd14ceac83",
          "name": "credentials_issue:options.credentialStatus.type:array"
        },
        "response": {
          "id": "928d0217-9fe7-4f75-b12a-1cae2c68f940",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8edf28e4-7a4a-459d-88e4-a6b1c269b0a2",
        "cursor": {
          "ref": "5b10362f-bebe-488b-aaf4-7fe9bfa5a827",
          "length": 282,
          "cycles": 1,
          "position": 95,
          "iteration": 0,
          "httpRequestId": "44e709e5-3c78-43ed-96c3-eed58e45d316"
        },
        "item": {
          "id": "8edf28e4-7a4a-459d-88e4-a6b1c269b0a2",
          "name": "credentials_issue:options.credentialStatus.type:boolean"
        },
        "response": {
          "id": "92bb6449-162d-4189-be69-90c443cfb624",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 24,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "87e7af86-47ac-43d5-a8c0-318ccade28ab",
        "cursor": {
          "ref": "4f6bca0a-f54d-45f3-9eff-74f5c1eaa279",
          "length": 282,
          "cycles": 1,
          "position": 96,
          "iteration": 0,
          "httpRequestId": "f948aa02-1a7d-47d0-a6f1-eb5d5284ead3"
        },
        "item": {
          "id": "87e7af86-47ac-43d5-a8c0-318ccade28ab",
          "name": "credentials_issue:options.credentialStatus.type:integer"
        },
        "response": {
          "id": "0d9a46b4-692f-40e7-9c34-91d9426010ba",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 22,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "73da2784-82a0-4002-a9ea-899735a39ef3",
        "cursor": {
          "ref": "9537c2cc-71a3-4082-9288-b70b27457798",
          "length": 282,
          "cycles": 1,
          "position": 97,
          "iteration": 0,
          "httpRequestId": "db5f2d10-f576-41a6-940d-a41cfaa34d93"
        },
        "item": {
          "id": "73da2784-82a0-4002-a9ea-899735a39ef3",
          "name": "credentials_issue:options.credentialStatus.type:null"
        },
        "response": {
          "id": "613398f0-d001-46bd-8f6b-7672b637b6b1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 25,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0b24011b-d196-4351-8d90-66e9e1915dc8",
        "cursor": {
          "ref": "92fff128-89c1-4afc-87b2-01a8631f827c",
          "length": 282,
          "cycles": 1,
          "position": 98,
          "iteration": 0,
          "httpRequestId": "3c067c06-7608-4d13-9ce7-2c58516e4ae9"
        },
        "item": {
          "id": "0b24011b-d196-4351-8d90-66e9e1915dc8",
          "name": "credentials_issue:options.credentialStatus.type:null Copy"
        },
        "response": {
          "id": "4f4335e2-4834-48a7-bb3c-818960a5fc9f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4f1075f4-676e-472f-beca-64e62954ed0b",
        "cursor": {
          "ref": "b51383b2-4d82-40b9-a89b-264b3afc8289",
          "length": 282,
          "cycles": 1,
          "position": 99,
          "iteration": 0,
          "httpRequestId": "d6786598-7509-4ed8-90ab-443405a59b3d"
        },
        "item": {
          "id": "4f1075f4-676e-472f-beca-64e62954ed0b",
          "name": "credentials_issue:options.credentialStatus.type:invalid"
        },
        "response": {
          "id": "32f8afdd-18ca-474a-ba9a-d4ab8c59b3a2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6bb87cd8-7a93-4df8-9544-02d8367dd477",
        "cursor": {
          "ref": "5b5e9ebc-377b-4988-841b-a380f2c26ae4",
          "length": 282,
          "cycles": 1,
          "position": 100,
          "iteration": 0,
          "httpRequestId": "3b671c77-c6a7-4900-9064-7dbd34c1c028"
        },
        "item": {
          "id": "6bb87cd8-7a93-4df8-9544-02d8367dd477",
          "name": "credentials_issue:missing_auth"
        },
        "response": {
          "id": "6d1b9951-8482-462d-9854-118fe42a931b",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 73,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:101)"
            }
          }
        ]
      },
      {
        "id": "cb305c5c-efdf-4618-84b2-8113e9b13ef1",
        "cursor": {
          "ref": "e4ece0bd-48a9-4e8f-a4d6-3a79e41d8372",
          "length": 282,
          "cycles": 1,
          "position": 101,
          "iteration": 0,
          "httpRequestId": "a528a03f-d6b3-44ed-85ff-772b3d454d67"
        },
        "item": {
          "id": "cb305c5c-efdf-4618-84b2-8113e9b13ef1",
          "name": "credentials_issue"
        },
        "response": {
          "id": "4fb37a90-f98d-4352-8090-e25d2312ad10",
          "status": "Created",
          "code": 201,
          "responseTime": 2053,
          "responseSize": 969
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false
          },
          {
            "assertion": "response credentialSubject matches request credential.credentialSubject",
            "skipped": false
          },
          {
            "assertion": "response issuanceDate matches request credential.issuanceDate",
            "skipped": false
          },
          {
            "assertion": "response proof.created is close to 'now'",
            "skipped": false
          }
        ]
      },
      {
        "id": "5a4f841f-e6f5-4de4-a21b-c0f282d93dcb",
        "cursor": {
          "ref": "5ea91aa7-2b6e-4384-b328-878d90d142b0",
          "length": 282,
          "cycles": 1,
          "position": 102,
          "iteration": 0,
          "httpRequestId": "45ca4795-9ea9-461d-9291-24c4285286ff"
        },
        "item": {
          "id": "5a4f841f-e6f5-4de4-a21b-c0f282d93dcb",
          "name": "credentials_issue:credential.opt.id"
        },
        "response": {
          "id": "6feadd4b-133b-41b3-a756-88f03aaba966",
          "status": "Created",
          "code": 201,
          "responseTime": 2422,
          "responseSize": 985
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verifiableCredential.id matches request credential.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "94fb1351-82a6-420e-a6fc-27ad7b95419e",
        "cursor": {
          "ref": "a3aa3eed-083b-4bff-9ef5-5224cf3cb3b5",
          "length": 282,
          "cycles": 1,
          "position": 103,
          "iteration": 0,
          "httpRequestId": "9478d249-a26e-4d74-a9b5-0184dd21aebe"
        },
        "item": {
          "id": "94fb1351-82a6-420e-a6fc-27ad7b95419e",
          "name": "credentials_issue:credential:alt.issuer.object"
        },
        "response": {
          "id": "eda2e2bf-af20-4d1a-981b-33556eed07aa",
          "status": "Created",
          "code": 201,
          "responseTime": 2661,
          "responseSize": 971
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "24675865-fc11-457d-92bb-268af7b91a9e",
        "cursor": {
          "ref": "2ade54c3-c5a4-4f87-ac9d-01032bdd2b86",
          "length": 282,
          "cycles": 1,
          "position": 104,
          "iteration": 0,
          "httpRequestId": "80a4c17d-854f-4082-b208-b42a2b03e925"
        },
        "item": {
          "id": "24675865-fc11-457d-92bb-268af7b91a9e",
          "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id"
        },
        "response": {
          "id": "bb8bb5b9-8fc8-453b-9422-4a1fac5e9665",
          "status": "Created",
          "code": 201,
          "responseTime": 2507,
          "responseSize": 993
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response credentialSubject.id matches request credential.credentialSubject.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "6821a9cc-017e-4a6f-8db0-1bfa31fc3a03",
        "cursor": {
          "ref": "45af89be-390e-4333-95d3-f340582fd92f",
          "length": 282,
          "cycles": 1,
          "position": 105,
          "iteration": 0,
          "httpRequestId": "2124862b-a606-46a5-b1c2-126f694312f2"
        },
        "item": {
          "id": "6821a9cc-017e-4a6f-8db0-1bfa31fc3a03",
          "name": "credentials_issue:options:opt.created"
        },
        "response": {
          "id": "d0cc7d41-fd1e-4376-a959-53fc9057b5bb",
          "status": "Created",
          "code": 201,
          "responseTime": 5751,
          "responseSize": 971
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response proof.created matches request options.created",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response proof.created matches request options.created",
              "message": "expected '2023-07-04T00:48:56Z' to equal '2006-01-02T15:04:05Z'",
              "stack": "AssertionError: expected '2023-07-04T00:48:56Z' to equal '2006-01-02T15:04:05Z'\n   at Object.eval sandbox-script.js:3:106)"
            }
          }
        ]
      },
      {
        "id": "d6c7f606-63c0-4d66-b094-bf6ca239191a",
        "cursor": {
          "ref": "ae8a44e2-8793-4f0b-9789-677685af0cfc",
          "length": 282,
          "cycles": 1,
          "position": 106,
          "iteration": 0,
          "httpRequestId": "9c46e165-8960-4569-8733-fb69187e4cd7"
        },
        "item": {
          "id": "d6c7f606-63c0-4d66-b094-bf6ca239191a",
          "name": "credentials_issue:options:opt.credentialStatus"
        },
        "response": {
          "id": "24a027e5-2737-446a-801b-4655a0679eb6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 118,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 400",
              "stack": "AssertionError: expected response to have status code 201 but got 400\n   at Object.eval sandbox-script.js:1:107)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:2:107)"
            }
          }
        ]
      },
      {
        "id": "68ef3794-bfd2-4357-af13-37323f98287f",
        "cursor": {
          "ref": "3cd7a148-4a65-43b6-80e1-207575dc08df",
          "length": 282,
          "cycles": 1,
          "position": 107,
          "iteration": 0,
          "httpRequestId": "09bde9fc-7741-48f9-b871-7e3a26170a60"
        },
        "item": {
          "id": "68ef3794-bfd2-4357-af13-37323f98287f",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "c3ad8438-224c-4030-917b-d12a2d01cdcf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 81,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ffaf347f-70c1-49d1-9b9a-c774e1ea9eae",
        "cursor": {
          "ref": "eed6bc29-24de-4ed3-ab92-d6f822577076",
          "length": 282,
          "cycles": 1,
          "position": 108,
          "iteration": 0,
          "httpRequestId": "c2117e1b-2dcf-42e8-af8d-b4b15240b21a"
        },
        "item": {
          "id": "ffaf347f-70c1-49d1-9b9a-c774e1ea9eae",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "4bef3d1d-dac0-4f4b-839d-8807864df35f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 99,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ac121641-8046-4373-951a-84fa3497da01",
        "cursor": {
          "ref": "a979afdf-214e-4a86-b5f5-9f0d47013794",
          "length": 282,
          "cycles": 1,
          "position": 109,
          "iteration": 0,
          "httpRequestId": "7aa7d5f8-b7d7-450a-9195-34e8d38a388d"
        },
        "item": {
          "id": "ac121641-8046-4373-951a-84fa3497da01",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "2bbe1e18-f604-4fa0-ad7b-1ee47de5ce28",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 68,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e81c19c0-3585-429f-a6ba-17100b045849",
        "cursor": {
          "ref": "1e1e7fd2-915e-4595-87e5-3a45b162bae5",
          "length": 282,
          "cycles": 1,
          "position": 110,
          "iteration": 0,
          "httpRequestId": "d2e7aa13-4420-4d2f-b5ab-4499ca2f8f85"
        },
        "item": {
          "id": "e81c19c0-3585-429f-a6ba-17100b045849",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "fa4dd907-e34f-462e-9e4c-f9b5e58260ed",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 113,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b0a7cea0-4978-404c-9d1d-8bc85ef72847",
        "cursor": {
          "ref": "fcd247bc-6947-4b29-a7cd-4fef54b45c12",
          "length": 282,
          "cycles": 1,
          "position": 111,
          "iteration": 0,
          "httpRequestId": "7327e716-98fd-4a79-9ceb-d878bff32b34"
        },
        "item": {
          "id": "b0a7cea0-4978-404c-9d1d-8bc85ef72847",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "3c9b42c0-79ac-4147-aa23-9cc22666751f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 23,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bdc5df83-0af8-46aa-8ad2-7bb1282cb2d4",
        "cursor": {
          "ref": "9bef81cf-5793-45ca-b440-ffa436cccfd2",
          "length": 282,
          "cycles": 1,
          "position": 112,
          "iteration": 0,
          "httpRequestId": "339625da-ef99-4866-b52b-f0733fbfa234"
        },
        "item": {
          "id": "bdc5df83-0af8-46aa-8ad2-7bb1282cb2d4",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "9b55fab3-4447-4c8b-ac24-e089c0c470c3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e2daed6a-baa4-4fd5-9a45-95010533261f",
        "cursor": {
          "ref": "430afdd3-fb83-4807-8b1e-9479de9a24f1",
          "length": 282,
          "cycles": 1,
          "position": 113,
          "iteration": 0,
          "httpRequestId": "ee6ee492-a324-42de-a908-f9dde5aa5ec5"
        },
        "item": {
          "id": "e2daed6a-baa4-4fd5-9a45-95010533261f",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "3ef78dfe-7667-4e32-9b29-ace3d30ce324",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 24,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f19ba462-1e3c-47ca-b879-9eb83ca0fffb",
        "cursor": {
          "ref": "4ee2568b-48e2-48d9-8e04-4b8c2534799c",
          "length": 282,
          "cycles": 1,
          "position": 114,
          "iteration": 0,
          "httpRequestId": "d870c648-ad8e-4968-8549-a763dc0b3fbc"
        },
        "item": {
          "id": "f19ba462-1e3c-47ca-b879-9eb83ca0fffb",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "bd288d25-407a-4fa5-8824-b6fe455c10c5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b20d7dfc-2ad5-4aa5-9dff-cfbc29fb9778",
        "cursor": {
          "ref": "3dc82d24-e664-4d69-bdb3-71aff53b8e7e",
          "length": 282,
          "cycles": 1,
          "position": 115,
          "iteration": 0,
          "httpRequestId": "034339fd-1d05-4a48-88a2-025987027b24"
        },
        "item": {
          "id": "b20d7dfc-2ad5-4aa5-9dff-cfbc29fb9778",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "85e93b2a-b21d-45c9-8efa-1e4eb4e066e4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "80c91c81-6fdb-4d61-a4fe-62ccdcdf4b6a",
        "cursor": {
          "ref": "ff6d0c14-2d92-419e-b105-c48c5a14da5f",
          "length": 282,
          "cycles": 1,
          "position": 116,
          "iteration": 0,
          "httpRequestId": "f03331d5-c7c9-49ca-9dc5-5efb94687f4f"
        },
        "item": {
          "id": "80c91c81-6fdb-4d61-a4fe-62ccdcdf4b6a",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "c6423792-c5d5-4761-bf9f-de40b2a6e5f7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 19,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7f2b251d-8205-42b2-a810-99cfa03bbe33",
        "cursor": {
          "ref": "483812bc-2cf6-4278-a39d-e6c884523ce6",
          "length": 282,
          "cycles": 1,
          "position": 117,
          "iteration": 0,
          "httpRequestId": "1f04a23d-a799-4958-bf0a-62e1304d63ee"
        },
        "item": {
          "id": "7f2b251d-8205-42b2-a810-99cfa03bbe33",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "4bdf1fa0-2f6c-454c-aef6-0e5c4da3a7cd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 21,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bb8478d7-8b37-46be-80a8-68333207303e",
        "cursor": {
          "ref": "c17d03ae-0408-4be1-8036-ac1a3d685d48",
          "length": 282,
          "cycles": 1,
          "position": 118,
          "iteration": 0,
          "httpRequestId": "c1dbdae7-fedc-4971-bedf-dd01d0095fc5"
        },
        "item": {
          "id": "bb8478d7-8b37-46be-80a8-68333207303e",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "5ba04235-ce0d-41cb-ace4-40e5eb6fd118",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 21,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "276c5367-793a-4a8d-979d-e1e4e9bdb8b8",
        "cursor": {
          "ref": "7e1d93a4-f455-4cf5-82a8-78ca82e39635",
          "length": 282,
          "cycles": 1,
          "position": 119,
          "iteration": 0,
          "httpRequestId": "079d9fd9-2648-46bb-981f-99af13e7ffd8"
        },
        "item": {
          "id": "276c5367-793a-4a8d-979d-e1e4e9bdb8b8",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "fb1a768e-a5aa-45f1-b2e4-7e57e29d6a3c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 20,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1b5d034e-dc8e-4e37-b561-08f7b1023a19",
        "cursor": {
          "ref": "9ee27b60-390c-4926-9b9c-cd743cba59b3",
          "length": 282,
          "cycles": 1,
          "position": 120,
          "iteration": 0,
          "httpRequestId": "54013811-7344-4d7b-810d-6f26314d1ca6"
        },
        "item": {
          "id": "1b5d034e-dc8e-4e37-b561-08f7b1023a19",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "c8eb1ffb-03c2-4373-9bc7-4a3c68925d5f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 20,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "69b29635-acc8-4fdc-8829-8493d35401e2",
        "cursor": {
          "ref": "e1e80499-d480-4bd9-935f-610b852b41ce",
          "length": 282,
          "cycles": 1,
          "position": 121,
          "iteration": 0,
          "httpRequestId": "68c7bcb4-9f53-4094-ba6d-4ac69e4706c6"
        },
        "item": {
          "id": "69b29635-acc8-4fdc-8829-8493d35401e2",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "80bbb626-d97a-4a48-9a77-a712b1bfaba4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 20,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "48a18e1d-9ce1-49cf-bdb1-38cee1fc0840",
        "cursor": {
          "ref": "3424446b-ad0c-4cc2-8fd7-eb6e8fe29852",
          "length": 282,
          "cycles": 1,
          "position": 122,
          "iteration": 0,
          "httpRequestId": "87a01b60-5c98-4904-8bcf-4f3c7e58266a"
        },
        "item": {
          "id": "48a18e1d-9ce1-49cf-bdb1-38cee1fc0840",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "ee8b8b05-0ebf-4b0b-b46d-73f6a7f9f731",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 107,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "56b57519-21fb-4c6e-af80-220610ef97fd",
        "cursor": {
          "ref": "4dbbbf9a-ffd0-4f30-a95f-c6222cf988e6",
          "length": 282,
          "cycles": 1,
          "position": 123,
          "iteration": 0,
          "httpRequestId": "85d704df-a5ee-4d45-ab4d-bf4ad265fe54"
        },
        "item": {
          "id": "56b57519-21fb-4c6e-af80-220610ef97fd",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "8d469730-22de-4d02-8ac2-5595192d2900",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d47cd243-66b8-436c-8380-d4565e32068c",
        "cursor": {
          "ref": "365f0570-437c-4773-aba5-61cb80491159",
          "length": 282,
          "cycles": 1,
          "position": 124,
          "iteration": 0,
          "httpRequestId": "0262be55-1875-4960-bcb0-1631e7e87e83"
        },
        "item": {
          "id": "d47cd243-66b8-436c-8380-d4565e32068c",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "8e067e8b-a659-4015-b84f-18c3fa691695",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 23,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dfd9fd13-1665-4c0d-a85e-c587975a20b6",
        "cursor": {
          "ref": "0dcc11c4-4b6f-4b86-8177-d8c36084aa52",
          "length": 282,
          "cycles": 1,
          "position": 125,
          "iteration": 0,
          "httpRequestId": "26b2b7e1-6dbb-4176-a45a-e9bc04b7d566"
        },
        "item": {
          "id": "dfd9fd13-1665-4c0d-a85e-c587975a20b6",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "b2e7203a-de93-4b26-b6b6-54feacb29293",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 21,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3758b343-0c52-4139-8f27-af0cd25913d8",
        "cursor": {
          "ref": "848baf4b-ac83-4290-843d-243a93fdcf5e",
          "length": 282,
          "cycles": 1,
          "position": 126,
          "iteration": 0,
          "httpRequestId": "b954a34b-087f-4d2f-91ca-ba2167f595a8"
        },
        "item": {
          "id": "3758b343-0c52-4139-8f27-af0cd25913d8",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "7a65d2fc-5b7e-41f6-b505-226907b19344",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 22,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "60a26103-0f46-40a5-85e9-d1ab3562b6d7",
        "cursor": {
          "ref": "fb33e796-a0c1-4fc2-a07f-83194af63f68",
          "length": 282,
          "cycles": 1,
          "position": 127,
          "iteration": 0,
          "httpRequestId": "44d81e61-190c-4d9d-b72c-2feffd97e9b5"
        },
        "item": {
          "id": "60a26103-0f46-40a5-85e9-d1ab3562b6d7",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "90a5e5d0-e2ca-495a-8979-fb62505d6593",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 23,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "45c986ee-ed87-4a94-872d-651a5652b245",
        "cursor": {
          "ref": "3936a972-97b8-467b-bb4f-a3b229b58758",
          "length": 282,
          "cycles": 1,
          "position": 128,
          "iteration": 0,
          "httpRequestId": "b3b7f972-c3b6-4103-87f1-ab6dd54c3ab4"
        },
        "item": {
          "id": "45c986ee-ed87-4a94-872d-651a5652b245",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "ad04ed39-7531-4abb-8fb8-9bd32b9fe6ad",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 25,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5ebb4251-fe96-4e95-8faf-86a4c7c2a45e",
        "cursor": {
          "ref": "c4243028-ffad-46e2-9d89-bc0ea2f235bb",
          "length": 282,
          "cycles": 1,
          "position": 129,
          "iteration": 0,
          "httpRequestId": "000c07b8-aebd-41bf-b475-6b8fa62a9646"
        },
        "item": {
          "id": "5ebb4251-fe96-4e95-8faf-86a4c7c2a45e",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "2bf3c38e-c9e9-44e3-91f7-f949294e8165",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 21,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "141328d0-fc67-4a0b-94d7-0f37d73772bd",
        "cursor": {
          "ref": "40918390-6537-43bb-b9f6-171f5629274c",
          "length": 282,
          "cycles": 1,
          "position": 130,
          "iteration": 0,
          "httpRequestId": "dc56c635-5022-4dbc-be7e-8a7e0327a449"
        },
        "item": {
          "id": "141328d0-fc67-4a0b-94d7-0f37d73772bd",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "b10a2df3-71ad-444d-9307-0f8c804f1034",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 21,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "054d7c43-f283-42c7-bbcb-95096b9bc5b9",
        "cursor": {
          "ref": "c3c55540-8243-4cfe-8dd8-fcc868c95e60",
          "length": 282,
          "cycles": 1,
          "position": 131,
          "iteration": 0,
          "httpRequestId": "f70f475b-c816-4913-914c-67cabc2d4f79"
        },
        "item": {
          "id": "054d7c43-f283-42c7-bbcb-95096b9bc5b9",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "8f12fab8-fdc8-4bad-b411-39bd05ee0f56",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 21,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8aaf329c-46a7-4b67-8613-02b4c3a2f49e",
        "cursor": {
          "ref": "a41c3d48-2359-401f-b6b9-69b7fa514359",
          "length": 282,
          "cycles": 1,
          "position": 132,
          "iteration": 0,
          "httpRequestId": "8055c967-05ce-4619-8583-7c0c4d1e686b"
        },
        "item": {
          "id": "8aaf329c-46a7-4b67-8613-02b4c3a2f49e",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "be2e539a-d790-4bcd-98f3-e3431bd7de9e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 20,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ae86c2a2-d21d-4664-8869-ab79a2017b45",
        "cursor": {
          "ref": "c82cf428-b6a1-45e6-9786-2b15e443ae31",
          "length": 282,
          "cycles": 1,
          "position": 133,
          "iteration": 0,
          "httpRequestId": "5667317d-8b67-4239-8c55-5f84ee500646"
        },
        "item": {
          "id": "ae86c2a2-d21d-4664-8869-ab79a2017b45",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "35cb6611-bf36-4586-9a08-5bd3b7050686",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 20,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f57bec9f-5457-4bd5-b3ea-2b336b1780ff",
        "cursor": {
          "ref": "98e8a603-4381-4779-9036-41ea252aad82",
          "length": 282,
          "cycles": 1,
          "position": 134,
          "iteration": 0,
          "httpRequestId": "aa9f8ba9-4e24-4197-aaae-eb3650184818"
        },
        "item": {
          "id": "f57bec9f-5457-4bd5-b3ea-2b336b1780ff",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "0293beed-5150-408d-b9b0-9bb5cd939dbe",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 20,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3862c665-9bbb-4512-988c-26b131260f9f",
        "cursor": {
          "ref": "66edc349-bc2c-4189-9fee-f038a0823eae",
          "length": 282,
          "cycles": 1,
          "position": 135,
          "iteration": 0,
          "httpRequestId": "9fa02af6-0aa5-4260-8652-9969988eb64c"
        },
        "item": {
          "id": "3862c665-9bbb-4512-988c-26b131260f9f",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "e3c11740-1a48-4bd6-8cbd-a77904339240",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 20,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "46a45ff8-92fd-41a4-b428-0879b7f4eec5",
        "cursor": {
          "ref": "adee4816-ef53-4228-9e75-e49e3b570782",
          "length": 282,
          "cycles": 1,
          "position": 136,
          "iteration": 0,
          "httpRequestId": "d5303340-59b1-49b8-8a16-3d87aed77002"
        },
        "item": {
          "id": "46a45ff8-92fd-41a4-b428-0879b7f4eec5",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "16b8d9c5-226c-4b7f-826d-6fce12ecf7f7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 21,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f8d08c57-cfd5-4674-9db7-bf383195e603",
        "cursor": {
          "ref": "c0fcc826-9a8f-4853-8724-e4ba5041b97b",
          "length": 282,
          "cycles": 1,
          "position": 137,
          "iteration": 0,
          "httpRequestId": "fcdbe7f3-18e6-4ab8-9dc1-8b8e654f7a61"
        },
        "item": {
          "id": "f8d08c57-cfd5-4674-9db7-bf383195e603",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "da800ef9-d77d-4ea5-94b8-0ec75409ab58",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 20,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2b19ddef-5d98-4608-9ec8-927dbd22b05a",
        "cursor": {
          "ref": "b65f9382-44f4-466e-b653-a1702c0d1bfd",
          "length": 282,
          "cycles": 1,
          "position": 138,
          "iteration": 0,
          "httpRequestId": "43e7b2fd-a840-4401-859b-13249d0495bb"
        },
        "item": {
          "id": "2b19ddef-5d98-4608-9ec8-927dbd22b05a",
          "name": "credentials_status:credentialStatus:item:status:invalid"
        },
        "response": {
          "id": "c8df03ce-3c1a-466a-9b47-9b51dc6b7c4a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 20,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d71c6ebc-3ae7-45ae-8788-68d190781614",
        "cursor": {
          "ref": "737d05e9-8a99-4844-b7df-d17458be7695",
          "length": 282,
          "cycles": 1,
          "position": 139,
          "iteration": 0,
          "httpRequestId": "722a9204-6c4d-4e29-92dd-94a40261bb8d"
        },
        "item": {
          "id": "d71c6ebc-3ae7-45ae-8788-68d190781614",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "485152fa-f731-4509-9a81-2705052d9575",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 12,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:140)"
            }
          }
        ]
      },
      {
        "id": "337c1506-ad72-4b20-89b7-dee7bf3c97f0",
        "cursor": {
          "ref": "44cbc8a1-c65b-404f-a8eb-ebb3f8c3c725",
          "length": 282,
          "cycles": 1,
          "position": 140,
          "iteration": 0,
          "httpRequestId": "8565bdcd-9a45-4598-a0e7-a8b3803eb9ff"
        },
        "item": {
          "id": "337c1506-ad72-4b20-89b7-dee7bf3c97f0",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "8686a3d5-0348-4f0c-af32-6dace1f2f9b1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 21,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "eb2702fd-43eb-4346-be1b-092dcffff855",
        "cursor": {
          "ref": "3b6cb11b-3d3f-4e6a-b82b-576e1ab1918a",
          "length": 282,
          "cycles": 1,
          "position": 141,
          "iteration": 0,
          "httpRequestId": "16e5debe-c029-4d1a-9baa-90e5653ffd95"
        },
        "item": {
          "id": "eb2702fd-43eb-4346-be1b-092dcffff855",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "44cce38b-1564-485e-9133-2da4b045be8c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 20,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4de8abd9-f419-46e9-922f-97f838d14b90",
        "cursor": {
          "ref": "20dfba99-c92c-411a-bd7d-44f9c91a5ec1",
          "length": 282,
          "cycles": 1,
          "position": 142,
          "iteration": 0,
          "httpRequestId": "86622b06-6181-4aef-a0a4-d22e3489627d"
        },
        "item": {
          "id": "4de8abd9-f419-46e9-922f-97f838d14b90",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "fc3f2597-0c15-4dbf-b86e-8bc7cd47a0b1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 21,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cd5c1998-0d16-4fce-9e57-c323bbc51432",
        "cursor": {
          "ref": "8e161922-047f-4c1b-adb6-5d8500ddf87b",
          "length": 282,
          "cycles": 1,
          "position": 143,
          "iteration": 0,
          "httpRequestId": "211eca60-db14-488b-a1b9-b9abbf0fe08c"
        },
        "item": {
          "id": "cd5c1998-0d16-4fce-9e57-c323bbc51432",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "8fab9e43-b022-48bb-a398-ba58f1bb04f6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 19,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7db212b9-9b46-4767-a64c-a3368634b4d1",
        "cursor": {
          "ref": "10dc14bc-ec9a-489e-8971-a82d5a67d15e",
          "length": 282,
          "cycles": 1,
          "position": 144,
          "iteration": 0,
          "httpRequestId": "7e4f8246-188f-4c14-977e-8037998c3ba9"
        },
        "item": {
          "id": "7db212b9-9b46-4767-a64c-a3368634b4d1",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "3b89315e-53b7-4de6-b9a2-7f06a2cf4149",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 20,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e46cc98c-d8ae-4136-af67-1c75548ffe2e",
        "cursor": {
          "ref": "4ca8899d-eb99-443a-abd5-4bc332a893c6",
          "length": 282,
          "cycles": 1,
          "position": 145,
          "iteration": 0,
          "httpRequestId": "71bac935-a8ed-4763-af7c-c815a1090b4b"
        },
        "item": {
          "id": "e46cc98c-d8ae-4136-af67-1c75548ffe2e",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "3674d862-e806-4cec-ac74-3f737e46c89b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 21,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9ab7d33f-8cce-4032-9ddf-abd7daedb517",
        "cursor": {
          "ref": "5999cb13-f04c-4951-8398-f01334138588",
          "length": 282,
          "cycles": 1,
          "position": 146,
          "iteration": 0,
          "httpRequestId": "67080b7e-bb1a-4046-a83c-24e241a3b0fc"
        },
        "item": {
          "id": "9ab7d33f-8cce-4032-9ddf-abd7daedb517",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "58906225-cd89-47fe-8cec-190b32439db9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5f9856f5-03ee-46f1-9e4b-a5f1c46fc984",
        "cursor": {
          "ref": "911dba99-0d95-47ef-bfe9-e6c5fa953208",
          "length": 282,
          "cycles": 1,
          "position": 147,
          "iteration": 0,
          "httpRequestId": "39922b7c-3025-4060-b5fd-42f8d39fb8f3"
        },
        "item": {
          "id": "5f9856f5-03ee-46f1-9e4b-a5f1c46fc984",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "4a9ba2c0-abf5-40a0-b004-c443ead9decd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d9199dfe-cc10-4662-9829-f10acbe6a94b",
        "cursor": {
          "ref": "9fc664a2-decf-4dcf-8299-d4bc101da362",
          "length": 282,
          "cycles": 1,
          "position": 148,
          "iteration": 0,
          "httpRequestId": "f205ae00-7416-4c41-a144-cf32f513f438"
        },
        "item": {
          "id": "d9199dfe-cc10-4662-9829-f10acbe6a94b",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "21c997cd-0d0d-4f76-b53b-1b230dc3cb4b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 21,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4540941b-c280-44c5-a8c1-36895e748706",
        "cursor": {
          "ref": "fc787efd-0555-4cc3-86b9-f5cd2b0d5cd5",
          "length": 282,
          "cycles": 1,
          "position": 149,
          "iteration": 0,
          "httpRequestId": "6d044cc6-5457-432b-bf2c-e145204a79c5"
        },
        "item": {
          "id": "4540941b-c280-44c5-a8c1-36895e748706",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "e4588557-f1b4-40fb-931b-9b71a1e62198",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9641adae-a366-4db6-8fb3-b4bfb3e63bd1",
        "cursor": {
          "ref": "69392cd1-15f2-4521-87d7-41262c31a1fd",
          "length": 282,
          "cycles": 1,
          "position": 150,
          "iteration": 0,
          "httpRequestId": "b573f9d2-8fde-4e09-a6c2-327320d7fdb1"
        },
        "item": {
          "id": "9641adae-a366-4db6-8fb3-b4bfb3e63bd1",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "aeff5a39-9efb-4f2d-b491-ee064f09230d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 22,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "28639697-d6f2-44f1-ae2e-03cc543c7c14",
        "cursor": {
          "ref": "254b2f04-885d-46de-a7c1-63bacdd632b4",
          "length": 282,
          "cycles": 1,
          "position": 151,
          "iteration": 0,
          "httpRequestId": "18301f3e-0bcc-45d7-93a2-d88631195a74"
        },
        "item": {
          "id": "28639697-d6f2-44f1-ae2e-03cc543c7c14",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "2f2c1b23-9528-4597-9abc-1acd286b65e6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 24,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0385d4d5-df5f-4124-8fcc-30dfa1c015ab",
        "cursor": {
          "ref": "e092a040-e21f-4e27-a2b2-3a4fed8a60a3",
          "length": 282,
          "cycles": 1,
          "position": 152,
          "iteration": 0,
          "httpRequestId": "b8482dde-1097-4a0b-ae08-5b5e87908e6b"
        },
        "item": {
          "id": "0385d4d5-df5f-4124-8fcc-30dfa1c015ab",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "9a618783-2cae-4cc4-9a48-c225b7eaed52",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 22,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a1b6681b-dd7e-44a1-8756-2256c148fdbd",
        "cursor": {
          "ref": "c1a0d18b-7722-437e-b861-9e8b7ebf0ecd",
          "length": 282,
          "cycles": 1,
          "position": 153,
          "iteration": 0,
          "httpRequestId": "2260e252-e0d3-4e70-b39a-40e2f0e79615"
        },
        "item": {
          "id": "a1b6681b-dd7e-44a1-8756-2256c148fdbd",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "fc326c78-9782-4cb2-81e4-63cdd6fad404",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 22,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c047d5fe-895c-4aa7-8e2c-6b8e9e93fe8e",
        "cursor": {
          "ref": "05f63598-3ef6-4d69-a026-eb690d09db7e",
          "length": 282,
          "cycles": 1,
          "position": 154,
          "iteration": 0,
          "httpRequestId": "adf528c9-8ffc-4d65-8639-87833a632a3d"
        },
        "item": {
          "id": "c047d5fe-895c-4aa7-8e2c-6b8e9e93fe8e",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "5e3b84f3-361f-4c57-94b8-6f9d8d6eafd6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 20,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "475b4fb7-c011-400e-ab45-435fc09416f8",
        "cursor": {
          "ref": "01b0e380-ee9f-4a49-a822-382805ddc35e",
          "length": 282,
          "cycles": 1,
          "position": 155,
          "iteration": 0,
          "httpRequestId": "e6873c29-08a6-4be5-973a-c00f2abb17e7"
        },
        "item": {
          "id": "475b4fb7-c011-400e-ab45-435fc09416f8",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "56daed55-d6d9-4054-9a1d-89065ed35ccd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 20,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2f66a4db-9cdb-4095-af50-f42e3a4a82d9",
        "cursor": {
          "ref": "ea903729-4a5d-4ccb-99b7-78c6ad9eabf1",
          "length": 282,
          "cycles": 1,
          "position": 156,
          "iteration": 0,
          "httpRequestId": "0c200dee-7cb2-4157-8669-357320f5f03a"
        },
        "item": {
          "id": "2f66a4db-9cdb-4095-af50-f42e3a4a82d9",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "e14bdfa0-1d13-4841-afc9-76a21193225e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 25,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "85fb69f5-cd8e-4b5f-81f4-301d614f0208",
        "cursor": {
          "ref": "46be4914-6e93-40a0-add5-c878c0658bb8",
          "length": 282,
          "cycles": 1,
          "position": 157,
          "iteration": 0,
          "httpRequestId": "8fce5af1-8615-4f1e-8c49-14f8d4b0b0bb"
        },
        "item": {
          "id": "85fb69f5-cd8e-4b5f-81f4-301d614f0208",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "13821003-fde6-4de9-a6a0-109154592120",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 21,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cd345a4d-c0bc-4022-a778-16acf65e4069",
        "cursor": {
          "ref": "e565d22a-4bb2-4ccc-aa2f-f9c045a4217f",
          "length": 282,
          "cycles": 1,
          "position": 158,
          "iteration": 0,
          "httpRequestId": "708d9b43-a475-4c12-8bfd-eb6f9fbd2944"
        },
        "item": {
          "id": "cd345a4d-c0bc-4022-a778-16acf65e4069",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "ee2d1247-09be-46f6-b8c8-82906c019d4b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 26,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e00b3703-8ff2-4458-94ca-a50b4064ba84",
        "cursor": {
          "ref": "13d5a745-cd7d-4303-a723-77f6adf330e1",
          "length": 282,
          "cycles": 1,
          "position": 159,
          "iteration": 0,
          "httpRequestId": "875d885b-ffbc-40a1-94e9-d3867941f6b6"
        },
        "item": {
          "id": "e00b3703-8ff2-4458-94ca-a50b4064ba84",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "49cd5294-0e20-46fc-bcb7-7de75fe2309c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 21,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d9af93ce-dad4-4ae4-8141-28f194b44126",
        "cursor": {
          "ref": "a6ff44f7-2539-4ebd-bca8-df13aec2a05a",
          "length": 282,
          "cycles": 1,
          "position": 160,
          "iteration": 0,
          "httpRequestId": "8a3940e0-e5b0-46d4-a3f5-bd52d7981de9"
        },
        "item": {
          "id": "d9af93ce-dad4-4ae4-8141-28f194b44126",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "5f16fb51-6482-4f95-bd6b-3710a5cd377e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 22,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6e61ffcf-5c1f-4b6c-956e-4ad1f09fafcf",
        "cursor": {
          "ref": "03f4a211-425b-4ba2-94f2-acddfc5ecaa5",
          "length": 282,
          "cycles": 1,
          "position": 161,
          "iteration": 0,
          "httpRequestId": "95ccbf9e-200d-4031-8ab0-119708d237ec"
        },
        "item": {
          "id": "6e61ffcf-5c1f-4b6c-956e-4ad1f09fafcf",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "32819289-a075-435e-ae22-c5a27a420963",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 21,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6fc89e84-17de-471b-a9d2-13bd457d6ed8",
        "cursor": {
          "ref": "97a3c882-1479-4baa-be9e-e96ac6d62c4e",
          "length": 282,
          "cycles": 1,
          "position": 162,
          "iteration": 0,
          "httpRequestId": "8d393631-48d1-44d9-837b-2d311892490f"
        },
        "item": {
          "id": "6fc89e84-17de-471b-a9d2-13bd457d6ed8",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "2ba020eb-4705-4d23-a2b2-e46d6b851188",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 21,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "993d3c39-7e7e-4926-b901-0a1515d612da",
        "cursor": {
          "ref": "a0bb5e04-f25b-4d47-9364-13a72d71bff4",
          "length": 282,
          "cycles": 1,
          "position": 163,
          "iteration": 0,
          "httpRequestId": "d8b145c9-841a-4aa0-8927-99664b100793"
        },
        "item": {
          "id": "993d3c39-7e7e-4926-b901-0a1515d612da",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "59c9cfa3-a60f-4705-8263-765bee314f20",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 22,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0dcd8341-f8a7-462e-8b29-139dd2e5c7b3",
        "cursor": {
          "ref": "8853a410-6f8d-4953-bf45-00e07296cc8f",
          "length": 282,
          "cycles": 1,
          "position": 164,
          "iteration": 0,
          "httpRequestId": "c852ef4e-02e2-4c50-9e71-dc3bbbf81a74"
        },
        "item": {
          "id": "0dcd8341-f8a7-462e-8b29-139dd2e5c7b3",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "ef0df075-9f2b-4540-8649-dfe9488c140e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 20,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c067edc7-51d6-406f-8c99-df67452c7852",
        "cursor": {
          "ref": "228646c0-c3b6-4c74-950c-30ea2b4d9f80",
          "length": 282,
          "cycles": 1,
          "position": 165,
          "iteration": 0,
          "httpRequestId": "f4b6ccee-5cc9-48ab-bd7b-dd98c8f9213f"
        },
        "item": {
          "id": "c067edc7-51d6-406f-8c99-df67452c7852",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "70d55d31-de45-44f6-a479-361c3b908e2e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 19,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7b97eefc-d437-434a-a148-0fc9272d3a23",
        "cursor": {
          "ref": "0855e548-4cc7-47e7-a778-2536d1b79df8",
          "length": 282,
          "cycles": 1,
          "position": 166,
          "iteration": 0,
          "httpRequestId": "d30c7864-d823-47b9-8f73-84866cea1c98"
        },
        "item": {
          "id": "7b97eefc-d437-434a-a148-0fc9272d3a23",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "d9499971-a916-427e-a1bb-a5416913e011",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 26,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "045142b4-a1bb-48fa-9ef3-ce10acf3ec30",
        "cursor": {
          "ref": "1147dcdf-dfc8-4b75-9f9a-c3d077729d08",
          "length": 282,
          "cycles": 1,
          "position": 167,
          "iteration": 0,
          "httpRequestId": "007462ef-a84d-4582-b133-cee5d99c152b"
        },
        "item": {
          "id": "045142b4-a1bb-48fa-9ef3-ce10acf3ec30",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "3d89cebb-273a-4806-890a-d1c5a088ec09",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 21,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bc90a8d5-8023-4e46-aa36-3b7d2c481fb7",
        "cursor": {
          "ref": "20807ba1-10a7-462a-a376-dfeacceab3b3",
          "length": 282,
          "cycles": 1,
          "position": 168,
          "iteration": 0,
          "httpRequestId": "4d0afc60-854d-4094-a917-4ce43b90c251"
        },
        "item": {
          "id": "bc90a8d5-8023-4e46-aa36-3b7d2c481fb7",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "1e179de9-df4a-48de-8e3d-1e7e332f3168",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 21,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "312f5db0-1b77-4a03-b77c-397ab15365a8",
        "cursor": {
          "ref": "c6940454-a307-4fae-ae30-fe3a74acadb9",
          "length": 282,
          "cycles": 1,
          "position": 169,
          "iteration": 0,
          "httpRequestId": "5ea4d38a-f85a-43b2-8bf1-bec76d790e50"
        },
        "item": {
          "id": "312f5db0-1b77-4a03-b77c-397ab15365a8",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "c5515d21-732d-43da-84b1-c183d58b02fe",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 20,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3905141d-fdba-46ff-b89d-d42092daa1cf",
        "cursor": {
          "ref": "6d86b4f6-a582-4a5f-b156-29857a48bd2c",
          "length": 282,
          "cycles": 1,
          "position": 170,
          "iteration": 0,
          "httpRequestId": "2070dfa2-baed-4eb4-b920-697a23d7c6ef"
        },
        "item": {
          "id": "3905141d-fdba-46ff-b89d-d42092daa1cf",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "730437c8-88ab-4887-9edc-35a482eaaa94",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 22,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2601e774-aa46-4bf8-a6c7-82705f9b4799",
        "cursor": {
          "ref": "0818d2dd-0cb1-4855-b4c8-fc027890d0ce",
          "length": 282,
          "cycles": 1,
          "position": 171,
          "iteration": 0,
          "httpRequestId": "4393bf52-c9e4-467d-9c1a-275ad7c9287a"
        },
        "item": {
          "id": "2601e774-aa46-4bf8-a6c7-82705f9b4799",
          "name": "credentials_status:credentialStatus:item:purpose:missing"
        },
        "response": {
          "id": "baeb3a08-85af-4bb5-a85e-156764d0ca13",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 21,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "38544a40-6216-4001-a54d-12821b363303",
        "cursor": {
          "ref": "5d76289f-a555-43cb-80f0-fa9e117c839a",
          "length": 282,
          "cycles": 1,
          "position": 172,
          "iteration": 0,
          "httpRequestId": "26b5a8f7-d635-4ef9-ae39-9211052545f4"
        },
        "item": {
          "id": "38544a40-6216-4001-a54d-12821b363303",
          "name": "credentials_status:credentialStatus:item:purpose:array"
        },
        "response": {
          "id": "5ff40f5e-6bcf-49fc-ad05-d62743be99eb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 20,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "90956d9a-a2fd-4ffa-8e56-ffbeb4e95495",
        "cursor": {
          "ref": "05fce168-bad0-4fec-ba57-0fee838d1d4f",
          "length": 282,
          "cycles": 1,
          "position": 173,
          "iteration": 0,
          "httpRequestId": "a527e707-4cce-407b-a5c7-3cdc840c815f"
        },
        "item": {
          "id": "90956d9a-a2fd-4ffa-8e56-ffbeb4e95495",
          "name": "credentials_status:credentialStatus:item:purpose:boolean"
        },
        "response": {
          "id": "52901fb1-617f-44b4-bbe8-0ccfb2102081",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 20,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "58dd8d3a-a04f-488d-aee5-90302f064389",
        "cursor": {
          "ref": "33eafb99-1108-4597-9090-b488fff010fe",
          "length": 282,
          "cycles": 1,
          "position": 174,
          "iteration": 0,
          "httpRequestId": "f0cc4ee3-e889-4ef9-b160-152a1bb3b267"
        },
        "item": {
          "id": "58dd8d3a-a04f-488d-aee5-90302f064389",
          "name": "credentials_status:credentialStatus:item:purpose:integer"
        },
        "response": {
          "id": "892572b0-0f0f-40b0-9eca-52dce4e53f1f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "945fdfbc-e39f-4cdb-b018-357a84e672c8",
        "cursor": {
          "ref": "737d4e2d-b693-4c45-b030-83d106a21f42",
          "length": 282,
          "cycles": 1,
          "position": 175,
          "iteration": 0,
          "httpRequestId": "d7298f7e-95f0-4d82-a28a-c53dcc2dafe8"
        },
        "item": {
          "id": "945fdfbc-e39f-4cdb-b018-357a84e672c8",
          "name": "credentials_status:credentialStatus:item:purpose:null"
        },
        "response": {
          "id": "e4012b36-fef8-45ed-89b9-00cdbc81593c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e89b3fd7-e243-41a8-8b94-ab3168c40290",
        "cursor": {
          "ref": "e2b15d57-7a74-4fe5-881c-05b39c017ed7",
          "length": 282,
          "cycles": 1,
          "position": 176,
          "iteration": 0,
          "httpRequestId": "35f4adae-6e41-4e51-8e01-b8e4693cdc0e"
        },
        "item": {
          "id": "e89b3fd7-e243-41a8-8b94-ab3168c40290",
          "name": "credentials_status:credentialStatus:item:purpose:object"
        },
        "response": {
          "id": "07dc5d21-075b-4f24-9db5-8a3bc089c91e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 26,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "06ebf3e2-c0f0-4cad-b295-e4518c518a99",
        "cursor": {
          "ref": "d878c18a-c971-40c7-898d-2d28f1a23501",
          "length": 282,
          "cycles": 1,
          "position": 177,
          "iteration": 0,
          "httpRequestId": "4e3c1405-6280-4857-ac6d-0373bdeafc8d"
        },
        "item": {
          "id": "06ebf3e2-c0f0-4cad-b295-e4518c518a99",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "7244d6a7-60ee-47b3-b7b5-1c762265fa55",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 11,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:178)"
            }
          }
        ]
      },
      {
        "id": "484c7da8-cfd1-4a2c-8850-0b27a2ac3701",
        "cursor": {
          "ref": "e600c7da-d6a5-457c-b023-a17037486611",
          "length": 282,
          "cycles": 1,
          "position": 178,
          "iteration": 0,
          "httpRequestId": "d12c274e-548d-4b24-b838-dfaf5da31f2b"
        },
        "item": {
          "id": "484c7da8-cfd1-4a2c-8850-0b27a2ac3701",
          "name": "credentials_verify:vc:missing"
        },
        "response": {
          "id": "b86b13a8-7d38-47f5-997c-fb3844a397a6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8774367b-c1aa-4f9f-a700-f9f9fb7b5107",
        "cursor": {
          "ref": "b89a3d17-ab03-4e49-9d9e-9b8c09c765c7",
          "length": 282,
          "cycles": 1,
          "position": 179,
          "iteration": 0,
          "httpRequestId": "3180b8ae-b1b0-4574-ae08-4d0e4e66627e"
        },
        "item": {
          "id": "8774367b-c1aa-4f9f-a700-f9f9fb7b5107",
          "name": "credentials_verify:vc:string"
        },
        "response": {
          "id": "4767a579-c7c8-44e6-92d7-2061886fb878",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 20,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1ce4fda5-ddc5-4e36-bbfb-350c9e317f14",
        "cursor": {
          "ref": "210d83bc-7729-46e8-b7c2-f56696f6332c",
          "length": 282,
          "cycles": 1,
          "position": 180,
          "iteration": 0,
          "httpRequestId": "b391b08d-3cbe-4338-a460-ec87d39346f8"
        },
        "item": {
          "id": "1ce4fda5-ddc5-4e36-bbfb-350c9e317f14",
          "name": "credentials_verify:vc:null"
        },
        "response": {
          "id": "ef5d9e69-ea6b-4d90-ab10-355ad112efe0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 21,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8b017753-493b-417b-b6a5-f99fdbff4d56",
        "cursor": {
          "ref": "6eb5af68-8e83-42e5-8c4d-5eb0729f0c17",
          "length": 282,
          "cycles": 1,
          "position": 181,
          "iteration": 0,
          "httpRequestId": "baa03676-a3f3-4d13-861e-bda38cba6968"
        },
        "item": {
          "id": "8b017753-493b-417b-b6a5-f99fdbff4d56",
          "name": "credentials_verify:vc:integer"
        },
        "response": {
          "id": "8d50efc8-a709-484b-8b4a-3ee09e4ad2b2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 21,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "19b57ded-dbe7-4c82-97fb-638cf0b58a0c",
        "cursor": {
          "ref": "0b891e47-b6da-4a8b-bc41-afcc8a890c15",
          "length": 282,
          "cycles": 1,
          "position": 182,
          "iteration": 0,
          "httpRequestId": "7cec8aad-e9ae-4056-b3d0-fd31eb888f2e"
        },
        "item": {
          "id": "19b57ded-dbe7-4c82-97fb-638cf0b58a0c",
          "name": "credentials_verify:vc:boolean"
        },
        "response": {
          "id": "ee692de1-7127-4c93-96fc-f369dc75925e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 21,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "28363613-558b-4432-bdf8-e8ab7d94ced8",
        "cursor": {
          "ref": "7fc8befa-a979-4d7e-8c9d-5b82a5935b7c",
          "length": 282,
          "cycles": 1,
          "position": 183,
          "iteration": 0,
          "httpRequestId": "0a650a2a-1e73-437b-87b1-d7844c77b453"
        },
        "item": {
          "id": "28363613-558b-4432-bdf8-e8ab7d94ced8",
          "name": "credentials_verify:vc:array"
        },
        "response": {
          "id": "56289fcf-1f09-4bbe-8a5c-34354eb1e6ea",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 20,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "80e3ece2-8607-48bf-842a-a714f7ba486d",
        "cursor": {
          "ref": "b0aeafe8-64b2-45e5-90c8-7b82c576e264",
          "length": 282,
          "cycles": 1,
          "position": 184,
          "iteration": 0,
          "httpRequestId": "08733064-a3d6-401b-bc39-e9f29c47d7b3"
        },
        "item": {
          "id": "80e3ece2-8607-48bf-842a-a714f7ba486d",
          "name": "credentials_verify:vc:@context:missing"
        },
        "response": {
          "id": "0bf949ca-622b-4ada-913a-841fafa49a2d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 19,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "896b71c0-b939-4dbb-bd6b-0398dccb0be2",
        "cursor": {
          "ref": "abea2c9b-504c-4125-b891-2af8d37354a6",
          "length": 282,
          "cycles": 1,
          "position": 185,
          "iteration": 0,
          "httpRequestId": "27e9ee30-1086-48ff-9245-fa1c488e2942"
        },
        "item": {
          "id": "896b71c0-b939-4dbb-bd6b-0398dccb0be2",
          "name": "credentials_verify:vc:@context:boolean"
        },
        "response": {
          "id": "600fb6df-aeba-4f4b-b402-6a82386855f5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 20,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c870419e-0adb-4d9a-9d8a-08b4805cff6a",
        "cursor": {
          "ref": "da6f5dad-1b87-4ad9-901a-1bef1469a8d8",
          "length": 282,
          "cycles": 1,
          "position": 186,
          "iteration": 0,
          "httpRequestId": "caca1972-4f6e-4a66-88d4-f871dae0b99a"
        },
        "item": {
          "id": "c870419e-0adb-4d9a-9d8a-08b4805cff6a",
          "name": "credentials_verify:vc:@context:integer"
        },
        "response": {
          "id": "e68b9459-3023-4210-bf22-dd4ccc6b17ea",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 21,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5bb47f93-d097-46d9-87dc-b9eb12470575",
        "cursor": {
          "ref": "33889b69-7169-4753-85c7-aa73cdece086",
          "length": 282,
          "cycles": 1,
          "position": 187,
          "iteration": 0,
          "httpRequestId": "83afe8ca-f4d4-4a13-b565-5458f8ea6733"
        },
        "item": {
          "id": "5bb47f93-d097-46d9-87dc-b9eb12470575",
          "name": "credentials_verify:vc:@context:null"
        },
        "response": {
          "id": "18effc83-f2bb-48d4-b8f7-4e4985174b26",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 20,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2dc0c339-6b3f-427b-a688-4e76e88404d1",
        "cursor": {
          "ref": "fa3f6c34-3413-428c-b9c3-fafca52d8b1d",
          "length": 282,
          "cycles": 1,
          "position": 188,
          "iteration": 0,
          "httpRequestId": "9f58ff6b-fa10-4df9-8675-0658198722e6"
        },
        "item": {
          "id": "2dc0c339-6b3f-427b-a688-4e76e88404d1",
          "name": "credentials_verify:vc:@context:object"
        },
        "response": {
          "id": "6f5cce1c-568d-4c22-974a-2b9da9ea2f1d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d183b163-0cb2-42e6-a2a6-7410b98d4963",
        "cursor": {
          "ref": "7b08a70e-e351-4571-9344-99b0da28fcc5",
          "length": 282,
          "cycles": 1,
          "position": 189,
          "iteration": 0,
          "httpRequestId": "e66e421f-8a16-4d7d-bd88-6db6fc11b815"
        },
        "item": {
          "id": "d183b163-0cb2-42e6-a2a6-7410b98d4963",
          "name": "credentials_verify:vc:@context:string"
        },
        "response": {
          "id": "6ef88c66-50f0-4dae-88a6-3b270c6efc8b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 21,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2e3760f6-2d4e-4316-876d-9ef32ccd00c8",
        "cursor": {
          "ref": "dd5e9512-81e6-4890-9816-5112250cbbd9",
          "length": 282,
          "cycles": 1,
          "position": 190,
          "iteration": 0,
          "httpRequestId": "1ef96c5d-2547-4cc3-9bdf-de123d25807d"
        },
        "item": {
          "id": "2e3760f6-2d4e-4316-876d-9ef32ccd00c8",
          "name": "credentials_verify:vc:@context:item:array"
        },
        "response": {
          "id": "3b838c56-14c8-46c0-9b8e-11fb84b94aec",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 26,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "11d98cdd-0216-4c58-92b1-cf71f6ffc47c",
        "cursor": {
          "ref": "ab3d39f4-2a48-41c9-a6ab-0e70b6788e4b",
          "length": 282,
          "cycles": 1,
          "position": 191,
          "iteration": 0,
          "httpRequestId": "b175c107-1f56-45ff-9650-281783f645f6"
        },
        "item": {
          "id": "11d98cdd-0216-4c58-92b1-cf71f6ffc47c",
          "name": "credentials_verify:vc:@context:item:boolean"
        },
        "response": {
          "id": "6bed3a4f-3ba6-46bb-bed2-019f87e65b25",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "61fb0333-7e74-4389-a7f8-395e3def0525",
        "cursor": {
          "ref": "f7ec581b-69ad-4405-bfd3-a70bb409a943",
          "length": 282,
          "cycles": 1,
          "position": 192,
          "iteration": 0,
          "httpRequestId": "e5108566-cc4b-4dfb-b769-8189f435afcc"
        },
        "item": {
          "id": "61fb0333-7e74-4389-a7f8-395e3def0525",
          "name": "credentials_verify:vc:@context:item:integer"
        },
        "response": {
          "id": "2f446458-7737-443b-8606-5ea38e4bc6d1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 19,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "be1dab8e-d8ea-4f76-9b49-804d0e41ebef",
        "cursor": {
          "ref": "b0885fc9-5cfc-4745-83f7-36b999f9e707",
          "length": 282,
          "cycles": 1,
          "position": 193,
          "iteration": 0,
          "httpRequestId": "2aa01e50-93f6-482f-be3f-d312a25715f8"
        },
        "item": {
          "id": "be1dab8e-d8ea-4f76-9b49-804d0e41ebef",
          "name": "credentials_verify:vc:@context:item:null"
        },
        "response": {
          "id": "6cd97ab3-89cc-497f-bd6a-4c9218623240",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "873927aa-725c-4169-8bf8-63da02f27426",
        "cursor": {
          "ref": "e5b41a49-0f72-4b40-b91a-962c76e646ec",
          "length": 282,
          "cycles": 1,
          "position": 194,
          "iteration": 0,
          "httpRequestId": "1cccc987-deaf-4fb7-98d0-a984ac7160ca"
        },
        "item": {
          "id": "873927aa-725c-4169-8bf8-63da02f27426",
          "name": "credentials_verify:vc:@context:item:object"
        },
        "response": {
          "id": "575fdab3-64ce-47d5-9fb2-2063c55782c1",
          "status": "OK",
          "code": 200,
          "responseTime": 713,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:195)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:195)"
            }
          }
        ]
      },
      {
        "id": "4289cb81-9087-4819-a310-97b3c0a2392b",
        "cursor": {
          "ref": "56c1e82d-467f-47a0-ab2f-d22ab7e0ff76",
          "length": 282,
          "cycles": 1,
          "position": 195,
          "iteration": 0,
          "httpRequestId": "d3d2cff3-4960-4e84-8dd3-e171b3ba95eb"
        },
        "item": {
          "id": "4289cb81-9087-4819-a310-97b3c0a2392b",
          "name": "credentials_verify:vc:id:array"
        },
        "response": {
          "id": "2dd58cad-43ba-40d2-8cee-43fbc91c55a2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ad5b9e91-7e90-444a-9b3c-770e83bfc9cb",
        "cursor": {
          "ref": "365c1279-6d98-4b2d-8ad7-cd851b64c933",
          "length": 282,
          "cycles": 1,
          "position": 196,
          "iteration": 0,
          "httpRequestId": "0524e458-1d90-4f01-ab0d-79d32de3cbbe"
        },
        "item": {
          "id": "ad5b9e91-7e90-444a-9b3c-770e83bfc9cb",
          "name": "credentials_verify:vc:id:boolean"
        },
        "response": {
          "id": "7f49bfea-a0a9-4033-9b40-60e95f15c6f8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "14e37fef-c6d7-49b0-84bf-13b48de60a56",
        "cursor": {
          "ref": "d596e2ba-6b26-44f5-a4ac-80509f0f3af6",
          "length": 282,
          "cycles": 1,
          "position": 197,
          "iteration": 0,
          "httpRequestId": "6900a4f8-29ec-48f6-93e3-0e30f80784ce"
        },
        "item": {
          "id": "14e37fef-c6d7-49b0-84bf-13b48de60a56",
          "name": "credentials_verify:vc:id:integer"
        },
        "response": {
          "id": "e49eaefc-1460-4d9a-b3e8-f5001b9074ad",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 21,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "627e5858-e629-4d28-8543-8dbeeb7e4ec7",
        "cursor": {
          "ref": "859ee00c-fd48-4840-8b2e-0875dfe3f715",
          "length": 282,
          "cycles": 1,
          "position": 198,
          "iteration": 0,
          "httpRequestId": "55415f56-7c92-4dcf-ba8a-39ec5c4dd5a1"
        },
        "item": {
          "id": "627e5858-e629-4d28-8543-8dbeeb7e4ec7",
          "name": "credentials_verify:vc:id:null"
        },
        "response": {
          "id": "f634c2f0-ef67-46f1-8039-3e9ec7aee90f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 21,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9d603d38-389b-4432-82ca-b36eafa55f22",
        "cursor": {
          "ref": "f3f0be55-8ae7-470d-8b8f-bf3c70845c16",
          "length": 282,
          "cycles": 1,
          "position": 199,
          "iteration": 0,
          "httpRequestId": "c04015f0-a24c-4070-8791-74102c22caea"
        },
        "item": {
          "id": "9d603d38-389b-4432-82ca-b36eafa55f22",
          "name": "credentials_verify:vc:id:object"
        },
        "response": {
          "id": "3fbb2a20-deca-4b4b-bf05-13b0855eb0ad",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 22,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a2e0fc0e-8784-4fd5-8a81-bc9231193c6e",
        "cursor": {
          "ref": "25210c98-8691-4594-bc83-5c966632d062",
          "length": 282,
          "cycles": 1,
          "position": 200,
          "iteration": 0,
          "httpRequestId": "1b1f5313-ae9a-4363-9bc2-0d77709ec6d6"
        },
        "item": {
          "id": "a2e0fc0e-8784-4fd5-8a81-bc9231193c6e",
          "name": "credentials_verify:vc:type:missing"
        },
        "response": {
          "id": "3bc68cf7-fdf9-4409-9127-db91b574738c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 20,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "78cd9cc2-f81d-4c24-9e76-555e422a1b4f",
        "cursor": {
          "ref": "583db72c-ac78-4e60-8f65-8b486e82ebcc",
          "length": 282,
          "cycles": 1,
          "position": 201,
          "iteration": 0,
          "httpRequestId": "f759f906-ea01-42b8-b8bf-4375b554fccd"
        },
        "item": {
          "id": "78cd9cc2-f81d-4c24-9e76-555e422a1b4f",
          "name": "credentials_verify:vc:type:boolean"
        },
        "response": {
          "id": "c0f6971e-4afa-4f41-a910-07e500a7e11e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 21,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "54d496f3-b901-47c1-9f03-c365931f6b1b",
        "cursor": {
          "ref": "eec34c06-5920-4041-a4fd-a729941e7d66",
          "length": 282,
          "cycles": 1,
          "position": 202,
          "iteration": 0,
          "httpRequestId": "1c47d48d-5fbd-4431-96de-11edd23e591b"
        },
        "item": {
          "id": "54d496f3-b901-47c1-9f03-c365931f6b1b",
          "name": "credentials_verify:vc:type:integer"
        },
        "response": {
          "id": "8a627f0e-4765-4827-8257-5b7cf942653e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f125fd32-013f-4423-b19b-5d935dc6173c",
        "cursor": {
          "ref": "a50d733b-e216-421d-9084-7f82b646707d",
          "length": 282,
          "cycles": 1,
          "position": 203,
          "iteration": 0,
          "httpRequestId": "7596ef4a-fc39-412e-8f10-43db66436237"
        },
        "item": {
          "id": "f125fd32-013f-4423-b19b-5d935dc6173c",
          "name": "credentials_verify:vc:type:null"
        },
        "response": {
          "id": "08ffc362-62f6-4642-a941-71e320735a8b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 20,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ead5e93f-9b42-48ed-9473-0f5264b01716",
        "cursor": {
          "ref": "4ba6c727-32e4-4e85-9070-cc7453dd32c7",
          "length": 282,
          "cycles": 1,
          "position": 204,
          "iteration": 0,
          "httpRequestId": "9dd0f7e0-26a8-461e-a202-d5ab63ef5c35"
        },
        "item": {
          "id": "ead5e93f-9b42-48ed-9473-0f5264b01716",
          "name": "credentials_verify:vc:type:object"
        },
        "response": {
          "id": "a9ad3d0d-1ae4-4da0-b459-d6d7b82fc1fa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 20,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4f126d16-1d34-4cfb-a27b-dc2192e02c97",
        "cursor": {
          "ref": "0a80a290-ba80-434f-bff5-23d2cac25cca",
          "length": 282,
          "cycles": 1,
          "position": 205,
          "iteration": 0,
          "httpRequestId": "ab2c3044-9eb6-4c65-81f2-5df7634b2352"
        },
        "item": {
          "id": "4f126d16-1d34-4cfb-a27b-dc2192e02c97",
          "name": "credentials_verify:vc:type:string"
        },
        "response": {
          "id": "0aa31f7d-3e47-4f8d-95e8-2fbffbd7e989",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 20,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "137eb181-4e8f-4403-87a6-735a21a0a651",
        "cursor": {
          "ref": "65128c20-6a10-4030-b7cd-921f7729a8cf",
          "length": 282,
          "cycles": 1,
          "position": 206,
          "iteration": 0,
          "httpRequestId": "cbecfde7-f1ce-4f97-9fda-6a453a8b7a61"
        },
        "item": {
          "id": "137eb181-4e8f-4403-87a6-735a21a0a651",
          "name": "credentials_verify:vc:type:item:missing"
        },
        "response": {
          "id": "00f38632-2945-47a4-960a-27977767bdd7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 19,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c2ef3ad5-5636-45fc-8e68-a5804aad6b54",
        "cursor": {
          "ref": "f27ddf01-1ee3-43ed-ba19-7edd747e2c26",
          "length": 282,
          "cycles": 1,
          "position": 207,
          "iteration": 0,
          "httpRequestId": "269db0fa-baad-461d-b944-933422f96ec6"
        },
        "item": {
          "id": "c2ef3ad5-5636-45fc-8e68-a5804aad6b54",
          "name": "credentials_verify:vc:type:item:array"
        },
        "response": {
          "id": "50337a9a-971e-4882-80ee-3cf0ed19efd6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 58,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3d6fd065-7b98-4ca0-b01f-4d0d82cded14",
        "cursor": {
          "ref": "7348cef3-3d9c-4243-b15c-be242cba28c9",
          "length": 282,
          "cycles": 1,
          "position": 208,
          "iteration": 0,
          "httpRequestId": "a80f37b9-a2cb-4213-a65f-4a03af3fe5d2"
        },
        "item": {
          "id": "3d6fd065-7b98-4ca0-b01f-4d0d82cded14",
          "name": "credentials_verify:vc:type:item:boolean"
        },
        "response": {
          "id": "527b4b23-ff30-4a91-b7b8-907b43001ec0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 58,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "60e0a53f-4c96-47a8-a7df-6ac193e12f22",
        "cursor": {
          "ref": "f367207c-ec56-4aca-bcda-8165e203ad8a",
          "length": 282,
          "cycles": 1,
          "position": 209,
          "iteration": 0,
          "httpRequestId": "47a2011a-3518-4e6c-9edc-217bca1b75b0"
        },
        "item": {
          "id": "60e0a53f-4c96-47a8-a7df-6ac193e12f22",
          "name": "credentials_verify:vc:type:item:integer"
        },
        "response": {
          "id": "77ce2e4a-95d2-4f87-b902-fb8b38e1c563",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f982b04e-f392-4d6e-8acb-72d8a8da69d2",
        "cursor": {
          "ref": "fcf6ea4a-788f-4051-960e-00510cebaaf6",
          "length": 282,
          "cycles": 1,
          "position": 210,
          "iteration": 0,
          "httpRequestId": "e89eac6d-8344-4e52-a70c-470aa5d0496c"
        },
        "item": {
          "id": "f982b04e-f392-4d6e-8acb-72d8a8da69d2",
          "name": "credentials_verify:vc:type:item:null"
        },
        "response": {
          "id": "bc38aeaa-57b7-439b-8386-c95f0db6273c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5a55bf5a-d433-464f-b54d-8f7f03b3e4b5",
        "cursor": {
          "ref": "17370bec-8d85-458d-8ac8-5720632de627",
          "length": 282,
          "cycles": 1,
          "position": 211,
          "iteration": 0,
          "httpRequestId": "15e99067-24b8-46d4-bff4-8399b3ce9176"
        },
        "item": {
          "id": "5a55bf5a-d433-464f-b54d-8f7f03b3e4b5",
          "name": "credentials_verify:vc:type:item:object"
        },
        "response": {
          "id": "ca810082-dabe-4d5a-935a-bce52085b112",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "11a8d633-9551-410a-b9f0-fa4495772888",
        "cursor": {
          "ref": "f8d88eb1-98de-4a59-aa72-85b1aa039712",
          "length": 282,
          "cycles": 1,
          "position": 212,
          "iteration": 0,
          "httpRequestId": "019f163c-3486-4faf-87e2-df012ec610d4"
        },
        "item": {
          "id": "11a8d633-9551-410a-b9f0-fa4495772888",
          "name": "credentials_verify:vc:issuer:missing"
        },
        "response": {
          "id": "055c0dc6-37b3-47c6-b1c6-45ba5592901d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 22,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3fe0bb34-3b65-4682-a5ee-39bb69330726",
        "cursor": {
          "ref": "e0cf3399-7e15-4a13-bda9-68b1e7400408",
          "length": 282,
          "cycles": 1,
          "position": 213,
          "iteration": 0,
          "httpRequestId": "6978dc9c-ba25-444a-84b7-9d10c6cfbb8a"
        },
        "item": {
          "id": "3fe0bb34-3b65-4682-a5ee-39bb69330726",
          "name": "credentials_verify:vc:issuer:array"
        },
        "response": {
          "id": "9dd391df-99fd-4d31-89c8-c9d4539f5f66",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 21,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "173598a1-bed4-45b6-9c1d-627c98daf0af",
        "cursor": {
          "ref": "21359fa3-5e75-430d-8040-c364a099a5db",
          "length": 282,
          "cycles": 1,
          "position": 214,
          "iteration": 0,
          "httpRequestId": "fd26efe1-8a95-4a65-8d5b-682cd37a51d9"
        },
        "item": {
          "id": "173598a1-bed4-45b6-9c1d-627c98daf0af",
          "name": "credentials_verify:vc:issuer:boolean"
        },
        "response": {
          "id": "b62816ff-17fe-463d-8786-21488d5185b3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 21,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c869697d-3db2-4c1b-9787-f14e6443cffb",
        "cursor": {
          "ref": "8557419a-44b5-43eb-a1e0-b8d6f6ea99d7",
          "length": 282,
          "cycles": 1,
          "position": 215,
          "iteration": 0,
          "httpRequestId": "1e32cb1f-2541-42bd-afb1-c8b1780acd68"
        },
        "item": {
          "id": "c869697d-3db2-4c1b-9787-f14e6443cffb",
          "name": "credentials_verify:vc:issuer:integer"
        },
        "response": {
          "id": "e74b2c71-8c64-458c-831c-18b6ca669443",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 21,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c196e4bb-bdfe-4158-88cc-ea0d79313984",
        "cursor": {
          "ref": "20ce5ee4-9687-4c58-93d3-11a9e00aa48f",
          "length": 282,
          "cycles": 1,
          "position": 216,
          "iteration": 0,
          "httpRequestId": "096490f6-9762-4914-9cea-2b25b022a1b1"
        },
        "item": {
          "id": "c196e4bb-bdfe-4158-88cc-ea0d79313984",
          "name": "credentials_verify:vc:issuer:null"
        },
        "response": {
          "id": "9aed3778-f669-4e09-9b73-88b0b0244d7b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 25,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "af45feac-bd10-4f3b-b8f0-8769efb95798",
        "cursor": {
          "ref": "d8f36085-585e-479a-bf65-a7d0a4c36ba0",
          "length": 282,
          "cycles": 1,
          "position": 217,
          "iteration": 0,
          "httpRequestId": "c8f0a133-6f89-4e5d-bae1-bc4c85ec8fd3"
        },
        "item": {
          "id": "af45feac-bd10-4f3b-b8f0-8769efb95798",
          "name": "credentials_verify:vc:issuer:id:missing"
        },
        "response": {
          "id": "fdd0f905-9556-46da-adf3-557868cf72e9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 24,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "602baf3f-3087-4b47-8a99-57f2a0b0123a",
        "cursor": {
          "ref": "694f0dc5-543e-4fb5-b592-7d4cf061adb5",
          "length": 282,
          "cycles": 1,
          "position": 218,
          "iteration": 0,
          "httpRequestId": "4afa4bd7-1b29-4cda-a162-9158a95f1b23"
        },
        "item": {
          "id": "602baf3f-3087-4b47-8a99-57f2a0b0123a",
          "name": "credentials_verify:vc:issuer:id:array"
        },
        "response": {
          "id": "a11e1627-d222-4ec5-9828-dd337ab6242e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 23,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ab9dac75-190f-491a-bbc5-f34125d7141f",
        "cursor": {
          "ref": "59025045-8e8e-40b8-825f-0d4a8ba40455",
          "length": 282,
          "cycles": 1,
          "position": 219,
          "iteration": 0,
          "httpRequestId": "ce3a48e4-6bf2-4538-ba77-cb3849a293d2"
        },
        "item": {
          "id": "ab9dac75-190f-491a-bbc5-f34125d7141f",
          "name": "credentials_verify:vc:issuer:id:boolean"
        },
        "response": {
          "id": "ea7ba811-375a-461d-9d42-c372ad417fb4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 26,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f22249f2-6aa1-4e6b-af09-af60386641eb",
        "cursor": {
          "ref": "68c72773-5d53-47f1-9744-97b3040c9a86",
          "length": 282,
          "cycles": 1,
          "position": 220,
          "iteration": 0,
          "httpRequestId": "3bbce352-28f3-49b6-8842-a00151d30f53"
        },
        "item": {
          "id": "f22249f2-6aa1-4e6b-af09-af60386641eb",
          "name": "credentials_verify:vc:issuer:id:integer"
        },
        "response": {
          "id": "a26ec230-243d-4a87-89cb-73295995ca71",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 25,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "37272416-1965-470e-b121-e05138af9a01",
        "cursor": {
          "ref": "75f935ea-fe6c-480e-b07d-223f2ed3bf37",
          "length": 282,
          "cycles": 1,
          "position": 221,
          "iteration": 0,
          "httpRequestId": "1dae965b-c9f1-4790-941f-372f1d515568"
        },
        "item": {
          "id": "37272416-1965-470e-b121-e05138af9a01",
          "name": "credentials_verify:vc:issuer:id:null"
        },
        "response": {
          "id": "97e133bd-8d56-465f-ac4a-0d439001d532",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 20,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1a39e39f-fb5c-44af-8c61-4ce8b5c1c715",
        "cursor": {
          "ref": "a313c89e-65e2-412d-a755-87270263dd48",
          "length": 282,
          "cycles": 1,
          "position": 222,
          "iteration": 0,
          "httpRequestId": "f126a7c5-6423-4e35-8aa4-a4e28d8ad002"
        },
        "item": {
          "id": "1a39e39f-fb5c-44af-8c61-4ce8b5c1c715",
          "name": "credentials_verify:vc:issuer:id:object"
        },
        "response": {
          "id": "bb61b4ca-3bec-48e4-8c84-9275f5ad7426",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 19,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "003f3d1d-2347-4af2-8242-f0802db21b22",
        "cursor": {
          "ref": "df8f24ae-377a-450e-be0e-a42917ac79eb",
          "length": 282,
          "cycles": 1,
          "position": 223,
          "iteration": 0,
          "httpRequestId": "995cca4e-af71-45f2-a75a-4de95e5588fe"
        },
        "item": {
          "id": "003f3d1d-2347-4af2-8242-f0802db21b22",
          "name": "credentials_verify:vc:issuanceDate:missing"
        },
        "response": {
          "id": "235b371b-46a3-4186-b0c5-bf3a51f556ab",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 20,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c199158a-7898-409e-a4c3-b26637358caf",
        "cursor": {
          "ref": "3a2a3707-583a-433d-a4eb-bf9f7e274053",
          "length": 282,
          "cycles": 1,
          "position": 224,
          "iteration": 0,
          "httpRequestId": "d581c1a6-0586-4a52-8cb9-541c58d9d882"
        },
        "item": {
          "id": "c199158a-7898-409e-a4c3-b26637358caf",
          "name": "credentials_verify:vc:issuanceDate:array"
        },
        "response": {
          "id": "1350c73c-4d07-4e7f-b1f3-4139bdeb1b9c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 21,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d61c93c9-0a44-4893-9840-c6143098f535",
        "cursor": {
          "ref": "594eb1d6-c6ca-4ed0-9737-9d8b65ccc810",
          "length": 282,
          "cycles": 1,
          "position": 225,
          "iteration": 0,
          "httpRequestId": "1984bf74-fafb-4e97-b9e3-914d26d73e23"
        },
        "item": {
          "id": "d61c93c9-0a44-4893-9840-c6143098f535",
          "name": "credentials_verify:vc:issuanceDate:boolean"
        },
        "response": {
          "id": "7dbddcb8-12ea-44e8-bf4a-61950d6ac3e8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 20,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a1c661d1-ced4-4aca-a4ed-b8c0e277b383",
        "cursor": {
          "ref": "1d7cbd1e-aa97-4fb3-ad69-567803b5f360",
          "length": 282,
          "cycles": 1,
          "position": 226,
          "iteration": 0,
          "httpRequestId": "35dd1152-d438-4562-933b-f6573c5025e4"
        },
        "item": {
          "id": "a1c661d1-ced4-4aca-a4ed-b8c0e277b383",
          "name": "credentials_verify:vc:issuanceDate:integer"
        },
        "response": {
          "id": "111d2d94-4458-4efb-9ec2-58c7797eaff6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 24,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "11304e20-49dc-4dd4-83d5-7592fdd32ab9",
        "cursor": {
          "ref": "9589e999-7a49-49d9-9e6f-0f70801845b4",
          "length": 282,
          "cycles": 1,
          "position": 227,
          "iteration": 0,
          "httpRequestId": "14b39dd3-76b4-4f15-a65e-e8d54c19d9cd"
        },
        "item": {
          "id": "11304e20-49dc-4dd4-83d5-7592fdd32ab9",
          "name": "credentials_verify:vc:issuanceDate:null"
        },
        "response": {
          "id": "279b2586-2b4b-4c59-b6ad-c11b26e79bf6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bb092f86-a299-48a0-8250-d374214ce814",
        "cursor": {
          "ref": "6f1cb9bc-b20c-4ab3-bd9c-c3e11852af51",
          "length": 282,
          "cycles": 1,
          "position": 228,
          "iteration": 0,
          "httpRequestId": "36f6f129-3bf1-4ff3-a039-a0c719d48a89"
        },
        "item": {
          "id": "bb092f86-a299-48a0-8250-d374214ce814",
          "name": "credentials_verify:vc:issuanceDate:object"
        },
        "response": {
          "id": "d4499601-bed4-4787-b4ae-8193141ec379",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c01693f9-222d-49e5-9c4d-c3ffcd706c2f",
        "cursor": {
          "ref": "e96b5dbd-f3a4-4685-8329-f154e7961bbc",
          "length": 282,
          "cycles": 1,
          "position": 229,
          "iteration": 0,
          "httpRequestId": "e0e711b7-e0b6-4ab5-86da-cf57fba220b7"
        },
        "item": {
          "id": "c01693f9-222d-49e5-9c4d-c3ffcd706c2f",
          "name": "credentials_verify:vc:issuanceDate:string"
        },
        "response": {
          "id": "eee8e3ce-bfd1-4a66-94e7-f6104dae44ea",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 25,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "152f7676-8171-4ab9-b579-94367a87db80",
        "cursor": {
          "ref": "cbaf1157-42d2-49e1-8a89-a049d4755fd1",
          "length": 282,
          "cycles": 1,
          "position": 230,
          "iteration": 0,
          "httpRequestId": "198be2ae-86c8-4838-b30d-85c6932a5ed9"
        },
        "item": {
          "id": "152f7676-8171-4ab9-b579-94367a87db80",
          "name": "credentials_verify:vc:credentialSubject:missing"
        },
        "response": {
          "id": "61a7d92a-544d-4c59-9618-09e7baff1a14",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 21,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f78bc0f2-b0a6-44c1-90a2-c14a157431b5",
        "cursor": {
          "ref": "63126ae6-4093-452c-9a73-7fccea10c721",
          "length": 282,
          "cycles": 1,
          "position": 231,
          "iteration": 0,
          "httpRequestId": "aef15453-a218-468d-ad2d-133441b15e7d"
        },
        "item": {
          "id": "f78bc0f2-b0a6-44c1-90a2-c14a157431b5",
          "name": "credentials_verify:vc:credentialSubject:array"
        },
        "response": {
          "id": "2ddaa778-3873-4548-8404-5981aed9517c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 21,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5024fee6-3538-462c-9f1f-e0a67c619af7",
        "cursor": {
          "ref": "2aef6036-6f8b-49ed-a1ae-4420e47514a2",
          "length": 282,
          "cycles": 1,
          "position": 232,
          "iteration": 0,
          "httpRequestId": "f8feb078-5196-476d-8d78-d1fa8791b1ca"
        },
        "item": {
          "id": "5024fee6-3538-462c-9f1f-e0a67c619af7",
          "name": "credentials_verify:vc:credentialSubject:boolean"
        },
        "response": {
          "id": "5288f64f-e822-4d8f-983b-5dce5e332ab8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 22,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "367df5a8-e850-473e-b753-77c7e1bd4f63",
        "cursor": {
          "ref": "1aafb1b9-929b-4fa3-8ed8-03bb0e9fdd30",
          "length": 282,
          "cycles": 1,
          "position": 233,
          "iteration": 0,
          "httpRequestId": "e36f6087-e9fe-44ed-a46c-39c587c5924a"
        },
        "item": {
          "id": "367df5a8-e850-473e-b753-77c7e1bd4f63",
          "name": "credentials_verify:vc:credentialSubject:integer"
        },
        "response": {
          "id": "b96cd7d8-336e-4863-9fef-12835e1ae1ae",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 26,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "27f865b7-4e0d-4963-8671-1cb981dde519",
        "cursor": {
          "ref": "d220209f-71d8-412f-8661-cbe41ac783a7",
          "length": 282,
          "cycles": 1,
          "position": 234,
          "iteration": 0,
          "httpRequestId": "9462c2d7-d38e-491c-ab89-afdecac23b20"
        },
        "item": {
          "id": "27f865b7-4e0d-4963-8671-1cb981dde519",
          "name": "credentials_verify:vc:credentialSubject:null"
        },
        "response": {
          "id": "ca96e7b8-cb37-4b22-ac6c-678560e52950",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b9c63277-44c4-4059-a0be-4a610bb5f411",
        "cursor": {
          "ref": "92ada6da-d820-4b02-95d3-edb8e184ea8b",
          "length": 282,
          "cycles": 1,
          "position": 235,
          "iteration": 0,
          "httpRequestId": "d9ed1c39-8ce6-4e5b-a574-1177bea362dd"
        },
        "item": {
          "id": "b9c63277-44c4-4059-a0be-4a610bb5f411",
          "name": "credentials_verify:vc:credentialSubject:string"
        },
        "response": {
          "id": "e88a9f2a-a950-412c-849e-ad28547c36e0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cdbae07c-9c99-4ff6-950e-e5c78b21d7e8",
        "cursor": {
          "ref": "4ad363ad-d97e-4394-ab95-d6328c454c16",
          "length": 282,
          "cycles": 1,
          "position": 236,
          "iteration": 0,
          "httpRequestId": "0afb5257-bea7-4acd-beef-e408566fa519"
        },
        "item": {
          "id": "cdbae07c-9c99-4ff6-950e-e5c78b21d7e8",
          "name": "credentials_verify:vc:credentialSubject:id:array"
        },
        "response": {
          "id": "7fae2397-9c35-4deb-978b-a09972ee28a3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 20,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "880abd5c-164b-4238-a3a1-2e6dd7eb3e9f",
        "cursor": {
          "ref": "b911e39d-6448-4319-a3fe-c8c405f318e9",
          "length": 282,
          "cycles": 1,
          "position": 237,
          "iteration": 0,
          "httpRequestId": "e55e48da-f9e1-471f-b52b-5f46dd3c76b6"
        },
        "item": {
          "id": "880abd5c-164b-4238-a3a1-2e6dd7eb3e9f",
          "name": "credentials_verify:vc:credentialSubject:id:boolean"
        },
        "response": {
          "id": "ec587fa4-4954-403a-a2aa-9b052a3a358d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 21,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "61f8e5e8-950d-4b91-b40d-1a8b06601bd5",
        "cursor": {
          "ref": "3cd643c9-6487-4acb-af62-a286afe20acb",
          "length": 282,
          "cycles": 1,
          "position": 238,
          "iteration": 0,
          "httpRequestId": "3bc43273-a64e-4ad2-8beb-65e6f13d2ac2"
        },
        "item": {
          "id": "61f8e5e8-950d-4b91-b40d-1a8b06601bd5",
          "name": "credentials_verify:vc:credentialSubject:id:integer"
        },
        "response": {
          "id": "12f5080d-6ccd-4e65-8c9d-3a30af0ff303",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 26,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6b00be88-cede-4c3a-a235-dc95b82fcc68",
        "cursor": {
          "ref": "7ca70267-b16f-49cf-a50c-c1b07c00aecf",
          "length": 282,
          "cycles": 1,
          "position": 239,
          "iteration": 0,
          "httpRequestId": "c8f615f1-07f0-43bd-9939-31b1bd04e370"
        },
        "item": {
          "id": "6b00be88-cede-4c3a-a235-dc95b82fcc68",
          "name": "credentials_verify:vc:credentialSubject:id:null"
        },
        "response": {
          "id": "f583e083-fe95-4313-a760-81c1af2fcfb7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "70f4baac-b7a2-406e-9a0b-ecc1e133ae88",
        "cursor": {
          "ref": "74832571-53bc-400a-a706-ca41e3f78c1d",
          "length": 282,
          "cycles": 1,
          "position": 240,
          "iteration": 0,
          "httpRequestId": "92b8804e-6cd1-4e87-95c0-be855ad97027"
        },
        "item": {
          "id": "70f4baac-b7a2-406e-9a0b-ecc1e133ae88",
          "name": "credentials_verify:vc:credentialSubject:id:object"
        },
        "response": {
          "id": "5df6536d-f50b-450e-b054-d52d0b3e69a2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 21,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "77c1bf43-895c-4d17-a727-0c967ae086fe",
        "cursor": {
          "ref": "1842bfed-4dfd-47bb-86eb-bdec59817656",
          "length": 282,
          "cycles": 1,
          "position": 241,
          "iteration": 0,
          "httpRequestId": "e1016dec-1554-480b-a6bd-7fe184947251"
        },
        "item": {
          "id": "77c1bf43-895c-4d17-a727-0c967ae086fe",
          "name": "credentials_verify:proof:missing"
        },
        "response": {
          "id": "598b32d4-8a84-4398-8b8e-bd1cc3c898e9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fc4b2a25-c9df-4426-b7c6-7378286b420c",
        "cursor": {
          "ref": "a5f5da2e-2b71-45b6-8034-59e54cceeeba",
          "length": 282,
          "cycles": 1,
          "position": 242,
          "iteration": 0,
          "httpRequestId": "780b4aff-27be-4156-bbd7-795223640a84"
        },
        "item": {
          "id": "fc4b2a25-c9df-4426-b7c6-7378286b420c",
          "name": "credentials_verify:proof:array"
        },
        "response": {
          "id": "b11172ab-1599-4339-8966-4ee49a52e8b4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "504a5c89-33b1-4871-b20b-4cb2b9519d20",
        "cursor": {
          "ref": "fc6b1d74-ec4d-4be9-b551-194e9b440f12",
          "length": 282,
          "cycles": 1,
          "position": 243,
          "iteration": 0,
          "httpRequestId": "745ca713-1db6-4a1f-962d-58af5ce945f2"
        },
        "item": {
          "id": "504a5c89-33b1-4871-b20b-4cb2b9519d20",
          "name": "credentials_verify:proof:boolean"
        },
        "response": {
          "id": "7e42ee28-1b1d-41bf-8dc8-8ec983925ddf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 23,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b5478113-a2cf-48c7-91ca-d12d30fff492",
        "cursor": {
          "ref": "06b581f0-ddba-4a78-aa7a-9b6b008a2260",
          "length": 282,
          "cycles": 1,
          "position": 244,
          "iteration": 0,
          "httpRequestId": "dbf8c813-8428-49ec-8ced-f06b334aff06"
        },
        "item": {
          "id": "b5478113-a2cf-48c7-91ca-d12d30fff492",
          "name": "credentials_verify:proof:integer"
        },
        "response": {
          "id": "c93a2fe6-0416-498d-8986-460582b8e990",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 23,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8e4520e9-783d-4bd8-9539-3c5ec45f6d2a",
        "cursor": {
          "ref": "93635892-0ee3-47a6-9f07-aa6012d60429",
          "length": 282,
          "cycles": 1,
          "position": 245,
          "iteration": 0,
          "httpRequestId": "7d43412d-8796-4d26-8612-f2f4bc83474f"
        },
        "item": {
          "id": "8e4520e9-783d-4bd8-9539-3c5ec45f6d2a",
          "name": "credentials_verify:proof:null"
        },
        "response": {
          "id": "94c31176-ba88-4691-9d2c-a13ca673d919",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 20,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c1ff9be4-52b4-4ffd-8871-372bfc67b00c",
        "cursor": {
          "ref": "b3aa81ce-b40f-4f51-a52d-61f73eb74ac1",
          "length": 282,
          "cycles": 1,
          "position": 246,
          "iteration": 0,
          "httpRequestId": "04cff141-fd53-45e3-a363-74ee8d9e6b0d"
        },
        "item": {
          "id": "c1ff9be4-52b4-4ffd-8871-372bfc67b00c",
          "name": "credentials_verify:proof:string"
        },
        "response": {
          "id": "02cc61f9-b759-4e5d-99a0-32dc6384cdde",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 22,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3dd4c1a8-387f-40e4-b60c-2e054f6ab7af",
        "cursor": {
          "ref": "530fb055-8af8-4462-a1b0-368b836c8599",
          "length": 282,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "e9c54d5a-bc49-4722-b8ad-f00d3cb3e3f0"
        },
        "item": {
          "id": "3dd4c1a8-387f-40e4-b60c-2e054f6ab7af",
          "name": "credentials_verify:proof:type:missing"
        },
        "response": {
          "id": "04f29692-f83f-4e2e-91e7-d4d1de8b34d3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 23,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "85172bf1-425d-4be7-a327-804d0accb816",
        "cursor": {
          "ref": "3e0bd085-bf97-4103-8005-3d4de9654ad9",
          "length": 282,
          "cycles": 1,
          "position": 248,
          "iteration": 0,
          "httpRequestId": "d3752373-920a-42a2-b143-97461a48e07c"
        },
        "item": {
          "id": "85172bf1-425d-4be7-a327-804d0accb816",
          "name": "credentials_verify:proof:type:array"
        },
        "response": {
          "id": "55a4e0ce-0a49-4382-a8ec-7ed378e1a13e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7b978ee2-5971-4634-85f3-1e63334bff8c",
        "cursor": {
          "ref": "68ea6d8b-d5a7-41e3-847e-8104c6bbb4e0",
          "length": 282,
          "cycles": 1,
          "position": 249,
          "iteration": 0,
          "httpRequestId": "6172c462-a252-433f-af50-f6bf877a212b"
        },
        "item": {
          "id": "7b978ee2-5971-4634-85f3-1e63334bff8c",
          "name": "credentials_verify:proof:type:boolean"
        },
        "response": {
          "id": "8cf9ffba-e4cb-46a2-b606-4bfe14b0c889",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 20,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9650d2c4-1fea-49a9-a49c-ccee1017b4c5",
        "cursor": {
          "ref": "e5e2611d-e11e-4c20-97e7-0686333d705f",
          "length": 282,
          "cycles": 1,
          "position": 250,
          "iteration": 0,
          "httpRequestId": "ecb2faf2-3290-47ed-8e86-4dff710d8b42"
        },
        "item": {
          "id": "9650d2c4-1fea-49a9-a49c-ccee1017b4c5",
          "name": "credentials_verify:proof:type:integer"
        },
        "response": {
          "id": "999dd61e-8b56-486d-8481-2f9a65b21943",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 23,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b4ae632d-4575-4fa5-a723-cc214cca797b",
        "cursor": {
          "ref": "c44d44e7-bf53-4a1c-8df6-9d32c8ec6825",
          "length": 282,
          "cycles": 1,
          "position": 251,
          "iteration": 0,
          "httpRequestId": "4e18bd50-3493-4c69-a81d-2c76e2da0f4e"
        },
        "item": {
          "id": "b4ae632d-4575-4fa5-a723-cc214cca797b",
          "name": "credentials_verify:proof:type:null"
        },
        "response": {
          "id": "8c417529-4d25-4e5c-b317-cdfd9965f787",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 21,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f32c0f93-6170-4e0e-8e9f-20de80065a6d",
        "cursor": {
          "ref": "f431fd93-3075-496d-8fe5-e91d0ef6604c",
          "length": 282,
          "cycles": 1,
          "position": 252,
          "iteration": 0,
          "httpRequestId": "4b888fc8-56e5-4f8c-991d-9cac0c56a54e"
        },
        "item": {
          "id": "f32c0f93-6170-4e0e-8e9f-20de80065a6d",
          "name": "credentials_verify:proof:type:object"
        },
        "response": {
          "id": "3f385f86-eb71-4953-8991-f0e2da8eb48e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 21,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8285ef92-bc82-4b8b-9e69-3907401728b3",
        "cursor": {
          "ref": "c000a847-fdf4-4040-9a4e-aec8582abfc0",
          "length": 282,
          "cycles": 1,
          "position": 253,
          "iteration": 0,
          "httpRequestId": "171da097-208e-415e-bfd7-e394a78f8c1f"
        },
        "item": {
          "id": "8285ef92-bc82-4b8b-9e69-3907401728b3",
          "name": "credentials_verify:proof:type:string"
        },
        "response": {
          "id": "c5a3b96a-4025-4ee2-ad52-ac9f56aecb96",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 22,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d4614230-0fa7-495e-8f3a-8e22ae0fb10d",
        "cursor": {
          "ref": "5601cc35-d3bf-4ffc-b589-0e87998a8773",
          "length": 282,
          "cycles": 1,
          "position": 254,
          "iteration": 0,
          "httpRequestId": "81e70f1d-552c-46ee-b126-bfddcaa963bd"
        },
        "item": {
          "id": "d4614230-0fa7-495e-8f3a-8e22ae0fb10d",
          "name": "credentials_verify:proof:created:array"
        },
        "response": {
          "id": "a8061de2-8956-4672-b55e-0afa37466aaf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 22,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5aa89ffd-f6e8-40ee-8da0-90a442d66be9",
        "cursor": {
          "ref": "18f9b82c-b6f4-45b1-a187-48aa6b9d89f7",
          "length": 282,
          "cycles": 1,
          "position": 255,
          "iteration": 0,
          "httpRequestId": "427c0667-5b6b-409b-a1d3-312f851a3a3d"
        },
        "item": {
          "id": "5aa89ffd-f6e8-40ee-8da0-90a442d66be9",
          "name": "credentials_verify:proof:created:boolean"
        },
        "response": {
          "id": "841ae5f5-1cb4-4c99-a42d-ef58335702ae",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 21,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "52898290-67e4-4012-a555-edbf39bee274",
        "cursor": {
          "ref": "fee67e70-a174-441c-b41a-0ed74cf463d5",
          "length": 282,
          "cycles": 1,
          "position": 256,
          "iteration": 0,
          "httpRequestId": "0a5ccb02-4e4f-45e3-b847-a0e0a8109b90"
        },
        "item": {
          "id": "52898290-67e4-4012-a555-edbf39bee274",
          "name": "credentials_verify:proof:created:integer"
        },
        "response": {
          "id": "8cae5ac5-e707-45fc-98d6-cb88f45c290e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 20,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "235f6d49-7f5e-4238-995a-cced55888d40",
        "cursor": {
          "ref": "f49b466f-6a2c-437d-85fc-ed921a80881d",
          "length": 282,
          "cycles": 1,
          "position": 257,
          "iteration": 0,
          "httpRequestId": "0a05df24-d247-4ab2-9b86-3245b37c4a3c"
        },
        "item": {
          "id": "235f6d49-7f5e-4238-995a-cced55888d40",
          "name": "credentials_verify:proof:created:null"
        },
        "response": {
          "id": "1e93de44-735b-41ee-b470-3c6bf9b38776",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 23,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fbe1888e-6c29-4345-a630-c361146445f5",
        "cursor": {
          "ref": "cb22c7c8-f520-4090-8502-49614ce939ae",
          "length": 282,
          "cycles": 1,
          "position": 258,
          "iteration": 0,
          "httpRequestId": "2b9c7f90-e86d-4b3a-aa8e-6620995679fa"
        },
        "item": {
          "id": "fbe1888e-6c29-4345-a630-c361146445f5",
          "name": "credentials_verify:proof:created:object"
        },
        "response": {
          "id": "ae1f0ee4-ace3-49f0-a90a-07a30e547e64",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 21,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c17574af-e71f-4489-b585-82aa32b2a8d9",
        "cursor": {
          "ref": "61e75c35-9ef8-4a93-b3b1-d6b69860da97",
          "length": 282,
          "cycles": 1,
          "position": 259,
          "iteration": 0,
          "httpRequestId": "97b6b5d6-deb0-4ca2-ba9b-7e674d0fc91d"
        },
        "item": {
          "id": "c17574af-e71f-4489-b585-82aa32b2a8d9",
          "name": "credentials_verify:proof:verificationMethod:array"
        },
        "response": {
          "id": "b6aac6ab-621b-4f52-abbc-069fae9592c6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4a46275f-67fe-40fc-ad18-aee784d5d806",
        "cursor": {
          "ref": "bbf0c054-6b6a-4b46-9314-2fed4baca1ff",
          "length": 282,
          "cycles": 1,
          "position": 260,
          "iteration": 0,
          "httpRequestId": "11e890c1-8808-44ab-9655-8e100c9a6b98"
        },
        "item": {
          "id": "4a46275f-67fe-40fc-ad18-aee784d5d806",
          "name": "credentials_verify:proof:verificationMethod:boolean"
        },
        "response": {
          "id": "604ca1b4-5d52-4374-8378-85d41dfed8e1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 20,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f78718f1-e6e0-49d8-8f4b-ae89e926df47",
        "cursor": {
          "ref": "51892df9-5177-4a91-9f09-92b1e22b5b13",
          "length": 282,
          "cycles": 1,
          "position": 261,
          "iteration": 0,
          "httpRequestId": "8dfbc2b3-cba2-4442-85f8-f197aeead36e"
        },
        "item": {
          "id": "f78718f1-e6e0-49d8-8f4b-ae89e926df47",
          "name": "credentials_verify:proof:verificationMethod:integer"
        },
        "response": {
          "id": "43570ecf-7b86-4bfb-ab57-1a8031768c3b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 21,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "08d51c8e-df14-4492-91c8-90b9f95f2663",
        "cursor": {
          "ref": "e5df58f0-98fa-4eae-a55f-10c885caa5a2",
          "length": 282,
          "cycles": 1,
          "position": 262,
          "iteration": 0,
          "httpRequestId": "91b2a02d-6aab-4348-9d96-1f418625dfa3"
        },
        "item": {
          "id": "08d51c8e-df14-4492-91c8-90b9f95f2663",
          "name": "credentials_verify:proof:verificationMethod:null"
        },
        "response": {
          "id": "4e1269dd-a348-48f3-946a-bfecc66d2e35",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "73b0ae25-edef-477f-8c5a-636bd3078176",
        "cursor": {
          "ref": "5fedd811-082a-404e-a97f-8e9bffa1a752",
          "length": 282,
          "cycles": 1,
          "position": 263,
          "iteration": 0,
          "httpRequestId": "9b283c15-76ad-4223-8abd-5ffb307334c0"
        },
        "item": {
          "id": "73b0ae25-edef-477f-8c5a-636bd3078176",
          "name": "credentials_verify:proof:verificationMethod:object"
        },
        "response": {
          "id": "54c50ae5-7b03-4f86-9b7d-bdfd3cf61133",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1720e8d0-bd63-4e1a-95c1-d1fa02d33267",
        "cursor": {
          "ref": "bee7d205-dfe7-435f-9c5b-c34a22f0224f",
          "length": 282,
          "cycles": 1,
          "position": 264,
          "iteration": 0,
          "httpRequestId": "6e29f93a-f608-4806-bac4-868097032b96"
        },
        "item": {
          "id": "1720e8d0-bd63-4e1a-95c1-d1fa02d33267",
          "name": "credentials_verify:proof:jws:array"
        },
        "response": {
          "id": "91f1b002-2ead-40b5-9547-2b05ac5ad7ed",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 22,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e82425e9-305d-4376-9941-5a6c6fd3fce0",
        "cursor": {
          "ref": "390099af-57c2-4277-812e-f7fbd29922f5",
          "length": 282,
          "cycles": 1,
          "position": 265,
          "iteration": 0,
          "httpRequestId": "d4270755-fddc-4b77-bd63-6ad401d45231"
        },
        "item": {
          "id": "e82425e9-305d-4376-9941-5a6c6fd3fce0",
          "name": "credentials_verify:proof:jws:boolean"
        },
        "response": {
          "id": "7d9d77d7-0510-4b92-b09f-2d00eb33cd07",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 24,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c15f7816-3735-447c-937c-75e714048565",
        "cursor": {
          "ref": "407f4a08-0a87-43e0-8813-8f238127fbdc",
          "length": 282,
          "cycles": 1,
          "position": 266,
          "iteration": 0,
          "httpRequestId": "c679dfcc-4d55-48b5-a62d-a697a000ddde"
        },
        "item": {
          "id": "c15f7816-3735-447c-937c-75e714048565",
          "name": "credentials_verify:proof:jws:integer"
        },
        "response": {
          "id": "c966a278-fab7-427f-a97c-b428b12b197b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 24,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "091eac36-f68f-40dd-a3f3-b9abec3f0a0d",
        "cursor": {
          "ref": "3b807cc7-0090-44c2-b069-b112f398a61a",
          "length": 282,
          "cycles": 1,
          "position": 267,
          "iteration": 0,
          "httpRequestId": "a3624b34-1549-4eaf-b930-d67110d6fc28"
        },
        "item": {
          "id": "091eac36-f68f-40dd-a3f3-b9abec3f0a0d",
          "name": "credentials_verify:proof:jws:null"
        },
        "response": {
          "id": "d024d0d4-751e-41e3-a5c4-1e4f156d3fc1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cec0e29c-e29b-48d6-add1-002fc0690bfc",
        "cursor": {
          "ref": "e04c6922-fd64-4b46-8bcd-bcdc944be24c",
          "length": 282,
          "cycles": 1,
          "position": 268,
          "iteration": 0,
          "httpRequestId": "337c88fa-a20b-4934-8d09-8ba4127893a5"
        },
        "item": {
          "id": "cec0e29c-e29b-48d6-add1-002fc0690bfc",
          "name": "credentials_verify:proof:jws:object"
        },
        "response": {
          "id": "c44031c8-47d5-4b18-8577-0f00b4f8b381",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 23,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9c72df32-952b-414f-8f77-d37a2d514e56",
        "cursor": {
          "ref": "51fc5ee7-42e9-4e08-9376-cf780298d36d",
          "length": 282,
          "cycles": 1,
          "position": 269,
          "iteration": 0,
          "httpRequestId": "78d41246-c170-4513-8a18-25b9b00c12cf"
        },
        "item": {
          "id": "9c72df32-952b-414f-8f77-d37a2d514e56",
          "name": "credentials_verify:proof:proofPurpose:array"
        },
        "response": {
          "id": "28d889e1-0010-4c4b-9f88-eb9c9ccc2cff",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "822e9d4a-4740-42d5-8b67-cb95ef7899c6",
        "cursor": {
          "ref": "71b5512f-eee4-4470-81cd-6e23f0775bff",
          "length": 282,
          "cycles": 1,
          "position": 270,
          "iteration": 0,
          "httpRequestId": "05fcbb07-9f4f-48e7-9433-9173354aefbe"
        },
        "item": {
          "id": "822e9d4a-4740-42d5-8b67-cb95ef7899c6",
          "name": "credentials_verify:proof:proofPurpose:boolean"
        },
        "response": {
          "id": "f512142a-268d-4f29-9e12-9aba4a82a4d6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 25,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f9be5e12-98b4-4b11-b4d8-d206048d6892",
        "cursor": {
          "ref": "4c7f262b-c194-4113-b8cd-d262adce7347",
          "length": 282,
          "cycles": 1,
          "position": 271,
          "iteration": 0,
          "httpRequestId": "efb93ddc-8509-4364-b214-342cd7b02890"
        },
        "item": {
          "id": "f9be5e12-98b4-4b11-b4d8-d206048d6892",
          "name": "credentials_verify:proof:proofPurpose:integer"
        },
        "response": {
          "id": "84e36891-d383-40f8-a662-12749cea9383",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0fe773e0-1451-4812-afaa-af555b4cdce5",
        "cursor": {
          "ref": "c35e2450-97ba-492a-b271-bbbaa96d2e45",
          "length": 282,
          "cycles": 1,
          "position": 272,
          "iteration": 0,
          "httpRequestId": "dfe5c42b-0a11-4504-a7d8-84c9e3ce7351"
        },
        "item": {
          "id": "0fe773e0-1451-4812-afaa-af555b4cdce5",
          "name": "credentials_verify:proof:proofPurpose:null"
        },
        "response": {
          "id": "2cfde9bb-4e25-4d7c-a062-8d56b100bca7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "210fee2e-8c22-4956-ab62-6e43bd27dfee",
        "cursor": {
          "ref": "48a0a92d-98ed-4842-b896-b0790bab76d5",
          "length": 282,
          "cycles": 1,
          "position": 273,
          "iteration": 0,
          "httpRequestId": "f0536735-db21-4c15-9a45-64c0f87a3a25"
        },
        "item": {
          "id": "210fee2e-8c22-4956-ab62-6e43bd27dfee",
          "name": "credentials_verify:proof:proofPurpose:object"
        },
        "response": {
          "id": "76f50ddd-e8c3-435f-aab0-7bd9ce6b556a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0ab35076-b579-4699-8942-58078528fd6a",
        "cursor": {
          "ref": "aee7ef26-795a-4e6c-b302-0431ec352d11",
          "length": 282,
          "cycles": 1,
          "position": 274,
          "iteration": 0,
          "httpRequestId": "e6d6ab8e-a4bf-4cfd-891f-7d3e259a4291"
        },
        "item": {
          "id": "0ab35076-b579-4699-8942-58078528fd6a",
          "name": "credentials_verify:proof:proofPurpose:string"
        },
        "response": {
          "id": "8eb94b0b-4844-4ac7-b0f4-5bd4e44c411d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 21,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "503e5289-ae0b-4f7c-a1f5-864adbf5dd33",
        "cursor": {
          "ref": "3ab4ad8e-88d0-4f70-be4e-de3c40c02c91",
          "length": 282,
          "cycles": 1,
          "position": 275,
          "iteration": 0,
          "httpRequestId": "bc8aebd4-0400-453c-a4ab-cb0ab7fe5d10"
        },
        "item": {
          "id": "503e5289-ae0b-4f7c-a1f5-864adbf5dd33",
          "name": "credentials_verify:missing_auth"
        },
        "response": {
          "id": "23ce4ead-8f2a-4511-ae76-cc7b82a4e9ea",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 12,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:276)"
            }
          }
        ]
      },
      {
        "id": "823bbdac-bcbb-40a1-926b-49514add8251",
        "cursor": {
          "ref": "a248d35e-9685-444d-8007-3cc10c0cb9ba",
          "length": 282,
          "cycles": 1,
          "position": 276,
          "iteration": 0,
          "httpRequestId": "9d559e94-1e08-43bc-8ffc-60f9c892f829"
        },
        "item": {
          "id": "823bbdac-bcbb-40a1-926b-49514add8251",
          "name": "credentials_verify:bad_signature"
        },
        "response": {
          "id": "7bac6f42-9238-4142-975d-e8d6d36e672b",
          "status": "OK",
          "code": 200,
          "responseTime": 88,
          "responseSize": 172
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is false",
            "skipped": false
          }
        ]
      },
      {
        "id": "3e4054c4-51ff-4a45-ba6b-0b63b011b59d",
        "cursor": {
          "ref": "18519fb3-f705-4a4f-a3df-75763286794c",
          "length": 282,
          "cycles": 1,
          "position": 277,
          "iteration": 0,
          "httpRequestId": "0cdde82f-bed3-4dfc-8c14-b4a7b0839441"
        },
        "item": {
          "id": "3e4054c4-51ff-4a45-ba6b-0b63b011b59d",
          "name": "credentials_verify"
        },
        "response": {
          "id": "7f9fd887-76da-4df2-872a-d7ca9cf72e37",
          "status": "OK",
          "code": 200,
          "responseTime": 1823,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "a1650b86-d7ce-4351-b542-c8e640318885",
        "cursor": {
          "ref": "17a214dd-02ac-4234-bf87-85a1228d1e93",
          "length": 282,
          "cycles": 1,
          "position": 278,
          "iteration": 0,
          "httpRequestId": "1a7cb365-5b0d-473b-9192-339fc16228d2"
        },
        "item": {
          "id": "a1650b86-d7ce-4351-b542-c8e640318885",
          "name": "credentials_verify:issuer:object"
        },
        "response": {
          "id": "13d2d7d4-59d6-4ef8-9a50-20931c2c87ea",
          "status": "OK",
          "code": 200,
          "responseTime": 2399,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "cb569072-0a89-4a9c-ad61-58eccb59370f",
        "cursor": {
          "ref": "fa3349c9-9fa2-479c-8b25-693d964738f5",
          "length": 282,
          "cycles": 1,
          "position": 279,
          "iteration": 0,
          "httpRequestId": "c0fbdec2-f0f5-4fb9-9f09-b914cbe52eb8"
        },
        "item": {
          "id": "cb569072-0a89-4a9c-ad61-58eccb59370f",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "15a08009-e4d0-4f02-bea3-ece039a27528",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 11,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:280)"
            }
          }
        ]
      },
      {
        "id": "cb569072-0a89-4a9c-ad61-58eccb59370f",
        "cursor": {
          "ref": "fa3349c9-9fa2-479c-8b25-693d964738f5",
          "length": 282,
          "cycles": 1,
          "position": 279,
          "iteration": 0,
          "httpRequestId": "c0fbdec2-f0f5-4fb9-9f09-b914cbe52eb8"
        },
        "item": {
          "id": "cb569072-0a89-4a9c-ad61-58eccb59370f",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "15a08009-e4d0-4f02-bea3-ece039a27528",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 11,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:280)"
            }
          }
        ]
      },
      {
        "id": "bd8ce02f-6bbb-4f10-8678-3fe4875eac50",
        "cursor": {
          "ref": "9395536d-be00-4ac9-a1c4-6d10037f0a55",
          "length": 282,
          "cycles": 1,
          "position": 280,
          "iteration": 0,
          "httpRequestId": "ebcf6bdc-d4d9-4f66-9593-afc7ec718427"
        },
        "item": {
          "id": "bd8ce02f-6bbb-4f10-8678-3fe4875eac50",
          "name": "presentations_prove:missing_auth"
        },
        "response": {
          "id": "02946e8a-422a-4829-ac81-0c3322d40f80",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 12,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:281)"
            }
          }
        ]
      },
      {
        "id": "bed4f180-f7d1-4cc7-8e39-fc77a5298954",
        "cursor": {
          "ref": "82452f68-0d6d-4593-9f22-b4777edb628b",
          "length": 282,
          "cycles": 1,
          "position": 281,
          "iteration": 0,
          "httpRequestId": "e5b47cf7-c760-4238-8f5f-084474a48a9c"
        },
        "item": {
          "id": "bed4f180-f7d1-4cc7-8e39-fc77a5298954",
          "name": "presentations_verify:missing_auth"
        },
        "response": {
          "id": "67428ac4-228e-490b-95ec-36ee941ed2d3",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 13,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:282)"
            }
          }
        ]
      }
    ]
  }
}