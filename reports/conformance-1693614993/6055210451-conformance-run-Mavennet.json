{
  "collection": {
    "info": {
      "_postman_id": "faa02ea8-9433-45af-b9a7-893a98130da9",
      "name": "Conformance Suite",
      "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
    },
    "item": [
      {
        "id": "d1904d37-8ec0-4393-898c-3ce158190b55",
        "name": "Clear Cache",
        "item": [
          {
            "id": "240a4c69-b6fe-452c-8f26-9f1877e4a7e3",
            "name": "Clear Token Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "7d41b461-fb4d-49fa-8bf2-8c24e3dfbe1a",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"tokenCache\");",
                    ""
                  ],
                  "_lastExecutionId": "a796e179-c44c-42a1-9d7d-109714cf3814"
                }
              }
            ]
          },
          {
            "id": "c83d78fd-0246-4b27-bacf-bcd4aed15f92",
            "name": "Clear DID Web Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "31fb1d34-2086-42d1-8b41-fdc10538ed96",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"didWebCache\");",
                    ""
                  ],
                  "_lastExecutionId": "24791313-9c8b-494c-894d-8b28fd2144e0"
                }
              }
            ]
          }
        ],
        "event": []
      },
      {
        "id": "3c11523e-a5d9-417a-8ad6-82f17430e380",
        "name": "Discovery - API Configuration",
        "item": [
          {
            "id": "c0b9f108-a26c-4773-a0ba-d0a5c631ef02",
            "name": "Positive Testing",
            "item": [
              {
                "id": "46a9ddd8-3b38-4e7b-808d-90a13d5336ce",
                "name": "did_json",
                "request": {
                  "url": {
                    "host": [
                      "{{did_web_endpoint}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "a0443a78-4d5f-4e4f-8ae2-5e0c51afa7b8",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200ApiConfiguration\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "dfa67514-e1bb-4b01-aef2-0d9e69124142"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "a2403609-4e7f-4990-85c6-2779dbe4c3ea",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "01160bcd-070d-4878-b948-0504ee690c3c"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "64c99b92-3ed0-4c7f-89e4-12f400e25cbf",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "4fe7cadb-c440-48e2-992c-1f9d3963f608"
                }
              }
            ]
          }
        ],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "cc2b445e-eed6-4fbc-bf64-0b5a067ca1e6",
              "type": "text/javascript",
              "exec": [
                "// Discovery requires a multi-tenant aware did web endpoint",
                "const did_web = pm.environment.get(\"ORGANIZATION_DID_WEB\");",
                "const did_web_endpoint = utils(pm).convertDidWebToEndpoint(did_web);",
                "pm.variables.set('did_web_endpoint', did_web_endpoint);",
                ""
              ],
              "_lastExecutionId": "63e706bb-6e1c-4baa-aaed-8d3f41e4524c"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "b5babef7-c7c1-484f-a013-1c2710e3bf7e",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "039056dd-a53d-408c-8699-e25d120aa79f"
            }
          }
        ]
      },
      {
        "id": "e953e413-ae0a-43a6-947e-69288aea5613",
        "name": "Identifiers - Resolve",
        "item": [
          {
            "id": "3c2eac36-eb73-43ea-b05f-9952f02da669",
            "name": "Negative Testing",
            "item": [
              {
                "id": "03403176-93a4-4f94-98d6-18002872bbfc",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "aaae9a5b-f938-405a-b699-08c198daa782",
                    "name": "did:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "invalid_did"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3a4f4df2-bfea-4235-897d-56e2f47c37cf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400Identifiers\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "d4c2994f-be4b-461b-ad91-9090df34c027"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3560d39e-118d-4aaa-bc25-5be99435b062",
                    "name": "did:not_found:did_web",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "did:web:example.com"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "743514f4-346c-404c-8c0b-def18625f621",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "f56023fa-933d-4cc1-af35-9c694ad37fdd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6656831e-50d5-47a7-ae08-7af01d04772f",
                    "name": "did:not_found:urn",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "urn:uuid:{{$randomUUID}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "401ca00e-b402-4a85-98b6-c22ddb46b4f0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "5a7f761d-e134-4061-b0fe-d1202feeafa2"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "4e941d21-a8c7-4fc9-a141-2a34d9563d22",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "f150ec16-4849-4ba9-b52d-13467e4d8818",
                    "name": "identifiers:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET",
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c3a70a32-d4cf-4161-b13c-e09eb96c5ae3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "6d81be14-35f8-40b9-978e-f26d354e01dd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6b08886a-e0c9-40e0-9c0a-4c332f4e1ab1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5a9eda7b-f7ff-4c54-bc16-e8d5538d216f"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "57235164-5706-453e-ad1e-f0e307f5e929",
            "name": "Positive Testing",
            "item": [
              {
                "id": "3b76cd65-e422-4039-8c46-eb9ad7dc463f",
                "name": "identifiers",
                "request": {
                  "url": {
                    "path": [
                      "identifiers",
                      "{{ORGANIZATION_DID_WEB}}"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "84c98ead-4675-46f2-9f77-261f93e08b82",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200Identifiers\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString), {",
                        "     strict: true,",
                        "     strictSchema: true,",
                        " });",
                        "});"
                      ],
                      "_lastExecutionId": "49ac1df9-c32f-4025-96ae-c72fa2d805fd"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "e1a0989f-0aa0-4f2f-8c9d-6bb6dbd06947",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                ""
              ],
              "_lastExecutionId": "181e2055-2986-4df1-9b8f-6f5255975067"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "3b33f682-cb5a-4e9b-9336-56329fa55092",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "24670afb-05bc-4130-b287-8a6fb0891f66"
            }
          }
        ]
      },
      {
        "id": "a722da9a-d5f0-4793-8780-18c3d5f9a2c5",
        "name": "Credentials - Create",
        "item": [
          {
            "id": "25f2a831-31c6-49c1-ab8f-6d4c9cd3eb24",
            "name": "Negative Testing",
            "item": [
              {
                "id": "b0f2f926-dfc4-4be3-834d-c2eb1bdc1384",
                "name": "Bad Request",
                "description": {
                  "content": "This folder contains requests which mutate a valid request body in a way that should provoke a \"400 Bad Request\" response from the server.",
                  "type": "text/plain"
                },
                "item": [
                  {
                    "id": "bd70aab7-f7ab-48df-81a8-b64d9a67c721",
                    "name": "credentials_issue:credential:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bdf05540-ee7a-4e7e-9e30-ce57f1d923ea",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "86222dfd-ff5d-4ee5-aa01-61353cdd841c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d56b89cb-c735-49f9-af4f-3cf7757e54a6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential\" is a required field",
                            "    delete req.credential;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "addd4a31-77a4-40a4-ab3c-6829f9f3e1ab"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0e1a9103-00b8-4922-bffe-02175d4f9d15",
                    "name": "credentials_issue:credential.@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2b12eb58-2784-4044-b0dc-2efd9d02788e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a11e5977-9df1-4014-ae5b-b4b2dc8f5864"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d828dfdf-faff-49c4-bec4-51519aa30ee6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" is a required field",
                            "    delete req.credential[\"@context\"];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "ef478e5c-68ee-4c87-a728-05a67564c449"
                        }
                      }
                    ]
                  },
                  {
                    "id": "80900adc-f6cf-42ae-a100-24e342652790",
                    "name": "credentials_issue:credential.@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "629e9f67-65cc-4643-841c-c5e02f6dd9dc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4b7c5cdd-c328-44b4-9284-5a99c5d13a62"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8dec10cc-8023-4277-abcd-ab6c91ade82d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a boolean",
                            "    req.credential[\"@context\"] = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "332184e4-44bc-46d8-aa3f-99cf8ee5236d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "831e1647-0ba1-47c7-a93a-c6a0ea36db83",
                    "name": "credentials_issue:credential.@context:integer Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d1f5ab29-1b62-4e6f-9b48-7f8b25147d50",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "94f08212-9069-4d74-8df5-8a6583b2e65c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "625afa2a-8f4d-4dc2-b98a-a1e105973d33",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an integer",
                            "    req.credential[\"@context\"] = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "c6cbafbf-7409-4b8c-b895-295ddb0f8db6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5d6cae25-9f1f-4488-a202-48d814b87598",
                    "name": "credentials_issue:credential.@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6ef5c3ff-3c42-411d-b16f-82a7d15caf98",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ff27267e-1db8-4501-9c3c-91869004de1c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4bd6c02a-c5e5-4788-b13b-6ebc09fab71d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not null",
                            "    req.credential[\"@context\"] = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "9d334c36-3832-4d9b-8a38-b4a334aedc66"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0796b26c-de18-4045-a245-0b9598b37b94",
                    "name": "credentials_issue:credential.@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ff9e7b6f-623a-4dbd-9a23-4b151a07b3dd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8980dc63-ab91-4cbc-abd5-9d0ead5e218a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f2e34393-31ae-4d3c-ad0c-6c566c6e808d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an object",
                            "    req.credential[\"@context\"] = {\"@vocab\": \"https://www.w3.org/2018/credentials/v1\"};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "1f21a7bb-1e67-4661-a04b-7ba20bb1159e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9535a5c8-a356-403b-83ca-7833ef328b5c",
                    "name": "credentials_issue:credential.@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0ad7e6d4-bb87-4fb7-bcc7-fed872f137da",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "13ae1690-e981-4715-ab82-888891347652"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "584dcc10-131f-43a6-b163-904ce6c74c66",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a string",
                            "    req.credential[\"@context\"] = \"https://www.w3.org/2018/credentials/v1\";",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "f215833f-c2a9-498d-8dd8-3252cb53df87"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c706fe79-7867-4cf8-99d0-62839586d473",
                    "name": "credentials_issue:credential.@context.item.array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cde0c640-7383-4b8b-a4c1-e7e0e4ed10c3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c088bf33-715a-436f-8334-70aed451aa70"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9e103b21-5a08-4022-bdda-ac7d05dfed02",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not array",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        [\"https://w3id.org/traceability/v1\"],",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "4ac7468f-b355-478f-93e8-33f308e26c03"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c85b066a-7a23-4adc-80b6-956baf24e348",
                    "name": "credentials_issue:credential.@context.item.boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cfefc9e5-0121-47b2-bbd3-0d6e4c9317d9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4028f130-b7cd-45ab-b48d-b0a2890037cb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9397220b-5388-4e60-92cb-9363504f02fd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not boolean",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        false,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "55cc6b4d-5b87-4d83-b52d-cdcc202dce92"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8d510b17-9fc5-4ad7-9530-b14614bf8b2c",
                    "name": "credentials_issue:credential.@context.item.integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c9239590-de2c-4495-8e46-98f365cb8cc5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "33a45809-a684-4ec9-b1f6-8b756cc9c453"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3b106c46-3179-4999-9c9f-adf1fddad099",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        42,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "c7ad83fe-d712-42ac-8321-8d019ecc9641"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dadc30f3-1145-4909-becf-a9ef3bf2526d",
                    "name": "credentials_issue:credential.@context.item.null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fff44d16-8acc-4dd1-85d6-f29b7609d946",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bdfea9c6-3f39-40e7-90ed-8bce75c4de7a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7963d1db-4aa0-438c-ba9a-0d698e935a27",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        null,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "da9ef4ac-8b8d-44ed-b166-59724782df2c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "da06f187-766c-485b-aed0-f62f71b2544d",
                    "name": "credentials_issue:credential.@context.item.object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "890a31cd-a2b3-4371-8a1b-60b32dc10f7b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "931db232-2391-4cf1-ac4e-c9ae0992028b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a54ae41a-0867-4b59-b153-26199ad21b75",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not object",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        {\"@vocab\": \"https://w3id.org/traceability/v1\"},",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "7a9b9891-dec1-4620-982d-bc7c428b3f84"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f24531db-d125-402f-be46-08b995265f51",
                    "name": "credentials_issue:credential.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e7e3ac2d-9d8d-4745-aa0f-a959c6c3c456",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c716281e-7ee2-4c4e-9bc7-af000863ca20"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1ef49389-b200-48d5-bbf0-2b55494bc855",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not array",
                            "    req.credential.id = [pm.variables.get(\"credentialId\")];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "4f0a154c-5779-4f8b-afdb-4b57917a4aaa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0f6a3630-b0ac-4849-b8f5-b17d68a8811b",
                    "name": "credentials_issue:credential.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5f7c05c6-9a4f-413c-b59d-e4852259e114",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6354e130-68a6-4416-9480-b26127a6b98c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "10955762-ba7e-4636-9765-3fe9ea951724",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not boolean",
                            "    req.credential.id = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "7a964929-a8e7-456f-821c-8cccee32486a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a52dfa57-a1d9-4c07-9466-43cd4ecae540",
                    "name": "credentials_issue:credential.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5c2c0b83-42bc-4345-9ab1-ba2284080f8e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ea3a091d-e056-41dc-ba9e-7d6d81bb508e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "21c786ef-78d8-4100-9143-54b95f8af948",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not integer",
                            "    req.credential.id = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "c44b4dbd-b541-431c-9612-06efa5da6641"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c1413024-58da-4ec2-ab60-28ea580f415b",
                    "name": "credentials_issue:credential.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "26e70635-1dd0-4f58-a864-796e83fd8361",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dc2fcea3-e991-40ae-b2f9-37364830e243"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "578b491f-1164-402c-a2e5-38f544ed3cdc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not null",
                            "    req.credential.id = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "78fc572b-5236-4aa9-86bf-ca205bdcecde"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0d74cf45-a954-45b7-8c1e-286f95b1263f",
                    "name": "credentials_issue:credential.id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1c3b73cd-89fc-4907-a320-80cbdc05d4dd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3bb90ee7-1fbe-48bf-be07-8c0b66f939b4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "266406f6-4a61-4218-b828-642c1504b764",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not object",
                            "    req.credential.id = {\"id\": pm.variables.get(\"credentialId\")};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "7274f7da-a069-4f94-aa72-3703a3fdec21"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e329d6f5-4165-4475-b587-f6fe88609db2",
                    "name": "credentials_issue:credential.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fb2c0847-6b57-411f-858d-94241c93aadb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "18113e6d-cab6-4976-a205-befc8227cc68"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "65990def-d73c-4b23-8f32-349c95593ba3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type is a required property",
                            "    delete req.credential.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "1a16589e-c642-42d3-82fa-3f810daed433"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5f19ee3f-53d6-4c5e-b49b-ac834f714329",
                    "name": "credentials_issue:credential.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9c187dbc-df1f-49b3-82a8-6616c51330de",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "60323780-4f0d-46b3-a4b1-55593e5ff2c5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6e51b3b7-e67c-4553-892e-7b4dd8757bc1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not boolean",
                            "    req.credential.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "ab9f127b-b246-4fbe-8119-bcb44626fd59"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c33c5666-6223-4b4f-bde1-711423f76ed9",
                    "name": "credentials_issue:credential.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "959c8ba6-4ad3-47a6-b389-b0d64d369129",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d3e6df97-7bd8-4e2c-929c-56902b2fba2e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2895e098-a0b4-4849-bfea-d08955c76124",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not integer",
                            "    req.credential.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "ca0114e1-736f-49d0-9099-c44622466809"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a5492a1f-3fd4-495c-bf4c-8d018df2bcf1",
                    "name": "credentials_issue:credential.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e8400942-da30-426d-9c88-6cca1bfde867",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b601a180-d76e-439a-ad11-9564954146d5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "538a45ba-ee2c-4608-8bcd-c3fd9d52c595",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not null",
                            "    req.credential.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "66415a33-9b1e-47f6-8238-177c16f3fe18"
                        }
                      }
                    ]
                  },
                  {
                    "id": "238696c5-41c3-48b7-a729-02c48bb0765d",
                    "name": "credentials_issue:credential.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6029fec4-8aaf-4f64-9163-b1b6bcb46307",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ccefa4a8-56ec-4820-a835-e4e4ec7829ab"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9953c091-9f4d-4d22-b613-8fbbec094eb0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not object",
                            "    req.credential.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "e5dd43cb-78a8-4b75-acb5-79900dd0dbb1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f2398fd0-78f8-4a5c-a3b2-4c77b519946c",
                    "name": "credentials_issue:credential.type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b1ecee71-b829-48c5-bd1e-31756f5d0593",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f62835dd-dabb-4129-acf2-adb6e5004c64"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "93ecb3bf-2065-4d0a-862a-26fc43f381eb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not string",
                            "    req.credential.type = \"VerifiableCredential\";",
                            "}));"
                          ],
                          "_lastExecutionId": "6fcae086-4dfb-49d1-9ffe-30327afcfc80"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7fa12290-ebcc-400a-957e-24cbc73fec09",
                    "name": "credentials_issue:credential.type.item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e00cd18a-ab9e-4495-81b2-e98f917dd319",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3bb79c01-5a39-4363-ae01-52dfeaab5774"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b5850660-bdc1-4267-98db-304467423303",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must have at least one element",
                            "    req.credential.type = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "d86cd9bc-0e87-4d57-8846-ee02cbc2d6ce"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a7156b95-5e25-4364-a5c8-04a061388ed7",
                    "name": "credentials_issue:credential.type.item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fe3852d1-afb6-46e1-8bb4-4ba4550dff4c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d700bcd0-1534-4c19-ba6b-e7577be1df01"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "af6c0359-564e-48d9-a85d-fcf01f4e886f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not array",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        [\"AnotherType\"],",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "b4d7e310-a4df-43bd-86ad-d0955fc6ef24"
                        }
                      }
                    ]
                  },
                  {
                    "id": "54e6d0d2-55a6-4d2a-b8f5-8c8c1fc1c7c9",
                    "name": "credentials_issue:credential.type.item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "06d450c2-aee9-43b0-97f3-e01d488098ba",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b58035c6-a4af-40e0-b6b6-f38cd776944d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9c20746b-f5e0-431c-abdd-8ed1a43209b3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not boolean",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        false,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "5541c7b6-f359-4edc-b082-c9c73558b6ee"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6626dd6f-655b-4bf5-93dd-a56fecdf4c6d",
                    "name": "credentials_issue:credential.type.item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4ab426e0-d28e-4cc4-95e3-27d372470ca5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a43fdfec-e931-4b79-a206-076ac7e897d0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "11c10366-ef7f-40fc-816e-2b465f41c0da",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not integer",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        42,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "f68433b7-bc01-491f-8a22-ac746247632d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e4ec5de6-7bcc-41b1-bce5-ca66e965b982",
                    "name": "credentials_issue:credential.type.item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c9a6eb8c-2ecb-4b1d-bdf9-df70febe1a66",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cfb409b0-1dbe-49be-bf28-dc036bb235b3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1ea4f5e2-f8bb-4baf-973c-9df13d41a62f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not null",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        null,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "b103b80e-c4ea-4946-916e-2c338d32664c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8f174421-b627-4d05-8ebb-9ace87480d17",
                    "name": "credentials_issue:credential.type.item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c88692fc-ad6f-4ec7-88ee-8a23ead208f6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ca71a080-fed2-48d3-b074-845e20b620fd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ef919847-8871-476a-9dd4-5078da981e5c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not object",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        {},",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "9a78e747-bc76-40fb-b90f-82a2f0da31ba"
                        }
                      }
                    ]
                  },
                  {
                    "id": "97f412e4-1641-491e-8e65-1603974b956e",
                    "name": "credentials_issue:credential.issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "97eb3c1c-b5e9-44eb-a544-d8c079bc7795",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1a95471c-2728-4fa6-8575-57e87ba7da42"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5d5a58d9-267b-4440-aedc-d98a69beeaf6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer is a required property",
                            "    delete req.credential.issuer;",
                            "}));"
                          ],
                          "_lastExecutionId": "1ce3d000-19e8-4ed7-9c46-b55c9708ad14"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fd86b980-6620-4e17-83ff-f7b86c7dc991",
                    "name": "credentials_issue:credential.issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4b24ad16-9b2d-43be-9926-c4e947ebf7c7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3c207731-39f0-4b5b-affa-9e578d02794c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "16fcbcc3-e779-4d87-8d4b-133db42fe235",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not array",
                            "    req.credential.issuer = [pm.variables.get(\"issuer\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "ff091b89-246a-4e0b-b38a-63d31d74bbbe"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6da9f7eb-4292-4ff5-94b2-570e79e3d9dc",
                    "name": "credentials_issue:credential.issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e8485a9f-9c3d-43a0-ba2c-b2c268398818",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "11fd1e4b-7bac-450f-bbfb-b630a21f8479"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c5d2dcb4-b533-4413-88e9-30c9b8e1e1e6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not boolean",
                            "    req.credential.issuer = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "1be8867e-caf1-4eb5-b194-67b6a3abbbce"
                        }
                      }
                    ]
                  },
                  {
                    "id": "955b5bc6-7c20-4e96-85c5-bc03d706ced2",
                    "name": "credentials_issue:credential.issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fd96b3b8-04f8-46bf-95d4-26f0c247e41f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2ffb4eb2-5b20-4900-a0a8-c759327c5fc3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a4b1a1e7-25b3-40f3-a56a-7622b7f6af46",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not integer",
                            "    req.credential.issuer = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "032c999e-2f1f-401a-acb5-7196dcd96cf1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "149e4ff8-d4ba-4030-891a-b12ea5d890b1",
                    "name": "credentials_issue:credential.issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3c9aa89a-fc0c-4a70-9ea8-8b45690f433b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c93762ab-f9bf-4e40-8219-8697df91b422"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f0683943-2fb5-4563-98f2-acbc61d7d7b0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not null",
                            "    req.credential.issuer = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "bec51dda-4fec-4339-ae9a-d9bd1669b816"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d1cc3fe7-450c-4341-8e98-084d354f6337",
                    "name": "credentials_issue.credential.issuer:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "29bb1e12-8f0c-4fda-bb1e-f7444e52b6c7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d53f62c6-3a51-41b6-93fc-cc18155c8f0e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "63d4c51f-dc20-4ffb-a4f7-8acd3fae0f4b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be a valid URI",
                            "    req.credential.issuer = \"not.a.uri\"",
                            "}));"
                          ],
                          "_lastExecutionId": "0f2ebea3-5fba-4822-a50e-039200f9105d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a1c9c049-214d-4713-bde2-ee01bfd326d2",
                    "name": "credentials_issue.credential.issuer:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d3b2443f-851c-4506-af88-a595ca7282fe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "2405b663-2fc1-4331-a11a-1267a465c0a1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "db8fe12b-9908-471c-9beb-0ed573b86929",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be known to the endpoint.",
                            "    req.credential.issuer = \"urn:uuid:{{$randomUUID}}\";",
                            "}));"
                          ],
                          "_lastExecutionId": "b7fe7294-4c2b-4ea9-936c-eece15460d90"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7db4b603-c31c-4fba-b407-3d7da9f39252",
                    "name": "credentials_issue:credential.issuer.id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8313f8be-b000-4ccc-9a74-955d5eb96326",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e2a268ea-e654-43e7-8faa-1a6a4ec22c21"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c504716a-1a54-4dfc-90e1-b1b9263cfeac",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id is required when issuer is in object format",
                            "    req.credential.issuer = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "95e44705-b146-48ce-a0e3-a833e418e36d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fa1ca206-6add-4bc7-a161-c6b383f34947",
                    "name": "credentials_issue:credential.issuer.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7412ec71-d969-4e42-bdf8-9bb0085a9baf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "48d1e8cc-c220-47a7-aac6-d2442d851096"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f14c080c-328a-43df-8216-33f4f6dab0f4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not array",
                            "    req.credential.issuer = {\"id\": [pm.variables.get(\"issuer\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "ad93383d-7ff1-488f-b0b7-6c4c1aa2854b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3477af91-182f-4a4a-bb7d-5c272986163d",
                    "name": "credentials_issue:credential.issuer.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e89a79a1-9657-4e53-9086-a9065253b2b6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4756f026-3bb4-45f5-b1f2-3b9cc6561feb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8bbccbfc-6664-424f-a553-aae97035a137",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not boolean",
                            "    req.credential.issuer = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "bdbb513c-02af-4db1-9d3d-bf7f2fac6b4f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "04111916-60a2-49b8-83b1-21b98a78385a",
                    "name": "credentials_issue:credential.issuer.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0297d321-bc43-4846-a454-06755f750419",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8fd821e7-57cf-4aa8-9799-9f106ed35afb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a556347b-a2ef-4486-83ff-729754867d4b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not integer",
                            "    req.credential.issuer = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "0a5075a8-4897-4033-a27f-aa440198c1e2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ac0525e9-4759-4af5-8b47-2fc4bd751fb2",
                    "name": "credentials_issue:credential.issuer.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1d9c03e4-bfde-4cb2-ad07-2f1427dfc22f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "377a7ed2-7964-4b0b-bef4-638a41b87abd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dac52a28-d997-4bf8-b48b-f723f39541d6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not null",
                            "    req.credential.issuer = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "ef37126f-6665-4f98-9f82-9de7266fce08"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d62a9024-f60e-42b7-bb87-954b4a5395f1",
                    "name": "credentials_issue.credential.issuer.id:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "af8a64a0-9273-4ba5-8ec9-ac6e3d79e1e3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "af28de90-3d6f-427a-ae2b-8efd1f089c44"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fea504a0-f10f-4362-8c1a-0e9ca7f76514",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be a valid URI",
                            "    req.credential.issuer = {\"id\": \"not.a.uri\"}",
                            "}));"
                          ],
                          "_lastExecutionId": "229a1e5e-c927-4390-a396-3431e4145182"
                        }
                      }
                    ]
                  },
                  {
                    "id": "30c0f98c-c131-40f7-9125-78ee4bac2a8c",
                    "name": "credentials_issue.credential.issuer.id:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ab3a1dda-bf88-4406-89ec-93675042c023",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "babe24dd-0730-47f7-b123-8fbf7a8a5e79"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "22ee1118-aec8-4d63-867c-af6d4ee03f02",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be known to the endpoint.",
                            "    req.credential.issuer = {\"id\": \"urn:uuid:{{$randomUUID}}\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "17ce9de6-f268-4e98-b3d2-7dfbf1e0b99f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cda742d3-2f2d-4114-b947-346766c19e6c",
                    "name": "credentials_issue:credential.issuanceDate.missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "67589687-3d5d-4a3e-a570-f8eac6b33650",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4bda7256-8e41-41d6-8c8f-ae5b0e45e123"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8dfbf72a-a0bc-425a-968b-e4256825a1ee",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate is a required property",
                            "    delete req.credential.issuanceDate;",
                            "}));"
                          ],
                          "_lastExecutionId": "4fc4d467-13ac-4f2a-afe3-6c50a5e58c4e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "861a3987-cad3-4e02-b834-6d8ddc0d5b41",
                    "name": "credentials_issue:credential.issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "be14ea0f-1b04-40bd-bdac-0e41e9f80e7c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1aae3127-a03b-4d85-a1bd-88f4417401a6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "68740aea-8ca1-4543-8a99-a8cb4f16a6e2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not array",
                            "    req.credential.issuanceDate = [pm.variables.get(\"issuanceDate\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "6d5b4a4e-7db5-4239-8d05-cc68e5d56342"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cf17ff4a-12ad-445e-bdb1-4a4bef4371d4",
                    "name": "credentials_issue:credential.issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "630456e7-f46a-4f15-9d6a-9342fc96a944",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fa0f93ef-5fbe-4be7-a539-af08e6b5bfb0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0800b593-cfcc-4379-a62d-203d464118ed",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not boolean",
                            "    req.credential.issuanceDate = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "fcf303bf-84e0-4e2c-9a18-7ec2e908616f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c785b482-0e8e-47da-bff9-3793359ef7bd",
                    "name": "credentials_issue:credential.issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6e26bb1c-3359-405d-9abf-51ae2ae4eb69",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "df23b9f3-9ca9-431c-a2e2-e68e6b2a7504"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c776c183-0e0d-4b34-8d8a-5db470beb53c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not integer",
                            "    req.credential.issuanceDate = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "1ceb4d28-3ad3-4519-b6e6-8a68be3d9b2d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c5ca51ac-48d3-45d7-ad29-9012165423ad",
                    "name": "credentials_issue:credential.issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "064e10d4-f7ec-48db-8cf9-55e9845ebe6c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "eabc6479-c49c-4c4d-af7a-2cb89978a281"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cefcb98b-c4c3-4f5c-b253-fa6717027ca6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not null",
                            "    req.credential.issuanceDate = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "2ed8cf61-5b40-4ed6-a505-0cb730e6739a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "85ccb379-0257-4f37-ae85-2dbe1dc66e75",
                    "name": "credentials_issue:credential.issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d9601b7a-8d49-4e3c-8f33-4260ad92fe31",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ccad7dd1-9480-4e58-98fb-523a76a1f006"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "833fa77b-b212-496b-8954-a74ae8516ccf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not object",
                            "    req.credential.issuanceDate = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "9947ea32-9122-4e6b-8bf1-5963c3f211c6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a80e2457-c125-43b0-878c-1e95fe5680cf",
                    "name": "credentials_issue:credential.issuanceDate:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f09bfdd9-eba1-4f49-a6b9-67f74881b51f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6e56d1ed-29b9-4442-83a8-2475172eb204"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cf805687-8b48-4580-9945-e88b7fd86106",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be a valid XML date time string",
                            "    req.credential.issuanceDate = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "07db95aa-c64d-403f-b257-32a193596289"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e02088af-c11b-482d-b1bd-032597c47468",
                    "name": "credentials_issue:credential.credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c579e3cd-0d63-49f0-aed5-baec8f175002",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ba837080-2721-4c0e-9834-ad44ff22189c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ba0ae912-fe2f-4bc9-b926-b6dac24836d6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject is a required property",
                            "    delete req.credential.credentialSubject;",
                            "}));"
                          ],
                          "_lastExecutionId": "9bb5fbec-a0ac-4b75-8a84-65c389bfc532"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2db998bc-c33c-43d0-bda1-424196016636",
                    "name": "credentials_issue:credential.credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dd907e87-d193-4d03-900b-c839bb69bdd1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ea1655fb-ba2b-42a8-aa12-642acd4a6881"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7acebdfe-7fb6-4088-a4e5-8b741d99bfb6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not array",
                            "    req.credential.credentialSubject = [pm.variables.get(\"credentialSubject\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "209298b4-e416-4338-aad0-c01a003ff167"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0a1eb663-20a7-45b7-be8e-acb0634a957b",
                    "name": "credentials_issue:credential.credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f21398f1-7e17-46c7-9994-ad0aad5dd02d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "663af777-c0ac-4ad9-af84-789bbe12b3e1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "342658c2-7e6d-419d-9fb9-f92039ef417b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not boolean",
                            "    req.credential.credentialSubject = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "dc787d7b-baec-49f8-8ee0-f44356f8bcca"
                        }
                      }
                    ]
                  },
                  {
                    "id": "afe7bb43-2895-4f74-9272-daf3f793f34d",
                    "name": "credentials_issue:credential.credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "df037bd2-6558-4c6e-9275-e3572295de38",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d48cbc00-8107-4331-9a56-36eff18b92f8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "be85289f-9714-471c-b4c7-732f64bce203",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not integer",
                            "    req.credential.credentialSubject = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "83f221a9-1274-48f8-a435-d4cf7c46dc67"
                        }
                      }
                    ]
                  },
                  {
                    "id": "49cda4a4-0312-4585-b3d9-f4dc8d01bc33",
                    "name": "credentials_issue:credential.credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ff68e0ef-6eef-475c-9b6e-832a5dc4c916",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "101e1ccc-d358-4313-9d88-17ac1b6ce53a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "67e01168-f335-42c2-a5d3-d4b0af19ca04",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not null",
                            "    req.credential.credentialSubject = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "4c93ee30-dc77-417e-bfab-aa788088f7c2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c364f89b-4ee9-4f69-b6ae-22fedc42ce3b",
                    "name": "credentials_issue:credential.credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c3a09c75-7633-4606-9e2b-dd3d856ab299",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ceb07367-4307-4759-a44c-85bc942a678e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eba0b2ca-f574-43f9-8aff-8541f26bdd0e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not string.",
                            "    req.credential.credentialSubject = pm.variables.get(\"credentialSubject\");",
                            "}));"
                          ],
                          "_lastExecutionId": "ecc2c7c9-3c87-4cba-81db-42a984abbcbe"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5d183b63-bbce-4baa-b041-7cdb574247c0",
                    "name": "credentials_issue:credential.credentialSubject.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "83a7c009-8af0-4d1b-8b67-d012444c630b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ce5290e1-b30e-487d-afbb-c480550b162a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "65d82ea5-8008-43e8-b58e-d2560e82e0eb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not array",
                            "    req.credential.credentialSubject = {\"id\": [pm.variables.get(\"credentialSubject\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "f71a46fc-06e7-4011-8aa5-9c78e7674cb3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e1190d9c-797e-4768-84fb-f22b43a2d0b3",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f5731575-ddca-4637-ad8f-1dadd2b98a55",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7425a33e-5654-4d93-a953-032c6c38b068"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4d8dd2ff-949e-40a5-9d3e-bd728af61d77",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not boolean",
                            "    req.credential.credentialSubject = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "43881293-021e-4e44-8094-7460e6c7c80d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "42123202-a9d7-4cbe-9496-426a4fd6f849",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 2",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0918ef6c-efec-4b8e-8584-b2a6fe3f4004",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a7089c50-9531-40f5-b27e-020e82f44a8f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dcd9b330-b811-4451-976a-9e6397a9b143",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not integer",
                            "    req.credential.credentialSubject = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "7e10c263-e791-456d-a5af-1283a08d2720"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b030fba8-f7cf-47cf-8e5b-72531124245d",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 3",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9534962f-f119-4b7a-8de3-9f6aabe8d6a1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dbb1f2c5-a143-41a0-addc-7d7b6e13fad3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "47dd6d18-6d52-4a36-810d-823be091b770",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not null",
                            "    req.credential.credentialSubject = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "2233381e-d19f-4161-9540-f38d0264cff5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6cf1c7d8-5583-4f86-8401-c41f10563164",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 4",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7765e710-54a4-4dd7-8d4b-28c3aec32909",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b2b7a0b5-e245-4564-89fe-387146debb71"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bea8d1eb-3da1-4023-ad87-6dd7ea2b3719",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not object",
                            "    req.credential.credentialSubject = {\"id\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "ec3e43e4-ef8c-48c4-b27e-fc729a315732"
                        }
                      }
                    ]
                  },
                  {
                    "id": "39afbf1c-bd19-459a-b8bf-269658f69867",
                    "name": "credentials_issue:options:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "604b6d96-2c3b-4102-8cdb-f68695ae9ff9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ce42882f-57b1-40ac-8437-a254ac82eb9d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "258464bc-e30e-45a7-9c32-266427d16e2d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options is a required property",
                            "    delete req.options;",
                            "}));"
                          ],
                          "_lastExecutionId": "98d9e5e8-92c4-4e7c-ae4e-f77d8bb4c019"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6151987c-ed96-4573-a4ba-f05d73072d6c",
                    "name": "credentials_issue:options:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1af44c5c-743d-4ef9-b2e3-5f23ea759c3c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5ee60a2d-c463-4d25-8582-09e176e55692"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1ded0d7d-73a0-4891-a45d-2fd0227a38eb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not array",
                            "    req.options = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "b6c87bcd-0d50-4ae9-a177-2091fe327bfd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c69860d3-a283-4489-a4fb-6e6ea5bf5dcc",
                    "name": "credentials_issue:options:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "736a5073-2f4a-4042-8e9c-1a63229e34b3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b259d26e-3efd-49dc-8e46-6ff4f7298000"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bfbfd1b0-bfe3-4525-9ffe-deac7d7d2947",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not boolean",
                            "    req.options = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "05a50a65-eda1-4084-bfdf-51e29dfa7d7c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "00639107-a79d-4bef-b80a-c70f09c61916",
                    "name": "credentials_issue:options:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dd24e31b-64fd-4f48-9e99-2e8f444d8184",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8f70907f-8f4c-47aa-9ea5-92a1aa2aed5b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b7624559-7e11-4d9d-8612-c4624dc3a21b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not integer",
                            "    req.options = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "30ae99f8-bd68-4dc0-85fa-af5b23182d06"
                        }
                      }
                    ]
                  },
                  {
                    "id": "255046ec-c2bc-4df5-a850-e9d63e2c48fa",
                    "name": "credentials_issue:options:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e638fe88-e2a8-456e-b0ec-3220fdee3336",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c9178f6f-3fda-4015-87ed-6ddc0b308761"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e7703fb6-b64d-4910-9f60-1efbb1d72cb3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not null",
                            "    req.options = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "d6700e2b-d011-4058-9947-729120d05e40"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6a1358b8-0df6-4d4e-a99a-4819cb4ace35",
                    "name": "credentials_issue:options:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "12504e14-1bcc-4c67-bee9-cf7fa4cc8347",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8c229d2b-f012-4acb-bdd9-81b42c407b70"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "771e3d05-4d9c-468f-b15d-b6621269880c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not string",
                            "    req.options = \"\";",
                            "}));"
                          ],
                          "_lastExecutionId": "aab85d7a-a9bd-4b2b-9a80-54681933d16a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2aad0985-1220-40ca-bac2-686eb3d7f442",
                    "name": "credentials_issue:options.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4bef6a00-6719-451d-aedc-db7b89959e82",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fd92fb8c-8b16-43b9-a5aa-86b6051b8759"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0c954273-5f0d-47e3-b40b-d37eaab3aea7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type is a required property",
                            "    delete req.options.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "deffb93d-e4eb-4536-a286-e985f949fa25"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cf325462-8c64-404d-b976-31d02712f85b",
                    "name": "credentials_issue:options.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2e4e5d02-5c4a-4546-bef5-c5da72d54ae8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "28396121-cd97-4df1-aecf-b3e80b5e0fba"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8aabf5b9-cc78-4d34-b950-d29cc6743bf9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not array",
                            "    req.options.type = [\"Ed25519Signature2018\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "56c9d125-b54c-46e0-98f8-53509c03f4a8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fb8a54b2-7652-4687-bda9-5160e91311e6",
                    "name": "credentials_issue:options.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9a0d5d09-6aa5-48f6-8594-a43a07c2e038",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1ff94d7d-3427-41a6-98a1-11a73a21f273"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3897566a-80a7-4858-8207-03050eff425d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not boolean",
                            "    req.options.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "6209f09f-c823-4428-ba87-165797b6c9c5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6d542dcc-735c-43f9-b059-4d0f96ba0aa5",
                    "name": "credentials_issue:options.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fdde6794-1bf9-4256-be96-7fb9c20dfe99",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "437961e5-3516-4aa0-893a-9f5283a6c69c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7928acd9-8660-4115-a861-ae3e64b3c1e3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not integer",
                            "    req.options.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "77d5f485-34e0-47a5-98aa-8a2ac6cc6db9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f0c1cc10-628b-41c5-a8bb-93a39f674a75",
                    "name": "credentials_issue:options.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "82d2d873-0060-4d01-838f-9b0484a5ae28",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5745585c-7c47-4f52-844f-b222705fe3d0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cdc8222b-1143-441f-b2f6-46dd43c98200",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not null",
                            "    req.options.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "c5618996-f0ce-479e-8d7c-bfea73ab9c0b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e0a07496-d622-455c-b1c7-02c86ad21c87",
                    "name": "credentials_issue:options.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f0881b54-8368-4a6c-96e6-a6181087b233",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "79f0c94d-9eef-438a-b195-8c5d8999ac0b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "40bf674a-b683-4996-a8c4-94ac56fb32d2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not object",
                            "    req.options.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "ea31f8a1-c01b-4d70-94bb-d0ccc824a023"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a4f3b584-03ae-4301-8cbb-4efa0964b049",
                    "name": "credentials_issue:options.type:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "19e26bbd-c7ba-4a4b-baeb-e076701c0cfe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "db51c572-7543-45d1-8adf-68a771ed0ea3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dfe69245-db32-4e9e-bc89-163fe97d7030",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be one of the valid values",
                            "    req.options.type = \"invalid value\";",
                            "}));"
                          ],
                          "_lastExecutionId": "827ad8ba-f45e-4b40-b18d-f1786caeb363"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3112baec-594d-40bb-a4a5-b22b463fc0d6",
                    "name": "credentials_issue:options.created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1f0b4c6f-f53a-4255-bd78-35e887fad4d3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "980c85c8-5afb-468b-a6f2-340c5c563b16"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3a0da8c4-4013-4256-a5d0-e5c8203aab3a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not array",
                            "    req.options.created = [pm.variables.get(\"created\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "ba4b95b1-8878-4b4a-883f-f0746849820a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "66be933e-92a3-4c77-9e15-8941548e80e6",
                    "name": "credentials_issue:options.created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c9fabc2c-5683-4977-a206-db1306a3a7ae",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7d1ca0e0-795a-413a-bb4f-f01b17f2a10a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c134f97e-d699-4d9c-8b32-1671783bf2e2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not boolean",
                            "    req.options.created = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "dd5d191d-8e0e-4b9f-8dbc-751148adf320"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8a2027ed-8746-4934-9d48-c48eb5dfcdab",
                    "name": "credentials_issue:options.created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2e7eefef-f742-4bc5-bf28-c04fcf51d13a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3d1ec49c-c2a4-41f8-8384-c1abc28f3ff8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0440e69f-a250-4b86-b285-4da49e3ad56a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not integer",
                            "    req.options.created = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "967bbfbb-9bc6-485a-9cc5-69c3910e392a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b249e2a1-13b6-491f-8a3d-c789698dc4c9",
                    "name": "credentials_issue:options.created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4e519c59-4848-4b50-b66d-fc117b4fe436",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1a0ccc86-409b-421f-8d20-3077669308c3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "39f54347-124f-485d-bceb-c377f4546ea9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not null",
                            "    req.options.created = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "b57301fe-7023-4c95-bcda-05d11c343d79"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1f827ce5-f467-43bc-82fd-eb374d152adc",
                    "name": "credentials_issue:options.created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3677f3be-b592-45d2-941a-c8cc15d3e361",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1a12a8ee-c98a-465e-b492-c4941a91e367"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "049adb5f-4c84-45ec-941c-e90661208986",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not object",
                            "    req.options.created = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "e4149fa0-87ed-42f2-a54e-d0a8e56b2c99"
                        }
                      }
                    ]
                  },
                  {
                    "id": "db8874dd-dcba-42a1-a700-71d12610c642",
                    "name": "credentials_issue:options.created:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2cd63b39-58be-473f-927c-07f464c05dd6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "18729b27-1347-446c-a1a5-a13aa42091ca"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e1d9e784-cd18-4e6f-9ef5-106c203022d3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be a valid XML date time string",
                            "    req.options.created = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "03b40134-8b60-4602-9be1-588d46473e1d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "49243303-c5f4-4fb2-b3d4-810336b391cc",
                    "name": "credentials_issue:options.credentialStatus:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6f65e741-ca2b-4576-81cd-87e7ce159685",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6f2c26b2-283a-4f24-a74f-0cd9fb16284a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "99de337e-1b80-4cec-8330-e74a7bd82aa7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not array",
                            "    req.options.credentialStatus = [\"StatusList2021Entry\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "47a4db45-3b91-45bb-8f06-2c82ccc90a1c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b8695e16-3ed8-4cec-b2ec-566bc130b63e",
                    "name": "credentials_issue:options.credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5ca3439f-31e8-4814-8baf-e49899fd89af",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a649888e-28bc-4d4c-b6ba-c6eff16dcc93"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a3ed4e5d-b96c-46d9-8adc-1ee600e3fa71",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not boolean",
                            "    req.options.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "8bcb4551-60dc-4995-9482-89294cbfee17"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dfcf137d-c385-471f-937b-e47b99a440c0",
                    "name": "credentials_issue:options.credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d7cd27d6-3638-43c2-8f68-7fba949d4dc6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "805ff637-6251-40de-ac46-7cdd0321233e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7b4a6aaa-bff3-40d4-b834-e04ca618ced2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not integer",
                            "    req.options.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "9007a4f3-792f-4a57-b53b-277d0a51f0a0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6e855403-e51d-483c-b8b5-5cdd12adc95d",
                    "name": "credentials_issue:options.credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f30d179f-5083-4074-befc-b9161412bb94",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "29c06fb8-5c85-4164-804f-85cf6b3e6b7b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "af81a939-157b-49da-8cdf-e9e716819654",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not null",
                            "    req.options.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "c1d38626-c03e-4b19-bb34-73d199591acf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1f48cb30-1b9e-405f-8d96-5927ee79af8f",
                    "name": "credentials_issue:options.credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0fb3f8bf-cc5f-4648-9dfc-35f0818ca7be",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "67d4d825-7a62-4282-aa7d-c0da35724d6e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c99a06c2-9aa5-4cde-8d65-436b91d4a127",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not string",
                            "    req.options.credentialStatus = \"StatusList2021Entry\";",
                            "}));"
                          ],
                          "_lastExecutionId": "f40098e5-3c0d-49b2-84fc-01930e066373"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9a1f248e-ad4f-48b1-9821-42ccd6ea187d",
                    "name": "credentials_issue:options.credentialStatus.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "60423337-0151-4236-9800-69b40aa4489a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8888b34a-e2a0-4130-8db1-c8a5363ad12a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2ff0b315-da9d-42fa-ab7f-ee526b178a63",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must contain \"type\" when present    ",
                            "    req.options.credentialStatus = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "8a0c6f03-104a-47a5-bb86-f5ecf828ef6e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8cbef56a-5b2b-4b52-9a38-3edd1a128793",
                    "name": "credentials_issue:options.credentialStatus.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "be91c736-169f-4cc0-a3a7-fe9dc40b6dd2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "96a4d862-1df5-42fa-ae37-1b13e681bcdd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cef24bb8-b9ff-4ae8-b491-7f90dd0a47b8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not array",
                            "    req.options.credentialStatus = {\"type\": [\"StatusList2021Entry\"]};",
                            "}));"
                          ],
                          "_lastExecutionId": "7a01cc1c-0b73-40ba-ae85-eeccf49c6f3e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "567c6a1e-5ee6-4d5c-9f60-4e6b6e6b4121",
                    "name": "credentials_issue:options.credentialStatus.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0f6036dc-5e87-4a0e-97c8-7df71536ad44",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6bea25df-af75-426c-8694-505951a63e33"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "616157d5-7e0d-4f9c-8e08-ae61c23620e6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not boolean",
                            "    req.options.credentialStatus = {\"type\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "925d0e53-4c2d-4793-a684-f734b2e7be3a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "806241c8-c0e1-42dd-8da5-f8c2d92d6dc4",
                    "name": "credentials_issue:options.credentialStatus.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9ad5155e-7e05-4ab6-a19f-43213f035450",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cd05f18c-bb5a-4a06-95c1-5314447dcad4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6275361f-7130-4c62-ba63-084f4fef6645",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not integer",
                            "    req.options.credentialStatus = {\"type\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "abaddb4c-79c9-406a-b09b-67c610988e1c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "813f29dd-2432-4d89-8682-87f9e60fd6d4",
                    "name": "credentials_issue:options.credentialStatus.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "84393c20-ec33-4bf2-8f4d-e95edb3367a2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5defc1c2-5098-45fe-a089-6cc0e55c7f6d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "24a7267e-8bad-4da3-93f4-e66359c3b85d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not null",
                            "    req.options.credentialStatus = {\"type\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "4f10c814-6d88-46e6-b915-636de07e994d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8f4fb849-62db-4b42-b74a-0cb369633635",
                    "name": "credentials_issue:options.credentialStatus.type:null Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "67252e50-f1fa-451f-9535-d90b306483ae",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7b537ab7-5c0a-4345-b76c-ed102295009c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "29031c8d-7dc6-414a-9f2c-29eeeca33eb5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not object",
                            "    req.options.credentialStatus = {\"type\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "e8748f7c-7045-4cdd-b6c9-de009952f7d6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "09256e0c-34b2-4913-a3c3-6b7713cb3355",
                    "name": "credentials_issue:options.credentialStatus.type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1d567f7a-a916-4d3f-ad07-cb69d3ffecbe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "b29d4a77-8ffb-4456-a786-8c242a1fbeb2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2fa4e7d2-5c6f-43be-8971-c61824e2b5a0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be a valid value",
                            "    req.options.credentialStatus = {\"type\": \"invalid value\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "e351c39b-4051-403e-9d31-30992a588d45"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "06194f74-4f76-42d0-8685-deba8e05d4d3",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "585ee6bb-733e-4732-b97b-a5f060ee9951",
                    "name": "credentials_issue:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "69462d37-4a88-4240-8d97-f26f2bd5302b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "4743e669-1588-4865-b9a6-c27ad0741824"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5e6bb421-e407-4f8c-b209-3f771a224af1",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "dff408de-c7b6-4d12-a9cd-ad05dace3a10"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "42f1a026-d2dd-432d-a002-710755d0be87",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "3a4af9d0-15dd-4ebf-988d-c2ca47e3a41d"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "d2eefaee-9978-4979-b5f5-0c0cbad1d5c4",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "fc9ef497-c152-481d-b575-b40148e4957d"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "15d885e9-31d6-46ba-a660-dd1d772c5239",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "dde4bc3d-3a45-411d-877d-8d1aab3cd1c3"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "da5d21df-417a-414e-a633-07593c9bf049",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "11aab063-73c1-4b97-92a6-b926068adff9"
                }
              }
            ]
          },
          {
            "id": "e24eebc1-002f-4515-9fe4-f9c27f96346b",
            "name": "Positive Testing",
            "item": [
              {
                "id": "ea9f0dd7-ddea-4b33-acce-01ef9214c102",
                "name": "credentials_issue",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "58015e3e-1d22-484f-979e-62e8326ee6cd",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        "});",
                        "",
                        "pm.test(\"response issuanceDate matches request credential.issuanceDate\", function() {",
                        " const { issuanceDate } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuanceDate).to.equal(pm.variables.get(\"issuanceDate\"))",
                        "});",
                        "",
                        "pm.test(\"response proof.created is close to 'now'\", function() {",
                        " const { proof } = pm.response.json().verifiableCredential;",
                        " const delta = Math.abs(Date.parse(proof.created) - Date.now());",
                        " const tenSecondsInMs = 10000;",
                        " pm.expect(delta).to.be.lessThan(tenSecondsInMs);",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "08f65f63-8de9-48da-a6b8-1f7c381bf412"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "88711768-ca09-47f5-a091-ea114e2f5779",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // noop",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "28e72120-3a75-4035-af9b-429506629a12"
                    }
                  }
                ]
              },
              {
                "id": "f940e964-6e4d-4087-832a-e89fed769068",
                "name": "credentials_issue:credential.opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "56255af0-4bb1-47e1-9c83-fe8ab8f32dd1",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verifiableCredential.id matches request credential.id\", function() {",
                        " const { id } = pm.response.json().verifiableCredential.id;",
                        " pm.expect(id).to.equal(pm.variables.get(\"id\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "a0473ae2-496d-4118-a1fa-7b0dfcc22a9a"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "74e88b32-db01-4d50-b471-9b4263a33816",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.credential.id = pm.variables.get(\"credentialId\");",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "6829889c-3d0f-428c-9d35-751c4fd20079"
                    }
                  }
                ]
              },
              {
                "id": "2c7d8d92-5a77-46c7-95d2-68e2c2c21c20",
                "name": "credentials_issue:credential:alt.issuer.object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "20b93a07-40dd-4c21-8f01-82534531c76a",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer.id\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " // Implementations may reduce object with just \"id\" property to a bare string",
                        " if (typeof issuer === 'string') {",
                        "  pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        " } else {",
                        "  pm.expect(issuer.id).to.equal(pm.variables.get(\"issuer\"))",
                        " }",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "3e6803b2-4357-4794-85ea-87b06667025c"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "3f00724b-e512-4f64-ae7f-8cde51e1bbce",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.issuer can be an object with required 'id' element",
                        "    req.credential.issuer = {\"id\": pm.variables.get(\"issuer\") };",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "c9f57d6b-e59c-4258-bc60-e3c05d3fbb62"
                    }
                  }
                ]
              },
              {
                "id": "0acbed54-1867-48d2-a19f-43b0d80a0469",
                "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "d152d243-9e11-43a2-831a-7865f214eb6b",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject.id matches request credential.credentialSubject.id\", function() {",
                        " const { credentialSubject } = pm.response.json().verifiableCredential;",
                        " pm.expect(credentialSubject.id).to.equal(pm.variables.get(\"credentialSubject\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "a35d4a2b-a12c-4abc-9599-812a5ffb83c3"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "8e806a19-0ef7-4f93-8de6-c51afdcddcf4",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.credentialSubject can be an object with optional 'id' element",
                        "    req.credential.credentialSubject = {\"id\": pm.variables.get(\"credentialSubject\") };",
                        "}));"
                      ],
                      "_lastExecutionId": "1b4c4d29-faca-4297-9bec-1d1e223924b6"
                    }
                  }
                ]
              },
              {
                "id": "da617652-ab1a-402d-b96e-3a0ff406dfa4",
                "name": "credentials_issue:options:opt.created",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "352be250-1f19-434d-a505-90a77152c097",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response proof.created matches request options.created\", function() {",
                        " const { created } = pm.response.json().verifiableCredential.proof;",
                        " pm.expect(created).to.equal(pm.variables.get(\"created\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "0a992faa-d7c3-4d80-8e5e-5584529be6de"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "ff0e47d6-c28a-4034-9d89-0383a54abaa8",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.options.created = pm.variables.get(\"created\");",
                        "}));"
                      ],
                      "_lastExecutionId": "5a8d6b1b-d2c0-4634-b229-87049f632a13"
                    }
                  }
                ]
              },
              {
                "id": "bbd3bbd5-6e60-403d-8087-014078003277",
                "name": "credentials_issue:options:opt.credentialStatus",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "42020b0e-810f-4445-b008-f335b6f420f5",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "86e0b6e2-852d-4d26-8d25-2d7453f305f2"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "fff713d4-5f0f-4558-9f8c-22d747b161ba",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // options.credentialStatus can be an optional object",
                        "    req.options.credentialStatus = {\"type\": \"StatusList2021Entry\"};",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "8ae549ed-b0c5-4ca0-a928-e60c4842d25e"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "0d3581c3-fd8e-4ed9-a98f-819edbb74167",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "1bb69686-3a30-41df-8127-9dda5d3a43c7"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "eaebdf41-2e05-4468-8e6d-7401be7feb54",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "5eb0aa22-3a1d-49eb-85ed-caa13553cd44"
                }
              }
            ]
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "8b149de8-bb6e-48c0-95e2-101bcc10e7af",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "pm.variables.set(\"credentialSubject\", \"did:example:123\")",
                "pm.variables.set(\"issuanceDate\", \"2006-01-02T15:04:05Z\");",
                "pm.variables.set(\"issuer\", pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "pm.variables.set(\"created\", \"2006-01-02T15:04:05Z\");",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credential\": {",
                "        \"@context\": [",
                "            \"https://www.w3.org/2018/credentials/v1\",",
                "            \"https://w3id.org/traceability/v1\"",
                "        ],",
                "        \"type\": [",
                "            \"VerifiableCredential\"",
                "        ],",
                "        \"issuer\": pm.variables.get(\"issuer\"),",
                "        \"issuanceDate\": pm.variables.get(\"issuanceDate\"),",
                "        \"credentialSubject\": {\"foo\": \"bar\"}",
                "    },",
                "    \"options\": {",
                "        \"type\": \"Ed25519Signature2018\"",
                "    }",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};",
                ""
              ],
              "_lastExecutionId": "3668bb5c-2b4a-473c-ab1b-47dd8d31aa2d"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "6da42a23-b51a-438e-84f3-e87a0b23cba9",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "d1b810ef-68dc-411b-ae8b-fd55763f06ab"
            }
          }
        ]
      },
      {
        "id": "1aac1e81-518e-4435-85b0-4e97c8c02dca",
        "name": "Credentials - Update Status",
        "item": [
          {
            "id": "daf0d505-c718-4be8-8635-ee0ec8289854",
            "name": "Negative Testing",
            "item": [
              {
                "id": "ee033a30-1f18-4c54-8cb3-b04874ccbb71",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "782928a7-b4d7-4b2e-a704-437855ffc381",
                    "name": "credentials_status:credentialId:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3f8df41a-082b-4ab7-b4a9-a9e163f89cd5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "38f1e26e-fd2f-4e04-8c9c-e5a69643e467"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "add9691b-b0b3-4965-94db-45b27d6947aa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId is a required property",
                            "    delete req.credentialId;",
                            "}));"
                          ],
                          "_lastExecutionId": "2fc9f9ad-aba1-4bf2-af2d-2d64759002ce"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f9243f49-ab85-4d4e-bc10-cac88fd8c76d",
                    "name": "credentials_status:credentialId:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "74b13b11-a7a7-43d5-a921-681653fe10e2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3fa0c119-6773-478a-a4d9-073e1ad6e28b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3173ad0e-5e17-4d42-8243-ac2b8b66e1db",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not array",
                            "    req.credentialId = [pm.variables.get(\"credentialId\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "333a934c-be43-494e-a4ad-cb599fa4ea6b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "319456e8-2cb3-424e-8ca2-a83009ccdc11",
                    "name": "credentials_status:credentialId:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fb46819b-f14e-42f3-9c4f-884e8ad36126",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "aa965ea1-415a-4829-a84e-f4c363086d0c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a8385d12-66f4-486c-a676-90f6872f40df",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not boolean",
                            "    req.credentialId = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "24e64c97-85fe-429b-98af-a1cebc7fa862"
                        }
                      }
                    ]
                  },
                  {
                    "id": "80ca702b-8606-49a3-88b0-8b9349932588",
                    "name": "credentials_status:credentialId:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6309d8c3-382e-48ef-bede-4669eedb11b5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4e2eb1ff-a2fe-44e2-bea2-f5db6870cd8e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6f5a076f-add3-403d-968f-72bfbb5cbcd2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not integer",
                            "    req.credentialId = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "ff748449-212c-476e-b776-a20d8442520b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5babf924-61ee-40b7-b4ef-192f1bcc9d23",
                    "name": "credentials_status:credentialId:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "74286a5b-0a28-44a7-959f-09c6b4534c5e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "25bc0826-0979-48c8-9d29-252da5001986"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "86927a75-fcfa-445f-91b8-9ebbf5215640",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not null",
                            "    req.credentialId = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "86a10ad8-dd89-43be-9060-027b4142d717"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4fefa706-1783-47e9-b03a-ee37effc5f68",
                    "name": "credentials_status:credentialId:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "69cc72ee-9ca2-4bb5-9a2a-ae215878a6ef",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cf828037-7144-4599-af20-6c3f6fc0a59c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "14ed8da8-4f95-4f90-ac99-1001bc069d0d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not object",
                            "    req.credentialId = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "d35dc05e-54f5-4019-8a0e-aa3e3ff301e6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3ce2321d-a263-4c63-b479-f855c16e3499",
                    "name": "credentials_status:credentialStatus:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5414d53c-e67c-4cd7-9d07-210d95a4ca84",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "da122222-d8e6-43c4-ab62-6de457778f6a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8dcf4400-81bf-451c-9f4d-2e923e950be3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus is a required property",
                            "    delete req.credentialStatus;",
                            "}));"
                          ],
                          "_lastExecutionId": "ea95f3b2-68b6-40aa-b5c5-b075313d9312"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9bea885e-7ba6-4957-ba5d-0bd09c1e30ac",
                    "name": "credentials_status:credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fa820066-389f-4ac0-a30f-95e846dad197",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a0673b40-4b97-4e23-b133-78dbaab5b595"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f7fb9e5f-7bf7-4575-9d4f-a54fcc32dffb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not boolean",
                            "    req.credentialstatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "a6eb93e7-e36d-4360-956b-ff68900a1f39"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8671cf5b-a488-481c-86c2-dbec95eedcd3",
                    "name": "credentials_status:credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "968c7446-d758-4e0d-9863-27ea520ee213",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "678bc28c-80ec-4ba6-9e8c-37d79789bfdd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "19140b5d-7377-4917-b9bb-9bd0bd12f3de",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not integer",
                            "    req.credentialstatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "2de43613-ac53-438f-b28d-f89970ec2dd1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ddd9ce33-53c3-403b-8e62-46b2e3e99f3a",
                    "name": "credentials_status:credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0c88c3bd-8d2e-4897-96b8-46d2d7cf59be",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bb95fa16-5d4b-4b2f-a7f8-7a17dd794728"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2dbe2e9c-e3f3-4f1c-9493-28f600bfbe0b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not null",
                            "    req.credentialstatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "ddde6f09-ab26-4e44-b5c9-84d112db94ee"
                        }
                      }
                    ]
                  },
                  {
                    "id": "40026c68-011f-4e84-b2c3-8e55767c6e59",
                    "name": "credentials_status:credentialStatus:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "201cf888-7289-41ec-8112-9afd8f3b9761",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0a4d8e58-34b9-4320-86ba-d762cfffa382"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ee56d137-e6b1-41c2-a7af-985b8fcee47c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not object",
                            "    req.credentialstatus = {",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"0\"",
                            "    };",
                            "}));"
                          ],
                          "_lastExecutionId": "6c788e26-bbc2-4bf7-b73a-e00aa2832f3c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "611a37a7-7df4-4b3d-bdaa-df580faadac9",
                    "name": "credentials_status:credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "17d7d063-40f3-4045-9f78-bfe0945af46e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8c4488c5-db12-4f76-b6e3-e6d5b76c0af2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a1cfa58a-2a64-40ee-bbc1-cb9c185fc0ca",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not string",
                            "    req.credentialstatus = \"RevocationList2020Status\";",
                            "}));"
                          ],
                          "_lastExecutionId": "12cd4a61-122c-42e2-a5dd-997abf252068"
                        }
                      }
                    ]
                  },
                  {
                    "id": "71885d72-0db3-4813-8249-7745f6241fad",
                    "name": "credentials_status:credentialStatus:too_long",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "14d10e72-89dd-431f-9ec9-26e2dbbebb20",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4b433bb2-8bd9-4288-a748-96cd975d0eec"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "45640a10-5e0c-482c-bc3b-fef6fa727d54",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus can only have zero or one elements.",
                            "    req.credentialstatus = [",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"0\",",
                            "        },",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"1\",",
                            "        }",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "af065198-4fbd-4d23-b56e-32772e63f738"
                        }
                      }
                    ]
                  },
                  {
                    "id": "081c1a2c-6212-44cc-959e-c9599172fcfb",
                    "name": "credentials_status:credentialStatus:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c3aa98a4-4d41-4319-be6b-8f6ec4b4c33e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c6c7f2ae-a229-4da0-b39d-1629ee53d2e2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "49af17f6-e743-4205-abb8-da8ab86d30bc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not array",
                            "    req.credentialstatus = [[]];",
                            "}));"
                          ],
                          "_lastExecutionId": "2fc79095-3159-40bf-8a1f-e3dc7c475f42"
                        }
                      }
                    ]
                  },
                  {
                    "id": "35ed9f72-e0ce-4072-8909-8bc8d84c8b75",
                    "name": "credentials_status:credentialStatus:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "871b99c0-357d-42a7-9a23-9d5e60280cae",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "21467b13-6e0d-4d7e-bc5d-1ce62c1d55d3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "42631df6-c5d8-4bfa-8085-04b0ef5540db",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not boolean",
                            "    req.credentialstatus = [false];",
                            "}));"
                          ],
                          "_lastExecutionId": "4ef9300e-b19b-45bc-bcb4-aafa0b86d9d7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dd889e14-b1ab-421e-9e18-1d8a1e8f707a",
                    "name": "credentials_status:credentialStatus:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "192b2b4e-2cff-48f8-8226-95bba9b61604",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "13de818a-af0c-4a25-9b33-373fe7c31f96"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "95c1e50a-72be-4e90-b458-4d85b568db4f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not integer",
                            "    req.credentialstatus = [42];",
                            "}));"
                          ],
                          "_lastExecutionId": "a57bb498-5db0-4f82-9303-84b8991bcbdd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5daee3b0-a0ce-4987-ab54-953f4a20f54e",
                    "name": "credentials_status:credentialStatus:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "247d7632-2806-4c20-874f-4d640ff941d8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4e38d3c5-4769-4573-90be-b7c352100522"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "707ecd8f-c96a-4288-9e07-3e5f3ccd61ef",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not null",
                            "    req.credentialstatus = [null];",
                            "}));"
                          ],
                          "_lastExecutionId": "fedcc685-3dc1-46db-b272-eb95cabe90a0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b9114f53-0129-49e1-ac02-b446907e7beb",
                    "name": "credentials_status:credentialStatus:item:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "126a86f5-fe4f-4160-bd49-5471d82a23ee",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5b292590-e0ac-4feb-9fcc-8d4b10f0f758"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c2b08ce6-2a4d-48c5-b735-04b727cd3866",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not string",
                            "    req.credentialstatus = [\"RevocationList2020Status\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "67090aa1-3d96-42ad-a8b8-ff616704cf78"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4ba7aa44-f4f0-483a-b31b-7cbe4ebf374e",
                    "name": "credentials_status:credentialStatus:item:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bdb54bba-918d-4d1d-80b0-781ed9eb0f60",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fde3686e-08aa-4bdb-ac42-d985533ed054"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5750e0e0-6f5e-465a-8c71-6e9106c09e00",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type is a required property",
                            "    req.credentialstatus = [{",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "6853ab71-f004-4240-80aa-dbb530ea7fc9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bc2cbeaf-4930-42c9-ac23-3d5c916c82c4",
                    "name": "credentials_status:credentialStatus:item:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9a37cd47-1bd7-4d27-9ab6-983b7a8fbff8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7a56ed7b-7dcd-4262-b140-8566820a5595"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "682a65cf-0ec8-401b-a212-ece8445cd724",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": [\"RevocationList2020Status\"],",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "025a6665-6471-40a5-a7a4-1a7180b45a5c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1981a397-8af8-4aca-877f-0d5b3c18fc51",
                    "name": "credentials_status:credentialStatus:item:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "870bc1b1-4b62-4894-ae92-a12995813907",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c7dddfb9-de99-4528-ac2a-cac995e21199"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "44617e89-2ca6-4889-8aaf-fa4bca0a9fc5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": false,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "2ae0c4a9-33bc-4533-a2b4-f7b3c024a83d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3fd65475-c1cf-404f-b6c2-de679a7703b8",
                    "name": "credentials_status:credentialStatus:item:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4301a1dd-3c7e-484c-b75a-9befe6812caa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1a98e21d-e681-46e5-b7be-b0072b826b9f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f323e6ea-e102-47c1-a953-dbdabf28b60b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": 42,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "5e200ef2-1b14-4e4d-ad24-99f0ba4ebc72"
                        }
                      }
                    ]
                  },
                  {
                    "id": "46c72016-8db7-4d3d-9ae9-8b85049fee5e",
                    "name": "credentials_status:credentialStatus:item:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6e289030-0ab6-45d4-99e8-adb0dbc88caa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b87fbb50-f0a4-418d-aa8d-c0ba4baf94bf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "33d8d1fa-58b9-4f4e-90fa-e12a1ad1daea",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": null,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "cb2774eb-d259-4ec7-848c-155afee73e62"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bbc4c80b-69a7-41e5-8ead-e2c38fcc16e2",
                    "name": "credentials_status:credentialStatus:item:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3034cd50-b7c0-4eb1-9afa-1138ec87855b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d150c629-7e7d-4d6a-b376-2f26066f6d01"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "10b87b37-1c71-497e-b48b-f5cb1b9568ae",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": {},",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "818e69cd-640b-40ed-950a-c1fc834af43f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f091d3f8-9cfd-48cc-a5c1-77efe9675dfb",
                    "name": "credentials_status:credentialStatus:item:type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c6c7ecfa-dbe1-4954-ae81-dedb88f852aa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9b663b66-6d21-491f-b8d9-9df98e121961"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1cc2264f-dae0-4070-84e9-a7f23ddd1e81",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"invalid value\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "b27fbbbc-697c-4a79-8129-b001f7daf6b4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0a9d1943-a490-4e0e-b4cf-d225146a33f8",
                    "name": "credentials_status:credentialStatus:item:status:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "61e18c98-aa9c-4550-9b9e-73bd033e55fa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "146c6264-e110-41a3-887d-e4d6c35fe34c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a0b283d8-0d7b-4405-8141-a399a11aee84",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "3763c0ca-f3dd-4fdb-b7c4-6804e54e42be"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3fe84df1-179b-4f58-9cb3-d567cf87a5de",
                    "name": "credentials_status:credentialStatus:item:status:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ea330d8f-61f3-4b40-b787-9a4ac2991779",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fad5a1e5-3e70-4f9c-923b-bd1e91319a19"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e162a586-aa8e-4a20-9572-a99159ec0bee",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": [\"0\"],",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "10cb6cd0-47cd-4cd8-9431-d3862bf4f75e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "642027e2-0ab9-44fe-8de9-0a47e5ae8c30",
                    "name": "credentials_status:credentialStatus:item:status:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bf65b711-9b16-40ae-b77c-2f1421b47452",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "21c9dcc6-25a9-4cdc-8abd-c7caee14fc86"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "be169c53-44b4-4ae6-a3df-01e07465d79e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": false,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "9480f46c-0b78-4f19-81ae-fd5c7f9ec90e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "136ab4c1-2f95-4946-a17e-669c2bb4fe07",
                    "name": "credentials_status:credentialStatus:item:status:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "941921b1-f260-47d8-985f-9cd7bc1da839",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "acfb51d5-e681-47e1-ab2b-51fb335c46da"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0c0cac28-adcd-4d42-a527-6a854a39cedf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": 1,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "a4e19f1e-f59c-494e-929c-5a5ed55dc760"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9f9a94eb-bdd9-49a4-828d-3e16f848aae5",
                    "name": "credentials_status:credentialStatus:item:status:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "05f8a3d4-c7e6-4444-87d4-60a41bb45adb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5413fee3-e681-481a-9150-dd550d888403"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8aa83e54-5277-46fb-b550-7f55c7d388b7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": null,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "44975555-e2c9-4dc0-8590-b8557628fd7d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "44c1526b-df28-4f4b-8247-f86d1fcd9f42",
                    "name": "credentials_status:credentialStatus:item:status:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3ecaf6f9-b38f-4d54-b27d-ef53916e495b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "735f3f22-e15d-4d0b-a074-9fcee1fb170d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c8dc461d-4af5-4941-9a9b-c72c44ca20ec",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": {},",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "bfcabd2a-7adb-4e29-9d98-a5a894b03f1e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8e9d1a20-f9c1-43e8-b024-9b3288200f1e",
                    "name": "credentials_status:credentialStatus:item:status:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4ff8aee0-6ddb-4fdb-bb96-49a1ce9e8894",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fd3f7a34-8c22-4bf9-8dfb-ef9f2cd5f95c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "afc907f3-3b01-4078-b762-1eb1371a363d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"invalid value\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "7837d9e7-b98a-4a33-ba0c-495cf21aaad2"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "93c703e1-d141-4672-9b25-ce1d5f16aa80",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "e1df302e-69dc-4b1d-9d09-0389e00068a4",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c1f4b36a-1bea-404b-b0dd-8ab52c33818d",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "badccf43-5e06-493f-b79d-a0efb46460c6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "14a64506-87c3-40c7-af06-f7414d9147ed",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "b190c6cf-c9ef-4c53-b7fb-4be7f2d4c377"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "21263609-dc90-4795-97b7-c41e26e14bb8",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "e239b07e-2b82-49f8-8082-3bccd83ec534"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "9783f7bc-9cfd-4245-94fa-fc95e47dd944",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "4b145811-fcdf-4541-b9a8-722126c4300b"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "4f4dad58-b506-4d9a-bc40-8cbf65875680",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credentialId\": pm.variables.get(\"credentialId\"),",
                "    \"credentialStatus\": [],",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "ad840b49-0b89-497f-a290-6c60b0098d2c"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "04877a5e-9776-4604-8fe4-63bdd8b3b9a6",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "2686acd5-f43b-4feb-963f-d4bf1dc425c3"
            }
          }
        ]
      },
      {
        "id": "0ed7c133-352d-448f-91a0-8936d07d1c5b",
        "name": "Credentials - Update Status (StatusList2021)",
        "item": [
          {
            "id": "d5b8a4d1-42b6-4c6b-8810-5fb260258995",
            "name": "Negative Testing",
            "item": [
              {
                "id": "442b4f63-e94f-4046-9f65-29ccc6c5713d",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "a4156ef4-8d1d-4089-9a53-20151ef0f3de",
                    "name": "credentials_status:credentialId:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "172dc6c3-cb82-4f7a-a5bb-28060183f53c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a1035eb7-7f90-472b-9ff5-3f1349ada45f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a8a92938-ceeb-412a-9a28-99b0e6b31d38",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId is a required property",
                            "    delete req.credentialId;",
                            "}));"
                          ],
                          "_lastExecutionId": "049ac348-17cf-4364-b7a8-8b649af15c06"
                        }
                      }
                    ]
                  },
                  {
                    "id": "655a78cf-8291-4b1c-ac95-9985227d0bff",
                    "name": "credentials_status:credentialId:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "370979cc-6092-403e-a2a3-b96641935eca",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "656dac17-8324-44fd-a983-55058d9428bb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e0ee1fc7-f4f1-406b-b388-3e650e1d0f57",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not array",
                            "    req.credentialId = [pm.variables.get(\"credentialId\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "231b2492-7413-40f3-ab8d-ae351a415f5e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fd10a828-5b3f-41c7-9d15-c725b666c2aa",
                    "name": "credentials_status:credentialId:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b2b32df3-2e43-4f25-a476-785da2812032",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b3371691-5be8-4b86-899a-c2d12c11ddb7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d70530d4-8f7d-4037-8f7c-d142a9a4e3cf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not boolean",
                            "    req.credentialId = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "bf77dcda-9f7c-4c51-bf38-0f5d8ee0b619"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3409811e-093c-47d7-86f7-974d98fe5e42",
                    "name": "credentials_status:credentialId:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a8972137-527f-48dd-a50a-db382c210fe3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b77f00aa-6308-4ed4-9f38-1d8b710de6dc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ff88a00e-776e-4660-ad6c-b469026a40ec",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not integer",
                            "    req.credentialId = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "4180237f-5c76-4e47-8737-bcc221e33358"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b00697e1-737d-4d22-8672-04e3912641d4",
                    "name": "credentials_status:credentialId:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ba4219cf-f74a-4ced-a600-7eb93d0b7a5c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "63aa5b8d-bd78-4355-b2b3-7fa1f7c6e87e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5802f141-07b3-48a9-bf25-e3ed11d87a56",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not null",
                            "    req.credentialId = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "53515cf6-6b38-45ab-a614-7b504e9d0327"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3c8dce17-6591-43fd-a101-da0314eb422b",
                    "name": "credentials_status:credentialId:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9d632a6a-9022-428d-9da6-10773993add3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4578ad65-2766-4758-9a5d-93c260f80a8f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "aca0045b-fd83-4cbe-936d-4ecb6f0bb975",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not object",
                            "    req.credentialId = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "925f6a36-8a5b-4935-840c-0d4a71ee19f0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e31a1f63-5b62-4a24-b2bb-2310189db974",
                    "name": "credentials_status:credentialStatus:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8cb896c3-354e-4892-a796-4e976a4d617a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7ddb6e27-6679-46ad-8539-5b5696a437df"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6ad0d7eb-07c3-4b71-ac58-98e659575d2e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus is a required property",
                            "    delete req.credentialStatus;",
                            "}));"
                          ],
                          "_lastExecutionId": "b96b5137-c6dc-45ce-b63d-70ab7c0eec23"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c49c75db-df58-4c90-bf3f-8b4f2ffb8e8a",
                    "name": "credentials_status:credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e6f9d9f0-d8e6-40af-97ff-29795986ca75",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b7b253c3-1eec-41da-aa3f-f8d80968ac50"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ac0b478d-6ac9-4419-bdbd-18d7cd088131",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not boolean",
                            "    req.credentialstatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "263273ee-0dee-4601-85aa-e14d89fac8dc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "07194fda-4b67-4e26-9c43-daf44b8b3857",
                    "name": "credentials_status:credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "96ccb5d3-4d40-4a8a-a02d-695a73f28305",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "218352e5-2c44-4167-ac64-eaf255b7b5f1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6776636a-fb57-4aef-9a4b-0d3a1e834960",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not integer",
                            "    req.credentialstatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "2eba5d1b-c478-412e-ab32-3c429f3b787e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b9c33480-d6fc-4911-b870-072bf00d746c",
                    "name": "credentials_status:credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0240103e-a576-43f9-b13a-cef9b851a397",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1d0d118d-b0d1-488a-8fa4-24201b5c84cd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e19aa1ad-d10b-42fd-ba2c-99283f7405d1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not null",
                            "    req.credentialstatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "db12efd6-d766-42b8-bf83-a92407ddb387"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e530ef07-98e3-4c21-81a1-14adaf220c58",
                    "name": "credentials_status:credentialStatus:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6a2bf230-8cd6-48aa-b6e6-6fd8fd447774",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "497044ca-6d0d-4f8d-993d-34baa57fbb58"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "abc05fc1-c1d8-495a-8279-66b43c71e8fe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not object",
                            "    req.credentialstatus = {",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"statusPurpose\": \"revocation\",",
                            "        \"status\": \"0\"",
                            "    };",
                            "}));"
                          ],
                          "_lastExecutionId": "5430fcb7-b247-4365-9645-1f19eea23c58"
                        }
                      }
                    ]
                  },
                  {
                    "id": "32fc9360-bd51-41c5-a520-11e16bc47ff9",
                    "name": "credentials_status:credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ef790940-6316-4e93-b79b-5c00fac86668",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f9e502b9-08c6-4c63-8bc8-f5a3b4390f05"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0fd0c396-8c0f-493d-9a7e-897b0e7bf42c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not string",
                            "    req.credentialstatus = \"StatusList2021Entry\";",
                            "}));"
                          ],
                          "_lastExecutionId": "5c273b87-1d7c-4e25-bb74-eba7eb1e853b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c4a49519-6e01-4338-96e5-44a12c7e6921",
                    "name": "credentials_status:credentialStatus:too_long",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5476a1d4-b9ef-4f1f-ada8-a173d3c50cf8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "23a56aa7-03e6-4947-902a-0778820f527f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "508653ca-73c8-4efd-950a-a0ffee344010",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus can only have zero or one elements.",
                            "    req.credentialstatus = [",
                            "        {",
                            "            \"type\": \"StatusList2021Entry\",",
                            "            \"statusPurpose\": \"revocation\",",
                            "            \"status\": \"0\",",
                            "        },",
                            "        {",
                            "            \"type\": \"StatusList2021Entry\",",
                            "            \"statusPurpose\": \"revocation\",",
                            "            \"status\": \"1\",",
                            "        }",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "8890c57a-0aab-43c4-9c09-26ecd9bde0de"
                        }
                      }
                    ]
                  },
                  {
                    "id": "41cb06a7-acdb-4f2f-b3cf-a464584a3006",
                    "name": "credentials_status:credentialStatus:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "df7274c6-091a-43bc-b99e-9d7236866d6f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bd97beed-52f3-473c-b39b-317e6a247cf5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "938503a9-6918-4328-b3db-9e15e814853f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not array",
                            "    req.credentialstatus = [[]];",
                            "}));"
                          ],
                          "_lastExecutionId": "440be0d5-1a6f-4258-9518-3535ffcd8a47"
                        }
                      }
                    ]
                  },
                  {
                    "id": "016f678f-9bda-443f-b288-8b0f68a79b7e",
                    "name": "credentials_status:credentialStatus:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "66ab524e-e39e-467f-8ed2-8fa7e24d493a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2d182167-b679-423c-9c0b-e59ee7d0e17e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0cf0ecdc-c3af-49d6-8a98-5dc8b3a0992c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not boolean",
                            "    req.credentialstatus = [false];",
                            "}));"
                          ],
                          "_lastExecutionId": "6e8d445f-fcdd-4d83-9401-8473a810ff5b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b0a0590c-091c-4de8-a135-3b4393340013",
                    "name": "credentials_status:credentialStatus:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0409217b-d045-4976-9e66-bfd2bcbed069",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a52dd3e3-4e7e-46ad-9c4a-6a45123122be"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5ff0427b-3f99-4159-af9f-8594de7611bf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not integer",
                            "    req.credentialstatus = [42];",
                            "}));"
                          ],
                          "_lastExecutionId": "70215018-6b87-40cb-acc6-c42a2b1291cf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "05bd594f-a179-4188-9062-38efdfc7b727",
                    "name": "credentials_status:credentialStatus:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f0f80d51-0ec2-4ef5-b7b0-07f7f31b8143",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a30b748b-8366-4b8d-bec3-8b448292eb0f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ff3e5ec0-2b83-4420-a435-9c5a268d129e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not null",
                            "    req.credentialstatus = [null];",
                            "}));"
                          ],
                          "_lastExecutionId": "2a2e1460-03e9-4cee-be08-274d6ea19e35"
                        }
                      }
                    ]
                  },
                  {
                    "id": "509248dd-469e-4a11-bbc1-2908005232cf",
                    "name": "credentials_status:credentialStatus:item:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "61d3b69f-4afc-48d4-854a-0324cdc73eea",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "74cbd786-1dc0-4e3e-995f-ef2f199be2ac"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1a34cb02-eb0e-48eb-8edd-7a2d7bba9248",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not string",
                            "    req.credentialstatus = [\"StatusList2021Entry\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "48fcf0b6-4130-4ad5-b530-a989b9ee6fdf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "76ccaefe-60c7-456a-b01d-0fcd16265b75",
                    "name": "credentials_status:credentialStatus:item:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6c18b8b1-6bb6-49fb-99f8-66b28a4ac6ce",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e611ea6f-4412-4349-a77b-9369ced3269e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7cd8122b-821f-48a9-a635-789a2a779ff9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type is a required property",
                            "    req.credentialstatus = [{",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "33a276c7-967b-4322-9f3d-41d1342f4d98"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1f38a524-a3f6-42d3-88d0-e94e967650de",
                    "name": "credentials_status:credentialStatus:item:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7385a9e8-f1fb-498b-9e84-82825edc7253",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c83e1b63-5170-4f5b-922a-91eebeef30e9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2124048e-7764-44f8-8a19-c21d05ad556c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": [\"StatusList2021Entry\"],",
                            "        \"statusPurpose\": \"revocation\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "5b4e0edd-09a3-4683-ab76-7cb6d1de6ce2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2f887fe4-5c2a-44dc-8cba-869d08d8f585",
                    "name": "credentials_status:credentialStatus:item:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5b57d9ee-bdb7-4905-94a4-a581f6ceef6c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "28fbc4b0-3b79-4167-8bee-51f50b56970b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ffff35eb-9468-4240-9ac9-dee20cf57641",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": false,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "271b17e0-4f93-4a78-9130-7b954b639266"
                        }
                      }
                    ]
                  },
                  {
                    "id": "db9507fc-a0db-4780-bcc9-6d038f864174",
                    "name": "credentials_status:credentialStatus:item:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0d5fb4da-811c-4024-bb7b-f02543896309",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f1f1594a-5296-4c6a-905e-8671592b9c8b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f33fcd34-7e02-42e9-9283-23860fe2abe6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": 42,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "420f8d53-5147-4d3a-a628-def65226e73d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c6cc5533-112b-4ed9-b3bb-e80d94968991",
                    "name": "credentials_status:credentialStatus:item:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7823ea4a-e3ee-4bcc-9689-ca86e0b8da00",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d534c4ae-cedb-43e8-9eda-5044b31d60eb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "255c6d77-46b8-435d-adcb-4193038ef6d4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": null,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "f979443e-4e6a-4173-8d41-b69365000dc3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e4854974-60cf-4b54-a05c-c28d33b7afe7",
                    "name": "credentials_status:credentialStatus:item:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "44a4c4c6-dc1d-44d9-a583-35cc5baa7b8d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "716eba7f-a810-40bf-93c2-7ba0be977ab7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "82eeb642-6fb1-40e7-9fdb-38ff73777fc5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": {},",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "a43f3514-1100-4bf8-bb79-8ab2d150c767"
                        }
                      }
                    ]
                  },
                  {
                    "id": "befaddc1-4b9b-4caa-8b08-49d2ddf9a853",
                    "name": "credentials_status:credentialStatus:item:type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c09e2143-c980-4f30-bd26-fe2c99e3c2b2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dd64cc3a-7a7d-486c-bf8e-7b2257fc3527"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fb2501f0-459e-4525-903f-260ed6249f85",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"invalid value\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "c092fa29-5a4a-4995-8911-24c20e08fd44"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2ebf99e7-0fb0-4bd7-b794-60e0e5292238",
                    "name": "credentials_status:credentialStatus:item:status:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "323cdee0-5dac-465d-a420-0b536a493458",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "39c3ac26-29f6-45ad-b7a9-fc8504efcfd7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "871c9de5-8e84-44cb-a8ab-fd2c1d3aa2ed",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "79542ac2-24a8-4ab7-af5e-ccd739326145"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f57500c3-b910-4fbe-8edc-54751908b470",
                    "name": "credentials_status:credentialStatus:item:status:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4de66287-c799-4e6c-aa11-95362f2c2da0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "06491d26-2b4f-4f1c-902a-780fb95433cd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "34f08c5f-66e1-4fb4-bb36-c0d92a46886c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": [\"0\"],",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "b25d3f39-d70f-46d8-be8e-3e099a6721ee"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c9eecb1f-0913-4c71-97e7-3a5c55ab019d",
                    "name": "credentials_status:credentialStatus:item:status:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "59c0abdd-dfa0-45a4-b9ab-fd9cc3d65e14",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "70bb9c16-cd1b-440e-a8f6-4205b3dc3fdc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7bf60d37-0d69-44f0-8cc5-ff51519bcc76",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": false,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "fc930b66-2485-4e70-b9eb-31d30e0b9f1c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "daf4ed87-f253-4f38-a734-a27d8c14e1d1",
                    "name": "credentials_status:credentialStatus:item:status:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "45b6b4b4-7e58-49b2-8bfd-9bc95fbab136",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f849d501-bc0b-42db-9f0d-ccbc574990e4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bb976ae9-a7a5-48f5-9170-e18bbda4d20d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": 1,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "7d64b856-f387-4f51-85b0-8795dc97c04d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "df77be10-69ca-4598-86b4-09e5f43ea5d9",
                    "name": "credentials_status:credentialStatus:item:status:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "91b1319b-177c-46fa-ad27-1a049e930d30",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e862aac5-f1a9-4518-aa47-8f04fe6a0cc8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f6d171cd-1bcc-4a94-8218-6115b81fb5bf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": null,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "e3747c05-b024-4bee-b933-395bbee15611"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9b762632-9dcf-458b-a24e-bdcc0c8d8938",
                    "name": "credentials_status:credentialStatus:item:status:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5f1e2f23-3977-40c4-8a1c-54e4c2234b77",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bfe747ca-8390-49a1-a75f-9d7f3095cfad"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4b9bb09d-6360-45fa-b1aa-a1217977d37b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": {},",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "98e963e2-90fb-4529-900a-055c1ccbbf0f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1f74af59-add0-4982-86fd-b91df7d105e1",
                    "name": "credentials_status:credentialStatus:item:purpose:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ecbdff68-7259-41e7-b142-2ab0ec904a1f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "07dacf75-e091-422e-8f44-ae02147daebd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "067d6ac9-d7c6-4960-93da-76053d16231d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "55100ed2-c472-4e74-a9d8-66ce807bb286"
                        }
                      }
                    ]
                  },
                  {
                    "id": "852e45f6-dd3f-4155-b8b0-da6e7599b869",
                    "name": "credentials_status:credentialStatus:item:purpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "30b13cc5-b762-4825-8591-afea1a80c18a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "318bb343-bf07-47d4-a595-0d0ca875b16b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5faa29e3-8827-4d61-a15c-5d00df1cb3ff",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": [\"revocation\"],",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "3cda2dd0-6b89-44e8-9c6d-58b6ebfa35df"
                        }
                      }
                    ]
                  },
                  {
                    "id": "180c3b06-665b-419a-a884-d6f4c07770d9",
                    "name": "credentials_status:credentialStatus:item:purpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "50fcd3dc-e2f8-4aad-bd3a-04c59dcd73e9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "11dfa3da-723e-41dd-8c9c-80fa5190ad2b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fa14e4d3-6404-4884-b1c0-80a9ef3e53ca",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": false,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "61b60618-2d52-410c-bb10-daa9857f8337"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ef5bb0d7-710d-4328-b61f-0fbb47bdfb5a",
                    "name": "credentials_status:credentialStatus:item:purpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c397c8bf-4932-4d92-815d-80f0119cdb3d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "38d197a1-6819-4a45-b808-e96204f9bda3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5b03b88d-1f06-43f7-87ba-fe54eb611d7f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": 42,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "5ccf3879-5dff-4cae-bafa-4d8d8b69df4b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "55ec9592-b3cb-40cd-af89-59ad6a2809f3",
                    "name": "credentials_status:credentialStatus:item:purpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9cb9c0de-93f1-45ed-8d9d-f2cc65e7d767",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0b088df1-0892-4df7-941f-97b4e74555d5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4835825d-492f-4f00-968c-c204061d3dd5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": null,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "f5ec496e-45d0-4a4d-a89a-1842f2161808"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e1b62dd5-cf77-48b3-bf4c-30114070b3ea",
                    "name": "credentials_status:credentialStatus:item:purpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9fa4f5b9-82e3-4ea5-9d05-4eba8b43a6ba",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e9e552f9-055c-4ddd-a7ad-c8d39af91b1a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4daa0980-0226-45ff-80c6-94831777daf1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": {},",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "96ae5842-1508-4fea-8790-e4a3f0114ab4"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "1454151c-6bb8-4841-9065-78342b313f31",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "9e875d63-062a-4908-a2d9-29aa45e0250a",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4d4a0b85-d97a-422d-8b27-27affb44df81",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "a4c5e0c6-bb15-43a0-99b4-e62bc0ce55aa"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "42d00b98-5ac1-43c1-8194-1cc96bc1215b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "42ae873c-1435-4781-9b83-41a1e57202cb"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "e56d9bc6-1fb9-4ce8-8749-d5912479f8fd",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "46c7faae-8174-4131-a1be-e8bd471e38aa"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "22eb2a93-110c-4dfe-8bf6-6e637a254e07",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "f25a0cca-1405-4152-881b-59f48dd06634"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "02187625-4e0c-4a41-b5fa-3ff990d836d0",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credentialId\": pm.variables.get(\"credentialId\"),",
                "    \"credentialStatus\": [],",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "38d88955-623e-4847-9aef-c3677a5989f8"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "8fe24fea-b1c1-4c6d-8a36-3c7054f6ede3",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "4c83fb8e-889d-4e94-b443-c9bd28b81f66"
            }
          }
        ]
      },
      {
        "id": "467797d4-ca1c-4e7a-bee2-35c4df409cb2",
        "name": "Credentials - Verify",
        "item": [
          {
            "id": "9c992b56-1c35-414d-a1ad-7144c88b2830",
            "name": "Negative Testing",
            "item": [
              {
                "id": "62836038-6e82-4651-8de1-de140985f392",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "dd6dc344-d0e4-46fd-b123-3a5132b9d61e",
                    "name": "credentials_verify:vc:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "60da8c73-3a8a-43de-aa69-207eaa320cb4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "97053c0d-ff86-494d-95bf-775aa086712a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d553d83d-2f7c-4cd3-b7d0-415b107afae9",
                    "name": "credentials_verify:vc:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": \"string\"\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7bdf5b37-6b84-46ce-b4e9-8707a0be2818",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dbc939b6-3360-4019-a13d-88c0129d132e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3f62018b-b5f5-4ec4-badb-b44ff6519687",
                    "name": "credentials_verify:vc:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": null\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b05d7a36-4599-4bd4-9076-af17466df0a6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c5020827-4b22-457b-8479-ff02e1736198"
                        }
                      }
                    ]
                  },
                  {
                    "id": "217b3095-4312-45a9-ae51-dc22c968b6d2",
                    "name": "credentials_verify:vc:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": 123\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3a76f50b-a340-4c21-861b-f99be632e018",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "14485c32-def4-4d95-8448-adee23e298f6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0db598bb-a266-4f4c-95f8-cb90a7ecfbb0",
                    "name": "credentials_verify:vc:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": true\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b198588b-3ca8-4ddc-9087-6b6f7aaac6b7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "54a5202c-a69b-4c95-ba1f-5480d063ec99"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e29cd66a-7bd4-4d51-b944-f6d5ac92d820",
                    "name": "credentials_verify:vc:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": []\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "95ac464f-cfa0-451e-a8c3-6e1c20768cb6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "de1c3f4f-54dc-40cc-b35c-51a3d827fe68"
                        }
                      }
                    ]
                  },
                  {
                    "id": "597eca97-61fb-4abb-8f0f-7e0246967471",
                    "name": "credentials_verify:vc:@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..V5PnQzCWxrPiCYT-WAyKAnypebgwYeD7lX_hyIjFa_lbJje23pZAfFdgnlqBnXLd19Ksa8fZpCE9TN7kAjzxDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a676394e-3e69-491a-a7dc-4a6a98da1455",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a1bb3195-3b3f-46a2-b62f-df4fccd1c79a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2dc95eb5-5b37-4e14-b3a8-6b058179bef9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "49c626c5-317a-4c53-b00e-524c080b0595"
                        }
                      }
                    ]
                  },
                  {
                    "id": "05d79e48-ba82-4d6b-82f5-468a1c33d61c",
                    "name": "credentials_verify:vc:@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cdbfb3ec-299d-4527-b780-b70c15995fd1",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f7069078-79b8-4421-bb63-ade3bbac9667"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7f47abb1-5602-4310-b47a-6de1a3e11d48",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "36aeadf8-00c8-4675-bcfe-e2f65ee4b71e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bba65bfb-08d1-4bdc-8a06-18b0d1b2036e",
                    "name": "credentials_verify:vc:@context:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5c61b099-59d5-4130-b0f6-f1ecc5b5f783",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e6bf4e66-2cd0-46de-b353-4618f6878add"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fd51561d-82da-4e61-bef0-3caeffe41733",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "766ad1fa-9d2e-440b-844e-920b95cacd98"
                        }
                      }
                    ]
                  },
                  {
                    "id": "be4da16f-2a9a-4abd-9ee2-d70183eb8fd6",
                    "name": "credentials_verify:vc:@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "446dcea1-51c4-43df-aa28-7fb3c8c98dab",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "64f0772d-c9e9-4234-97a1-3a4fa278ef70"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a2f6bd7e-32c0-4bfd-95ec-8e185ebd369c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1d0f7660-acdb-4d25-97ee-df62513dd6c0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5c8608b4-e4b8-4249-8206-c348e37d803d",
                    "name": "credentials_verify:vc:@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": {\n            \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n        },\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..w4xJhf2l_4JzwE4kp8pD8dNJdWSaws5HiBgal8zFzB6i9p05tmPITdsrUttpUwopW5UAq9M_EZVqlz-kRfSFBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "65621544-0e7f-4590-9201-8c53e0a84cb9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "79a7f01f-b347-4584-9694-5e1b071dbf52"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "60fc9dc3-bfb5-4407-a170-f00538d576c9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6e2cc2a6-108b-488e-bf30-edc64bb8c439"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8d93769f-b85a-4d23-be61-0cb844caef6a",
                    "name": "credentials_verify:vc:@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": \"https://www.w3.org/2018/credentials/v1\",\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "96673e78-9874-4bb3-8bda-14b442d09096",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7c7bc549-782d-425a-bb34-9981e90c7a02"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bab1c00f-791c-4174-95dd-31c9d0ad4ffc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4b99a531-2c04-4972-8973-df3e45033914"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bb23be15-355a-4265-a885-833d3bc99642",
                    "name": "credentials_verify:vc:@context:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d46709f6-2974-4023-bcb7-9b8f6c60a1de",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "52867582-463a-41ee-99d1-4bbcf1891ca5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8a452f12-d4e1-44be-b500-f95135565a33",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "529d1467-f7d6-4da8-a1ba-b5e0877aa8db"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c95cf602-6830-4cc9-9137-e697afa613bf",
                    "name": "credentials_verify:vc:@context:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3809df12-01a0-447a-a057-39be34498cbe",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "10f7d918-6f2d-46af-b24d-a745bf9aa0d2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d13d8ebd-2d57-4d81-af0b-24d9af3a31b8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "511e0ad9-89aa-4914-93f7-90b4896656a2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "03da3957-ad1d-4bf4-b885-3426e65a9bce",
                    "name": "credentials_verify:vc:@context:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "29289c3d-d2f0-4b80-bde0-e0e7a1fce321",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c6f23f56-3c5b-430e-aa8f-7f4fdab34bfa"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "03a2a5a3-4ff0-4a5c-9817-36105194fa1b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2530a085-db07-4614-83d4-9e70dcf24991"
                        }
                      }
                    ]
                  },
                  {
                    "id": "834d98a4-7318-42cc-bb95-50ec504f3421",
                    "name": "credentials_verify:vc:@context:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "55d9b39b-4a29-4336-90ad-b5559601afa9",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f9604b63-5f93-4c28-ab5f-eacda81a6435"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6c8d4144-32a3-424a-83d7-4925e08ac3f1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5cec6e14-c1b2-4ffb-bc61-53f58977a319"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e8bce4f1-7ef1-42f0-acbc-b372fa04434a",
                    "name": "credentials_verify:vc:@context:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            {\n                \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n            }\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e74f8bc0-908f-4369-8a59-c6298be1f1eb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a4c738fa-9ac5-4cb0-965e-49f5da860f41"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "03fb62ea-0ff2-43d6-9b63-1ae89b01b040",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fa002db7-6483-490f-9d77-1d4673751cbc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8e5a873b-5ce9-4ac5-bb31-99589f9789ab",
                    "name": "credentials_verify:vc:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": [\n            \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        ],\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..iom-sOLAz9-9FhadLRpqOYXXBhx4Rgwa3I3w1oh087xFQqIMhVTzcSpHCGdGWu2QT1KwrrgVAXPeTT2EthmxBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a344f1ca-450d-4e5b-9368-a75c695a58c8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "226be082-b535-4a12-8eee-4fd99f4f67de"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0d61f929-de0d-4cd7-ade1-da7918f089d5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d17adf1a-c0c9-4bf3-9065-34ea4afec02f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c02fdd5e-5b1e-4a7b-8b6f-1070bd976b51",
                    "name": "credentials_verify:vc:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": false,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..xftqB9cBFsSe226cWEZ4wr5sfxlAOJYYo6yjwPCVeHDdk6OoWGjZQGO7xXpSidrrr6e1imP18LiFK34xtRWADQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "16c22354-47a2-4070-9077-187f152fedda",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3d2c06a3-1ff3-4024-b115-bd9a5ecdbe4c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "283c79c3-c40f-45a5-a33f-aca6915fe56f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5e6f9b64-b7a1-4be2-bdc5-73e9de152f9e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6bc0b0d0-065f-429e-aaae-67f9f16e37ff",
                    "name": "credentials_verify:vc:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": 123,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ZqV-qqLOh_Kb4vAdXKBfmFdNyv3FzXJAIYV9JltcYGDAefU3OUOnoaAU2WSEufkuYkvczxfRLhrMKgkoVoIRAA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d52f5331-ee71-4751-8090-5efebd1fb78f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a9752e82-1c25-4f8a-8aaf-05a3e0d0d91f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f1338aa6-69a7-4c92-aa30-4fe1bb88b6e2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a6325ace-6118-4ecb-b3ea-c6b8bbc4b110"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e6617364-1ec3-415b-8d07-11e3e0c96c59",
                    "name": "credentials_verify:vc:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": null,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c765fb6c-1b27-48b7-92be-f040366f9b0a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "331ed8ef-269a-41ab-866c-aebd7e2451ef"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "56d60f4a-13ef-4500-8809-a2aedf213a80",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a09d2605-c6b9-4f31-891b-7e50a057dc40"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f09981cc-15a6-49b1-a7b6-933e55d433d6",
                    "name": "credentials_verify:vc:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": {\n            \"key\": \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..0Nrj_srTLYyA-9ZVA_dkVGjUcKx6xELHjbbdppEMFPGEN5c2gPXgstNRjnrr8hhMMegSAbvGASKWseBXGR9uAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2a0d7453-1698-43a5-93f0-043741973440",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "945e2448-9665-49f0-8fd2-1c9c87fb0fbb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e3a4dc9a-508c-47b1-88f9-dc0635b9f895",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6f0d2841-dfa4-46e2-8f77-0777d0e1bad1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c2bc9b47-0ff1-4741-a24c-6e54e3bee05e",
                    "name": "credentials_verify:vc:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Bx6sv21fSmT7fCCxU3fDaLhEOhfRK8llXSiFTgApd4PHot00nVjhaKQyhBW9FfFmJljstlOV_Zff164cxOKiCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "49d292bc-3254-4c6b-be78-7f23d311d3bc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "576e61e9-6e1a-4e5d-b3c3-ad31f1d7e594"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d705cc87-74b7-47a5-bbe3-31828ab88aee",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f4739e4c-844e-4822-b7f1-2bd7dbcbeccc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f21f10cb-2563-40f8-8553-92673e8aff1c",
                    "name": "credentials_verify:vc:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "52189e97-a44f-49ca-91e5-0dc2d1d16028",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d1dfd89b-4dde-4c01-855b-eff754d531da"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "df61abbd-ffc1-432a-9460-2ae4f4fc0b3d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c6b4e662-49db-495e-8ed7-90207ec3a595"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5838a888-4186-4ee0-93a4-7253e80f288e",
                    "name": "credentials_verify:vc:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ad4d0bad-a553-447c-8b76-3e029d1abea9",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "85d8366a-af6e-46c8-ae28-4ae57a30d5c2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6706c80c-d1cd-4a04-b5d0-89991a9db4d5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2a16f346-dadd-4225-9c6f-72b1da7a9452"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3bde587e-96e5-40f6-bcce-e338b396197a",
                    "name": "credentials_verify:vc:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0bcc101d-4df5-4ff3-a729-adeb5580f05c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "cf05b137-5c55-4c00-a1e0-843fdd187805"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "23d9fb44-f25e-497e-a6a9-e5aff65486a2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ca8e4eeb-5768-4418-a5f9-b2c8be9d6ef7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cc6df882-cc9b-4047-8b8c-0068423c1f0a",
                    "name": "credentials_verify:vc:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4c165700-c0db-4a2f-bd52-318d88a90544",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = {\"key\": \"VerifiableCredential\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4e13782c-2733-499a-b884-78fd5a3b8a25"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "83008f4b-76b8-4ab9-93f3-d2691841ef6b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5d0894a7-1bb3-46c2-9e93-5f8e4dfb4d7b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bd32c64f-84ea-4abf-a1ec-4fd0a242250e",
                    "name": "credentials_verify:vc:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": \"VerifiableCredential\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "48730057-c942-4e9d-8794-9667206be11a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "33e548e1-0461-496a-8ea5-0b44c717dd91"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fc474589-5204-4f42-abad-4dd6c4f1f7f8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bcef89c9-54de-40d1-a94d-d798eb60a1c2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "050ad71b-4119-4074-a896-b3676dd99e08",
                    "name": "credentials_verify:vc:type:item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8b00fa0c-0e3b-46b8-a254-c34a6d5fcc58",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must have at least one element",
                            "rawBody.type = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f4184b7a-a4d8-445e-9e0a-605327b30399"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cb9f2c4c-3c84-47c3-bbf1-1ea0688577c4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "869bd28d-3600-4eff-ba9b-48c836468bb2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "78cecce8-3bab-477d-8d6d-acfe13cbdf47",
                    "name": "credentials_verify:vc:type:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "df055fde-9c40-4a29-829e-54fd9c7fd96f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9e301522-278c-42c1-9990-9ba68cffec65"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "db7acb16-c9d3-47b0-864c-fffb9705d68d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a7a96537-ef95-4106-8996-580045bdb072"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b7c7a26c-03d3-48df-b277-7368462ce0f9",
                    "name": "credentials_verify:vc:type:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ac1c1d2d-98a3-4aed-9801-75758c541153",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f4615d3b-cdff-4271-8af8-cd9236ab5872"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "28b1f01b-f38b-4995-bf53-27cf67cd8e69",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7e419bee-39e2-49a5-92a8-921fddc943d8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "52407477-fe9a-4589-bb2c-960d6156886b",
                    "name": "credentials_verify:vc:type:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "557a01d7-34d9-47c6-85a6-ea9d6c70e0bb",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d9e95cfa-9d64-45be-9905-f9dd3510dfd4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1141934c-cd7f-4bb6-8e6c-6c766b597297",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "85bb229c-a128-4cf9-93c9-0dc27dd4880f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "480da8ff-b72e-44ad-ba03-cb9715f433cd",
                    "name": "credentials_verify:vc:type:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "09d59aad-f172-49ad-84fc-a23bc38f4043",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "505b07cb-bba4-4b32-8892-8f04bca6e427"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5dcc0f58-149a-42f5-a341-23ddc24bdfbf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7558043a-de80-456b-a853-16e15e5d0e2f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f8b16738-f2fb-4f0a-b28b-abb863f93d33",
                    "name": "credentials_verify:vc:type:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "50320190-3715-4b0f-aac3-8da5f4b4d5cd",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", {\"key\": \"VerifiableCredential\"}];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3a8b890c-090c-4c61-82e5-12b7ce916be1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "61f404d6-33f3-40f4-8aa3-42367e8c5c14",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2242ee30-353f-4d8f-a7f8-5810662ae155"
                        }
                      }
                    ]
                  },
                  {
                    "id": "93efcc50-9262-4692-9e46-4569d7a3c292",
                    "name": "credentials_verify:vc:issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d7979925-f6de-4c4a-8abd-43758c075d70",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "be770750-6ae8-4e79-9dea-8a27b860c737"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7bcdb7b2-a796-40aa-bc6d-4dab8fedbfe6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2aa083ff-050b-43d6-8d32-fcc9707d9bd1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a6d48c1d-6b98-4f97-b989-49d691e27929",
                    "name": "credentials_verify:vc:issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": [\n            \"did:example:123\"\n        ],\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Mdpb0nbZLuHLqh6IBr6ouahKZNFB-cIKJXn-b-O6Pt6HyJaECfc399qgMTWovf-l04XYEpuYDmfZeYVThBeMDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "27170e8e-71f1-451d-b46e-0aa25eb3e979",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "13a8c603-17d1-45e5-836e-1bfe29ae7b7c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "021c53ad-b2ba-4376-806b-6b8333340fb5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5104daa7-64e1-4f31-92cd-39fa8f6ce9c7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9ebe614d-87c2-477a-994d-1e0e0282f753",
                    "name": "credentials_verify:vc:issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": false,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ryGzH1cVI0oyA0eBPKjIBDGJ8FYapvVnUEcovWWepoAASL3SzOOUvcQ9XOnQlclFU8dYhkEN2L8TQAj2OHlcBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c0ccd099-56bf-4485-becc-4347a67a5c0b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2b1dfd61-3522-4677-b540-9555401408d5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "64173804-22ea-44b9-864d-76d97da6c134",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a4a535e6-86f8-4a27-91be-7ac575b4b8d5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9a7621d0-140d-4108-8e29-1b8a676a552b",
                    "name": "credentials_verify:vc:issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": 123,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..kEE8wQKYgVQlcBvJeVeV151aR_iD6vPrlW2bgXPW8NvJx9AOuW5eGtL3j_I3xIGR_JWDA5jGy6KDVkqJNEDHAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cf24da38-551f-48df-aa90-9d4f50008f8e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d6fe2435-03c4-4011-8a34-0f166f61719f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ed1e1f0c-369d-4db7-9825-3d07ef107db3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "83cd236e-5ecf-499b-80ad-c8e11e4e4b7b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9a157a3e-6349-429b-9adc-ba1a33cb9785",
                    "name": "credentials_verify:vc:issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": null,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b6aa4972-93a2-420b-9894-bda6465ce1bb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f634f266-1e3f-4a7a-a422-bb0725cfafc8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "88a8d967-36cd-4a87-afa4-0f8a16e8e4ec",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "df404a46-dbd9-4067-8601-14c99f3a30a1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8dd40e0e-d011-44d7-8e33-df8e79a6caf3",
                    "name": "credentials_verify:vc:issuer:id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {},\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7d955384-b9c3-488a-961a-cc7fab536bec",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fbf73656-4bc9-444a-bd21-dfa04f395333"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "40ca7f17-b4d1-4ddd-8684-6fa7a9607eba",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "53125d97-9376-4c81-96ec-ac5af0728875"
                        }
                      }
                    ]
                  },
                  {
                    "id": "429d96be-4eda-41fc-8ef3-e1700af3ae84",
                    "name": "credentials_verify:vc:issuer:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TsN_31UJYzTTx1xh5CB9PjhnehJza3N5gAEFoNO55HLtQvoqGiEd-SI_4Xy7cpuYMbHdYf5CKHwP0eooyzjrAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d9c6a5c1-1325-47b4-8b6d-d434e97e0f34",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "350e69a2-1d6c-4b25-9a35-64f3b6c505ab"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f679a0e0-7c36-4076-9c87-16e09a47b92a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "beb9d996-b325-4cc7-ae9b-ce25d7f7f92f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e6f87565-8f20-4151-8ee7-3e012e0b409f",
                    "name": "credentials_verify:vc:issuer:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": false\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JOl3FF8mG94K8DDAtSYeirCtE5GRVHXYZcIbf3JRCquZ7obaBm1wh3rEzbG-t8kjdWMn7Zwy8q4zw7pMC2-gAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "788bc3d2-6f49-42ff-bc74-f058cc63ec22",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3cd21d66-71e8-4e3f-97f8-e0571b1338a5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "37e8f35b-94f4-4f7a-a260-13dc20153969",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9d080044-5e5e-4555-bd5d-da484bd153c8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0030c889-6afd-4490-ac70-81263147bd4e",
                    "name": "credentials_verify:vc:issuer:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": 123\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Ibp_FWO5FwzfTfd_PeTgedqAEcbS7dtCOoREanyZP0yAg63ZGay4hjjd-NwZfmWG8LRbMSqtjX2_Cu5BbBEoAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4c4ce09c-f29f-47ac-aa69-61cf30fc2f41",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8d2f580c-c5be-451e-a659-dbc18584cd9b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9603b4db-99d1-4dae-ab0f-e93887192a28",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f3ebd1b2-4a5e-4b09-8566-d4590ba9fdfa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a308c775-f99c-437e-a84e-2c2f85fe7060",
                    "name": "credentials_verify:vc:issuer:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": null\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "54e865ee-f4d9-42f7-97da-2447af2cf228",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "69047cb3-f7f5-4e17-9062-0be46259a43f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "18d32292-4e18-4813-bf20-26a9d7f508fe",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f835de04-d9ea-43da-933e-6f465f15f48e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d35162b8-1f0e-48e7-a43f-7f4ca4419e29",
                    "name": "credentials_verify:vc:issuer:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..n3pFfPx4jY7EjlOpLNJT4CAJYI1roVE6LoUgLQhJ1bMgS5xUKbsIhynp7xDW-vSGzIcu58w-Z8_d9--99NCDBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "17a8e59f-2fa2-4d91-8d3d-3dabed50c2c4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7eaf69b3-5b94-4810-8f58-65fed9f2a9f8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e93a9d0b-b27c-4bfc-906c-fbd85f4d8076",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6b5c5d7b-15f4-4427-9c39-ec00f4bebc2a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "75549e62-9bf2-4e63-9f49-cf948b8ce4de",
                    "name": "credentials_verify:vc:issuanceDate:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "77a9e2ed-ee01-4ed2-86b2-676740363574",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "78f70f77-d1d8-4c96-9ac6-2a20c2c5f677"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c9774787-66eb-4a3b-b3f4-727b592a4fba",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "31c92497-4fc0-472b-bac6-a81e735a8c08"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2f6798e4-cb70-4028-a727-863ca0dcbe44",
                    "name": "credentials_verify:vc:issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": [\n            \"2010-01-01T19:23:24Z\"\n        ],\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..eJGt2anEVhR3qXrd8726C2a8PNJ-S4SnhIUB2YpAUiLJhTQ4FcY_nONpl-U0MbpWgwlpJ7xa1_uk4EMrGmOUBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "63a77b07-0ced-459b-85a7-b1c1c89db585",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0847c68b-ad15-4655-957d-9b0cc2dc09ed"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ca0481c8-3cf3-421d-89ed-c72ac757a26b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bdd97934-aacb-4ee9-ad82-c65fc9db85df"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6948b870-fa0b-4774-bbeb-e221fe1bba3d",
                    "name": "credentials_verify:vc:issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": false,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8Ax_d8Yp8MIszSaGQa1WkiT4xktUk0Ltg7EF3QQ-GGY8JaV_jR6-zRUlEF2iW0HcK6C8ZoAt0KrllUUDdJkdDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0affaed0-06f8-45f6-a7ed-1313abc4e3d2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "426314eb-09ad-47fc-81db-68079ee4411d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f457373c-127f-4b33-8cd1-5d2ccd554e99",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a0797731-0682-47bd-b169-b4a020e6f466"
                        }
                      }
                    ]
                  },
                  {
                    "id": "65565b6e-1650-4e11-a4d7-2875aea6ca24",
                    "name": "credentials_verify:vc:issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": 123,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..x-sSX9vqc6977YPFhNbzjKdisDv4qD2mx-yBSH_EG-UQCpyH_ErCzoFWnpJzRJKIKbOLEvvZ5SO_fWbNWyNdCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cc82608b-8ba5-4255-8481-b0ae70dd3070",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e066e48d-9213-4f69-90aa-4e4033dacbe3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e6d8ee68-fc0e-4ef4-a25d-a635775addcd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1d05574e-2b30-44f4-964b-1b4ad026056f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "62f238af-2a42-4f4e-b920-13facb158656",
                    "name": "credentials_verify:vc:issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": null,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "257ff0f2-3835-4e0c-bd50-6a31e012068d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "74816c59-102e-4062-8607-c9a2752a91d1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "32aa65f7-ef1a-461d-9cb3-617a0649eaf4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fbfef8ce-4049-4263-8fc5-7e85011939d7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e131eafa-34c0-4ba9-9332-fd624ef67370",
                    "name": "credentials_verify:vc:issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": {\n            \"key\": \"2010-01-01T19:23:24Z\"\n        },\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Z1GVMKiJuJeJMpR_Ag4Wpv6940N3WUreYSxEsPaZgU_J1C_EDUj8ycRJitlJNEBBuGhibJ0GWyK-WW9RO2WCDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4863d275-adc4-4c2f-9dad-00261e48b1a6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d6be12f4-00bd-4bd1-ae4f-76a014e119d7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "24b6cdb5-5a38-4e22-8b29-709ffa406369",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2f21c9c6-d234-469b-9a0c-9bdda2d5a2a6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6f644c31-88d9-4eb2-b521-6a47871efeb5",
                    "name": "credentials_verify:vc:issuanceDate:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"not a valid XML Date Time string\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ebrsCszvH6TQHw1QhA8laajPRWL_zGvQ96Up8A4TiJrY7ueFm3V-Suk-KNd6JKckpOxLoF-Cb24KG_g73AqHAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a0e39dd5-8361-4470-9d2f-2f5171bdb973",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5ff3f81c-8da9-484d-af4d-f86de9fbede3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "98af20ec-df31-445a-98b1-49d868a15d73",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0306a07c-8fc0-47f0-ab57-75aefdd5bd17"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0332f98a-3a11-4337-96cd-4c7eeae7b9f2",
                    "name": "credentials_verify:vc:credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2ad84508-1a9d-497a-a823-d6b0a62f3008",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "adfcf9a0-4df6-4d29-83ea-8f1c82145723"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2d472511-ed31-44a1-b536-07976cb50fc4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1aaf46fa-7b23-4b91-a6cf-0c45374abbab"
                        }
                      }
                    ]
                  },
                  {
                    "id": "66dc27f4-fec2-4045-a874-0e8507e019ef",
                    "name": "credentials_verify:vc:credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": [\n            \"did:example:123\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0a0b7f47-4572-43bd-90da-2550af6de476",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4db6a5a8-5df2-4cd9-8811-8858d27ce4b6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9bdd6886-9b30-4da8-9eac-37f9152b1fae",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e66398aa-b7ea-4ea8-a4da-2758ab2f4450"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eeb03956-8c4e-46ff-b977-9d4fcd272073",
                    "name": "credentials_verify:vc:credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": false,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..VK75R0RpQX9g4E_vGExhb_aDUNycy1UlQYvhCL1Ydl9bWiT1oUPeHEUgJMRGzmRRvyByyj13oHI2yB3cOLWXCA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9b113c52-a1f8-41cf-99c7-af8cdb544bf6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "39a96c8e-db4f-46ab-b27d-4b65332d6a11"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1e43edc3-1fcc-4142-bc93-1b614bb33bf6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "865bef45-e00d-42eb-bd57-613963d4d4a4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0a4a019f-f8fb-479a-8054-df2e808139b0",
                    "name": "credentials_verify:vc:credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": 123,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..dQnu8mT7YMECvDQPODQ1YUudQIO9Yx7WsZ07UWpHRqw0iV3ZvJOebbBoY0gFvsF9t6foFFEaaWcKi4vNgIdfCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "461c704b-a7c6-409d-b1f0-aeb650611389",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8b6c732d-eea3-4f97-aa68-e42a875a1830"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "084b207a-358d-45b7-88a8-bb4882eebaf2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8e2b9477-f282-4dd9-9ef1-8c2ce865452a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "55fd4a93-1954-4d1a-bc08-421c6004e877",
                    "name": "credentials_verify:vc:credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": null,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2cd908c7-6c02-4578-a2ce-8e0e2d21a8db",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8f6ac3ba-507f-40c2-9ca0-27914fa00d12"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b129d3bc-da9a-4b2e-8537-15008679123e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ac8002f6-5000-4101-b50b-5651c5eff9ac"
                        }
                      }
                    ]
                  },
                  {
                    "id": "502097b3-1ef9-40b3-a685-a0e840942746",
                    "name": "credentials_verify:vc:credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": \"did:example:123\",\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f5c10c46-4a84-4563-b5f0-2b81dbadc425",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "37f58b4f-ecd2-4476-b3c0-ad1767e25912"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6f65ea18-f276-493a-b683-fd88f03506e7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b0348727-a6b6-49b3-b9cd-2bdd674d88f0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "def8740d-2f5c-4a62-ab3b-fb5c0e07a498",
                    "name": "credentials_verify:vc:credentialSubject:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8KJ136ciaI5X01UO8dPG0KMcsxmd7qzxvrahflTNqsrjjd-vF8bBKpjVDLOOj7bUolO277JWFCPX1xvvAVAvAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f608882c-09a1-4c0a-a515-7fe57ace27c5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6c619d88-8d3d-4855-becd-e5eba4bdd730"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "aabdbb7f-0d6e-4700-83b0-65eeac2bb417",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "60eebd89-1fc1-41ad-8953-a8d8d5e96025"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2e166aa7-2168-4444-8fd8-b2d06f22b703",
                    "name": "credentials_verify:vc:credentialSubject:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": false\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..1Tatn2a45JYHHvhGvCLNbO1VUDV_lkvRVosGzDXDF-DseqRorDTFmY7XSyYqrl5yc6B200ET0RBvgK2vyEC6BA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cad56a83-8592-4361-ad3f-50aaf095aace",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0997f9d2-9950-4322-acd5-cba58d985aa8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8936a7e4-ed07-4657-a7ce-1f7aeebee4ce",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "921d6fec-237a-441f-bbe5-4b7be08d651a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "941f6750-7eca-46d1-9177-b251893eeea2",
                    "name": "credentials_verify:vc:credentialSubject:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": 123\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..qPc7PrMuniibwI74A9ELPRd1YyUjNyeccnUFc4GCfj7I3oREDl0RT6PEt1pEY81mq7vlIsNG1myE86igC__qBA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1b19f165-e91f-4711-aaab-e61c9a85b127",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9d9ae673-7f75-42b8-8cd8-679dbf1ea499"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "549d0a08-18d7-4008-aba0-a628322c5463",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ba958f05-f87c-4c24-bd6d-e0a00df2dc52"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f7c30421-ceae-47ad-bb11-14e292eb27e8",
                    "name": "credentials_verify:vc:credentialSubject:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": null\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..10vzNYPpxv6gZwVR-V23lgvIgseVOwxT6Tc1Zbn5T6pWGmUhrkur_O-OexNVjkVSf7Qu_6NDnIL1m0KcNKGBCg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5bfacaa5-eab0-4926-bebd-d60e35083e77",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2bdcc0df-d84a-4197-be18-094040048583"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f4f18d58-eafd-442c-b806-977d700befc4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "14cd71f0-3a47-4914-87a1-5c5d9818e52a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e93e0284-a8e0-4dae-8774-3c684f952a5e",
                    "name": "credentials_verify:vc:credentialSubject:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..tQJMGZTsqt1RhpxKkq647EHc3pjQ183zd4KchfvD3dXWVfL9X1fUedMbj33l8eev6YWua2-6_4_sUTDr2MLEDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6829f529-73e0-402d-b820-88f4c897238b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a620dc98-b853-4c77-b955-35fb686e6d2e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "afe59359-8fb5-40b1-a8d8-5db251a674c4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "54247e45-c849-4a2e-80d8-c3f8b0ffff65"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c0a0f2cc-22b1-46ee-8988-2a5d0a96610c",
                    "name": "credentials_verify:proof:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a9b6c0d1-c2c4-4081-88df-38a355a5ddb4",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required for embedded proof VCs",
                            "delete rawBody.proof",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5bf74aec-b4f3-45f1-9e78-367a48264e6b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d63a5007-2203-419d-be97-8ca21124c6d2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b11cf1a2-3c65-49d4-ba76-c57e4f136e58"
                        }
                      }
                    ]
                  },
                  {
                    "id": "53ba621e-910f-4609-ad31-5d524b156a9e",
                    "name": "credentials_verify:proof:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "504871c9-2b76-4ef0-9cf1-76b67f723b7c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "920fa5d7-3e97-4846-8de2-6859e53241d2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "94bee4f8-4960-470e-b376-f7718e2d7c58",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ae095fdd-1f69-46e4-a6cf-ccc416138afe"
                        }
                      }
                    ]
                  },
                  {
                    "id": "53aaeb89-57a9-4cd1-a0fa-1019e999cf51",
                    "name": "credentials_verify:proof:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d33f63a2-68dd-4019-950b-8f623f29a483",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "bb01f197-0cbc-43d1-8689-c6c0c9109ea6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0ffce08c-954f-40e3-ae77-5f1b2e4cc77b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "07fe4e62-b71b-4402-ae29-ca54823a99ce"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9fbbad5b-41df-401e-bcfa-fa223ce41e84",
                    "name": "credentials_verify:proof:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1be179b3-f30d-4164-b4c1-3f791627ecfa",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = 10;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d9138626-8883-48ca-a901-a73dc66d5aa7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d11810a7-c855-4aba-96cb-ffc06cc2f67d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fff4b696-d7ab-4859-b877-df688cea12e1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "56e24b3e-2ba8-4f68-aa46-33e1f2010491",
                    "name": "credentials_verify:proof:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6879310b-a8bb-41d6-9bbc-b70a0200eb71",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4118098e-c4d9-4824-bde4-c2b7d99bfdb2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b70eab60-1484-4a99-98bc-099f80483c20",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "50776dcc-4dc1-4e81-a65d-252aa4f1c2a3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "00ab9080-72ac-490f-a1b0-e6ea4440af00",
                    "name": "credentials_verify:proof:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ba054b8e-1784-40a3-bd11-61787084b1f3",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = \"string\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3be5ea51-3289-473f-8e75-9df8411d1d6d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7becb8b3-0131-419d-9170-7fe27e3c0e7f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6f9080f7-4bda-4e30-911d-0fdba02506f4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "004b3a43-b3c4-4d7d-9a18-c6686e9b3b59",
                    "name": "credentials_verify:proof:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "69d492f0-3606-4ce8-be93-6217798fcde3",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required for embedded proof VCs",
                            "delete rawBody.proof.type",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "35d71e14-711a-40c5-8ef2-a4e977ebd197"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d7c64706-900c-4c3f-85e1-656130ff36c3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2a540592-86d9-433f-b859-1b67b6037eea"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7d6a2c8e-86f0-4fb5-aba9-19d2963ea715",
                    "name": "credentials_verify:proof:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3cb3e70d-f910-4f66-b07d-16d8aa713068",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = [\"Ed25519Signature2018\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3c7416cf-118b-49a4-8e47-a3cba595f15e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "aa436711-574c-42e2-adf7-6ae80b7949c8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9f0beb48-5265-4b49-b253-84f0c2cc61e6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "33102ac8-076e-4154-814b-6d0b88376df3",
                    "name": "credentials_verify:proof:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c32e5eff-90e5-46f6-bd4e-074c28965808",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "73e31d8a-446e-4de7-af4a-e417af4851e0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "89915c5b-bfe1-4c15-a5ff-c0a07b09ebd1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c7d2d94d-d4e2-4dee-81e8-cb3a5ca92d6a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f88f84e7-bd29-4977-a444-03541ca168c1",
                    "name": "credentials_verify:proof:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "33905ab5-ae4c-413e-b8ba-47a884e8bacc",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e79670b3-2dd4-4f69-8b8d-afed63581c59"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "91adf0fa-e77b-4fed-bbc1-52bf5f5e2ed0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ade1c2be-c829-47ed-8687-b63c42672b3f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e9a632e8-b7e2-4674-b3b6-19ae1c4bb143",
                    "name": "credentials_verify:proof:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6277fe94-1cdb-47f4-868a-8536dc6ec4a9",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9964d5ca-8945-4fe4-87ff-410a61a394e2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7fc2abda-63c3-401b-869a-f5ef4b9864d8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a9abb0ce-e157-4437-8978-40015937907a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c053778e-0c2d-4efa-85be-eb93b5cdcc37",
                    "name": "credentials_verify:proof:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "93dcf000-0355-4eb6-be84-418356f2a8a1",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = {\"key\": \"Ed25519Signature2018\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8ce676c6-787e-47b7-945b-ccf729e56ea6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1458c6dd-8480-4219-97f9-6075899c708e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d154008c-109f-429c-b603-62c61944f2b2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9f9c1b7b-e06c-4856-95de-b55f39a85e4b",
                    "name": "credentials_verify:proof:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c5b22057-c6c2-4fff-ab57-7ec5ea8e6e4e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = \"not one of the valid values\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "18d5f249-1e2c-4357-9d94-a9fce934ada7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7225a075-cfd1-4865-853a-c94dbd949d39",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d7a8da5e-4f7f-42a4-9297-8f6206bbc2c0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0ce19ac9-cb17-4df0-868b-e68db85231ca",
                    "name": "credentials_verify:proof:created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "237bfb32-7bea-4f7e-a489-6c1c278ecf2c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = [\"2020-04-02T18:28:08Z\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "52beb5ff-4887-49ef-9775-e80f68620d29"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "21676e94-b736-40d0-9201-6d6d6a8e1a48",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4d9859cd-3f6f-46bc-83c9-523d39af1588"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1365ed35-f0ef-4128-ae4e-56729dc6c04a",
                    "name": "credentials_verify:proof:created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d4ed8d4c-4bd5-4fcc-bfbc-7965c1df7bf4",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "418374e4-3474-4ead-8635-f5628c287c72"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cfa237cd-33bf-4cac-adbb-fc54c9878cf9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f65eb0e6-9ea4-4ab7-bd8e-4d6dae25679a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5d8d4a91-a0de-4d3c-8085-17f88d4ac1d2",
                    "name": "credentials_verify:proof:created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7c12d6dc-c76c-47a1-b3fb-5f5b96503ba6",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7dc1e0ca-d32f-4428-9dca-54b8fd0fa425"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8da1a57a-0788-474f-8e79-911004665809",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2aa62371-4669-4bbf-961f-5bfe56aae2c7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c9beb65f-06d7-4c45-bd9b-7899c8f3d93b",
                    "name": "credentials_verify:proof:created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ae608222-81a5-40bd-bd00-9b1170e138fd",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "98d7868c-af62-4082-b0d6-14e8eb7e9c96"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3625e0a2-de9f-497b-a025-8e99e2297fe7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8b7e4c4e-7287-4290-9c20-30870c412c5f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c76e4122-c5ae-4ea6-beb2-18448975bfab",
                    "name": "credentials_verify:proof:created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ff35f8d4-b090-47f3-86e5-fada78730d88",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = {\"key\": \"2020-04-02T18:28:08Z\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1d5d104f-4942-445a-99b2-bfa47c0c9087"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f9369ba3-a6d6-4605-b074-ae7dd83db9c2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "17b1d3be-e30a-4eff-a1c9-c71fdc72e32b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "41c11c6a-053f-481c-bf5f-f2816cad21f1",
                    "name": "credentials_verify:proof:verificationMethod:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4c0c69d7-e104-4525-8cf1-f48389236995",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = [\"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7492502e-8710-4c5e-8e26-1d7ee1877a42"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4b3ac50b-c76b-4dc9-b5f6-123e4645bfd3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cab7e12e-8434-4905-a057-70e8928aa385"
                        }
                      }
                    ]
                  },
                  {
                    "id": "89872770-2d6c-4643-852c-6cfbf07b6a9c",
                    "name": "credentials_verify:proof:verificationMethod:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a2488ab4-6e2e-45db-9fab-5caf4a157874",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "865c9cff-0b80-40f9-a5c0-2e152f85370c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a7114590-d998-490f-bc80-d16a0ced584c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "71a413fd-f5b5-42a3-a066-c96a23af46f4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9babd583-7e1e-4f81-98f7-f852e50c742d",
                    "name": "credentials_verify:proof:verificationMethod:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "762f2db1-2839-4ded-8c2c-e4e2a5d87aec",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d46dbd8b-f70f-45d1-b3f3-a75e06aedbd2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e665be01-14cb-4cdd-8d97-d87d07971aea",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "70554c04-aec2-42d6-8993-f102e377a747"
                        }
                      }
                    ]
                  },
                  {
                    "id": "81c51853-055a-443a-baf9-c0418f3eaa3a",
                    "name": "credentials_verify:proof:verificationMethod:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "17d3c6cb-0b14-40b3-8f64-00fa94427400",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9d754161-10a6-4cec-9adf-0d87c836307c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c17dd452-adc5-40cd-b6a1-72c89f306c78",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ebd84c5d-9f87-4e16-b1f4-ad0d86d5bb14"
                        }
                      }
                    ]
                  },
                  {
                    "id": "396f7bdb-a773-483f-814c-5e6f336d0bf9",
                    "name": "credentials_verify:proof:verificationMethod:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f43368bf-4f18-495c-aaf2-6b500171ce86",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = {\"key\": \"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c6bc6f0b-9720-4958-ac69-4f39eed7184d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6e97225a-1762-4254-b8d7-c6a7b91a5591",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "aee6d43c-3300-499d-b8e8-f5d2232655fa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "06c6c6b2-fd2e-42b2-8097-a1d36b1d26d5",
                    "name": "credentials_verify:proof:jws:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8ca96781-1e59-4dca-9c9a-98affaf5218c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = [\"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "089f866d-90cc-49dc-a501-84d3dba1fbb9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d39a9d17-b51d-489c-b2dc-123525770e30",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bfe21e8d-3822-426c-aae5-fa0cd79d74f8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "831136e8-7d01-4789-8072-357dc8e32159",
                    "name": "credentials_verify:proof:jws:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cc0eaff5-11ca-4037-9309-f4609b46975b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "605ab086-46ef-4ab7-8a56-d4176dc73d73"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "42920e23-0c8a-4a24-9d47-fbafdd115b9a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1b029e8d-80fe-47fb-a004-f160644a959e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4c172841-30a4-4a56-bba8-cf28575f072f",
                    "name": "credentials_verify:proof:jws:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a9200a44-76be-4159-8a41-0002b623d830",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f56e872d-db77-449b-8b44-186bc52def11"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "897eba84-ae36-4472-86cc-a85a35a746f4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3b78f509-4f43-4ad8-a441-897d05ebdd09"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b3541c6f-30be-4b88-93fa-98f97d616316",
                    "name": "credentials_verify:proof:jws:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "960cdf57-ea58-4063-94c7-e4b516b19e88",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "38c7ceea-6e76-4727-9416-1950ed625d0d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c409e28d-b59c-4317-88d3-09c172b407c4",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8664360c-145f-4537-ae48-c677d4a56837"
                        }
                      }
                    ]
                  },
                  {
                    "id": "74fb7c29-931d-465e-8924-2f3bd1fa2250",
                    "name": "credentials_verify:proof:jws:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3105e099-36ca-40dc-a42a-7dc62428994f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = {\"key\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "572c2e2e-5c71-474b-bc8b-18de103c822d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "19e817a1-ef6a-40e9-a37c-c907c1cddabc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1c92e3e8-3af6-47e3-9e56-9bb63007636c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "57242e47-aa18-4941-b102-adaec5740375",
                    "name": "credentials_verify:proof:proofPurpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5f476ee3-6a99-43b4-ab81-adacb8cb468a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = [\"assertionMethod\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "77d2f9ff-c6f7-45a9-b924-263dbb841559"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a7c35374-578c-4002-8492-efbdf7d6e7a9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "323899b2-306d-474c-8f1d-084edcedc5e2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7e026b50-c416-42f9-a09f-69aeedd389da",
                    "name": "credentials_verify:proof:proofPurpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c16cd255-221a-4d79-bf98-fe125ef5aba9",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "25a468b8-8bbe-48fb-9ec3-04883ade020a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e3df8cc8-c655-4ad4-850b-feef6f282e7f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e5f89f70-28f6-436f-b24b-ae0f3a8dee22"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c24b24f2-3151-4efb-80d3-b5d5b8a3bc9c",
                    "name": "credentials_verify:proof:proofPurpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "040c0f84-807c-405e-b922-ff65ff377b9d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2f785d22-6656-4da3-8fa7-25d169bc119f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b14e1539-c0b9-4d73-9236-9212bcc49c10",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "be007870-dca5-4a1f-af9b-4b0f147ba0a4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9d177ffe-97bf-4d46-988c-86ada3e06cfd",
                    "name": "credentials_verify:proof:proofPurpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "934cfb84-c662-476a-b63e-859faeb58baa",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1166157a-4efb-4dbb-a18c-594d838840be"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "602dc6b1-016d-402d-a229-280f3769b693",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8ad9c0f0-e611-4b86-8b5d-1ab95ce73407"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dbcd0dea-8b2e-4659-acf2-c8bf8c67d747",
                    "name": "credentials_verify:proof:proofPurpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "25f3a35e-5e69-472d-81bb-ce9a5fe21a90",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = {\"key\": \"assertionMethod\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "39266c27-670b-444a-afb0-a4107f784e04"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c04d14dc-c352-49a7-98b7-d94b41779428",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8c7bc221-5c64-4d8f-ae34-25d069ae23bc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0a88043e-81df-4df3-aafb-bc5f42909c2a",
                    "name": "credentials_verify:proof:proofPurpose:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "794961f7-e517-48b3-a4f5-bb81ab92214e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = \"not a valid value\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a9e3068a-6481-4c54-8d8b-bbb182a276d7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b6a5d9c2-e56d-44dc-8638-4329630d3e84",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6a199228-6e1e-434b-a336-2006865ce770"
                        }
                      }
                    ]
                  }
                ],
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "e20ddaec-b705-4a80-a591-a757bdb35540",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "6f112e4f-0d49-457a-84fd-c18cfae698e1"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "1a650824-0541-4a1c-9824-ee03fadfbc58",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 400\", function () {",
                        " pm.response.to.have.status(400);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "6838bfbc-bec9-40a2-afc4-461923060228"
                    }
                  }
                ]
              },
              {
                "id": "6fd45562-6ad8-4245-afc1-354beaf8f6d2",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "cdbdf8fe-ca58-43c1-b48c-2489222e9be7",
                    "name": "credentials_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0652a8c7-43e6-477c-926c-731e5439c70e",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"valid_vc\")));"
                          ],
                          "_lastExecutionId": "c0239817-c02c-4805-b7ea-1d22e2a9c668"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c3567418-85f5-48ad-80e3-4117c0b24fbc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "735efa47-141c-4f62-b0c4-98c3bdc7916d"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "319628f5-87d1-4b36-bd4a-b87a19b312eb",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "1a1a053a-26be-41a2-9616-0acbe57e9a50"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "3fa1a3c9-a128-482a-857f-0646a485120a",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "251a3283-b03a-4053-8d12-3abf6cf9d99b"
                    }
                  }
                ]
              },
              {
                "id": "fba69f9b-f558-47f1-a6eb-971678a24c1e",
                "name": "Bad Signature",
                "item": [
                  {
                    "id": "99c0aec4-f8a6-4995-b2eb-e5575bb02638",
                    "name": "credentials_verify:bad_signature",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"id\": \"urn:uuid:e22ccc92-2c81-411f-a80f-e7f8334000a7\",\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..mvbcalofPOi7o7nxByyxXCuSOKXuGFM7_W9a8N62-EERarrH4p4T_0c2ZfGnGLiHOvY6Q-dyy38t9HPvXy-MBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4b834b57-e15b-4eaf-8e6b-bba60696921f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 200\", function () {",
                            " pm.response.to.have.status(200);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            "pm.test(\"response verified is false\", function() {",
                            " const { verified } = pm.response.json();",
                            " pm.expect(verified).to.be.false;",
                            "});"
                          ],
                          "_lastExecutionId": "df671b1d-d42d-4fc7-8402-2d0709d9e428"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d1c39f64-3ac0-40e8-b456-49f4ba53ab64",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4c792cfc-5ed4-40a6-8267-588bfe6fede1"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "724a8f9f-6115-427d-8431-390f6503f0b5",
            "name": "Positive Testing",
            "item": [
              {
                "id": "e06018d0-82be-4eef-97c1-d5da867bef00",
                "name": "credentials_verify",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "8e3ef8ce-3a7b-4c40-bc5b-327ac7c6a2de",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "41e3b8cd-8ff8-4849-8c7d-fa4aa1a43d98"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "a2a8d949-849c-42da-99ad-e8dd1772909e",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "6658cd92-8a59-4d1f-9f8d-48701469a510"
                    }
                  }
                ]
              },
              {
                "id": "7dbaf970-01fd-4855-8d69-578dc9f256c7",
                "name": "credentials_verify:issuer:object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\"\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "389af284-6d13-4bd9-b863-18d2d97578c0",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "293df12c-adf0-4c1f-9ea1-52bf00efddc6"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "476d2b48-d2e4-4930-846a-c84cc08a766b",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "3d3a3653-9d0f-422f-943f-dc9f0cc2f864"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "d298173d-9d4c-42c3-83ff-e97cff115ea7",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Dummy VC issued for testing",
                "pm.variables.set(\"valid_vc\", {",
                "    \"@context\": [",
                "        \"https://www.w3.org/2018/credentials/v1\"",
                "    ],",
                "    \"credentialSubject\": {",
                "        \"id\": \"did:example:123\"",
                "    },",
                "    \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",",
                "    \"issuanceDate\": \"2006-01-02T15:04:05Z\",",
                "    \"issuer\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\",",
                "    \"proof\": {",
                "        \"created\": \"2020-04-02T18:48:36Z\",",
                "        \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..R618vVfGIF2jTe5dVkzMqQYIFKoIkyK_3_35z15tp_aFzew_4ruQt2DcaxdtkwsRff7bFsrVfigTl_XeE3tPDA\",",
                "        \"proofPurpose\": \"assertionMethod\",",
                "        \"type\": \"Ed25519Signature2018\",",
                "        \"verificationMethod\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV#z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\"",
                "    },",
                "    \"type\": \"VerifiableCredential\"",
                "});",
                ""
              ],
              "_lastExecutionId": "42f9e996-0c00-4cde-8cfa-9d8c45e0ece6"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "e421d98e-5ced-4258-9c9e-27046706303b",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "62fc04ed-0f2c-4ed0-a16d-63fd5269193f"
            }
          }
        ]
      },
      {
        "id": "319b1ae1-27e8-4eb4-9a72-9bf2c04e54d4",
        "name": "Presentations - Present",
        "item": [
          {
            "id": "28c6b0fc-f0fe-4027-92cd-c44f9d63e06d",
            "name": "Negative Testing",
            "item": [
              {
                "id": "48d15903-e0ef-4eb8-9d32-233dbe6de63e",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "8aa1a3cb-1763-4203-9526-6f659a3a096f",
                    "name": "presentations:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0821abee-329b-4cab-a931-b2c4fc2d0e59",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "cd0f8e51-af3c-4cb4-b8ec-058a89072691"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2b25a846-5fa9-4e3f-960f-9074ac4bdbae",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "28b04728-9b3a-425c-bc26-73cbee8c1242"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "2329726b-849f-4329-9cbe-553e89ddd9f3",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "bf0fbea3-e7b4-41dc-8864-ef281649c538"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "36549fb4-00f6-4838-8241-c6aa5836530a",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "0bc839e2-4a79-4d72-85f4-b65e339c3f08"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "4f089c3e-f321-4bdc-84a8-d9c5666da72c",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "8d9f8cb3-14f1-4500-ad6f-f7ea80ff7d3c"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "d4537f0f-e85e-4605-bd06-e564ad6a4c27",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "4646e63f-816d-4ebd-916e-60c1252a13b6"
            }
          }
        ]
      },
      {
        "id": "b2f4d891-5b86-4301-bfac-50be6c98afb9",
        "name": "Presentations - Create",
        "item": [
          {
            "id": "2e8eca00-90bc-47ae-9c79-bbdeb968a398",
            "name": "Negative Testing",
            "item": [
              {
                "id": "4874ad04-6d2e-4547-8ac4-83bc1ffa8bab",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "4b568d0c-47e5-4fcc-8960-10feb1fdf4d5",
                    "name": "presentations_prove:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "04d9da71-fbd7-48cf-a311-7eee88a3416f",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "8147225b-4ee1-4594-907b-4708ae9a633c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "89fcfd2a-ea8e-45ce-b7b2-ae7cddf1d18b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "fcc71e4e-160a-4981-a241-bcf731f3d288"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "4e971411-867b-4c8a-8df0-14c3a4012316",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "fb5fcde8-ce7b-465b-a5e8-9da26da1a9d8"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "c8567a17-80a1-4152-bcd0-2f76309efc4c",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "53c7a8ec-675a-48ce-be3e-46ff872ef21a"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "d06ae9b7-7ef2-4543-8c4c-ad5820037393",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "0145dc7d-bdf5-4a58-94c6-7a33eea4022c"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "f055dcfc-aa42-4826-ba85-f4b0e99d1227",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "c6a6d53a-6aec-4990-971c-ea5e5ee6cd0d"
            }
          }
        ]
      },
      {
        "id": "bd4998aa-5e44-4d60-9527-733e0c3c51a3",
        "name": "Presentations - Verify",
        "item": [
          {
            "id": "00795fe8-2837-4eca-b8a5-ef4c9f163cd7",
            "name": "Negative Testing",
            "item": [
              {
                "id": "50191546-0a2c-4cc4-b6f0-4690fc724490",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "96ff6756-3faf-4482-b84a-fcd1790d459b",
                    "name": "presentations_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5b1c4a2c-d49e-4510-bd3e-9db29589da6d",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "5478f257-6bd1-41a6-888a-8df0ff251899"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c950816c-2d9a-44a0-a2e4-bef179f4bb6c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "bfbce839-ef25-443e-aec7-cae271c9f03b"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "2de91c59-21fa-4962-b241-031ac9973efa",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "4ada652b-1604-471c-9d0e-1081964f6d7f"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "d4ef8419-81cb-4b74-8f51-29406037558f",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "31a4cd27-5f64-4e5d-84fc-920b185202fa"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "ba179c30-ac3d-445f-9390-d182b2105a25",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "dee4bb09-46ae-46da-9f23-af0b6accef7b"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "c383fed4-d39f-41db-9faa-a6a4a8c8f090",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "6b30f42e-c789-408a-9050-8a61bb6be8bf"
            }
          }
        ]
      },
      {
        "id": "4ee6465a-12f8-4300-9320-b2bfc9181ccc",
        "name": "Presentations - Notify",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "2b190fcc-8d2f-43ac-82f9-bce4f1cdfc62",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "766a2ca0-31e4-41d3-beaa-4a34ac4e391b",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      },
      {
        "id": "c2863710-31dd-44fd-be91-3fcef0ec4fc6",
        "name": "Presentations - Submit",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "de7884bf-cd61-466c-afe1-8622cd5a6ae9",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "750d66cb-8c17-4858-8841-8d8370948515",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      }
    ]
  },
  "run": {
    "stats": {
      "iterations": {
        "total": 1,
        "pending": 0,
        "failed": 0
      },
      "items": {
        "total": 282,
        "pending": 0,
        "failed": 0
      },
      "scripts": {
        "total": 2083,
        "pending": 0,
        "failed": 0
      },
      "prerequests": {
        "total": 282,
        "pending": 0,
        "failed": 0
      },
      "requests": {
        "total": 284,
        "pending": 0,
        "failed": 0
      },
      "tests": {
        "total": 282,
        "pending": 0,
        "failed": 0
      },
      "assertions": {
        "total": 570,
        "pending": 0,
        "failed": 51
      },
      "testScripts": {
        "total": 1046,
        "pending": 0,
        "failed": 0
      },
      "prerequestScripts": {
        "total": 1037,
        "pending": 0,
        "failed": 0
      }
    },
    "timings": {
      "responseAverage": 164.58450704225342,
      "responseMin": 7,
      "responseMax": 2327,
      "responseSd": 268.9440421131078,
      "dnsAverage": 0,
      "dnsMin": 0,
      "dnsMax": 0,
      "dnsSd": 0,
      "firstByteAverage": 0,
      "firstByteMin": 0,
      "firstByteMax": 0,
      "firstByteSd": 0,
      "started": 1693614679603,
      "completed": 1693614739968
    },
    "executions": [
      {
        "id": "240a4c69-b6fe-452c-8f26-9f1877e4a7e3",
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 282,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "cea10d46-df9e-4780-993d-f4af81638846",
          "httpRequestId": "f8a20489-3cae-4bd2-ac64-e0326daa6cc6"
        },
        "item": {
          "id": "240a4c69-b6fe-452c-8f26-9f1877e4a7e3",
          "name": "Clear Token Cache"
        },
        "response": {
          "id": "2d165dfd-ed9f-4b8f-90f9-90f645593e2a",
          "status": "OK",
          "code": 200,
          "responseTime": 63,
          "responseSize": 0
        }
      },
      {
        "id": "c83d78fd-0246-4b27-bacf-bcd4aed15f92",
        "cursor": {
          "ref": "7a401a37-ea49-4ee8-a443-b358a42fd7b6",
          "length": 282,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "7f613448-e972-4d8b-ace9-dbe53e8a7e9f"
        },
        "item": {
          "id": "c83d78fd-0246-4b27-bacf-bcd4aed15f92",
          "name": "Clear DID Web Cache"
        },
        "response": {
          "id": "f4396b58-2f91-4970-9fa1-259170e804b9",
          "status": "OK",
          "code": 200,
          "responseTime": 7,
          "responseSize": 0
        }
      },
      {
        "id": "46a9ddd8-3b38-4e7b-808d-90a13d5336ce",
        "cursor": {
          "ref": "f8474d5d-947d-4d90-b06a-0e1b3222f0e0",
          "length": 282,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "32f5839d-1d0e-4723-8d48-df43ff3a6dd5"
        },
        "item": {
          "id": "46a9ddd8-3b38-4e7b-808d-90a13d5336ce",
          "name": "did_json"
        },
        "response": {
          "id": "ed36fd2b-fb85-49e4-be4f-f42421f5374c",
          "status": "OK",
          "code": 200,
          "responseTime": 278,
          "responseSize": 1446
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "aaae9a5b-f938-405a-b699-08c198daa782",
        "cursor": {
          "ref": "7a7c5934-000a-47d1-851f-fa51b0fc1f31",
          "length": 282,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "d766f2c5-0b9f-446d-bf29-56c7b01db0ff"
        },
        "item": {
          "id": "aaae9a5b-f938-405a-b699-08c198daa782",
          "name": "did:invalid"
        },
        "response": {
          "id": "53b32779-aa38-42ad-a433-6e3fc8353271",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 178,
          "responseSize": 81
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "aaae9a5b-f938-405a-b699-08c198daa782",
        "cursor": {
          "ref": "7a7c5934-000a-47d1-851f-fa51b0fc1f31",
          "length": 282,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "d766f2c5-0b9f-446d-bf29-56c7b01db0ff"
        },
        "item": {
          "id": "aaae9a5b-f938-405a-b699-08c198daa782",
          "name": "did:invalid"
        },
        "response": {
          "id": "53b32779-aa38-42ad-a433-6e3fc8353271",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 178,
          "responseSize": 81
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3560d39e-118d-4aaa-bc25-5be99435b062",
        "cursor": {
          "ref": "bf0b39e6-937a-4b14-95ba-f71279dad22e",
          "length": 282,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "6200db69-7a30-4e71-acbb-c3a1016035d2"
        },
        "item": {
          "id": "3560d39e-118d-4aaa-bc25-5be99435b062",
          "name": "did:not_found:did_web"
        },
        "response": {
          "id": "e1675fd4-8b19-4362-8c80-4dfb82afeecb",
          "status": "Not Found",
          "code": 404,
          "responseTime": 151,
          "responseSize": 53
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6656831e-50d5-47a7-ae08-7af01d04772f",
        "cursor": {
          "ref": "3d15ee3c-6faf-4306-90aa-d818f1a0870b",
          "length": 282,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "679ade01-32fa-4f2a-9630-40437e7308f6"
        },
        "item": {
          "id": "6656831e-50d5-47a7-ae08-7af01d04772f",
          "name": "did:not_found:urn"
        },
        "response": {
          "id": "1959127a-111e-4117-bce2-c50b85cb8952",
          "status": "Not Found",
          "code": 404,
          "responseTime": 102,
          "responseSize": 86
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f150ec16-4849-4ba9-b52d-13467e4d8818",
        "cursor": {
          "ref": "9d72a0c4-1010-4a3f-b622-128d8e52ee50",
          "length": 282,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "c35039dc-1ebd-4725-ba61-944a8c146771"
        },
        "item": {
          "id": "f150ec16-4849-4ba9-b52d-13467e4d8818",
          "name": "identifiers:missing_auth"
        },
        "response": {
          "id": "08247406-d196-4dd4-b438-8213b0b55b3c",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 83,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3b76cd65-e422-4039-8c46-eb9ad7dc463f",
        "cursor": {
          "ref": "9a7cc2a4-c7ea-42af-b031-aae3e86ac77a",
          "length": 282,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "f459c5b8-e40b-402f-b166-be647a6d2ff8"
        },
        "item": {
          "id": "3b76cd65-e422-4039-8c46-eb9ad7dc463f",
          "name": "identifiers"
        },
        "response": {
          "id": "79244f29-0c53-420c-b797-4cff917deee5",
          "status": "OK",
          "code": 200,
          "responseTime": 139,
          "responseSize": 1462
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bd70aab7-f7ab-48df-81a8-b64d9a67c721",
        "cursor": {
          "ref": "571de13a-6203-4015-9a18-8e5fd38f3c28",
          "length": 282,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "b8c7bdc7-0d58-4132-8c7e-5a55615b2b0c"
        },
        "item": {
          "id": "bd70aab7-f7ab-48df-81a8-b64d9a67c721",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "45914976-07ec-48e1-9710-18ae586c68d9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 102,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0e1a9103-00b8-4922-bffe-02175d4f9d15",
        "cursor": {
          "ref": "0f847f8e-c4c7-4fcc-9a32-853c732436cf",
          "length": 282,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "850c8b21-f4a9-4e95-9154-c8b2fad466e6"
        },
        "item": {
          "id": "0e1a9103-00b8-4922-bffe-02175d4f9d15",
          "name": "credentials_issue:credential.@context:missing"
        },
        "response": {
          "id": "2d43292c-1ab8-46d8-8ec9-e1c91d615af1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 100,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "80900adc-f6cf-42ae-a100-24e342652790",
        "cursor": {
          "ref": "2b7d2017-1188-4181-80e5-5ae862416c19",
          "length": 282,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "1468aa53-c4c5-465b-a283-6f052b71d8c8"
        },
        "item": {
          "id": "80900adc-f6cf-42ae-a100-24e342652790",
          "name": "credentials_issue:credential.@context:boolean"
        },
        "response": {
          "id": "e4eca864-9aa3-46ff-b575-583e56ffccdb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 98,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "831e1647-0ba1-47c7-a93a-c6a0ea36db83",
        "cursor": {
          "ref": "aa8273b1-acd1-4577-87f5-7c352ac580f1",
          "length": 282,
          "cycles": 1,
          "position": 11,
          "iteration": 0,
          "httpRequestId": "5b841375-7e9b-40b5-902b-61da74aeaf6e"
        },
        "item": {
          "id": "831e1647-0ba1-47c7-a93a-c6a0ea36db83",
          "name": "credentials_issue:credential.@context:integer Copy"
        },
        "response": {
          "id": "20597eef-b9b5-4b83-b45a-2f8c5bfaf96b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 98,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5d6cae25-9f1f-4488-a202-48d814b87598",
        "cursor": {
          "ref": "2004afc6-9b47-41bc-9ad6-c8e9c78d1619",
          "length": 282,
          "cycles": 1,
          "position": 12,
          "iteration": 0,
          "httpRequestId": "f344dba0-6586-41b8-a8a8-b362f05b16e3"
        },
        "item": {
          "id": "5d6cae25-9f1f-4488-a202-48d814b87598",
          "name": "credentials_issue:credential.@context:null"
        },
        "response": {
          "id": "8ea2d03f-71dc-437b-8b3d-855de1d382c0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 99,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0796b26c-de18-4045-a245-0b9598b37b94",
        "cursor": {
          "ref": "806c770f-4389-4e90-9f73-d1603900431b",
          "length": 282,
          "cycles": 1,
          "position": 13,
          "iteration": 0,
          "httpRequestId": "533a6e86-0ec8-44d5-a14e-443313d78522"
        },
        "item": {
          "id": "0796b26c-de18-4045-a245-0b9598b37b94",
          "name": "credentials_issue:credential.@context:object"
        },
        "response": {
          "id": "8bf71610-542f-4ed4-90ee-58d78e32b359",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 97,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9535a5c8-a356-403b-83ca-7833ef328b5c",
        "cursor": {
          "ref": "03099f7b-1743-4ffd-b0b6-57bf9fad3252",
          "length": 282,
          "cycles": 1,
          "position": 14,
          "iteration": 0,
          "httpRequestId": "b5eb93e6-5db7-4cf4-aaec-09cebddfab39"
        },
        "item": {
          "id": "9535a5c8-a356-403b-83ca-7833ef328b5c",
          "name": "credentials_issue:credential.@context:string"
        },
        "response": {
          "id": "ebfe07f3-498f-40e7-87b3-58a45bfb6517",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 99,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c706fe79-7867-4cf8-99d0-62839586d473",
        "cursor": {
          "ref": "44e75b68-155f-4e12-9def-4180f6da1788",
          "length": 282,
          "cycles": 1,
          "position": 15,
          "iteration": 0,
          "httpRequestId": "20591e5f-86bb-4dff-a1c4-f26ee7794fc8"
        },
        "item": {
          "id": "c706fe79-7867-4cf8-99d0-62839586d473",
          "name": "credentials_issue:credential.@context.item.array"
        },
        "response": {
          "id": "fe0c6b9b-0119-44f0-93fc-14e9c0ac9107",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 97,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c85b066a-7a23-4adc-80b6-956baf24e348",
        "cursor": {
          "ref": "9f47a016-f8de-46fb-aab7-d5db3f6a1265",
          "length": 282,
          "cycles": 1,
          "position": 16,
          "iteration": 0,
          "httpRequestId": "bf502de7-cc06-4fac-b28b-e3b298c3a9f3"
        },
        "item": {
          "id": "c85b066a-7a23-4adc-80b6-956baf24e348",
          "name": "credentials_issue:credential.@context.item.boolean"
        },
        "response": {
          "id": "3c266b78-683d-4631-9598-b6e0b00c07c4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8d510b17-9fc5-4ad7-9530-b14614bf8b2c",
        "cursor": {
          "ref": "ccc63986-6e31-423b-96aa-d43665a15c8e",
          "length": 282,
          "cycles": 1,
          "position": 17,
          "iteration": 0,
          "httpRequestId": "9562cc8e-d923-4a93-b538-95a1b68c40c2"
        },
        "item": {
          "id": "8d510b17-9fc5-4ad7-9530-b14614bf8b2c",
          "name": "credentials_issue:credential.@context.item.integer"
        },
        "response": {
          "id": "32b757f5-4df7-42ac-9caa-d3231d595da1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 96,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dadc30f3-1145-4909-becf-a9ef3bf2526d",
        "cursor": {
          "ref": "6ae4e235-7f90-492e-a344-ba69c0e0856f",
          "length": 282,
          "cycles": 1,
          "position": 18,
          "iteration": 0,
          "httpRequestId": "368242ba-e793-4216-a75f-f37a83f57aeb"
        },
        "item": {
          "id": "dadc30f3-1145-4909-becf-a9ef3bf2526d",
          "name": "credentials_issue:credential.@context.item.null"
        },
        "response": {
          "id": "6b8bb535-844b-4ca1-bca4-7a8d6fa161f7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 97,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "da06f187-766c-485b-aed0-f62f71b2544d",
        "cursor": {
          "ref": "b401d3e2-ff3e-47d6-9547-cd995d1fb621",
          "length": 282,
          "cycles": 1,
          "position": 19,
          "iteration": 0,
          "httpRequestId": "de4fcdb3-6b4b-4195-810e-d3c66658c333"
        },
        "item": {
          "id": "da06f187-766c-485b-aed0-f62f71b2544d",
          "name": "credentials_issue:credential.@context.item.object"
        },
        "response": {
          "id": "79d3e0a9-70aa-407f-b15a-f3a032943098",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f24531db-d125-402f-be46-08b995265f51",
        "cursor": {
          "ref": "e42a3613-cc39-40c3-9612-ad07768b76da",
          "length": 282,
          "cycles": 1,
          "position": 20,
          "iteration": 0,
          "httpRequestId": "2d353255-a9fd-4594-964e-33d9cfdb3301"
        },
        "item": {
          "id": "f24531db-d125-402f-be46-08b995265f51",
          "name": "credentials_issue:credential.id:array"
        },
        "response": {
          "id": "dda7939f-c1a7-4ae6-88f3-466d56a3ec7f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 98,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0f6a3630-b0ac-4849-b8f5-b17d68a8811b",
        "cursor": {
          "ref": "f9c4c86b-bff0-4bc0-ab07-4a929cd1c288",
          "length": 282,
          "cycles": 1,
          "position": 21,
          "iteration": 0,
          "httpRequestId": "70318a39-45be-4997-9dea-060c57535fff"
        },
        "item": {
          "id": "0f6a3630-b0ac-4849-b8f5-b17d68a8811b",
          "name": "credentials_issue:credential.id:boolean"
        },
        "response": {
          "id": "a810e77c-70d2-48be-8414-be9ecfd5a285",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 96,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a52dfa57-a1d9-4c07-9466-43cd4ecae540",
        "cursor": {
          "ref": "66ec0c28-eacc-4ab3-beff-144969fc267f",
          "length": 282,
          "cycles": 1,
          "position": 22,
          "iteration": 0,
          "httpRequestId": "b00e304f-cc35-4e18-a8b1-02adbf9d1b38"
        },
        "item": {
          "id": "a52dfa57-a1d9-4c07-9466-43cd4ecae540",
          "name": "credentials_issue:credential.id:integer"
        },
        "response": {
          "id": "734794b7-6ae2-454b-bdc5-19f9f80ae08e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c1413024-58da-4ec2-ab60-28ea580f415b",
        "cursor": {
          "ref": "1f0bb0a8-f5f6-40e6-95d7-7ae335471cfc",
          "length": 282,
          "cycles": 1,
          "position": 23,
          "iteration": 0,
          "httpRequestId": "c5ed198e-9bb3-41ce-b575-e1e94b768d3d"
        },
        "item": {
          "id": "c1413024-58da-4ec2-ab60-28ea580f415b",
          "name": "credentials_issue:credential.id:null"
        },
        "response": {
          "id": "d2c043e2-4e90-403b-b9fd-f6a9896a07b8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 95,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0d74cf45-a954-45b7-8c1e-286f95b1263f",
        "cursor": {
          "ref": "06111445-a9a0-400e-9c27-b9baabeee402",
          "length": 282,
          "cycles": 1,
          "position": 24,
          "iteration": 0,
          "httpRequestId": "7fc1dc61-e532-44ba-b4a2-78e2fadd096a"
        },
        "item": {
          "id": "0d74cf45-a954-45b7-8c1e-286f95b1263f",
          "name": "credentials_issue:credential.id:object"
        },
        "response": {
          "id": "1fb2e0b4-0751-46f6-b14a-f533cb5ec0c8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 108,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e329d6f5-4165-4475-b587-f6fe88609db2",
        "cursor": {
          "ref": "607b5cac-d391-4946-a915-8ccbe88cc8ef",
          "length": 282,
          "cycles": 1,
          "position": 25,
          "iteration": 0,
          "httpRequestId": "8ca065a3-52c4-463c-9a09-d41532560f85"
        },
        "item": {
          "id": "e329d6f5-4165-4475-b587-f6fe88609db2",
          "name": "credentials_issue:credential.type:missing"
        },
        "response": {
          "id": "04db45a7-6448-4bb6-9e4b-6250c7f903b7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 95,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5f19ee3f-53d6-4c5e-b49b-ac834f714329",
        "cursor": {
          "ref": "13c386d5-76f5-4911-8ac2-46b25ce3456c",
          "length": 282,
          "cycles": 1,
          "position": 26,
          "iteration": 0,
          "httpRequestId": "d51d285c-6f76-4a4d-b9fb-115143b2a27f"
        },
        "item": {
          "id": "5f19ee3f-53d6-4c5e-b49b-ac834f714329",
          "name": "credentials_issue:credential.type:boolean"
        },
        "response": {
          "id": "ea89960a-3147-47e3-a662-683a69a4dfba",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 99,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c33c5666-6223-4b4f-bde1-711423f76ed9",
        "cursor": {
          "ref": "f2a2f4ad-af5d-48e2-a8bf-0f57b3f6d8f5",
          "length": 282,
          "cycles": 1,
          "position": 27,
          "iteration": 0,
          "httpRequestId": "ad095e39-01aa-4909-a4e7-2bf6582a75b8"
        },
        "item": {
          "id": "c33c5666-6223-4b4f-bde1-711423f76ed9",
          "name": "credentials_issue:credential.type:integer"
        },
        "response": {
          "id": "fd91e611-d608-47f2-85ff-3bbbc9372aca",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 99,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a5492a1f-3fd4-495c-bf4c-8d018df2bcf1",
        "cursor": {
          "ref": "34bbe947-2704-40a5-8125-bad7a80978ee",
          "length": 282,
          "cycles": 1,
          "position": 28,
          "iteration": 0,
          "httpRequestId": "20f1f69b-b98b-419a-a5c3-c66dd64a553f"
        },
        "item": {
          "id": "a5492a1f-3fd4-495c-bf4c-8d018df2bcf1",
          "name": "credentials_issue:credential.type:null"
        },
        "response": {
          "id": "6e6f264b-3494-4311-af81-8673187cb735",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "238696c5-41c3-48b7-a729-02c48bb0765d",
        "cursor": {
          "ref": "068e4fba-b113-4731-aa77-14f8e06e4466",
          "length": 282,
          "cycles": 1,
          "position": 29,
          "iteration": 0,
          "httpRequestId": "a6291ca4-90d5-4551-be76-926178788b09"
        },
        "item": {
          "id": "238696c5-41c3-48b7-a729-02c48bb0765d",
          "name": "credentials_issue:credential.type:object"
        },
        "response": {
          "id": "60a368cd-c692-4c89-8a55-1bf74d16558a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f2398fd0-78f8-4a5c-a3b2-4c77b519946c",
        "cursor": {
          "ref": "ec6033a1-86fa-404c-816d-5d69eaa36a13",
          "length": 282,
          "cycles": 1,
          "position": 30,
          "iteration": 0,
          "httpRequestId": "43cfbbfb-ee9b-49e5-abc8-b4aede0c57bc"
        },
        "item": {
          "id": "f2398fd0-78f8-4a5c-a3b2-4c77b519946c",
          "name": "credentials_issue:credential.type:string"
        },
        "response": {
          "id": "4e8ff859-ab7a-44f7-95bc-b589ea4836ab",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 107
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7fa12290-ebcc-400a-957e-24cbc73fec09",
        "cursor": {
          "ref": "3219fc1d-c2c3-4336-b92f-137782ff3812",
          "length": 282,
          "cycles": 1,
          "position": 31,
          "iteration": 0,
          "httpRequestId": "dd522431-c5f1-478c-af7a-a9ed4c3653b1"
        },
        "item": {
          "id": "7fa12290-ebcc-400a-957e-24cbc73fec09",
          "name": "credentials_issue:credential.type.item:missing"
        },
        "response": {
          "id": "d669f0a3-6693-46d6-9355-e81a16f28dea",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 107
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a7156b95-5e25-4364-a5c8-04a061388ed7",
        "cursor": {
          "ref": "84f6abed-af5d-4495-823e-e6dbc16f866a",
          "length": 282,
          "cycles": 1,
          "position": 32,
          "iteration": 0,
          "httpRequestId": "3e88240d-16d5-485a-9970-bd199293a9ea"
        },
        "item": {
          "id": "a7156b95-5e25-4364-a5c8-04a061388ed7",
          "name": "credentials_issue:credential.type.item:array"
        },
        "response": {
          "id": "1db35c25-aef7-40ec-91cf-b7dd40d8752f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 96,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "54e6d0d2-55a6-4d2a-b8f5-8c8c1fc1c7c9",
        "cursor": {
          "ref": "dfe54d55-ac9f-46f5-9e28-1e41acfccfcb",
          "length": 282,
          "cycles": 1,
          "position": 33,
          "iteration": 0,
          "httpRequestId": "93a2fcac-27d7-4d16-9013-e292290aa5c8"
        },
        "item": {
          "id": "54e6d0d2-55a6-4d2a-b8f5-8c8c1fc1c7c9",
          "name": "credentials_issue:credential.type.item:boolean"
        },
        "response": {
          "id": "85c53369-f46f-4a3f-b1b9-b63f5f4737f8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 105,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6626dd6f-655b-4bf5-93dd-a56fecdf4c6d",
        "cursor": {
          "ref": "dc22e2e5-33e6-4043-960d-2c4d13f1c216",
          "length": 282,
          "cycles": 1,
          "position": 34,
          "iteration": 0,
          "httpRequestId": "8650ae35-feec-4070-8a20-b48e1cf0b7dc"
        },
        "item": {
          "id": "6626dd6f-655b-4bf5-93dd-a56fecdf4c6d",
          "name": "credentials_issue:credential.type.item:integer"
        },
        "response": {
          "id": "bdeb5f8c-47c3-479b-bf47-8f100714b588",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e4ec5de6-7bcc-41b1-bce5-ca66e965b982",
        "cursor": {
          "ref": "d847a184-b4ea-4502-a976-f848cc71d035",
          "length": 282,
          "cycles": 1,
          "position": 35,
          "iteration": 0,
          "httpRequestId": "7ed21259-c518-46d1-8228-92ca4b43e3a1"
        },
        "item": {
          "id": "e4ec5de6-7bcc-41b1-bce5-ca66e965b982",
          "name": "credentials_issue:credential.type.item:null"
        },
        "response": {
          "id": "43f8e8f2-dacc-4b15-ade8-51b65d12cbcc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 99,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8f174421-b627-4d05-8ebb-9ace87480d17",
        "cursor": {
          "ref": "28c8c1d8-1a1e-48f8-84ad-b29e07e098af",
          "length": 282,
          "cycles": 1,
          "position": 36,
          "iteration": 0,
          "httpRequestId": "f193d49f-7157-4bc5-94e0-836343c04394"
        },
        "item": {
          "id": "8f174421-b627-4d05-8ebb-9ace87480d17",
          "name": "credentials_issue:credential.type.item:object"
        },
        "response": {
          "id": "43bd86a3-03e0-44a7-9552-c86a34b9cc61",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 95,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "97f412e4-1641-491e-8e65-1603974b956e",
        "cursor": {
          "ref": "bb713477-7ee5-4bfe-8c93-56d5b50dec57",
          "length": 282,
          "cycles": 1,
          "position": 37,
          "iteration": 0,
          "httpRequestId": "e1f22281-8341-4006-b24f-92e97c717855"
        },
        "item": {
          "id": "97f412e4-1641-491e-8e65-1603974b956e",
          "name": "credentials_issue:credential.issuer:missing"
        },
        "response": {
          "id": "a4911dc9-bf09-443a-9f4f-e4fd7b041c30",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 96
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fd86b980-6620-4e17-83ff-f7b86c7dc991",
        "cursor": {
          "ref": "37cba06a-01fd-4564-b6df-c605a5e3dcdb",
          "length": 282,
          "cycles": 1,
          "position": 38,
          "iteration": 0,
          "httpRequestId": "5b59fb0a-6ddd-4514-9da0-e75385ccdc0a"
        },
        "item": {
          "id": "fd86b980-6620-4e17-83ff-f7b86c7dc991",
          "name": "credentials_issue:credential.issuer:array"
        },
        "response": {
          "id": "df2dd88f-b8d7-49c2-9942-95d7ef0bfdc7",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 133,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:39)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:39)"
            }
          }
        ]
      },
      {
        "id": "6da9f7eb-4292-4ff5-94b2-570e79e3d9dc",
        "cursor": {
          "ref": "5467f0eb-c49b-4d75-8b10-408c32fb8b38",
          "length": 282,
          "cycles": 1,
          "position": 39,
          "iteration": 0,
          "httpRequestId": "2d8225ab-94d7-47f8-aff3-bb59439ff318"
        },
        "item": {
          "id": "6da9f7eb-4292-4ff5-94b2-570e79e3d9dc",
          "name": "credentials_issue:credential.issuer:boolean"
        },
        "response": {
          "id": "c761cad6-6557-4276-813d-c568f74f38c1",
          "status": "Created",
          "code": 201,
          "responseTime": 2327,
          "responseSize": 774
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:40)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:40)"
            }
          }
        ]
      },
      {
        "id": "955b5bc6-7c20-4e96-85c5-bc03d706ced2",
        "cursor": {
          "ref": "0580b004-f555-48c5-b8ab-d893c3b79bab",
          "length": 282,
          "cycles": 1,
          "position": 40,
          "iteration": 0,
          "httpRequestId": "eca0e9f7-04c4-4b55-b55f-8f00f5edc8b1"
        },
        "item": {
          "id": "955b5bc6-7c20-4e96-85c5-bc03d706ced2",
          "name": "credentials_issue:credential.issuer:integer"
        },
        "response": {
          "id": "e454ae66-c6e8-44ef-8f40-67d2f07b3ddc",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 96,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:41)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:41)"
            }
          }
        ]
      },
      {
        "id": "149e4ff8-d4ba-4030-891a-b12ea5d890b1",
        "cursor": {
          "ref": "f1097589-f74c-44d8-a2aa-52aa1c04070a",
          "length": 282,
          "cycles": 1,
          "position": 41,
          "iteration": 0,
          "httpRequestId": "6ad97bea-d9e1-416e-ba4d-5b404f6b20d3"
        },
        "item": {
          "id": "149e4ff8-d4ba-4030-891a-b12ea5d890b1",
          "name": "credentials_issue:credential.issuer:null"
        },
        "response": {
          "id": "3421b488-5937-4589-b8bd-9b81275249e9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 95,
          "responseSize": 96
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d1cc3fe7-450c-4341-8e98-084d354f6337",
        "cursor": {
          "ref": "d2738724-68ed-487b-9322-c0e1c7e20587",
          "length": 282,
          "cycles": 1,
          "position": 42,
          "iteration": 0,
          "httpRequestId": "971275be-e53a-4050-bb1b-a325286a8001"
        },
        "item": {
          "id": "d1cc3fe7-450c-4341-8e98-084d354f6337",
          "name": "credentials_issue.credential.issuer:invalid"
        },
        "response": {
          "id": "b13fabce-d38d-41a9-a377-097594b45fcc",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 95,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:43)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:43)"
            }
          }
        ]
      },
      {
        "id": "a1c9c049-214d-4713-bde2-ee01bfd326d2",
        "cursor": {
          "ref": "ba7512bb-b10f-459c-b6ff-92654b111aef",
          "length": 282,
          "cycles": 1,
          "position": 43,
          "iteration": 0,
          "httpRequestId": "19923926-fbbc-4c08-b632-bdc2b4fc34b4"
        },
        "item": {
          "id": "a1c9c049-214d-4713-bde2-ee01bfd326d2",
          "name": "credentials_issue.credential.issuer:unknown"
        },
        "response": {
          "id": "df247412-c966-40f8-960d-1ae4ac92f592",
          "status": "Created",
          "code": 201,
          "responseTime": 1300,
          "responseSize": 763
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 201",
              "stack": "AssertionError: expected response to have status code 422 but got 201\n   at Object.eval sandbox-script.js:1:44)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:44)"
            }
          }
        ]
      },
      {
        "id": "7db4b603-c31c-4fba-b407-3d7da9f39252",
        "cursor": {
          "ref": "c9a87987-4587-49ab-92d8-1987a10a332c",
          "length": 282,
          "cycles": 1,
          "position": 44,
          "iteration": 0,
          "httpRequestId": "bb793af7-597c-4bd1-9b13-9cdf7d41c509"
        },
        "item": {
          "id": "7db4b603-c31c-4fba-b407-3d7da9f39252",
          "name": "credentials_issue:credential.issuer.id:missing"
        },
        "response": {
          "id": "71a73df6-eaa7-4002-9a1c-eb75cbecff38",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 95,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:45)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:45)"
            }
          }
        ]
      },
      {
        "id": "fa1ca206-6add-4bc7-a161-c6b383f34947",
        "cursor": {
          "ref": "2b0fe0d6-e1ff-4bb3-9638-d19a8aed35c3",
          "length": 282,
          "cycles": 1,
          "position": 45,
          "iteration": 0,
          "httpRequestId": "c5de3d69-aa2c-4fe7-aef5-14145baa7084"
        },
        "item": {
          "id": "fa1ca206-6add-4bc7-a161-c6b383f34947",
          "name": "credentials_issue:credential.issuer.id:array"
        },
        "response": {
          "id": "4bad825f-823d-4dfa-ba4c-e639815a6db5",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 969,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:46)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:46)"
            }
          }
        ]
      },
      {
        "id": "3477af91-182f-4a4a-bb7d-5c272986163d",
        "cursor": {
          "ref": "89621fe0-173d-4bf7-b536-5a6e57635155",
          "length": 282,
          "cycles": 1,
          "position": 46,
          "iteration": 0,
          "httpRequestId": "674672ef-a063-46c0-be73-d63285e9c7ff"
        },
        "item": {
          "id": "3477af91-182f-4a4a-bb7d-5c272986163d",
          "name": "credentials_issue:credential.issuer.id:boolean"
        },
        "response": {
          "id": "a06b8c3a-1c45-4dc1-9a95-ba26c6d58381",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 101,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:47)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:47)"
            }
          }
        ]
      },
      {
        "id": "04111916-60a2-49b8-83b1-21b98a78385a",
        "cursor": {
          "ref": "68dce829-16b4-4889-b97e-756955c8f9e7",
          "length": 282,
          "cycles": 1,
          "position": 47,
          "iteration": 0,
          "httpRequestId": "f4d757e6-961c-466d-b5ee-05484c3a977a"
        },
        "item": {
          "id": "04111916-60a2-49b8-83b1-21b98a78385a",
          "name": "credentials_issue:credential.issuer.id:integer"
        },
        "response": {
          "id": "d0f06d83-53bf-4c1b-ab9f-9268af8b83d7",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 93,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:48)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:48)"
            }
          }
        ]
      },
      {
        "id": "ac0525e9-4759-4af5-8b47-2fc4bd751fb2",
        "cursor": {
          "ref": "8de69dd0-3012-4aeb-9295-1d1309c72c36",
          "length": 282,
          "cycles": 1,
          "position": 48,
          "iteration": 0,
          "httpRequestId": "3bfe27b7-7c25-4635-8dc3-645e661594b1"
        },
        "item": {
          "id": "ac0525e9-4759-4af5-8b47-2fc4bd751fb2",
          "name": "credentials_issue:credential.issuer.id:null"
        },
        "response": {
          "id": "f12dde1c-bdba-499d-b341-e76a1597354a",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 96,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:49)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:49)"
            }
          }
        ]
      },
      {
        "id": "d62a9024-f60e-42b7-bb87-954b4a5395f1",
        "cursor": {
          "ref": "1927e302-28ae-469a-a512-89ec582e8ec8",
          "length": 282,
          "cycles": 1,
          "position": 49,
          "iteration": 0,
          "httpRequestId": "24800c0c-4664-40d3-b648-5047b7f3b063"
        },
        "item": {
          "id": "d62a9024-f60e-42b7-bb87-954b4a5395f1",
          "name": "credentials_issue.credential.issuer.id:invalid"
        },
        "response": {
          "id": "fb489367-2c91-4bc8-ad84-88a99ac0f3b3",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 95,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:50)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:50)"
            }
          }
        ]
      },
      {
        "id": "30c0f98c-c131-40f7-9125-78ee4bac2a8c",
        "cursor": {
          "ref": "07ef523d-ece8-4e70-80d4-fe42aedd3bfe",
          "length": 282,
          "cycles": 1,
          "position": 50,
          "iteration": 0,
          "httpRequestId": "9d0b6c24-5dce-4e65-9b53-6e3b8afb79ae"
        },
        "item": {
          "id": "30c0f98c-c131-40f7-9125-78ee4bac2a8c",
          "name": "credentials_issue.credential.issuer.id:unknown"
        },
        "response": {
          "id": "d7f2f983-18a8-4b0e-8efd-f28d801de552",
          "status": "Created",
          "code": 201,
          "responseTime": 1198,
          "responseSize": 770
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 201",
              "stack": "AssertionError: expected response to have status code 422 but got 201\n   at Object.eval sandbox-script.js:1:51)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:51)"
            }
          }
        ]
      },
      {
        "id": "cda742d3-2f2d-4114-b947-346766c19e6c",
        "cursor": {
          "ref": "6cd7b307-f800-4dfd-ad89-a1fd9537d92c",
          "length": 282,
          "cycles": 1,
          "position": 51,
          "iteration": 0,
          "httpRequestId": "e85bf51e-93b0-4521-aefa-41f90844e93f"
        },
        "item": {
          "id": "cda742d3-2f2d-4114-b947-346766c19e6c",
          "name": "credentials_issue:credential.issuanceDate.missing"
        },
        "response": {
          "id": "c7f1aea6-c56c-4ca4-b8bc-692d92244618",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 167
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "861a3987-cad3-4e02-b834-6d8ddc0d5b41",
        "cursor": {
          "ref": "314551f6-94da-495b-b490-85c8169bab9f",
          "length": 282,
          "cycles": 1,
          "position": 52,
          "iteration": 0,
          "httpRequestId": "2ceb966d-c226-45e7-a358-b0ab3a89bc88"
        },
        "item": {
          "id": "861a3987-cad3-4e02-b834-6d8ddc0d5b41",
          "name": "credentials_issue:credential.issuanceDate:array"
        },
        "response": {
          "id": "b8504d3b-32c6-43d3-b5a3-64c4b60db282",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cf17ff4a-12ad-445e-bdb1-4a4bef4371d4",
        "cursor": {
          "ref": "86817f63-6768-47c8-bd42-9a026031adc4",
          "length": 282,
          "cycles": 1,
          "position": 53,
          "iteration": 0,
          "httpRequestId": "e4cc042c-18ac-45d7-9caa-901b5f2cdb9c"
        },
        "item": {
          "id": "cf17ff4a-12ad-445e-bdb1-4a4bef4371d4",
          "name": "credentials_issue:credential.issuanceDate:boolean"
        },
        "response": {
          "id": "cb217eb1-c8b4-4ca0-8594-384e4fbdaa43",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c785b482-0e8e-47da-bff9-3793359ef7bd",
        "cursor": {
          "ref": "b120cf6f-7e08-4b8a-a9e7-798ef8e10fa8",
          "length": 282,
          "cycles": 1,
          "position": 54,
          "iteration": 0,
          "httpRequestId": "68d4a63d-983a-4589-b09b-aab6b856ddc6"
        },
        "item": {
          "id": "c785b482-0e8e-47da-bff9-3793359ef7bd",
          "name": "credentials_issue:credential.issuanceDate:integer"
        },
        "response": {
          "id": "8dab5dec-aeef-439a-92d8-91417cd8fc4c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 97,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c5ca51ac-48d3-45d7-ad29-9012165423ad",
        "cursor": {
          "ref": "6802129f-c795-4057-84ac-3705d28717c7",
          "length": 282,
          "cycles": 1,
          "position": 55,
          "iteration": 0,
          "httpRequestId": "6e85900c-9565-45f1-9618-423f5549b5a9"
        },
        "item": {
          "id": "c5ca51ac-48d3-45d7-ad29-9012165423ad",
          "name": "credentials_issue:credential.issuanceDate:null"
        },
        "response": {
          "id": "35316553-b969-4387-aa0c-5eafa1e8f7e7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 96,
          "responseSize": 167
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "85ccb379-0257-4f37-ae85-2dbe1dc66e75",
        "cursor": {
          "ref": "07d7c82e-8d1a-4fb2-b05d-d5852f5cab38",
          "length": 282,
          "cycles": 1,
          "position": 56,
          "iteration": 0,
          "httpRequestId": "92553bdb-b1b4-4dab-af53-7ce10f8ecaf6"
        },
        "item": {
          "id": "85ccb379-0257-4f37-ae85-2dbe1dc66e75",
          "name": "credentials_issue:credential.issuanceDate:object"
        },
        "response": {
          "id": "d862896f-5952-40f5-9c9b-3d73b9ea1dbe",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a80e2457-c125-43b0-878c-1e95fe5680cf",
        "cursor": {
          "ref": "1616e373-35ce-4e34-ad77-8b4a6488405b",
          "length": 282,
          "cycles": 1,
          "position": 57,
          "iteration": 0,
          "httpRequestId": "5b2acf62-ff46-481a-a9d2-84aa3f8b2c33"
        },
        "item": {
          "id": "a80e2457-c125-43b0-878c-1e95fe5680cf",
          "name": "credentials_issue:credential.issuanceDate:invalid_value"
        },
        "response": {
          "id": "05634556-f066-4d60-a25f-6756a76e4d5a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 96,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e02088af-c11b-482d-b1bd-032597c47468",
        "cursor": {
          "ref": "38cb96a2-2df1-4019-89e8-e28e019d447a",
          "length": 282,
          "cycles": 1,
          "position": 58,
          "iteration": 0,
          "httpRequestId": "9e8bcd14-880e-4b6b-a250-3292a1130211"
        },
        "item": {
          "id": "e02088af-c11b-482d-b1bd-032597c47468",
          "name": "credentials_issue:credential.credentialSubject:missing"
        },
        "response": {
          "id": "650c0d61-9225-43f4-9ab5-fabdad6d28a4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 97,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2db998bc-c33c-43d0-bda1-424196016636",
        "cursor": {
          "ref": "a0b8f02a-025d-4652-be58-b3a91d7bc93c",
          "length": 282,
          "cycles": 1,
          "position": 59,
          "iteration": 0,
          "httpRequestId": "aacbd12f-230c-41d5-928c-be17abf30410"
        },
        "item": {
          "id": "2db998bc-c33c-43d0-bda1-424196016636",
          "name": "credentials_issue:credential.credentialSubject:array"
        },
        "response": {
          "id": "5e565fc4-bd1d-4c16-a462-b2bb823564de",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 203
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0a1eb663-20a7-45b7-be8e-acb0634a957b",
        "cursor": {
          "ref": "59551fbc-8d07-49a2-ab89-c9cbe9d07e2a",
          "length": 282,
          "cycles": 1,
          "position": 60,
          "iteration": 0,
          "httpRequestId": "73198b1a-12fd-4759-ba30-063b8a8e39c2"
        },
        "item": {
          "id": "0a1eb663-20a7-45b7-be8e-acb0634a957b",
          "name": "credentials_issue:credential.credentialSubject:boolean"
        },
        "response": {
          "id": "ee9c8390-f080-494a-910b-f166ecc37bc9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 185
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "afe7bb43-2895-4f74-9272-daf3f793f34d",
        "cursor": {
          "ref": "2079ddeb-c1b7-4b94-a0d6-3358afc7d679",
          "length": 282,
          "cycles": 1,
          "position": 61,
          "iteration": 0,
          "httpRequestId": "c346c917-9843-4c00-aa50-1a0da7f88373"
        },
        "item": {
          "id": "afe7bb43-2895-4f74-9272-daf3f793f34d",
          "name": "credentials_issue:credential.credentialSubject:integer"
        },
        "response": {
          "id": "529fabb7-fb29-45d3-8cc5-223f4bd3931c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 95,
          "responseSize": 185
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "49cda4a4-0312-4585-b3d9-f4dc8d01bc33",
        "cursor": {
          "ref": "a71400df-0346-41e4-9f43-6e4cea45e6b0",
          "length": 282,
          "cycles": 1,
          "position": 62,
          "iteration": 0,
          "httpRequestId": "fba1d1f1-d3f4-4581-9d8c-e3b21e352407"
        },
        "item": {
          "id": "49cda4a4-0312-4585-b3d9-f4dc8d01bc33",
          "name": "credentials_issue:credential.credentialSubject:null"
        },
        "response": {
          "id": "3ac772c5-fded-4e34-9682-4637e12632fe",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 238
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c364f89b-4ee9-4f69-b6ae-22fedc42ce3b",
        "cursor": {
          "ref": "61c5522a-9583-4067-8f34-e138db8262b5",
          "length": 282,
          "cycles": 1,
          "position": 63,
          "iteration": 0,
          "httpRequestId": "3f4fb0a3-24f7-467d-8bdb-dc691b8fb7ba"
        },
        "item": {
          "id": "c364f89b-4ee9-4f69-b6ae-22fedc42ce3b",
          "name": "credentials_issue:credential.credentialSubject:string"
        },
        "response": {
          "id": "4c4e1bf8-9cd3-4c64-99bb-d5f2cbcc9833",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 97,
          "responseSize": 185
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5d183b63-bbce-4baa-b041-7cdb574247c0",
        "cursor": {
          "ref": "ff86463d-3d5f-42ed-b2f6-e0ef22ea466b",
          "length": 282,
          "cycles": 1,
          "position": 64,
          "iteration": 0,
          "httpRequestId": "1eae54d0-9ebb-4524-b0e2-566a138d5304"
        },
        "item": {
          "id": "5d183b63-bbce-4baa-b041-7cdb574247c0",
          "name": "credentials_issue:credential.credentialSubject.id:array"
        },
        "response": {
          "id": "0f4919f9-20db-4d10-b705-6857d1876ed3",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 787,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:65)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:65)"
            }
          }
        ]
      },
      {
        "id": "e1190d9c-797e-4768-84fb-f22b43a2d0b3",
        "cursor": {
          "ref": "40dd30df-0eab-4794-9009-74bf61dfade7",
          "length": 282,
          "cycles": 1,
          "position": 65,
          "iteration": 0,
          "httpRequestId": "1c05fdaa-830b-4ad5-995c-a76bd592c9f2"
        },
        "item": {
          "id": "e1190d9c-797e-4768-84fb-f22b43a2d0b3",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy"
        },
        "response": {
          "id": "d138d95c-cd84-4759-86bc-8cc993697010",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 1125,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:66)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:66)"
            }
          }
        ]
      },
      {
        "id": "42123202-a9d7-4cbe-9496-426a4fd6f849",
        "cursor": {
          "ref": "baeb627b-3e64-4e50-a565-cc37190341cd",
          "length": 282,
          "cycles": 1,
          "position": 66,
          "iteration": 0,
          "httpRequestId": "927d6891-6471-4192-a925-03fba0716d2f"
        },
        "item": {
          "id": "42123202-a9d7-4cbe-9496-426a4fd6f849",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 2"
        },
        "response": {
          "id": "7c4c3b48-0d25-499c-92c0-73daca20959f",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 109,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:67)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:67)"
            }
          }
        ]
      },
      {
        "id": "b030fba8-f7cf-47cf-8e5b-72531124245d",
        "cursor": {
          "ref": "deba1475-f3a5-4340-ab6a-fc9476996fe0",
          "length": 282,
          "cycles": 1,
          "position": 67,
          "iteration": 0,
          "httpRequestId": "5cf01999-b8ab-4570-9941-6d11981184da"
        },
        "item": {
          "id": "b030fba8-f7cf-47cf-8e5b-72531124245d",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 3"
        },
        "response": {
          "id": "1442751d-4ba3-47d9-b083-09cefe48a3bf",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 784,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:68)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:68)"
            }
          }
        ]
      },
      {
        "id": "6cf1c7d8-5583-4f86-8401-c41f10563164",
        "cursor": {
          "ref": "eb6ed51c-1f87-4d99-a0d6-a32e3af8d023",
          "length": 282,
          "cycles": 1,
          "position": 68,
          "iteration": 0,
          "httpRequestId": "bd334510-bcaf-491d-ad37-d8d07774403e"
        },
        "item": {
          "id": "6cf1c7d8-5583-4f86-8401-c41f10563164",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 4"
        },
        "response": {
          "id": "a16f625b-abe9-42f2-8fe1-c626f32db8a8",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 92,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:69)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:69)"
            }
          }
        ]
      },
      {
        "id": "39afbf1c-bd19-459a-b8bf-269658f69867",
        "cursor": {
          "ref": "0585a0e9-6f24-48e5-a490-37b4f7211f41",
          "length": 282,
          "cycles": 1,
          "position": 69,
          "iteration": 0,
          "httpRequestId": "c5774703-37ac-4f06-a392-d15f38e3e644"
        },
        "item": {
          "id": "39afbf1c-bd19-459a-b8bf-269658f69867",
          "name": "credentials_issue:options:missing"
        },
        "response": {
          "id": "17837c2a-8b83-4bd4-ab43-66cb2bdcbd55",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 95,
          "responseSize": 116
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6151987c-ed96-4573-a4ba-f05d73072d6c",
        "cursor": {
          "ref": "4f70b695-14fe-47e9-a3e8-501d6f60ad78",
          "length": 282,
          "cycles": 1,
          "position": 70,
          "iteration": 0,
          "httpRequestId": "3c4ff6c6-f3c7-4d41-b4b3-7b2c449c6d5d"
        },
        "item": {
          "id": "6151987c-ed96-4573-a4ba-f05d73072d6c",
          "name": "credentials_issue:options:array"
        },
        "response": {
          "id": "ffa11fbf-d237-4f59-955c-919d2648430f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 95,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c69860d3-a283-4489-a4fb-6e6ea5bf5dcc",
        "cursor": {
          "ref": "2be88118-488d-49d3-b8bf-e7ee0dbd81bb",
          "length": 282,
          "cycles": 1,
          "position": 71,
          "iteration": 0,
          "httpRequestId": "5b4cfb74-e5ef-4902-99e5-7499fdf71552"
        },
        "item": {
          "id": "c69860d3-a283-4489-a4fb-6e6ea5bf5dcc",
          "name": "credentials_issue:options:boolean"
        },
        "response": {
          "id": "803df079-1083-4220-9279-32fb13977c91",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 157
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "00639107-a79d-4bef-b80a-c70f09c61916",
        "cursor": {
          "ref": "d1bf025c-10b4-42b8-8e21-7c570a7c1712",
          "length": 282,
          "cycles": 1,
          "position": 72,
          "iteration": 0,
          "httpRequestId": "5eb7bb66-4ab5-4270-babd-2990bdfcf447"
        },
        "item": {
          "id": "00639107-a79d-4bef-b80a-c70f09c61916",
          "name": "credentials_issue:options:integer"
        },
        "response": {
          "id": "2e79c7b0-0751-4219-ad98-fd65d4064074",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 157
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "255046ec-c2bc-4df5-a850-e9d63e2c48fa",
        "cursor": {
          "ref": "c5f9cfc6-4588-4f52-8cbe-c79adf1f2a82",
          "length": 282,
          "cycles": 1,
          "position": 73,
          "iteration": 0,
          "httpRequestId": "aaab674c-96e7-4920-92cc-1e7e4b876cbf"
        },
        "item": {
          "id": "255046ec-c2bc-4df5-a850-e9d63e2c48fa",
          "name": "credentials_issue:options:null"
        },
        "response": {
          "id": "9fc49831-a7ec-4219-8f02-16f6170f0c57",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 189
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6a1358b8-0df6-4d4e-a99a-4819cb4ace35",
        "cursor": {
          "ref": "462e674a-55b0-447e-a668-7b1047d924bd",
          "length": 282,
          "cycles": 1,
          "position": 74,
          "iteration": 0,
          "httpRequestId": "4cc0a180-6b8c-4cd3-b1a9-7954ecb31145"
        },
        "item": {
          "id": "6a1358b8-0df6-4d4e-a99a-4819cb4ace35",
          "name": "credentials_issue:options:string"
        },
        "response": {
          "id": "a0e6f087-c307-442a-a8e0-ee64f2efe7dd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 189
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2aad0985-1220-40ca-bac2-686eb3d7f442",
        "cursor": {
          "ref": "a3e08479-bf41-448a-8fd6-d704ec566f14",
          "length": 282,
          "cycles": 1,
          "position": 75,
          "iteration": 0,
          "httpRequestId": "0e81e769-a2bc-4205-801a-59e18411b361"
        },
        "item": {
          "id": "2aad0985-1220-40ca-bac2-686eb3d7f442",
          "name": "credentials_issue:options.type:missing"
        },
        "response": {
          "id": "aee0c707-ae68-4395-928c-905718f7dd7a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 96,
          "responseSize": 278
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cf325462-8c64-404d-b976-31d02712f85b",
        "cursor": {
          "ref": "25d1d222-d7b0-4365-93c6-8447e96ff620",
          "length": 282,
          "cycles": 1,
          "position": 76,
          "iteration": 0,
          "httpRequestId": "b150de42-9a77-4ff9-b354-e3c503e6f5f1"
        },
        "item": {
          "id": "cf325462-8c64-404d-b976-31d02712f85b",
          "name": "credentials_issue:options.type:array"
        },
        "response": {
          "id": "a4cf5640-f2a1-43aa-880f-3ff4584cbc9d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fb8a54b2-7652-4687-bda9-5160e91311e6",
        "cursor": {
          "ref": "f09397f8-b488-4ae2-aa20-3af9991bfcc3",
          "length": 282,
          "cycles": 1,
          "position": 77,
          "iteration": 0,
          "httpRequestId": "2961a715-3df5-487b-9362-21657098bf6d"
        },
        "item": {
          "id": "fb8a54b2-7652-4687-bda9-5160e91311e6",
          "name": "credentials_issue:options.type:boolean"
        },
        "response": {
          "id": "33b5c65b-e91a-4706-adaa-58b828df1130",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 97,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6d542dcc-735c-43f9-b059-4d0f96ba0aa5",
        "cursor": {
          "ref": "e7de4f59-a0ac-4094-a3b9-1043e9004472",
          "length": 282,
          "cycles": 1,
          "position": 78,
          "iteration": 0,
          "httpRequestId": "bd2dac77-75e2-4c8e-a87c-0d53e78820d6"
        },
        "item": {
          "id": "6d542dcc-735c-43f9-b059-4d0f96ba0aa5",
          "name": "credentials_issue:options.type:integer"
        },
        "response": {
          "id": "a328598a-da60-4657-bc7f-74db579c2227",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 103,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f0c1cc10-628b-41c5-a8bb-93a39f674a75",
        "cursor": {
          "ref": "66b92928-66ab-4bdd-ad8b-76f5ae79a3b8",
          "length": 282,
          "cycles": 1,
          "position": 79,
          "iteration": 0,
          "httpRequestId": "b341cc84-f747-404e-a03e-682a26aeb759"
        },
        "item": {
          "id": "f0c1cc10-628b-41c5-a8bb-93a39f674a75",
          "name": "credentials_issue:options.type:null"
        },
        "response": {
          "id": "0e4e60ea-719c-4a34-94bf-69e5a32e2539",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 95,
          "responseSize": 278
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e0a07496-d622-455c-b1c7-02c86ad21c87",
        "cursor": {
          "ref": "b5a89d08-1bff-456b-95b4-866c6341e6ef",
          "length": 282,
          "cycles": 1,
          "position": 80,
          "iteration": 0,
          "httpRequestId": "50d03ebf-37cb-46bc-9f52-ddd04a1bd6ca"
        },
        "item": {
          "id": "e0a07496-d622-455c-b1c7-02c86ad21c87",
          "name": "credentials_issue:options.type:object"
        },
        "response": {
          "id": "9487e171-c6cb-4adc-852c-44e2bbf766d6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a4f3b584-03ae-4301-8cbb-4efa0964b049",
        "cursor": {
          "ref": "e727d811-ec17-474b-84f0-bce3658e3553",
          "length": 282,
          "cycles": 1,
          "position": 81,
          "iteration": 0,
          "httpRequestId": "dca05913-46fe-450e-bdf4-6f8d8c811bc7"
        },
        "item": {
          "id": "a4f3b584-03ae-4301-8cbb-4efa0964b049",
          "name": "credentials_issue:options.type:invalid_value"
        },
        "response": {
          "id": "0fc14778-32fa-4352-936b-bb62e727e957",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 105,
          "responseSize": 207
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3112baec-594d-40bb-a4a5-b22b463fc0d6",
        "cursor": {
          "ref": "d1cdee5a-694e-4b21-b94d-9db68822b654",
          "length": 282,
          "cycles": 1,
          "position": 82,
          "iteration": 0,
          "httpRequestId": "4550d338-47a7-4582-a8b3-164b44ade252"
        },
        "item": {
          "id": "3112baec-594d-40bb-a4a5-b22b463fc0d6",
          "name": "credentials_issue:options.created:array"
        },
        "response": {
          "id": "9853b3ac-31b8-4a96-97e1-8a18bea5cb98",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 95,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "66be933e-92a3-4c77-9e15-8941548e80e6",
        "cursor": {
          "ref": "3fcdf2f6-cda7-47e7-919f-48fef7fd74a0",
          "length": 282,
          "cycles": 1,
          "position": 83,
          "iteration": 0,
          "httpRequestId": "ca5076a7-9c7f-4ff3-b7ff-23b4e0bcae66"
        },
        "item": {
          "id": "66be933e-92a3-4c77-9e15-8941548e80e6",
          "name": "credentials_issue:options.created:boolean"
        },
        "response": {
          "id": "3e6ea91f-d759-4992-8b9d-da9c0c003cbd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 96,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8a2027ed-8746-4934-9d48-c48eb5dfcdab",
        "cursor": {
          "ref": "335a966d-0dc4-4a73-8744-d6c6666c3848",
          "length": 282,
          "cycles": 1,
          "position": 84,
          "iteration": 0,
          "httpRequestId": "6fb3ddf5-d5b0-44f7-8a90-026ab209d81c"
        },
        "item": {
          "id": "8a2027ed-8746-4934-9d48-c48eb5dfcdab",
          "name": "credentials_issue:options.created:integer"
        },
        "response": {
          "id": "9c251677-5ab1-4f7e-a6c5-255440e082fc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 95,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b249e2a1-13b6-491f-8a3d-c789698dc4c9",
        "cursor": {
          "ref": "f749fbb6-e54f-44f7-bf96-aaa5c1448d66",
          "length": 282,
          "cycles": 1,
          "position": 85,
          "iteration": 0,
          "httpRequestId": "4459af8a-20ed-4333-a71d-080dc42ca3dd"
        },
        "item": {
          "id": "b249e2a1-13b6-491f-8a3d-c789698dc4c9",
          "name": "credentials_issue:options.created:null"
        },
        "response": {
          "id": "0bc20c48-7f81-4463-a14b-57192c226858",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 101,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1f827ce5-f467-43bc-82fd-eb374d152adc",
        "cursor": {
          "ref": "3adca2c8-baa6-4ada-96f1-ba9bcbabf723",
          "length": 282,
          "cycles": 1,
          "position": 86,
          "iteration": 0,
          "httpRequestId": "4e1d7d77-b9e4-47a5-9262-ba1074c74742"
        },
        "item": {
          "id": "1f827ce5-f467-43bc-82fd-eb374d152adc",
          "name": "credentials_issue:options.created:object"
        },
        "response": {
          "id": "232ba33e-c797-46c6-8a74-82d58a3d3517",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 163,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "db8874dd-dcba-42a1-a700-71d12610c642",
        "cursor": {
          "ref": "194d6a8d-8584-499b-900b-f89a128ec784",
          "length": 282,
          "cycles": 1,
          "position": 87,
          "iteration": 0,
          "httpRequestId": "21863cd8-b48d-46be-9f1f-178536b7d4e8"
        },
        "item": {
          "id": "db8874dd-dcba-42a1-a700-71d12610c642",
          "name": "credentials_issue:options.created:invalid"
        },
        "response": {
          "id": "3a06c4f9-0234-4e92-9d3e-b884adc84f8a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "49243303-c5f4-4fb2-b3d4-810336b391cc",
        "cursor": {
          "ref": "32599c70-449d-4d27-b78a-f78e1006b40c",
          "length": 282,
          "cycles": 1,
          "position": 88,
          "iteration": 0,
          "httpRequestId": "234af924-336d-4010-9851-5dc16ceb4c60"
        },
        "item": {
          "id": "49243303-c5f4-4fb2-b3d4-810336b391cc",
          "name": "credentials_issue:options.credentialStatus:array"
        },
        "response": {
          "id": "769249f7-a229-4c3d-9e79-bdd2ff527bfd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b8695e16-3ed8-4cec-b2ec-566bc130b63e",
        "cursor": {
          "ref": "b3d8e6ea-cf1f-4df4-8187-e92fb6645e58",
          "length": 282,
          "cycles": 1,
          "position": 89,
          "iteration": 0,
          "httpRequestId": "38d6e7c4-0228-4068-aead-d81d6e14dffd"
        },
        "item": {
          "id": "b8695e16-3ed8-4cec-b2ec-566bc130b63e",
          "name": "credentials_issue:options.credentialStatus:boolean"
        },
        "response": {
          "id": "d3d87792-f516-4b54-8745-8bd7a25ff985",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 98,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dfcf137d-c385-471f-937b-e47b99a440c0",
        "cursor": {
          "ref": "3e1d93fd-158d-4a16-bbd1-1c5f0b4e9372",
          "length": 282,
          "cycles": 1,
          "position": 90,
          "iteration": 0,
          "httpRequestId": "29782620-2d9c-4e5b-92d0-84deca885f15"
        },
        "item": {
          "id": "dfcf137d-c385-471f-937b-e47b99a440c0",
          "name": "credentials_issue:options.credentialStatus:integer"
        },
        "response": {
          "id": "3bf8ab5e-c87b-4c53-b779-7cfd8d58e888",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6e855403-e51d-483c-b8b5-5cdd12adc95d",
        "cursor": {
          "ref": "a3446af1-1eb4-4eea-a90e-7b26aa1672dc",
          "length": 282,
          "cycles": 1,
          "position": 91,
          "iteration": 0,
          "httpRequestId": "1a656814-3ee8-4e15-ba3c-174485e9da49"
        },
        "item": {
          "id": "6e855403-e51d-483c-b8b5-5cdd12adc95d",
          "name": "credentials_issue:options.credentialStatus:null"
        },
        "response": {
          "id": "dd48828d-c803-4340-8dbd-e6146373ffe5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1f48cb30-1b9e-405f-8d96-5927ee79af8f",
        "cursor": {
          "ref": "d0335b15-bfc5-4223-972e-ebf202e6b761",
          "length": 282,
          "cycles": 1,
          "position": 92,
          "iteration": 0,
          "httpRequestId": "f348c14b-cd13-4793-8978-264bd71f2fc4"
        },
        "item": {
          "id": "1f48cb30-1b9e-405f-8d96-5927ee79af8f",
          "name": "credentials_issue:options.credentialStatus:string"
        },
        "response": {
          "id": "044eb1e3-c7d4-471a-b534-aa0e392ce0ba",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9a1f248e-ad4f-48b1-9821-42ccd6ea187d",
        "cursor": {
          "ref": "d05b5f17-dfa8-4ba4-a380-dc873172ea15",
          "length": 282,
          "cycles": 1,
          "position": 93,
          "iteration": 0,
          "httpRequestId": "b543b5df-bce0-46b4-8877-00f223e68160"
        },
        "item": {
          "id": "9a1f248e-ad4f-48b1-9821-42ccd6ea187d",
          "name": "credentials_issue:options.credentialStatus.type:missing"
        },
        "response": {
          "id": "d537ee0d-ab77-400a-a168-0c60ea63000e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8cbef56a-5b2b-4b52-9a38-3edd1a128793",
        "cursor": {
          "ref": "da8dc7b5-43b9-4fa8-9471-59eab06673ec",
          "length": 282,
          "cycles": 1,
          "position": 94,
          "iteration": 0,
          "httpRequestId": "44bd1fcb-3903-45cc-aa1d-9cfeb1b54725"
        },
        "item": {
          "id": "8cbef56a-5b2b-4b52-9a38-3edd1a128793",
          "name": "credentials_issue:options.credentialStatus.type:array"
        },
        "response": {
          "id": "e5e98057-54e4-4b3e-91e6-7b657a6f1ce2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 95,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "567c6a1e-5ee6-4d5c-9f60-4e6b6e6b4121",
        "cursor": {
          "ref": "bf6ec156-9422-4c6c-8ca5-c640408582ec",
          "length": 282,
          "cycles": 1,
          "position": 95,
          "iteration": 0,
          "httpRequestId": "e209757d-6e95-416e-bc1d-3f127a53e284"
        },
        "item": {
          "id": "567c6a1e-5ee6-4d5c-9f60-4e6b6e6b4121",
          "name": "credentials_issue:options.credentialStatus.type:boolean"
        },
        "response": {
          "id": "eefe35d5-667b-4067-9475-7dbdde5c6071",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "806241c8-c0e1-42dd-8da5-f8c2d92d6dc4",
        "cursor": {
          "ref": "685d1c2c-864e-40e5-bfd7-540abd227573",
          "length": 282,
          "cycles": 1,
          "position": 96,
          "iteration": 0,
          "httpRequestId": "8f4bda07-6767-4aa4-a28e-73ffbf434a52"
        },
        "item": {
          "id": "806241c8-c0e1-42dd-8da5-f8c2d92d6dc4",
          "name": "credentials_issue:options.credentialStatus.type:integer"
        },
        "response": {
          "id": "3722d68a-5157-422b-a7d4-1b83acee17d9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 95,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "813f29dd-2432-4d89-8682-87f9e60fd6d4",
        "cursor": {
          "ref": "97ed4f7a-d034-4156-a9c0-504d927e235b",
          "length": 282,
          "cycles": 1,
          "position": 97,
          "iteration": 0,
          "httpRequestId": "385360f4-4976-4c81-8852-a8958eca2103"
        },
        "item": {
          "id": "813f29dd-2432-4d89-8682-87f9e60fd6d4",
          "name": "credentials_issue:options.credentialStatus.type:null"
        },
        "response": {
          "id": "0a28ff4d-a9e3-448c-9b1d-449f45796146",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8f4fb849-62db-4b42-b74a-0cb369633635",
        "cursor": {
          "ref": "6d4241b6-805e-4fa5-ab4e-4fc5167378d9",
          "length": 282,
          "cycles": 1,
          "position": 98,
          "iteration": 0,
          "httpRequestId": "fe1051ed-8d5b-4151-b6d8-d72ea38d4a93"
        },
        "item": {
          "id": "8f4fb849-62db-4b42-b74a-0cb369633635",
          "name": "credentials_issue:options.credentialStatus.type:null Copy"
        },
        "response": {
          "id": "e8d70f44-1dbc-4ef3-8fc6-787504062be1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 96,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "09256e0c-34b2-4913-a3c3-6b7713cb3355",
        "cursor": {
          "ref": "29e57908-6d7e-4d19-a1a3-4a29560c7814",
          "length": 282,
          "cycles": 1,
          "position": 99,
          "iteration": 0,
          "httpRequestId": "6699ddcf-ceba-45d2-baf6-4f75248e9fd3"
        },
        "item": {
          "id": "09256e0c-34b2-4913-a3c3-6b7713cb3355",
          "name": "credentials_issue:options.credentialStatus.type:invalid"
        },
        "response": {
          "id": "f0fe9352-8c28-4154-aa06-f4ffcab3c9ee",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 104,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "585ee6bb-733e-4732-b97b-a5f060ee9951",
        "cursor": {
          "ref": "1189700d-c99f-4238-b492-b822d48166e8",
          "length": 282,
          "cycles": 1,
          "position": 100,
          "iteration": 0,
          "httpRequestId": "abc79f22-ef73-456e-b2c9-c535331bcfd4"
        },
        "item": {
          "id": "585ee6bb-733e-4732-b97b-a5f060ee9951",
          "name": "credentials_issue:missing_auth"
        },
        "response": {
          "id": "d3cb775f-1adb-4e0e-ad3f-4566084abd51",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 80,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ea9f0dd7-ddea-4b33-acce-01ef9214c102",
        "cursor": {
          "ref": "c04a5242-ae8e-49c7-867e-c6f91696dd5e",
          "length": 282,
          "cycles": 1,
          "position": 101,
          "iteration": 0,
          "httpRequestId": "1066f834-d0ba-4e2c-9a8e-b40a01477a82"
        },
        "item": {
          "id": "ea9f0dd7-ddea-4b33-acce-01ef9214c102",
          "name": "credentials_issue"
        },
        "response": {
          "id": "0b4e45c5-bec2-470e-b5ed-5c7bb6f73e70",
          "status": "Created",
          "code": 201,
          "responseTime": 1183,
          "responseSize": 760
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false
          },
          {
            "assertion": "response issuanceDate matches request credential.issuanceDate",
            "skipped": false
          },
          {
            "assertion": "response proof.created is close to 'now'",
            "skipped": false
          }
        ]
      },
      {
        "id": "f940e964-6e4d-4087-832a-e89fed769068",
        "cursor": {
          "ref": "1ca60e9e-e127-49b7-8ede-afe760a0fce4",
          "length": 282,
          "cycles": 1,
          "position": 102,
          "iteration": 0,
          "httpRequestId": "6c14ec16-f67b-4655-aff3-b42d6a3196e2"
        },
        "item": {
          "id": "f940e964-6e4d-4087-832a-e89fed769068",
          "name": "credentials_issue:credential.opt.id"
        },
        "response": {
          "id": "b1d432db-c3b7-4410-b907-29275f78ec5d",
          "status": "Created",
          "code": 201,
          "responseTime": 1054,
          "responseSize": 714
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verifiableCredential.id matches request credential.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "2c7d8d92-5a77-46c7-95d2-68e2c2c21c20",
        "cursor": {
          "ref": "99cd7a01-8e72-467c-b216-8ec6bd8267a8",
          "length": 282,
          "cycles": 1,
          "position": 103,
          "iteration": 0,
          "httpRequestId": "ace6ca55-4db9-4da3-8035-fe8f638f238d"
        },
        "item": {
          "id": "2c7d8d92-5a77-46c7-95d2-68e2c2c21c20",
          "name": "credentials_issue:credential:alt.issuer.object"
        },
        "response": {
          "id": "b2e474c3-17c6-4e2f-876d-bc6f099c7bc5",
          "status": "Created",
          "code": 201,
          "responseTime": 1054,
          "responseSize": 767
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "0acbed54-1867-48d2-a19f-43b0d80a0469",
        "cursor": {
          "ref": "8581c5cb-4c0c-49d7-a0c9-a858ab216168",
          "length": 282,
          "cycles": 1,
          "position": 104,
          "iteration": 0,
          "httpRequestId": "93a52b6d-0cd3-4577-9c76-2e14e3f57e65"
        },
        "item": {
          "id": "0acbed54-1867-48d2-a19f-43b0d80a0469",
          "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id"
        },
        "response": {
          "id": "ff2eb85b-2a86-48f1-83fa-0aceb6aa0a85",
          "status": "Created",
          "code": 201,
          "responseTime": 1063,
          "responseSize": 771
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response credentialSubject.id matches request credential.credentialSubject.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "da617652-ab1a-402d-b96e-3a0ff406dfa4",
        "cursor": {
          "ref": "0fd27a68-c260-46d1-8d6b-9173af3e0148",
          "length": 282,
          "cycles": 1,
          "position": 105,
          "iteration": 0,
          "httpRequestId": "19ffdb6d-9848-461a-a53b-4fa5bf0b2d91"
        },
        "item": {
          "id": "da617652-ab1a-402d-b96e-3a0ff406dfa4",
          "name": "credentials_issue:options:opt.created"
        },
        "response": {
          "id": "282f881a-68c1-474f-8d0d-6ab6401d2a62",
          "status": "Created",
          "code": 201,
          "responseTime": 1540,
          "responseSize": 760
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response proof.created matches request options.created",
            "skipped": false
          }
        ]
      },
      {
        "id": "bbd3bbd5-6e60-403d-8087-014078003277",
        "cursor": {
          "ref": "74b028c9-d6db-49ee-ac09-e2f92129e217",
          "length": 282,
          "cycles": 1,
          "position": 106,
          "iteration": 0,
          "httpRequestId": "c34a70d3-af2d-41a0-9d01-216bf913ae8f"
        },
        "item": {
          "id": "bbd3bbd5-6e60-403d-8087-014078003277",
          "name": "credentials_issue:options:opt.credentialStatus"
        },
        "response": {
          "id": "a8ae8fb2-a5d6-4f83-aafd-8f102e48091f",
          "status": "Created",
          "code": 201,
          "responseTime": 1060,
          "responseSize": 1093
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "782928a7-b4d7-4b2e-a704-437855ffc381",
        "cursor": {
          "ref": "c9a66500-5c30-4dcb-8612-fef5b4743afa",
          "length": 282,
          "cycles": 1,
          "position": 107,
          "iteration": 0,
          "httpRequestId": "b8e0f9af-751b-4303-89b5-6d3366839db7"
        },
        "item": {
          "id": "782928a7-b4d7-4b2e-a704-437855ffc381",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "ddf818bb-00de-45b3-af50-247eea6a2d51",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 97,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f9243f49-ab85-4d4e-bc10-cac88fd8c76d",
        "cursor": {
          "ref": "03eddaad-29f8-4542-bda4-cec742092940",
          "length": 282,
          "cycles": 1,
          "position": 108,
          "iteration": 0,
          "httpRequestId": "b3061d25-c738-4817-bd49-2a17c6b1758b"
        },
        "item": {
          "id": "f9243f49-ab85-4d4e-bc10-cac88fd8c76d",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "0bbc7ac7-5d50-4969-9dcf-870856228b1e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "319456e8-2cb3-424e-8ca2-a83009ccdc11",
        "cursor": {
          "ref": "de8731bb-6810-4800-b138-bd83784b69a5",
          "length": 282,
          "cycles": 1,
          "position": 109,
          "iteration": 0,
          "httpRequestId": "b4e64ee9-6e33-4a01-94fc-226700f4cf8e"
        },
        "item": {
          "id": "319456e8-2cb3-424e-8ca2-a83009ccdc11",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "ecaf8de1-3db6-4e4a-a06c-707375cf52cb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "80ca702b-8606-49a3-88b0-8b9349932588",
        "cursor": {
          "ref": "4805ed66-f14b-4dd0-aa88-ec48804ca869",
          "length": 282,
          "cycles": 1,
          "position": 110,
          "iteration": 0,
          "httpRequestId": "1af778fc-85b7-4295-88c4-2bef33789784"
        },
        "item": {
          "id": "80ca702b-8606-49a3-88b0-8b9349932588",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "6c8dcae1-1802-4fa3-a18b-c95c762493e4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 112,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5babf924-61ee-40b7-b4ef-192f1bcc9d23",
        "cursor": {
          "ref": "37205809-dce2-41cf-9d54-84fa428461c3",
          "length": 282,
          "cycles": 1,
          "position": 111,
          "iteration": 0,
          "httpRequestId": "37c1419f-5dac-4bf3-8db9-d0fdc045405b"
        },
        "item": {
          "id": "5babf924-61ee-40b7-b4ef-192f1bcc9d23",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "08dc14e4-f6cc-46bf-b7f6-f42d12cdf672",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4fefa706-1783-47e9-b03a-ee37effc5f68",
        "cursor": {
          "ref": "b09031d7-046a-4620-97fa-de8bb0582c35",
          "length": 282,
          "cycles": 1,
          "position": 112,
          "iteration": 0,
          "httpRequestId": "8d08b9c4-3026-4fd1-86c4-5743fb22c132"
        },
        "item": {
          "id": "4fefa706-1783-47e9-b03a-ee37effc5f68",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "552c0640-6d72-469c-a7ac-8c975b159526",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 96,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3ce2321d-a263-4c63-b479-f855c16e3499",
        "cursor": {
          "ref": "b7c4d70b-6bd5-4d31-bfef-ce495e1f2e91",
          "length": 282,
          "cycles": 1,
          "position": 113,
          "iteration": 0,
          "httpRequestId": "1a64d862-fab1-4685-9cb1-cacb2410bbb2"
        },
        "item": {
          "id": "3ce2321d-a263-4c63-b479-f855c16e3499",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "a5266622-c5ba-432d-993d-2f21b781f62d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 98,
          "responseSize": 146
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9bea885e-7ba6-4957-ba5d-0bd09c1e30ac",
        "cursor": {
          "ref": "80297896-b60e-482b-a19e-51c3f76c7736",
          "length": 282,
          "cycles": 1,
          "position": 114,
          "iteration": 0,
          "httpRequestId": "9ad33e41-7660-47cb-ac92-a8799f815eae"
        },
        "item": {
          "id": "9bea885e-7ba6-4957-ba5d-0bd09c1e30ac",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "21342bd9-d6e3-419a-952d-a161ec2e2608",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8671cf5b-a488-481c-86c2-dbec95eedcd3",
        "cursor": {
          "ref": "4db72d89-57a9-4b1f-b236-df88f22657dc",
          "length": 282,
          "cycles": 1,
          "position": 115,
          "iteration": 0,
          "httpRequestId": "76335a21-326e-4c56-a8b8-47708a8bf3e8"
        },
        "item": {
          "id": "8671cf5b-a488-481c-86c2-dbec95eedcd3",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "d581e7d1-5671-47f3-97da-c45b3a5f4167",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ddd9ce33-53c3-403b-8e62-46b2e3e99f3a",
        "cursor": {
          "ref": "f9ee9daa-a98f-41d2-9536-ee2c89ef972f",
          "length": 282,
          "cycles": 1,
          "position": 116,
          "iteration": 0,
          "httpRequestId": "3ad65171-64ae-42f4-bb77-a6feb459f22e"
        },
        "item": {
          "id": "ddd9ce33-53c3-403b-8e62-46b2e3e99f3a",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "5e240212-ba31-49a0-a432-ffd9fd6ad126",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "40026c68-011f-4e84-b2c3-8e55767c6e59",
        "cursor": {
          "ref": "6b0e706f-c648-4256-bbaf-3ff2688aae81",
          "length": 282,
          "cycles": 1,
          "position": 117,
          "iteration": 0,
          "httpRequestId": "c607383b-5033-46dd-a11a-107f7c2faca0"
        },
        "item": {
          "id": "40026c68-011f-4e84-b2c3-8e55767c6e59",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "83fb1883-9a83-49df-b6b5-7ac7f84b6879",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 97,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "611a37a7-7df4-4b3d-bdaa-df580faadac9",
        "cursor": {
          "ref": "9b72c637-0ac1-4b70-a72e-6d55247050e1",
          "length": 282,
          "cycles": 1,
          "position": 118,
          "iteration": 0,
          "httpRequestId": "0a25ccbe-b423-4d48-a1b7-61ee0a025703"
        },
        "item": {
          "id": "611a37a7-7df4-4b3d-bdaa-df580faadac9",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "06b6167c-0e0a-4496-80e3-fbf70863544a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 102,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "71885d72-0db3-4813-8249-7745f6241fad",
        "cursor": {
          "ref": "46024cd4-9dbc-4b02-9c55-ea8a4453703f",
          "length": 282,
          "cycles": 1,
          "position": 119,
          "iteration": 0,
          "httpRequestId": "95015956-48b5-4421-940a-2b754e5a22e6"
        },
        "item": {
          "id": "71885d72-0db3-4813-8249-7745f6241fad",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "5546094b-7641-4191-947a-1f671582b2cc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "081c1a2c-6212-44cc-959e-c9599172fcfb",
        "cursor": {
          "ref": "cfb091de-198c-4ef9-9018-79a76e8cefa5",
          "length": 282,
          "cycles": 1,
          "position": 120,
          "iteration": 0,
          "httpRequestId": "b96c37b0-661a-449d-b2fd-206a8885ce01"
        },
        "item": {
          "id": "081c1a2c-6212-44cc-959e-c9599172fcfb",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "7fa925b2-f186-4263-8cf1-b39c627e41ec",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "35ed9f72-e0ce-4072-8909-8bc8d84c8b75",
        "cursor": {
          "ref": "3275a5f8-9ba0-49ca-aed4-4a7d93c04fae",
          "length": 282,
          "cycles": 1,
          "position": 121,
          "iteration": 0,
          "httpRequestId": "2f63462c-43ae-45ae-ad14-bb0879750380"
        },
        "item": {
          "id": "35ed9f72-e0ce-4072-8909-8bc8d84c8b75",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "7ace94a7-4daa-47b3-8803-a9206ec24e34",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 96,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dd889e14-b1ab-421e-9e18-1d8a1e8f707a",
        "cursor": {
          "ref": "e098566e-9228-43ff-b2cc-ad6618f98c3c",
          "length": 282,
          "cycles": 1,
          "position": 122,
          "iteration": 0,
          "httpRequestId": "bd7d89a6-b9b9-4a7e-84d0-6f8338f15ac5"
        },
        "item": {
          "id": "dd889e14-b1ab-421e-9e18-1d8a1e8f707a",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "fd29f8a9-6dab-47f3-8277-f92e2da5d2ca",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 96,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5daee3b0-a0ce-4987-ab54-953f4a20f54e",
        "cursor": {
          "ref": "f2c05274-e921-4062-b9d0-01a25d1e7537",
          "length": 282,
          "cycles": 1,
          "position": 123,
          "iteration": 0,
          "httpRequestId": "48291132-e075-4c76-b729-3fd08b6ab2de"
        },
        "item": {
          "id": "5daee3b0-a0ce-4987-ab54-953f4a20f54e",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "fb72bbc2-4d28-4d7e-9bb3-d8ac9431eea3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b9114f53-0129-49e1-ac02-b446907e7beb",
        "cursor": {
          "ref": "7af1232c-2952-4a8c-a3a6-a8a62d22c9cc",
          "length": 282,
          "cycles": 1,
          "position": 124,
          "iteration": 0,
          "httpRequestId": "9866c168-19e2-435d-85a5-97a6cadf51cf"
        },
        "item": {
          "id": "b9114f53-0129-49e1-ac02-b446907e7beb",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "72013f99-5d13-47a4-916e-0521ee2c0124",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 98,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4ba7aa44-f4f0-483a-b31b-7cbe4ebf374e",
        "cursor": {
          "ref": "a4540e77-40dd-422c-a7b4-58e604b82e8c",
          "length": 282,
          "cycles": 1,
          "position": 125,
          "iteration": 0,
          "httpRequestId": "d5c1fcc9-532e-40ab-9444-902817e0acca"
        },
        "item": {
          "id": "4ba7aa44-f4f0-483a-b31b-7cbe4ebf374e",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "8ad0c87c-3665-4718-8d27-b32119e0ff58",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bc2cbeaf-4930-42c9-ac23-3d5c916c82c4",
        "cursor": {
          "ref": "42519455-7ee1-4888-99d4-f30ed6f6a9ef",
          "length": 282,
          "cycles": 1,
          "position": 126,
          "iteration": 0,
          "httpRequestId": "41f0be44-8655-4923-9166-7f3a61f70009"
        },
        "item": {
          "id": "bc2cbeaf-4930-42c9-ac23-3d5c916c82c4",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "b9213f61-2a5b-42b0-8f58-d5cabe450356",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1981a397-8af8-4aca-877f-0d5b3c18fc51",
        "cursor": {
          "ref": "33fc513e-897e-46a0-a1e4-4e900f2f8ea6",
          "length": 282,
          "cycles": 1,
          "position": 127,
          "iteration": 0,
          "httpRequestId": "fc65d39d-6a9b-46b8-bdca-9124e982cc6d"
        },
        "item": {
          "id": "1981a397-8af8-4aca-877f-0d5b3c18fc51",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "38aa5cbd-4498-4df5-b356-f1f54ee34859",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 98,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3fd65475-c1cf-404f-b6c2-de679a7703b8",
        "cursor": {
          "ref": "e4b7ea01-7aa9-4786-abe1-95e5bb59e599",
          "length": 282,
          "cycles": 1,
          "position": 128,
          "iteration": 0,
          "httpRequestId": "0566b251-afbf-447d-85a9-e48836d37efa"
        },
        "item": {
          "id": "3fd65475-c1cf-404f-b6c2-de679a7703b8",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "51433903-ac9d-4421-aac4-d3cf8fa15d5d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 99,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "46c72016-8db7-4d3d-9ae9-8b85049fee5e",
        "cursor": {
          "ref": "8141266b-b6c5-4e95-b298-85742c464693",
          "length": 282,
          "cycles": 1,
          "position": 129,
          "iteration": 0,
          "httpRequestId": "cc7bf5b5-9a46-4012-b63e-6a02a031db35"
        },
        "item": {
          "id": "46c72016-8db7-4d3d-9ae9-8b85049fee5e",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "946aa427-5769-43c4-b9ea-7f0471efb038",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bbc4c80b-69a7-41e5-8ead-e2c38fcc16e2",
        "cursor": {
          "ref": "23ddd68c-4341-490c-a671-2a5df24117d9",
          "length": 282,
          "cycles": 1,
          "position": 130,
          "iteration": 0,
          "httpRequestId": "a90862e1-26c6-4786-b2a1-4f0245e13782"
        },
        "item": {
          "id": "bbc4c80b-69a7-41e5-8ead-e2c38fcc16e2",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "047a42f1-ad8a-4ad4-a6f2-5c5fb0cac8d2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f091d3f8-9cfd-48cc-a5c1-77efe9675dfb",
        "cursor": {
          "ref": "737a13c8-57b0-4841-88be-2b56de4c5d1d",
          "length": 282,
          "cycles": 1,
          "position": 131,
          "iteration": 0,
          "httpRequestId": "6cde4389-3c3d-4dcd-919c-af1a727a6b66"
        },
        "item": {
          "id": "f091d3f8-9cfd-48cc-a5c1-77efe9675dfb",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "afe96c09-807c-4ba6-a926-072199889231",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0a9d1943-a490-4e0e-b4cf-d225146a33f8",
        "cursor": {
          "ref": "560089ca-5cd7-4d59-bc52-92073b29f4f2",
          "length": 282,
          "cycles": 1,
          "position": 132,
          "iteration": 0,
          "httpRequestId": "603615a5-359e-478c-a77b-24bb632dff25"
        },
        "item": {
          "id": "0a9d1943-a490-4e0e-b4cf-d225146a33f8",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "6fdb4fd3-bccc-4c91-b83e-5f3c50e04899",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 100,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3fe84df1-179b-4f58-9cb3-d567cf87a5de",
        "cursor": {
          "ref": "0f039bfb-fbe3-403c-807b-0ce6e63e3c68",
          "length": 282,
          "cycles": 1,
          "position": 133,
          "iteration": 0,
          "httpRequestId": "388c7b6d-8614-46c1-aa26-c17cf82e96e2"
        },
        "item": {
          "id": "3fe84df1-179b-4f58-9cb3-d567cf87a5de",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "1f573d5c-e940-4684-8353-f6d6bc00afe3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 101,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "642027e2-0ab9-44fe-8de9-0a47e5ae8c30",
        "cursor": {
          "ref": "2b792262-3b64-4069-904e-c5b8e230ddea",
          "length": 282,
          "cycles": 1,
          "position": 134,
          "iteration": 0,
          "httpRequestId": "8b502dac-2f7f-4621-83b1-8e25debbae25"
        },
        "item": {
          "id": "642027e2-0ab9-44fe-8de9-0a47e5ae8c30",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "3ff120df-79da-4b6b-a654-d3c949ee9c36",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 95,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "136ab4c1-2f95-4946-a17e-669c2bb4fe07",
        "cursor": {
          "ref": "1fa718e1-d47b-4fd4-849a-1e807d744b1f",
          "length": 282,
          "cycles": 1,
          "position": 135,
          "iteration": 0,
          "httpRequestId": "30f9b686-dbd9-4bcf-a574-9df511752a8c"
        },
        "item": {
          "id": "136ab4c1-2f95-4946-a17e-669c2bb4fe07",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "5393af86-fb1b-4121-bc7a-339806c797b0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9f9a94eb-bdd9-49a4-828d-3e16f848aae5",
        "cursor": {
          "ref": "dd9467fb-7193-4540-81f2-479784fe4b4c",
          "length": 282,
          "cycles": 1,
          "position": 136,
          "iteration": 0,
          "httpRequestId": "2fcd7fc6-b9b6-4ee4-b76d-7a37de2068e0"
        },
        "item": {
          "id": "9f9a94eb-bdd9-49a4-828d-3e16f848aae5",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "3110f82e-e589-4074-b2a4-5a39ccb08471",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "44c1526b-df28-4f4b-8247-f86d1fcd9f42",
        "cursor": {
          "ref": "91de6e5c-4f39-45ed-b725-59a88f06f92d",
          "length": 282,
          "cycles": 1,
          "position": 137,
          "iteration": 0,
          "httpRequestId": "f888df83-e914-41e1-b49f-a8da64ef04f1"
        },
        "item": {
          "id": "44c1526b-df28-4f4b-8247-f86d1fcd9f42",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "2ba24c5c-0585-4204-877d-be452d49c721",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8e9d1a20-f9c1-43e8-b024-9b3288200f1e",
        "cursor": {
          "ref": "d774e8d5-7106-413e-afea-ab45c004104a",
          "length": 282,
          "cycles": 1,
          "position": 138,
          "iteration": 0,
          "httpRequestId": "3aa45b40-6512-4b85-9558-30d6d32399af"
        },
        "item": {
          "id": "8e9d1a20-f9c1-43e8-b024-9b3288200f1e",
          "name": "credentials_status:credentialStatus:item:status:invalid"
        },
        "response": {
          "id": "5e5ed9ea-e3db-442f-86c3-197011d3ff43",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e1df302e-69dc-4b1d-9d09-0389e00068a4",
        "cursor": {
          "ref": "7f3b0306-2c35-4bbb-8c01-29edd6bb5b73",
          "length": 282,
          "cycles": 1,
          "position": 139,
          "iteration": 0,
          "httpRequestId": "afcd2027-3bb6-4e7a-a2b4-f891260d0dbd"
        },
        "item": {
          "id": "e1df302e-69dc-4b1d-9d09-0389e00068a4",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "e3b051fd-de72-45d5-892d-5c8889cd2092",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 79,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a4156ef4-8d1d-4089-9a53-20151ef0f3de",
        "cursor": {
          "ref": "45ca0b13-c61f-46e6-b14f-ee0417cb189b",
          "length": 282,
          "cycles": 1,
          "position": 140,
          "iteration": 0,
          "httpRequestId": "fd6d04e2-23a3-4a41-8cc5-d22191b9ea68"
        },
        "item": {
          "id": "a4156ef4-8d1d-4089-9a53-20151ef0f3de",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "4e2c7086-a344-45db-bb5e-5d7005725bb7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 95,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "655a78cf-8291-4b1c-ac95-9985227d0bff",
        "cursor": {
          "ref": "00468170-9b25-4467-b699-1eefaa567220",
          "length": 282,
          "cycles": 1,
          "position": 141,
          "iteration": 0,
          "httpRequestId": "3635a176-e220-4561-88a9-c4899b04e4f8"
        },
        "item": {
          "id": "655a78cf-8291-4b1c-ac95-9985227d0bff",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "b9b1efee-7e02-45e0-9435-ad76fc577197",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fd10a828-5b3f-41c7-9d15-c725b666c2aa",
        "cursor": {
          "ref": "7404f5aa-a705-445c-a0da-f3b43dba918d",
          "length": 282,
          "cycles": 1,
          "position": 142,
          "iteration": 0,
          "httpRequestId": "5d665609-85e4-4ee7-99f4-5e4371bf7b9b"
        },
        "item": {
          "id": "fd10a828-5b3f-41c7-9d15-c725b666c2aa",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "30b8612a-fa8e-4331-bdf5-a7c983bec45f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3409811e-093c-47d7-86f7-974d98fe5e42",
        "cursor": {
          "ref": "180d9f21-ba66-4aee-bd67-b3055bae21df",
          "length": 282,
          "cycles": 1,
          "position": 143,
          "iteration": 0,
          "httpRequestId": "9674bb5f-d124-4bd8-accd-6b009b772b40"
        },
        "item": {
          "id": "3409811e-093c-47d7-86f7-974d98fe5e42",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "33bb53b7-a2a7-44b6-8c88-552f3dbe8a71",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b00697e1-737d-4d22-8672-04e3912641d4",
        "cursor": {
          "ref": "81a65395-920c-4681-b68d-8dc2d7cb7d17",
          "length": 282,
          "cycles": 1,
          "position": 144,
          "iteration": 0,
          "httpRequestId": "d21e21cb-d9ba-4fc0-a76f-003ef8d93a58"
        },
        "item": {
          "id": "b00697e1-737d-4d22-8672-04e3912641d4",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "4ee879b2-69d4-47aa-853f-cd0558114b43",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3c8dce17-6591-43fd-a101-da0314eb422b",
        "cursor": {
          "ref": "7f27c647-251e-40d7-9c7e-20d46addb256",
          "length": 282,
          "cycles": 1,
          "position": 145,
          "iteration": 0,
          "httpRequestId": "8ebaeee1-6ea9-4fb1-b412-5117df359d35"
        },
        "item": {
          "id": "3c8dce17-6591-43fd-a101-da0314eb422b",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "534e660e-c725-4399-89a5-eb62ccadd872",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e31a1f63-5b62-4a24-b2bb-2310189db974",
        "cursor": {
          "ref": "c0bcb2be-2d7c-41b1-b72f-03ff51f31d8a",
          "length": 282,
          "cycles": 1,
          "position": 146,
          "iteration": 0,
          "httpRequestId": "f011b4b8-5b91-43de-a9ae-1e7f2892f123"
        },
        "item": {
          "id": "e31a1f63-5b62-4a24-b2bb-2310189db974",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "9bf18512-5f10-4455-a5f8-05e1f8d7624e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 146
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c49c75db-df58-4c90-bf3f-8b4f2ffb8e8a",
        "cursor": {
          "ref": "dce87690-2cec-4fbb-b969-b9e7eca00e6c",
          "length": 282,
          "cycles": 1,
          "position": 147,
          "iteration": 0,
          "httpRequestId": "95b82367-1418-49fa-958f-1d0fd65a5a45"
        },
        "item": {
          "id": "c49c75db-df58-4c90-bf3f-8b4f2ffb8e8a",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "be1ea4e0-9dbd-45ae-9a32-b550b7a2a1d7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "07194fda-4b67-4e26-9c43-daf44b8b3857",
        "cursor": {
          "ref": "ed2e896d-d28f-459c-864d-7555983aaf03",
          "length": 282,
          "cycles": 1,
          "position": 148,
          "iteration": 0,
          "httpRequestId": "f2d50841-a9e3-4a1e-abd2-e3e95b7dbb4a"
        },
        "item": {
          "id": "07194fda-4b67-4e26-9c43-daf44b8b3857",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "1e5b9f0f-8e8c-4ad0-bda8-61be845140bb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b9c33480-d6fc-4911-b870-072bf00d746c",
        "cursor": {
          "ref": "fbd392c2-bff7-4172-b91c-75938d55c81f",
          "length": 282,
          "cycles": 1,
          "position": 149,
          "iteration": 0,
          "httpRequestId": "14ae8d70-a0a9-46fb-b894-ca0849a2bbba"
        },
        "item": {
          "id": "b9c33480-d6fc-4911-b870-072bf00d746c",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "94afcca1-7bb1-4c22-9135-f0aa23a742e1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 103,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e530ef07-98e3-4c21-81a1-14adaf220c58",
        "cursor": {
          "ref": "5aa46e36-e172-49ab-b47f-dff675687b05",
          "length": 282,
          "cycles": 1,
          "position": 150,
          "iteration": 0,
          "httpRequestId": "75157172-c153-41f5-b312-1f566565fd39"
        },
        "item": {
          "id": "e530ef07-98e3-4c21-81a1-14adaf220c58",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "c630700c-fa42-46c8-b34a-502649ee91af",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 104,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "32fc9360-bd51-41c5-a520-11e16bc47ff9",
        "cursor": {
          "ref": "9b8e4278-cb5b-41ad-9d0a-e2d69e61001b",
          "length": 282,
          "cycles": 1,
          "position": 151,
          "iteration": 0,
          "httpRequestId": "aaf9a261-0a8a-4f29-bfa3-fa01de76a029"
        },
        "item": {
          "id": "32fc9360-bd51-41c5-a520-11e16bc47ff9",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "ad43176a-73d7-485f-acd7-46e326c8fe8f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c4a49519-6e01-4338-96e5-44a12c7e6921",
        "cursor": {
          "ref": "4aff5693-57ed-4a77-a1a5-2afb873457a7",
          "length": 282,
          "cycles": 1,
          "position": 152,
          "iteration": 0,
          "httpRequestId": "91c59a4f-cb22-46db-a770-9743f71f6ecd"
        },
        "item": {
          "id": "c4a49519-6e01-4338-96e5-44a12c7e6921",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "4dbe7b7f-4a31-43c6-9341-01a48671bf60",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 95,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "41cb06a7-acdb-4f2f-b3cf-a464584a3006",
        "cursor": {
          "ref": "e46d7ece-ea42-4b6e-afe6-697c2825c59d",
          "length": 282,
          "cycles": 1,
          "position": 153,
          "iteration": 0,
          "httpRequestId": "1626d99c-c68d-4fbc-9671-406b06208227"
        },
        "item": {
          "id": "41cb06a7-acdb-4f2f-b3cf-a464584a3006",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "483a4fcc-6e2d-4857-aef4-c8d50923b03b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "016f678f-9bda-443f-b288-8b0f68a79b7e",
        "cursor": {
          "ref": "3f43d40f-d4aa-429b-a390-0405a84ce6cf",
          "length": 282,
          "cycles": 1,
          "position": 154,
          "iteration": 0,
          "httpRequestId": "f47ce2fa-8f3e-4e13-85ba-462b53fecc3c"
        },
        "item": {
          "id": "016f678f-9bda-443f-b288-8b0f68a79b7e",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "c58aef35-bb6a-4de8-ae69-7e0ff0e62915",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b0a0590c-091c-4de8-a135-3b4393340013",
        "cursor": {
          "ref": "e85f16f1-9232-4757-b5f9-b3a98b2dbf8e",
          "length": 282,
          "cycles": 1,
          "position": 155,
          "iteration": 0,
          "httpRequestId": "2a290262-7783-4ff9-820f-4cfcfdd26f33"
        },
        "item": {
          "id": "b0a0590c-091c-4de8-a135-3b4393340013",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "5c174580-e97d-48dd-b7f9-851d602629bb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "05bd594f-a179-4188-9062-38efdfc7b727",
        "cursor": {
          "ref": "98d43378-2722-47d5-ba47-65ad00467dbc",
          "length": 282,
          "cycles": 1,
          "position": 156,
          "iteration": 0,
          "httpRequestId": "983f97ce-d676-46d2-a5f0-ff24595dcf5b"
        },
        "item": {
          "id": "05bd594f-a179-4188-9062-38efdfc7b727",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "194c444b-3e6f-486f-856d-7362859fe9ee",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "509248dd-469e-4a11-bbc1-2908005232cf",
        "cursor": {
          "ref": "8ea069e5-a6b6-4926-b01a-ad3ebbed12c1",
          "length": 282,
          "cycles": 1,
          "position": 157,
          "iteration": 0,
          "httpRequestId": "af3c38b9-e0fe-4a2e-a653-d1885034284d"
        },
        "item": {
          "id": "509248dd-469e-4a11-bbc1-2908005232cf",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "c74230d9-632c-4173-a07f-01da21a660f2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "76ccaefe-60c7-456a-b01d-0fcd16265b75",
        "cursor": {
          "ref": "40357b0d-6657-4899-aef7-a102411c7bc5",
          "length": 282,
          "cycles": 1,
          "position": 158,
          "iteration": 0,
          "httpRequestId": "65a171b6-1b9f-437d-8505-7afb6cb600f5"
        },
        "item": {
          "id": "76ccaefe-60c7-456a-b01d-0fcd16265b75",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "d6ebbcb2-5b48-4a07-b395-f70ef36b5c1f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 96,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1f38a524-a3f6-42d3-88d0-e94e967650de",
        "cursor": {
          "ref": "95547892-93b5-463a-a2c7-fab35805b0c2",
          "length": 282,
          "cycles": 1,
          "position": 159,
          "iteration": 0,
          "httpRequestId": "f32f5521-e452-4997-9afc-8bc4532d7d54"
        },
        "item": {
          "id": "1f38a524-a3f6-42d3-88d0-e94e967650de",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "813425fa-4933-462b-aefd-b4e7db7ebb9e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2f887fe4-5c2a-44dc-8cba-869d08d8f585",
        "cursor": {
          "ref": "02e5efa7-0f88-424f-9ec6-e4de8ec2566f",
          "length": 282,
          "cycles": 1,
          "position": 160,
          "iteration": 0,
          "httpRequestId": "8cdb1c81-3498-469c-b28f-60a85e12fa4c"
        },
        "item": {
          "id": "2f887fe4-5c2a-44dc-8cba-869d08d8f585",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "56a133e4-c63f-45fe-bf47-2c7b13690fa9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "db9507fc-a0db-4780-bcc9-6d038f864174",
        "cursor": {
          "ref": "19543eb5-2a8c-4688-8b35-3fa54b9b24fd",
          "length": 282,
          "cycles": 1,
          "position": 161,
          "iteration": 0,
          "httpRequestId": "885ae6e7-64ab-4879-a26a-028b352f2eac"
        },
        "item": {
          "id": "db9507fc-a0db-4780-bcc9-6d038f864174",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "f320dbbe-c2d0-4cad-b277-739ce164b6f3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c6cc5533-112b-4ed9-b3bb-e80d94968991",
        "cursor": {
          "ref": "e5b7f86f-f890-42fc-b05f-3c57145c5338",
          "length": 282,
          "cycles": 1,
          "position": 162,
          "iteration": 0,
          "httpRequestId": "687e7236-a031-4fae-b61c-8b58a6e8f037"
        },
        "item": {
          "id": "c6cc5533-112b-4ed9-b3bb-e80d94968991",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "aa7f6f2f-6275-4dcb-940e-ae2c2a416af3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e4854974-60cf-4b54-a05c-c28d33b7afe7",
        "cursor": {
          "ref": "e5530401-595f-4125-8e29-3fe983e611e1",
          "length": 282,
          "cycles": 1,
          "position": 163,
          "iteration": 0,
          "httpRequestId": "ee8489a0-2496-4afb-8d5a-f8954f50ce8e"
        },
        "item": {
          "id": "e4854974-60cf-4b54-a05c-c28d33b7afe7",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "f19070ca-5cbb-4e70-968c-2aba6dcf5c7c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "befaddc1-4b9b-4caa-8b08-49d2ddf9a853",
        "cursor": {
          "ref": "04886ed4-5882-4b6c-ba08-1908e92cefda",
          "length": 282,
          "cycles": 1,
          "position": 164,
          "iteration": 0,
          "httpRequestId": "3e43a74b-8093-4b60-b548-5f8d9a29f726"
        },
        "item": {
          "id": "befaddc1-4b9b-4caa-8b08-49d2ddf9a853",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "0dde6720-1950-411f-8b46-2d7fe8b0dc27",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 97,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2ebf99e7-0fb0-4bd7-b794-60e0e5292238",
        "cursor": {
          "ref": "1eaa32b5-aa4f-4b34-8ec6-2ce180cdc1dc",
          "length": 282,
          "cycles": 1,
          "position": 165,
          "iteration": 0,
          "httpRequestId": "35cc8876-3214-4aa8-8fd5-b0d2725311a2"
        },
        "item": {
          "id": "2ebf99e7-0fb0-4bd7-b794-60e0e5292238",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "d6b14c48-102a-4141-89b6-c2ad63270075",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f57500c3-b910-4fbe-8edc-54751908b470",
        "cursor": {
          "ref": "e1771af8-54a7-4da5-be2b-1037801e83cc",
          "length": 282,
          "cycles": 1,
          "position": 166,
          "iteration": 0,
          "httpRequestId": "eabf08ef-2bae-4c11-9f62-a2bfb4296b5e"
        },
        "item": {
          "id": "f57500c3-b910-4fbe-8edc-54751908b470",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "fdac98f9-b44a-42e6-8dae-d2112055b0fc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c9eecb1f-0913-4c71-97e7-3a5c55ab019d",
        "cursor": {
          "ref": "81414b06-67b5-4091-944e-aa0c9a50d5cf",
          "length": 282,
          "cycles": 1,
          "position": 167,
          "iteration": 0,
          "httpRequestId": "73caa047-7796-483f-b644-76ffad582948"
        },
        "item": {
          "id": "c9eecb1f-0913-4c71-97e7-3a5c55ab019d",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "7b10c48c-b77d-4f9f-a2c9-8be9da0b1f11",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 95,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "daf4ed87-f253-4f38-a734-a27d8c14e1d1",
        "cursor": {
          "ref": "82db63f6-f995-469a-b9fe-fdc70fb346cd",
          "length": 282,
          "cycles": 1,
          "position": 168,
          "iteration": 0,
          "httpRequestId": "7ae0af90-29d3-4702-a04a-88d7f08fc6a8"
        },
        "item": {
          "id": "daf4ed87-f253-4f38-a734-a27d8c14e1d1",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "d7feb90b-e19e-45d9-b044-0f444bf3a40f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "df77be10-69ca-4598-86b4-09e5f43ea5d9",
        "cursor": {
          "ref": "eca45945-8e97-4283-b624-eb3170604577",
          "length": 282,
          "cycles": 1,
          "position": 169,
          "iteration": 0,
          "httpRequestId": "30abe3f5-371c-4335-86d4-b34513d10e2c"
        },
        "item": {
          "id": "df77be10-69ca-4598-86b4-09e5f43ea5d9",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "8fe7c3d0-4a06-4e56-a6d8-a8bb7139428a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9b762632-9dcf-458b-a24e-bdcc0c8d8938",
        "cursor": {
          "ref": "048183ed-d08f-4be4-808b-e1ba9e24caff",
          "length": 282,
          "cycles": 1,
          "position": 170,
          "iteration": 0,
          "httpRequestId": "0a51a13c-6a05-41ff-84ba-f8978318f716"
        },
        "item": {
          "id": "9b762632-9dcf-458b-a24e-bdcc0c8d8938",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "beaa1639-11ce-4f44-b2f2-e83026880147",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1f74af59-add0-4982-86fd-b91df7d105e1",
        "cursor": {
          "ref": "a7670aa2-2aac-4a67-b6dd-0c99f4802bac",
          "length": 282,
          "cycles": 1,
          "position": 171,
          "iteration": 0,
          "httpRequestId": "426c2f37-99a1-4605-bbaa-6a2e8f06831f"
        },
        "item": {
          "id": "1f74af59-add0-4982-86fd-b91df7d105e1",
          "name": "credentials_status:credentialStatus:item:purpose:missing"
        },
        "response": {
          "id": "28dc373f-4762-4730-be42-6da6d4a3bf75",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 100,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "852e45f6-dd3f-4155-b8b0-da6e7599b869",
        "cursor": {
          "ref": "936b5f94-97df-4e18-8664-f354147aa528",
          "length": 282,
          "cycles": 1,
          "position": 172,
          "iteration": 0,
          "httpRequestId": "272fc4d7-f13d-4954-a08f-fe8c805f49e7"
        },
        "item": {
          "id": "852e45f6-dd3f-4155-b8b0-da6e7599b869",
          "name": "credentials_status:credentialStatus:item:purpose:array"
        },
        "response": {
          "id": "b7730005-c2ba-451d-b209-47febe4dd360",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "180c3b06-665b-419a-a884-d6f4c07770d9",
        "cursor": {
          "ref": "67411437-1966-49b9-9ea0-63a53e719486",
          "length": 282,
          "cycles": 1,
          "position": 173,
          "iteration": 0,
          "httpRequestId": "3746df70-2bf6-4f39-87a0-b1369273f73b"
        },
        "item": {
          "id": "180c3b06-665b-419a-a884-d6f4c07770d9",
          "name": "credentials_status:credentialStatus:item:purpose:boolean"
        },
        "response": {
          "id": "f927b333-d74e-43e2-b029-841a7c2f7bf9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 101,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ef5bb0d7-710d-4328-b61f-0fbb47bdfb5a",
        "cursor": {
          "ref": "b7ac0a65-bf49-42c9-831a-f94a5ffcd148",
          "length": 282,
          "cycles": 1,
          "position": 174,
          "iteration": 0,
          "httpRequestId": "1e21011a-f29c-4cbd-bff1-4968b88f0f1d"
        },
        "item": {
          "id": "ef5bb0d7-710d-4328-b61f-0fbb47bdfb5a",
          "name": "credentials_status:credentialStatus:item:purpose:integer"
        },
        "response": {
          "id": "57917ac3-6b33-42b5-baab-72e35f554b24",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "55ec9592-b3cb-40cd-af89-59ad6a2809f3",
        "cursor": {
          "ref": "00080671-ae06-494e-9b4b-173a9e39272c",
          "length": 282,
          "cycles": 1,
          "position": 175,
          "iteration": 0,
          "httpRequestId": "4ff8ce2f-7f1d-440e-89a9-d0b9f7dd324d"
        },
        "item": {
          "id": "55ec9592-b3cb-40cd-af89-59ad6a2809f3",
          "name": "credentials_status:credentialStatus:item:purpose:null"
        },
        "response": {
          "id": "573708d9-6c2d-4244-a6ff-a4bbf177ba49",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e1b62dd5-cf77-48b3-bf4c-30114070b3ea",
        "cursor": {
          "ref": "a14f8809-fb3e-4883-ace2-c79a09b950dd",
          "length": 282,
          "cycles": 1,
          "position": 176,
          "iteration": 0,
          "httpRequestId": "4d15fc32-c3dd-47cb-bd16-e94e4832ba32"
        },
        "item": {
          "id": "e1b62dd5-cf77-48b3-bf4c-30114070b3ea",
          "name": "credentials_status:credentialStatus:item:purpose:object"
        },
        "response": {
          "id": "f82a3aa4-a490-444e-a166-2d833cece954",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 103,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9e875d63-062a-4908-a2d9-29aa45e0250a",
        "cursor": {
          "ref": "5da38b9f-e08c-47c2-ae0e-bb0ece5f1099",
          "length": 282,
          "cycles": 1,
          "position": 177,
          "iteration": 0,
          "httpRequestId": "0f20aefe-5c4e-416d-9dd3-4e729dd3612c"
        },
        "item": {
          "id": "9e875d63-062a-4908-a2d9-29aa45e0250a",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "04a91a9d-c49b-424f-8595-2f02ab38c222",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 87,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dd6dc344-d0e4-46fd-b123-3a5132b9d61e",
        "cursor": {
          "ref": "9da4cb27-600b-453d-a513-726551e0ea9a",
          "length": 282,
          "cycles": 1,
          "position": 178,
          "iteration": 0,
          "httpRequestId": "236e7ede-fdd0-4eef-95c7-a8ae330b0dc1"
        },
        "item": {
          "id": "dd6dc344-d0e4-46fd-b123-3a5132b9d61e",
          "name": "credentials_verify:vc:missing"
        },
        "response": {
          "id": "29d7e4bc-03f2-44b6-8c8e-19ba437e9df1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d553d83d-2f7c-4cd3-b7d0-415b107afae9",
        "cursor": {
          "ref": "94da9c50-beaf-4a4e-b034-a64653621c3e",
          "length": 282,
          "cycles": 1,
          "position": 179,
          "iteration": 0,
          "httpRequestId": "50e4178b-fa85-49f0-81f4-29547e0f2ecb"
        },
        "item": {
          "id": "d553d83d-2f7c-4cd3-b7d0-415b107afae9",
          "name": "credentials_verify:vc:string"
        },
        "response": {
          "id": "1a1acb53-129e-43f9-9deb-2c974d6f19fc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3f62018b-b5f5-4ec4-badb-b44ff6519687",
        "cursor": {
          "ref": "5d9cccf1-5584-461e-94f0-251809469bbc",
          "length": 282,
          "cycles": 1,
          "position": 180,
          "iteration": 0,
          "httpRequestId": "8bd71d91-6376-447e-9301-9670b9a3a675"
        },
        "item": {
          "id": "3f62018b-b5f5-4ec4-badb-b44ff6519687",
          "name": "credentials_verify:vc:null"
        },
        "response": {
          "id": "1c82a85a-cc3c-4f27-848d-cb11596dc3ae",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 171
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "217b3095-4312-45a9-ae51-dc22c968b6d2",
        "cursor": {
          "ref": "933bcb6a-42be-4c3a-a53f-bfa84c663cd5",
          "length": 282,
          "cycles": 1,
          "position": 181,
          "iteration": 0,
          "httpRequestId": "14c4997c-87bd-4193-9aa4-e17ba2579bdb"
        },
        "item": {
          "id": "217b3095-4312-45a9-ae51-dc22c968b6d2",
          "name": "credentials_verify:vc:integer"
        },
        "response": {
          "id": "7f9244de-d422-4685-a5c7-91b7ea9ecb26",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0db598bb-a266-4f4c-95f8-cb90a7ecfbb0",
        "cursor": {
          "ref": "aa2d0219-16bf-4ffc-bc96-5dba172adc2c",
          "length": 282,
          "cycles": 1,
          "position": 182,
          "iteration": 0,
          "httpRequestId": "f9317c0c-7856-4697-8828-473a1383ab3d"
        },
        "item": {
          "id": "0db598bb-a266-4f4c-95f8-cb90a7ecfbb0",
          "name": "credentials_verify:vc:boolean"
        },
        "response": {
          "id": "e76037eb-d6ae-4a85-a04c-bca5b8e7b5cb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 98,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e29cd66a-7bd4-4d51-b944-f6d5ac92d820",
        "cursor": {
          "ref": "1aae4dbe-c3d4-4caf-b540-6af71feeaed8",
          "length": 282,
          "cycles": 1,
          "position": 183,
          "iteration": 0,
          "httpRequestId": "53f5c4c1-4499-4b70-973a-d819ffd27932"
        },
        "item": {
          "id": "e29cd66a-7bd4-4d51-b944-f6d5ac92d820",
          "name": "credentials_verify:vc:array"
        },
        "response": {
          "id": "42b2c062-98e2-4e06-be7a-03157b98b387",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 95,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:184)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:184)"
            }
          }
        ]
      },
      {
        "id": "597eca97-61fb-4abb-8f0f-7e0246967471",
        "cursor": {
          "ref": "da2f3157-b256-4e58-81cc-3b858bdd0601",
          "length": 282,
          "cycles": 1,
          "position": 184,
          "iteration": 0,
          "httpRequestId": "14307d8f-8e03-4d7a-bf31-e16a6013d941"
        },
        "item": {
          "id": "597eca97-61fb-4abb-8f0f-7e0246967471",
          "name": "credentials_verify:vc:@context:missing"
        },
        "response": {
          "id": "fb865807-9ddc-497d-ba95-5d436b61b40d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 98,
          "responseSize": 242
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "05d79e48-ba82-4d6b-82f5-468a1c33d61c",
        "cursor": {
          "ref": "cf2dfc03-d268-4d5f-b3de-c8b00c0f4b71",
          "length": 282,
          "cycles": 1,
          "position": 185,
          "iteration": 0,
          "httpRequestId": "e8f82813-de5b-4b11-b1b4-9ce59a68ee56"
        },
        "item": {
          "id": "05d79e48-ba82-4d6b-82f5-468a1c33d61c",
          "name": "credentials_verify:vc:@context:boolean"
        },
        "response": {
          "id": "e1a28477-876d-4359-add3-a3662191697f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 305
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bba65bfb-08d1-4bdc-8a06-18b0d1b2036e",
        "cursor": {
          "ref": "edb3893f-bf12-40c0-8197-33d12dcb8877",
          "length": 282,
          "cycles": 1,
          "position": 186,
          "iteration": 0,
          "httpRequestId": "a13a8b95-8c33-4285-bb60-737d55221e0e"
        },
        "item": {
          "id": "bba65bfb-08d1-4bdc-8a06-18b0d1b2036e",
          "name": "credentials_verify:vc:@context:integer"
        },
        "response": {
          "id": "d1b1f34d-9f09-485b-bc11-2a57d05ce78b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 95,
          "responseSize": 305
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "be4da16f-2a9a-4abd-9ee2-d70183eb8fd6",
        "cursor": {
          "ref": "57af170c-8769-46ad-b1a2-7989c41176f1",
          "length": 282,
          "cycles": 1,
          "position": 187,
          "iteration": 0,
          "httpRequestId": "0992770a-7bf6-49b6-b086-30565a7530ea"
        },
        "item": {
          "id": "be4da16f-2a9a-4abd-9ee2-d70183eb8fd6",
          "name": "credentials_verify:vc:@context:null"
        },
        "response": {
          "id": "5cead5fb-57af-43d2-ad4d-95c2db13817a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 101,
          "responseSize": 305
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5c8608b4-e4b8-4249-8206-c348e37d803d",
        "cursor": {
          "ref": "45e0eec4-92d5-4a70-99f5-5b372eae82ce",
          "length": 282,
          "cycles": 1,
          "position": 188,
          "iteration": 0,
          "httpRequestId": "b4dd3c26-9476-4013-8304-38b8476ed702"
        },
        "item": {
          "id": "5c8608b4-e4b8-4249-8206-c348e37d803d",
          "name": "credentials_verify:vc:@context:object"
        },
        "response": {
          "id": "5b22369a-e656-4bd1-a62e-5d9b952517f5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 242
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8d93769f-b85a-4d23-be61-0cb844caef6a",
        "cursor": {
          "ref": "dfa228eb-2db7-47e9-9011-f0b146df6eeb",
          "length": 282,
          "cycles": 1,
          "position": 189,
          "iteration": 0,
          "httpRequestId": "cf44356e-1fcb-4567-81fb-829817c458fe"
        },
        "item": {
          "id": "8d93769f-b85a-4d23-be61-0cb844caef6a",
          "name": "credentials_verify:vc:@context:string"
        },
        "response": {
          "id": "34df52fc-0c86-4ee5-8ab8-7976d0a9e5c1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 97,
          "responseSize": 172
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bb23be15-355a-4265-a885-833d3bc99642",
        "cursor": {
          "ref": "da6ee8b7-a310-4c61-8efd-c6d63d11c3ec",
          "length": 282,
          "cycles": 1,
          "position": 190,
          "iteration": 0,
          "httpRequestId": "16ca6ddb-2336-4ffd-8522-78c97d369c5a"
        },
        "item": {
          "id": "bb23be15-355a-4265-a885-833d3bc99642",
          "name": "credentials_verify:vc:@context:item:array"
        },
        "response": {
          "id": "0200b63b-b1ac-47cb-ac7d-a4adc5c0644a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c95cf602-6830-4cc9-9137-e697afa613bf",
        "cursor": {
          "ref": "dbe255c5-ea39-4f1a-82ef-f73c3c7046f0",
          "length": 282,
          "cycles": 1,
          "position": 191,
          "iteration": 0,
          "httpRequestId": "31ea1544-9844-459e-8b21-dbd03b978153"
        },
        "item": {
          "id": "c95cf602-6830-4cc9-9137-e697afa613bf",
          "name": "credentials_verify:vc:@context:item:boolean"
        },
        "response": {
          "id": "ef8cc4b7-547f-4427-baab-32cbd11e8957",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "03da3957-ad1d-4bf4-b885-3426e65a9bce",
        "cursor": {
          "ref": "d3e78883-a1a8-44f4-9ad7-b22f8e3cb744",
          "length": 282,
          "cycles": 1,
          "position": 192,
          "iteration": 0,
          "httpRequestId": "9b25385a-4991-4931-b581-fd854b2c2739"
        },
        "item": {
          "id": "03da3957-ad1d-4bf4-b885-3426e65a9bce",
          "name": "credentials_verify:vc:@context:item:integer"
        },
        "response": {
          "id": "0797a4a9-4ed2-4c84-b26d-f806c6c1b70c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 112,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "834d98a4-7318-42cc-bb95-50ec504f3421",
        "cursor": {
          "ref": "f9cb53f9-368d-418a-a064-effb7f299fd6",
          "length": 282,
          "cycles": 1,
          "position": 193,
          "iteration": 0,
          "httpRequestId": "3358513c-5db6-4512-961a-13188dd44eb5"
        },
        "item": {
          "id": "834d98a4-7318-42cc-bb95-50ec504f3421",
          "name": "credentials_verify:vc:@context:item:null"
        },
        "response": {
          "id": "f48d330d-af8d-4332-afab-5ec768fca182",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e8bce4f1-7ef1-42f0-acbc-b372fa04434a",
        "cursor": {
          "ref": "6d5802a7-5b83-4af8-8e87-ec4c5a15c9b7",
          "length": 282,
          "cycles": 1,
          "position": 194,
          "iteration": 0,
          "httpRequestId": "5f55c7a2-30bf-46c4-8456-fc52932d9a60"
        },
        "item": {
          "id": "e8bce4f1-7ef1-42f0-acbc-b372fa04434a",
          "name": "credentials_verify:vc:@context:item:object"
        },
        "response": {
          "id": "f4e0b172-7a18-49b1-8df3-2c2885976cec",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8e5a873b-5ce9-4ac5-bb31-99589f9789ab",
        "cursor": {
          "ref": "9da062db-3973-46be-97bc-39ec349dbb94",
          "length": 282,
          "cycles": 1,
          "position": 195,
          "iteration": 0,
          "httpRequestId": "9e779d65-cc47-40bf-a798-6981ca81d644"
        },
        "item": {
          "id": "8e5a873b-5ce9-4ac5-bb31-99589f9789ab",
          "name": "credentials_verify:vc:id:array"
        },
        "response": {
          "id": "1d7054b4-4f1a-4b6a-8369-164347ec3711",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 101,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c02fdd5e-5b1e-4a7b-8b6f-1070bd976b51",
        "cursor": {
          "ref": "2cd64efb-f86d-4c5a-9f3c-d2a2875fd9cb",
          "length": 282,
          "cycles": 1,
          "position": 196,
          "iteration": 0,
          "httpRequestId": "21c1822c-c75c-46c2-860e-f03c93c1311d"
        },
        "item": {
          "id": "c02fdd5e-5b1e-4a7b-8b6f-1070bd976b51",
          "name": "credentials_verify:vc:id:boolean"
        },
        "response": {
          "id": "b71432b9-6f7f-4f32-8c38-b0b0ee819b06",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6bc0b0d0-065f-429e-aaae-67f9f16e37ff",
        "cursor": {
          "ref": "5a0897da-b345-4f52-9654-7554e158b82f",
          "length": 282,
          "cycles": 1,
          "position": 197,
          "iteration": 0,
          "httpRequestId": "adb0fad7-0730-4b5b-b003-9e8db4eb3bff"
        },
        "item": {
          "id": "6bc0b0d0-065f-429e-aaae-67f9f16e37ff",
          "name": "credentials_verify:vc:id:integer"
        },
        "response": {
          "id": "80526978-5cd3-44f6-a988-6ecffb5e679c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e6617364-1ec3-415b-8d07-11e3e0c96c59",
        "cursor": {
          "ref": "0abdce3c-5b51-420d-a4aa-805bd241c665",
          "length": 282,
          "cycles": 1,
          "position": 198,
          "iteration": 0,
          "httpRequestId": "63a49a82-6119-4cf9-965d-6a0dc5da782f"
        },
        "item": {
          "id": "e6617364-1ec3-415b-8d07-11e3e0c96c59",
          "name": "credentials_verify:vc:id:null"
        },
        "response": {
          "id": "fb503cc7-1d87-490d-97b8-02bafdaa577d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f09981cc-15a6-49b1-a7b6-933e55d433d6",
        "cursor": {
          "ref": "c423cb2d-ef34-42e0-b0e6-6c7bb2f050eb",
          "length": 282,
          "cycles": 1,
          "position": 199,
          "iteration": 0,
          "httpRequestId": "e89a493d-5767-43db-87e8-8064522e0c1e"
        },
        "item": {
          "id": "f09981cc-15a6-49b1-a7b6-933e55d433d6",
          "name": "credentials_verify:vc:id:object"
        },
        "response": {
          "id": "d095e557-29fc-47c6-91b7-79f728217bc4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c2bc9b47-0ff1-4741-a24c-6e54e3bee05e",
        "cursor": {
          "ref": "8863e473-b0bb-4062-a576-98687c356dc0",
          "length": 282,
          "cycles": 1,
          "position": 200,
          "iteration": 0,
          "httpRequestId": "922f1a22-0240-4996-a631-58c0b47c77b3"
        },
        "item": {
          "id": "c2bc9b47-0ff1-4741-a24c-6e54e3bee05e",
          "name": "credentials_verify:vc:type:missing"
        },
        "response": {
          "id": "3f70382b-fb58-43ef-9301-5b05d70556c6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f21f10cb-2563-40f8-8553-92673e8aff1c",
        "cursor": {
          "ref": "834339c6-f28d-4937-96b1-e40f63ebafef",
          "length": 282,
          "cycles": 1,
          "position": 201,
          "iteration": 0,
          "httpRequestId": "3f763c12-65c1-4303-9543-854d27f00b9a"
        },
        "item": {
          "id": "f21f10cb-2563-40f8-8553-92673e8aff1c",
          "name": "credentials_verify:vc:type:boolean"
        },
        "response": {
          "id": "ad248bf6-33ab-413f-9716-9f37c314a809",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 95,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5838a888-4186-4ee0-93a4-7253e80f288e",
        "cursor": {
          "ref": "ed412450-062e-4a5e-9955-dd3b1585b8f2",
          "length": 282,
          "cycles": 1,
          "position": 202,
          "iteration": 0,
          "httpRequestId": "100b8fe2-68ef-4087-a366-9044c4cf3bfc"
        },
        "item": {
          "id": "5838a888-4186-4ee0-93a4-7253e80f288e",
          "name": "credentials_verify:vc:type:integer"
        },
        "response": {
          "id": "d5733816-73fa-46f8-940a-4f62f1e4b16a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3bde587e-96e5-40f6-bcce-e338b396197a",
        "cursor": {
          "ref": "2f8d87b3-37a0-4d56-b700-b5332227e994",
          "length": 282,
          "cycles": 1,
          "position": 203,
          "iteration": 0,
          "httpRequestId": "227b5468-adea-4461-8c9d-2834d5f3e466"
        },
        "item": {
          "id": "3bde587e-96e5-40f6-bcce-e338b396197a",
          "name": "credentials_verify:vc:type:null"
        },
        "response": {
          "id": "210b3dc1-06d4-4a65-bbc1-63c6d1af1d1f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cc6df882-cc9b-4047-8b8c-0068423c1f0a",
        "cursor": {
          "ref": "6f4f5e5e-8de9-4370-b566-ce3f521b9380",
          "length": 282,
          "cycles": 1,
          "position": 204,
          "iteration": 0,
          "httpRequestId": "6fde20ee-e4f6-4ef4-ad05-e3a09cf09446"
        },
        "item": {
          "id": "cc6df882-cc9b-4047-8b8c-0068423c1f0a",
          "name": "credentials_verify:vc:type:object"
        },
        "response": {
          "id": "d198397c-1cbf-4b4a-91ec-808aa7ca7b6c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 100,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bd32c64f-84ea-4abf-a1ec-4fd0a242250e",
        "cursor": {
          "ref": "a3743950-36d0-435c-9757-f23ae5d4dda5",
          "length": 282,
          "cycles": 1,
          "position": 205,
          "iteration": 0,
          "httpRequestId": "a47f9850-ae7d-400b-ab4f-76ab32ba66fb"
        },
        "item": {
          "id": "bd32c64f-84ea-4abf-a1ec-4fd0a242250e",
          "name": "credentials_verify:vc:type:string"
        },
        "response": {
          "id": "9473e4c9-090c-4aaf-a785-d5e85d56bc78",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 98,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "050ad71b-4119-4074-a896-b3676dd99e08",
        "cursor": {
          "ref": "9e7ca226-3887-4591-9f05-ec7ea2627715",
          "length": 282,
          "cycles": 1,
          "position": 206,
          "iteration": 0,
          "httpRequestId": "2402970b-bf3f-49f2-91ae-bd99b5d987a4"
        },
        "item": {
          "id": "050ad71b-4119-4074-a896-b3676dd99e08",
          "name": "credentials_verify:vc:type:item:missing"
        },
        "response": {
          "id": "ed7cf0d3-d141-428f-af4a-d247c97bec4b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 101,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "78cecce8-3bab-477d-8d6d-acfe13cbdf47",
        "cursor": {
          "ref": "f57b2a44-c723-4bf7-9fab-12f9c62a4894",
          "length": 282,
          "cycles": 1,
          "position": 207,
          "iteration": 0,
          "httpRequestId": "1817bf90-158e-4f4d-acfa-fea9cffdf5ad"
        },
        "item": {
          "id": "78cecce8-3bab-477d-8d6d-acfe13cbdf47",
          "name": "credentials_verify:vc:type:item:array"
        },
        "response": {
          "id": "39b257b5-8d5a-4cff-b3ab-61b6f21261ed",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 95,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b7c7a26c-03d3-48df-b277-7368462ce0f9",
        "cursor": {
          "ref": "9a664488-db4d-4f03-b1f6-456f5d7f5421",
          "length": 282,
          "cycles": 1,
          "position": 208,
          "iteration": 0,
          "httpRequestId": "b137f5b4-ac75-49ab-9894-383af3d568c0"
        },
        "item": {
          "id": "b7c7a26c-03d3-48df-b277-7368462ce0f9",
          "name": "credentials_verify:vc:type:item:boolean"
        },
        "response": {
          "id": "e8adb979-d58a-4276-aab6-957e484a41c1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "52407477-fe9a-4589-bb2c-960d6156886b",
        "cursor": {
          "ref": "0eac2159-13f7-4ff3-b437-3f6638a823da",
          "length": 282,
          "cycles": 1,
          "position": 209,
          "iteration": 0,
          "httpRequestId": "60c6db3f-6e51-429e-a61d-cec0cf6d3f05"
        },
        "item": {
          "id": "52407477-fe9a-4589-bb2c-960d6156886b",
          "name": "credentials_verify:vc:type:item:integer"
        },
        "response": {
          "id": "d39a4faa-61fe-41d8-b5a8-28b0691cef3e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "480da8ff-b72e-44ad-ba03-cb9715f433cd",
        "cursor": {
          "ref": "ad03c4a0-efe3-4537-b9b8-00c77e018816",
          "length": 282,
          "cycles": 1,
          "position": 210,
          "iteration": 0,
          "httpRequestId": "e1f1fd8d-b2ce-4892-85ed-4926ceb5238f"
        },
        "item": {
          "id": "480da8ff-b72e-44ad-ba03-cb9715f433cd",
          "name": "credentials_verify:vc:type:item:null"
        },
        "response": {
          "id": "4e143fd5-b1ca-4aad-8802-de6629e72069",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 101,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f8b16738-f2fb-4f0a-b28b-abb863f93d33",
        "cursor": {
          "ref": "67e7d22e-b3d7-43ca-847a-b9aa346bd599",
          "length": 282,
          "cycles": 1,
          "position": 211,
          "iteration": 0,
          "httpRequestId": "a5afd313-b461-493d-a8e4-a12c29f52ec3"
        },
        "item": {
          "id": "f8b16738-f2fb-4f0a-b28b-abb863f93d33",
          "name": "credentials_verify:vc:type:item:object"
        },
        "response": {
          "id": "0911ca41-04e3-48b2-a901-5d3a71635bad",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "93efcc50-9262-4692-9e46-4569d7a3c292",
        "cursor": {
          "ref": "211bef54-af06-47f0-88ae-1d19ad5e97e4",
          "length": 282,
          "cycles": 1,
          "position": 212,
          "iteration": 0,
          "httpRequestId": "6efa38ea-abcc-4979-a0c0-1fec85e15b39"
        },
        "item": {
          "id": "93efcc50-9262-4692-9e46-4569d7a3c292",
          "name": "credentials_verify:vc:issuer:missing"
        },
        "response": {
          "id": "f4013f9d-bda6-4ed2-bc2c-a0b64329d9a6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 106
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a6d48c1d-6b98-4f97-b989-49d691e27929",
        "cursor": {
          "ref": "780641e2-72b3-44da-a871-654631ec8bfa",
          "length": 282,
          "cycles": 1,
          "position": 213,
          "iteration": 0,
          "httpRequestId": "c4dc389d-c6de-4d99-a5bd-43ff4b5a8222"
        },
        "item": {
          "id": "a6d48c1d-6b98-4f97-b989-49d691e27929",
          "name": "credentials_verify:vc:issuer:array"
        },
        "response": {
          "id": "6d5a816e-aece-4e63-9c43-5908b32d9897",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 100,
          "responseSize": 53
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:214)"
            }
          }
        ]
      },
      {
        "id": "9ebe614d-87c2-477a-994d-1e0e0282f753",
        "cursor": {
          "ref": "5fc42b4c-11b9-43cf-a0ac-452376d11e70",
          "length": 282,
          "cycles": 1,
          "position": 214,
          "iteration": 0,
          "httpRequestId": "c54fb5f6-7c94-4343-b613-1472451f053f"
        },
        "item": {
          "id": "9ebe614d-87c2-477a-994d-1e0e0282f753",
          "name": "credentials_verify:vc:issuer:boolean"
        },
        "response": {
          "id": "7afffc02-1abc-4154-8a3f-58db1ca1a425",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 101,
          "responseSize": 53
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:215)"
            }
          }
        ]
      },
      {
        "id": "9a7621d0-140d-4108-8e29-1b8a676a552b",
        "cursor": {
          "ref": "45ca692a-a9b5-4c86-b8f8-d215ae26d607",
          "length": 282,
          "cycles": 1,
          "position": 215,
          "iteration": 0,
          "httpRequestId": "bd9770d7-da15-4b07-9b75-6468bc7fafc6"
        },
        "item": {
          "id": "9a7621d0-140d-4108-8e29-1b8a676a552b",
          "name": "credentials_verify:vc:issuer:integer"
        },
        "response": {
          "id": "92027d8b-fa6b-46cd-b0e5-d225c06c15e8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 102,
          "responseSize": 53
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:216)"
            }
          }
        ]
      },
      {
        "id": "9a157a3e-6349-429b-9adc-ba1a33cb9785",
        "cursor": {
          "ref": "9678bb18-7474-4414-8692-b5bac8eb9b45",
          "length": 282,
          "cycles": 1,
          "position": 216,
          "iteration": 0,
          "httpRequestId": "e5cf0ce4-4ad3-455b-8edf-7669816ce93f"
        },
        "item": {
          "id": "9a157a3e-6349-429b-9adc-ba1a33cb9785",
          "name": "credentials_verify:vc:issuer:null"
        },
        "response": {
          "id": "d46b4aa3-7d2a-4450-80f9-b5fa6ac0dcd0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 100,
          "responseSize": 106
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8dd40e0e-d011-44d7-8e33-df8e79a6caf3",
        "cursor": {
          "ref": "57976ecb-db4b-4c25-a509-be845e37356e",
          "length": 282,
          "cycles": 1,
          "position": 217,
          "iteration": 0,
          "httpRequestId": "cb1ad94a-688c-4ca8-8be8-772b19693d26"
        },
        "item": {
          "id": "8dd40e0e-d011-44d7-8e33-df8e79a6caf3",
          "name": "credentials_verify:vc:issuer:id:missing"
        },
        "response": {
          "id": "d081e571-d20f-4dce-bbac-59f6b8f7ea26",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 53
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:218)"
            }
          }
        ]
      },
      {
        "id": "429d96be-4eda-41fc-8ef3-e1700af3ae84",
        "cursor": {
          "ref": "0d37ce14-29b5-4feb-a6b1-b27590f9f6cf",
          "length": 282,
          "cycles": 1,
          "position": 218,
          "iteration": 0,
          "httpRequestId": "52391fe4-a997-4ea0-90fd-e8f2ef70f918"
        },
        "item": {
          "id": "429d96be-4eda-41fc-8ef3-e1700af3ae84",
          "name": "credentials_verify:vc:issuer:id:array"
        },
        "response": {
          "id": "be882db6-056b-4e28-a420-040955cf0d21",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 962,
          "responseSize": 1523
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:219)"
            }
          }
        ]
      },
      {
        "id": "e6f87565-8f20-4151-8ee7-3e012e0b409f",
        "cursor": {
          "ref": "8fc6c1c3-f308-48d1-9785-6e9f1ab89731",
          "length": 282,
          "cycles": 1,
          "position": 219,
          "iteration": 0,
          "httpRequestId": "c752c0b0-7960-40d6-b031-5cf961f81e2e"
        },
        "item": {
          "id": "e6f87565-8f20-4151-8ee7-3e012e0b409f",
          "name": "credentials_verify:vc:issuer:id:boolean"
        },
        "response": {
          "id": "107115dd-83ff-45f3-b837-d2411477c73c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 114,
          "responseSize": 53
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:220)"
            }
          }
        ]
      },
      {
        "id": "0030c889-6afd-4490-ac70-81263147bd4e",
        "cursor": {
          "ref": "68c20108-71c4-4bad-be84-c4632de4fca1",
          "length": 282,
          "cycles": 1,
          "position": 220,
          "iteration": 0,
          "httpRequestId": "7f1e820a-2a62-4ab7-8560-079ee3d07a15"
        },
        "item": {
          "id": "0030c889-6afd-4490-ac70-81263147bd4e",
          "name": "credentials_verify:vc:issuer:id:integer"
        },
        "response": {
          "id": "794a8250-0f84-4ae1-8015-84b301ced1d1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 53
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:221)"
            }
          }
        ]
      },
      {
        "id": "a308c775-f99c-437e-a84e-2c2f85fe7060",
        "cursor": {
          "ref": "39f6fa4d-a2dd-4304-8e6a-fd3a9ca29772",
          "length": 282,
          "cycles": 1,
          "position": 221,
          "iteration": 0,
          "httpRequestId": "529d52ae-f6da-4dfb-a8c4-d83cccac4899"
        },
        "item": {
          "id": "a308c775-f99c-437e-a84e-2c2f85fe7060",
          "name": "credentials_verify:vc:issuer:id:null"
        },
        "response": {
          "id": "c91f67ed-a743-410b-aa21-460ee18eb2d0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 102,
          "responseSize": 53
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:222)"
            }
          }
        ]
      },
      {
        "id": "d35162b8-1f0e-48e7-a43f-7f4ca4419e29",
        "cursor": {
          "ref": "27076593-d198-45f3-8dc6-e1683665dda0",
          "length": 282,
          "cycles": 1,
          "position": 222,
          "iteration": 0,
          "httpRequestId": "016201a1-498a-4258-97a8-fc2136ea962f"
        },
        "item": {
          "id": "d35162b8-1f0e-48e7-a43f-7f4ca4419e29",
          "name": "credentials_verify:vc:issuer:id:object"
        },
        "response": {
          "id": "30562922-3e1a-4831-a555-c00047acee96",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 97,
          "responseSize": 53
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:223)"
            }
          }
        ]
      },
      {
        "id": "75549e62-9bf2-4e63-9f49-cf948b8ce4de",
        "cursor": {
          "ref": "4f03d559-0125-4c25-bb79-56f13c83954d",
          "length": 282,
          "cycles": 1,
          "position": 223,
          "iteration": 0,
          "httpRequestId": "3ee98004-d42b-4d76-8ffd-9b6dffff3257"
        },
        "item": {
          "id": "75549e62-9bf2-4e63-9f49-cf948b8ce4de",
          "name": "credentials_verify:vc:issuanceDate:missing"
        },
        "response": {
          "id": "504012f5-76ae-482a-9e1e-6cd2a768e680",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 105,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2f6798e4-cb70-4028-a727-863ca0dcbe44",
        "cursor": {
          "ref": "38503c41-c55f-4a32-b5cf-a27fde8bf2e0",
          "length": 282,
          "cycles": 1,
          "position": 224,
          "iteration": 0,
          "httpRequestId": "7e046287-f5ef-4c7f-9b0d-5b77c214dd21"
        },
        "item": {
          "id": "2f6798e4-cb70-4028-a727-863ca0dcbe44",
          "name": "credentials_verify:vc:issuanceDate:array"
        },
        "response": {
          "id": "6ac129be-5602-438f-bbfc-764b8088e54c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 95,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6948b870-fa0b-4774-bbeb-e221fe1bba3d",
        "cursor": {
          "ref": "6f1d9cf9-671f-4ff7-b0f1-34f84b975b5f",
          "length": 282,
          "cycles": 1,
          "position": 225,
          "iteration": 0,
          "httpRequestId": "1ce6fed8-b819-42ef-815a-479fb0409c87"
        },
        "item": {
          "id": "6948b870-fa0b-4774-bbeb-e221fe1bba3d",
          "name": "credentials_verify:vc:issuanceDate:boolean"
        },
        "response": {
          "id": "731025b8-bda9-4f74-a16f-be1c28b4e25f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "65565b6e-1650-4e11-a4d7-2875aea6ca24",
        "cursor": {
          "ref": "153aea4a-6915-4228-b44c-9e62b73915e0",
          "length": 282,
          "cycles": 1,
          "position": 226,
          "iteration": 0,
          "httpRequestId": "2869118d-d064-4b19-9fda-a466dc9278a7"
        },
        "item": {
          "id": "65565b6e-1650-4e11-a4d7-2875aea6ca24",
          "name": "credentials_verify:vc:issuanceDate:integer"
        },
        "response": {
          "id": "84d125f0-49df-468f-b2a4-242df2552735",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "62f238af-2a42-4f4e-b920-13facb158656",
        "cursor": {
          "ref": "881753f5-139e-43af-b0f8-8a2a194036ea",
          "length": 282,
          "cycles": 1,
          "position": 227,
          "iteration": 0,
          "httpRequestId": "5011c0d6-3edf-4e7f-b0f5-d1380f2fd9dd"
        },
        "item": {
          "id": "62f238af-2a42-4f4e-b920-13facb158656",
          "name": "credentials_verify:vc:issuanceDate:null"
        },
        "response": {
          "id": "0edad5cc-3e61-4812-ad3b-34b130b5d4a9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e131eafa-34c0-4ba9-9332-fd624ef67370",
        "cursor": {
          "ref": "06a3e456-88a0-4b22-b0ea-870f02d39a04",
          "length": 282,
          "cycles": 1,
          "position": 228,
          "iteration": 0,
          "httpRequestId": "03c2fbec-08b5-413e-bacc-5b19cb545201"
        },
        "item": {
          "id": "e131eafa-34c0-4ba9-9332-fd624ef67370",
          "name": "credentials_verify:vc:issuanceDate:object"
        },
        "response": {
          "id": "e0411ff1-02a0-4484-9d12-d0dfb66e5b6b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6f644c31-88d9-4eb2-b521-6a47871efeb5",
        "cursor": {
          "ref": "bf1651bb-f93b-4fae-a8c1-799fdbd4f612",
          "length": 282,
          "cycles": 1,
          "position": 229,
          "iteration": 0,
          "httpRequestId": "33c5b468-562f-4576-88ea-bf7957ead51b"
        },
        "item": {
          "id": "6f644c31-88d9-4eb2-b521-6a47871efeb5",
          "name": "credentials_verify:vc:issuanceDate:string"
        },
        "response": {
          "id": "63aefac3-44db-43cb-8c2b-852f2c9ea9c7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0332f98a-3a11-4337-96cd-4c7eeae7b9f2",
        "cursor": {
          "ref": "9070814c-a4e9-4593-97a0-f47703e6e5b9",
          "length": 282,
          "cycles": 1,
          "position": 230,
          "iteration": 0,
          "httpRequestId": "c37191f1-3c11-478b-a5d5-f329d4e6bac9"
        },
        "item": {
          "id": "0332f98a-3a11-4337-96cd-4c7eeae7b9f2",
          "name": "credentials_verify:vc:credentialSubject:missing"
        },
        "response": {
          "id": "e61b1419-c01b-47b7-af48-4a7b7d2968ae",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "66dc27f4-fec2-4045-a874-0e8507e019ef",
        "cursor": {
          "ref": "dd4121cf-96b7-4892-8b8e-81289c3261e0",
          "length": 282,
          "cycles": 1,
          "position": 231,
          "iteration": 0,
          "httpRequestId": "94580e47-d2ec-4db4-9ad6-a5bea58b814f"
        },
        "item": {
          "id": "66dc27f4-fec2-4045-a874-0e8507e019ef",
          "name": "credentials_verify:vc:credentialSubject:array"
        },
        "response": {
          "id": "fba79694-d3cb-4edc-856d-5c361ad4a6b1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 223
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "eeb03956-8c4e-46ff-b977-9d4fcd272073",
        "cursor": {
          "ref": "db8102a4-27d5-4a10-86ed-de0c34299100",
          "length": 282,
          "cycles": 1,
          "position": 232,
          "iteration": 0,
          "httpRequestId": "373222a5-b1ef-49c0-aac2-abd883e29e03"
        },
        "item": {
          "id": "eeb03956-8c4e-46ff-b977-9d4fcd272073",
          "name": "credentials_verify:vc:credentialSubject:boolean"
        },
        "response": {
          "id": "fe12fa42-3d9e-4faa-b722-1ea72dbae5c6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 95,
          "responseSize": 205
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0a4a019f-f8fb-479a-8054-df2e808139b0",
        "cursor": {
          "ref": "3f4e6054-6790-4e9e-a599-b1c8fda1191a",
          "length": 282,
          "cycles": 1,
          "position": 233,
          "iteration": 0,
          "httpRequestId": "295393a3-e869-499e-9959-faff2af6bf6e"
        },
        "item": {
          "id": "0a4a019f-f8fb-479a-8054-df2e808139b0",
          "name": "credentials_verify:vc:credentialSubject:integer"
        },
        "response": {
          "id": "35168697-7483-40e2-9e0a-22ea9f283f68",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 103,
          "responseSize": 205
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "55fd4a93-1954-4d1a-bc08-421c6004e877",
        "cursor": {
          "ref": "ff0df47d-7ac9-419a-abeb-f32f1213aff8",
          "length": 282,
          "cycles": 1,
          "position": 234,
          "iteration": 0,
          "httpRequestId": "28c99c87-3d34-4f4f-a919-8fce40747b72"
        },
        "item": {
          "id": "55fd4a93-1954-4d1a-bc08-421c6004e877",
          "name": "credentials_verify:vc:credentialSubject:null"
        },
        "response": {
          "id": "9bf931c6-07e4-4889-b6d9-0d220a809891",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 268
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "502097b3-1ef9-40b3-a685-a0e840942746",
        "cursor": {
          "ref": "795cbc57-1be8-48a9-9351-cbc75ea50d98",
          "length": 282,
          "cycles": 1,
          "position": 235,
          "iteration": 0,
          "httpRequestId": "97e6eb54-91cf-41a4-812d-7b29fd5e406d"
        },
        "item": {
          "id": "502097b3-1ef9-40b3-a685-a0e840942746",
          "name": "credentials_verify:vc:credentialSubject:string"
        },
        "response": {
          "id": "b5091394-2958-4178-9b82-502e550ae4eb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 205
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "def8740d-2f5c-4a62-ab3b-fb5c0e07a498",
        "cursor": {
          "ref": "a2feeb53-2f48-4e24-80c2-870403e48fd6",
          "length": 282,
          "cycles": 1,
          "position": 236,
          "iteration": 0,
          "httpRequestId": "e4f57e17-59db-46a5-9747-652a57cde521"
        },
        "item": {
          "id": "def8740d-2f5c-4a62-ab3b-fb5c0e07a498",
          "name": "credentials_verify:vc:credentialSubject:id:array"
        },
        "response": {
          "id": "204fc41f-093e-4196-898b-cbbfbba379fb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 783,
          "responseSize": 1517
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:237)"
            }
          }
        ]
      },
      {
        "id": "2e166aa7-2168-4444-8fd8-b2d06f22b703",
        "cursor": {
          "ref": "13b5f7ec-2cbd-4f91-8a1e-0a32e9831cd6",
          "length": 282,
          "cycles": 1,
          "position": 237,
          "iteration": 0,
          "httpRequestId": "7c1e63c5-573e-4d24-8dd1-eef1afa23c6a"
        },
        "item": {
          "id": "2e166aa7-2168-4444-8fd8-b2d06f22b703",
          "name": "credentials_verify:vc:credentialSubject:id:boolean"
        },
        "response": {
          "id": "523628ba-509b-4899-b99e-2d2ab69bac9e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 828,
          "responseSize": 1503
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:238)"
            }
          }
        ]
      },
      {
        "id": "941f6750-7eca-46d1-9177-b251893eeea2",
        "cursor": {
          "ref": "edc2681a-fef4-49ac-b7a1-694c8e462df5",
          "length": 282,
          "cycles": 1,
          "position": 238,
          "iteration": 0,
          "httpRequestId": "08a1653e-d6dc-4798-bfa7-ca6d02889f99"
        },
        "item": {
          "id": "941f6750-7eca-46d1-9177-b251893eeea2",
          "name": "credentials_verify:vc:credentialSubject:id:integer"
        },
        "response": {
          "id": "a84cdb5d-6df3-46da-a00f-a3d733f6aa74",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 53
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:239)"
            }
          }
        ]
      },
      {
        "id": "f7c30421-ceae-47ad-bb11-14e292eb27e8",
        "cursor": {
          "ref": "8755d97d-6762-4387-a77a-149c7a55fd75",
          "length": 282,
          "cycles": 1,
          "position": 239,
          "iteration": 0,
          "httpRequestId": "c7bfc9c9-6d22-4397-92c8-d664088be063"
        },
        "item": {
          "id": "f7c30421-ceae-47ad-bb11-14e292eb27e8",
          "name": "credentials_verify:vc:credentialSubject:id:null"
        },
        "response": {
          "id": "9d91bf5c-18f4-44d0-804a-88ad25b7746e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 825,
          "responseSize": 1502
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:240)"
            }
          }
        ]
      },
      {
        "id": "e93e0284-a8e0-4dae-8774-3c684f952a5e",
        "cursor": {
          "ref": "a1514096-0fc5-4c31-8481-a9b63140b09a",
          "length": 282,
          "cycles": 1,
          "position": 240,
          "iteration": 0,
          "httpRequestId": "ebf4d249-4e01-4443-946d-8f85fc79e7d8"
        },
        "item": {
          "id": "e93e0284-a8e0-4dae-8774-3c684f952a5e",
          "name": "credentials_verify:vc:credentialSubject:id:object"
        },
        "response": {
          "id": "246a3f08-01d0-4664-a635-ee1eb37c8672",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 97,
          "responseSize": 53
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:241)"
            }
          }
        ]
      },
      {
        "id": "c0a0f2cc-22b1-46ee-8988-2a5d0a96610c",
        "cursor": {
          "ref": "3d8b51df-c7f7-4d1b-8d07-c0756df69cd3",
          "length": 282,
          "cycles": 1,
          "position": 241,
          "iteration": 0,
          "httpRequestId": "7f3611a3-6f55-4e02-8dfb-61f40b8459ee"
        },
        "item": {
          "id": "c0a0f2cc-22b1-46ee-8988-2a5d0a96610c",
          "name": "credentials_verify:proof:missing"
        },
        "response": {
          "id": "f556b5cb-11b6-43ab-b235-c3e96efd5274",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 217
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "53ba621e-910f-4609-ad31-5d524b156a9e",
        "cursor": {
          "ref": "88c8e6f6-0bbc-4098-adcb-cd8d20f12787",
          "length": 282,
          "cycles": 1,
          "position": 242,
          "iteration": 0,
          "httpRequestId": "ee6613d6-f72b-4ee6-82a3-d0e9d786dad1"
        },
        "item": {
          "id": "53ba621e-910f-4609-ad31-5d524b156a9e",
          "name": "credentials_verify:proof:array"
        },
        "response": {
          "id": "6a4e2699-6c3d-4977-8dbe-2270468a3bc0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 96,
          "responseSize": 166
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "53aaeb89-57a9-4cd1-a0fa-1019e999cf51",
        "cursor": {
          "ref": "4f6ae967-719b-4418-acd8-9b0dca6f5667",
          "length": 282,
          "cycles": 1,
          "position": 243,
          "iteration": 0,
          "httpRequestId": "a817e07e-c888-47fc-a907-28e431a28a43"
        },
        "item": {
          "id": "53aaeb89-57a9-4cd1-a0fa-1019e999cf51",
          "name": "credentials_verify:proof:boolean"
        },
        "response": {
          "id": "a865b831-9443-42e3-a36b-04da9cdbd32e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 244
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9fbbad5b-41df-401e-bcfa-fa223ce41e84",
        "cursor": {
          "ref": "242109c0-edc9-48da-b614-c1fb4f8003e3",
          "length": 282,
          "cycles": 1,
          "position": 244,
          "iteration": 0,
          "httpRequestId": "8b5df8d6-c0e6-4965-9261-cbb33a5c7fc5"
        },
        "item": {
          "id": "9fbbad5b-41df-401e-bcfa-fa223ce41e84",
          "name": "credentials_verify:proof:integer"
        },
        "response": {
          "id": "c07d2e69-0197-4c84-bc02-2f251e24477f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 244
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "56e24b3e-2ba8-4f68-aa46-33e1f2010491",
        "cursor": {
          "ref": "6d676324-0e5d-4937-8b71-41806639c10f",
          "length": 282,
          "cycles": 1,
          "position": 245,
          "iteration": 0,
          "httpRequestId": "263f3aff-c2db-41c3-a7ce-a7bab9272612"
        },
        "item": {
          "id": "56e24b3e-2ba8-4f68-aa46-33e1f2010491",
          "name": "credentials_verify:proof:null"
        },
        "response": {
          "id": "aa3e6228-fb69-4ab6-b1d2-12ab3c3bff52",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 295
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "00ab9080-72ac-490f-a1b0-e6ea4440af00",
        "cursor": {
          "ref": "5e773140-f3a4-4790-9583-32be1f3021fe",
          "length": 282,
          "cycles": 1,
          "position": 246,
          "iteration": 0,
          "httpRequestId": "d5a9ac25-2ad1-47bb-a934-21af1c511751"
        },
        "item": {
          "id": "00ab9080-72ac-490f-a1b0-e6ea4440af00",
          "name": "credentials_verify:proof:string"
        },
        "response": {
          "id": "45769f7f-bf14-46e6-8e83-28e55e8832e7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 95,
          "responseSize": 244
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "004b3a43-b3c4-4d7d-9a18-c6686e9b3b59",
        "cursor": {
          "ref": "709a94b1-da8b-46c5-817a-b0cf09a2535d",
          "length": 282,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "6fa60b0b-ac5b-4f43-a30e-a13396e9d0eb"
        },
        "item": {
          "id": "004b3a43-b3c4-4d7d-9a18-c6686e9b3b59",
          "name": "credentials_verify:proof:type:missing"
        },
        "response": {
          "id": "4eed5dde-cabd-412e-a352-304fce607650",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 345
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7d6a2c8e-86f0-4fb5-aba9-19d2963ea715",
        "cursor": {
          "ref": "ec409890-d6f8-4f94-afc9-c140e270c621",
          "length": 282,
          "cycles": 1,
          "position": 248,
          "iteration": 0,
          "httpRequestId": "35bc8202-3ec1-4daf-a862-73f48cbf05bc"
        },
        "item": {
          "id": "7d6a2c8e-86f0-4fb5-aba9-19d2963ea715",
          "name": "credentials_verify:proof:type:array"
        },
        "response": {
          "id": "91e35363-be3f-40b6-bc01-eeff082d14d6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "33102ac8-076e-4154-814b-6d0b88376df3",
        "cursor": {
          "ref": "722daa73-5be8-4859-a847-0157a0340521",
          "length": 282,
          "cycles": 1,
          "position": 249,
          "iteration": 0,
          "httpRequestId": "ef0ca509-2d7b-4250-95f2-4c2c0da7a611"
        },
        "item": {
          "id": "33102ac8-076e-4154-814b-6d0b88376df3",
          "name": "credentials_verify:proof:type:boolean"
        },
        "response": {
          "id": "a54f7c64-9a25-4d67-800f-bc8bcf3e67d3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f88f84e7-bd29-4977-a444-03541ca168c1",
        "cursor": {
          "ref": "aabed351-391d-42e9-8360-545818c1dc99",
          "length": 282,
          "cycles": 1,
          "position": 250,
          "iteration": 0,
          "httpRequestId": "9d60bca2-6059-44f3-9530-452c4fe826c3"
        },
        "item": {
          "id": "f88f84e7-bd29-4977-a444-03541ca168c1",
          "name": "credentials_verify:proof:type:integer"
        },
        "response": {
          "id": "3ae60b87-c525-4936-9ca2-03b80a59f161",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 95,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e9a632e8-b7e2-4674-b3b6-19ae1c4bb143",
        "cursor": {
          "ref": "3d3c0f1e-fd56-4b16-a4b4-a81266cb9d50",
          "length": 282,
          "cycles": 1,
          "position": 251,
          "iteration": 0,
          "httpRequestId": "093c8bec-944c-497e-a8ab-5b7ba60ad27b"
        },
        "item": {
          "id": "e9a632e8-b7e2-4674-b3b6-19ae1c4bb143",
          "name": "credentials_verify:proof:type:null"
        },
        "response": {
          "id": "822a1e2f-2295-4b90-8974-a07d3baa2b38",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 103,
          "responseSize": 345
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c053778e-0c2d-4efa-85be-eb93b5cdcc37",
        "cursor": {
          "ref": "c57772e9-bf06-4374-b32e-79ee592b832c",
          "length": 282,
          "cycles": 1,
          "position": 252,
          "iteration": 0,
          "httpRequestId": "c029ebb8-aa4e-46a3-899a-9acd220b8354"
        },
        "item": {
          "id": "c053778e-0c2d-4efa-85be-eb93b5cdcc37",
          "name": "credentials_verify:proof:type:object"
        },
        "response": {
          "id": "f0f38ff3-4e71-418a-8302-782bc4bcaa15",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9f9c1b7b-e06c-4856-95de-b55f39a85e4b",
        "cursor": {
          "ref": "cd2f3a0b-19c0-493b-922d-0528068e4313",
          "length": 282,
          "cycles": 1,
          "position": 253,
          "iteration": 0,
          "httpRequestId": "12cff833-862b-40ff-b4f9-5d35d5442318"
        },
        "item": {
          "id": "9f9c1b7b-e06c-4856-95de-b55f39a85e4b",
          "name": "credentials_verify:proof:type:string"
        },
        "response": {
          "id": "227dde54-d5bc-444b-b978-5edf5b2930e4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0ce19ac9-cb17-4df0-868b-e68db85231ca",
        "cursor": {
          "ref": "331ca3d2-05a3-4cdd-b96a-34abc2de6340",
          "length": 282,
          "cycles": 1,
          "position": 254,
          "iteration": 0,
          "httpRequestId": "2304923f-d235-47df-9d34-9f764fd8e114"
        },
        "item": {
          "id": "0ce19ac9-cb17-4df0-868b-e68db85231ca",
          "name": "credentials_verify:proof:created:array"
        },
        "response": {
          "id": "909f8198-4564-4f8b-a79f-a176c6b0abda",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1365ed35-f0ef-4128-ae4e-56729dc6c04a",
        "cursor": {
          "ref": "051a5910-950c-446e-adce-35ed93147d9b",
          "length": 282,
          "cycles": 1,
          "position": 255,
          "iteration": 0,
          "httpRequestId": "0915a179-63a4-4d56-a01e-4f14bffa0c67"
        },
        "item": {
          "id": "1365ed35-f0ef-4128-ae4e-56729dc6c04a",
          "name": "credentials_verify:proof:created:boolean"
        },
        "response": {
          "id": "77d0e7c9-f53a-4f81-b64c-c445f7d80ff8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 95,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5d8d4a91-a0de-4d3c-8085-17f88d4ac1d2",
        "cursor": {
          "ref": "ebacaafa-180d-4cd4-a76a-e05d60189a24",
          "length": 282,
          "cycles": 1,
          "position": 256,
          "iteration": 0,
          "httpRequestId": "d439c39e-889f-442c-8352-04a385f4cfeb"
        },
        "item": {
          "id": "5d8d4a91-a0de-4d3c-8085-17f88d4ac1d2",
          "name": "credentials_verify:proof:created:integer"
        },
        "response": {
          "id": "72c91b97-bdaa-4bef-be65-f33be03bb3c5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c9beb65f-06d7-4c45-bd9b-7899c8f3d93b",
        "cursor": {
          "ref": "9fa30dd5-6354-49df-9b13-dbbd48170ca5",
          "length": 282,
          "cycles": 1,
          "position": 257,
          "iteration": 0,
          "httpRequestId": "257c3916-eb53-4ffb-ba1c-38ffc0797af5"
        },
        "item": {
          "id": "c9beb65f-06d7-4c45-bd9b-7899c8f3d93b",
          "name": "credentials_verify:proof:created:null"
        },
        "response": {
          "id": "9ed7c1c8-b067-4283-9979-9c5a75006386",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 95,
          "responseSize": 252
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c76e4122-c5ae-4ea6-beb2-18448975bfab",
        "cursor": {
          "ref": "368fce1c-0b56-4a6c-9e51-3936ac56e767",
          "length": 282,
          "cycles": 1,
          "position": 258,
          "iteration": 0,
          "httpRequestId": "cb601013-aea4-450d-a753-a541ae74bf99"
        },
        "item": {
          "id": "c76e4122-c5ae-4ea6-beb2-18448975bfab",
          "name": "credentials_verify:proof:created:object"
        },
        "response": {
          "id": "c122110b-8e47-4be8-9ed2-d897a598ddb8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "41c11c6a-053f-481c-bf5f-f2816cad21f1",
        "cursor": {
          "ref": "5ccdaafe-31f5-4695-86f7-eeb15fdc241f",
          "length": 282,
          "cycles": 1,
          "position": 259,
          "iteration": 0,
          "httpRequestId": "f43ffbcf-a59f-44f5-b9d0-225a3626f899"
        },
        "item": {
          "id": "41c11c6a-053f-481c-bf5f-f2816cad21f1",
          "name": "credentials_verify:proof:verificationMethod:array"
        },
        "response": {
          "id": "d4f127b8-facd-4316-95a9-2b7da30e93ff",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 102,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "89872770-2d6c-4643-852c-6cfbf07b6a9c",
        "cursor": {
          "ref": "07718017-721b-4f92-bd1c-fda1727be033",
          "length": 282,
          "cycles": 1,
          "position": 260,
          "iteration": 0,
          "httpRequestId": "64deec8f-69b4-43a1-83c0-3e787d5f05e9"
        },
        "item": {
          "id": "89872770-2d6c-4643-852c-6cfbf07b6a9c",
          "name": "credentials_verify:proof:verificationMethod:boolean"
        },
        "response": {
          "id": "cefb9f25-e9c2-4503-a513-b713d0fb8912",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9babd583-7e1e-4f81-98f7-f852e50c742d",
        "cursor": {
          "ref": "21e03710-af38-45e5-8dc7-f3927a4a3dab",
          "length": 282,
          "cycles": 1,
          "position": 261,
          "iteration": 0,
          "httpRequestId": "3d8ce74e-6f81-4496-9580-7a10c24fd5cf"
        },
        "item": {
          "id": "9babd583-7e1e-4f81-98f7-f852e50c742d",
          "name": "credentials_verify:proof:verificationMethod:integer"
        },
        "response": {
          "id": "ca5456f3-2ca6-4610-93dc-5a99d2cc3636",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 95,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "81c51853-055a-443a-baf9-c0418f3eaa3a",
        "cursor": {
          "ref": "e986707d-fce4-45ea-99a3-7b62d4eb179f",
          "length": 282,
          "cycles": 1,
          "position": 262,
          "iteration": 0,
          "httpRequestId": "006a06c5-c7ac-48ed-ad71-0b2d31c72774"
        },
        "item": {
          "id": "81c51853-055a-443a-baf9-c0418f3eaa3a",
          "name": "credentials_verify:proof:verificationMethod:null"
        },
        "response": {
          "id": "d5a9de4a-1c48-45ac-9c34-8f9d3533d2ee",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "396f7bdb-a773-483f-814c-5e6f336d0bf9",
        "cursor": {
          "ref": "ad1744db-b9cd-4eb9-b91a-8ea9c67c6636",
          "length": 282,
          "cycles": 1,
          "position": 263,
          "iteration": 0,
          "httpRequestId": "058d1d5e-45f5-4b74-9204-9c3f8fb7240f"
        },
        "item": {
          "id": "396f7bdb-a773-483f-814c-5e6f336d0bf9",
          "name": "credentials_verify:proof:verificationMethod:object"
        },
        "response": {
          "id": "ca1822c6-c972-41a4-860e-34aab029e6f0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 95,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "06c6c6b2-fd2e-42b2-8097-a1d36b1d26d5",
        "cursor": {
          "ref": "ec9bd8b2-df01-441b-850b-030d6eec0ce7",
          "length": 282,
          "cycles": 1,
          "position": 264,
          "iteration": 0,
          "httpRequestId": "1d19fbf2-67d6-4460-9965-b21795edb306"
        },
        "item": {
          "id": "06c6c6b2-fd2e-42b2-8097-a1d36b1d26d5",
          "name": "credentials_verify:proof:jws:array"
        },
        "response": {
          "id": "667aa0f9-ecf3-45bf-a4a3-8640a444fae0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "831136e8-7d01-4789-8072-357dc8e32159",
        "cursor": {
          "ref": "f7fefae8-04fc-46e1-af43-6eaf38d36e7e",
          "length": 282,
          "cycles": 1,
          "position": 265,
          "iteration": 0,
          "httpRequestId": "9c3f9add-ec0a-4b40-a1ba-cc06e972f7d8"
        },
        "item": {
          "id": "831136e8-7d01-4789-8072-357dc8e32159",
          "name": "credentials_verify:proof:jws:boolean"
        },
        "response": {
          "id": "6997b476-5846-4ee4-b743-7703eeab0bde",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4c172841-30a4-4a56-bba8-cf28575f072f",
        "cursor": {
          "ref": "33eff751-9376-44c4-be54-939152afebb3",
          "length": 282,
          "cycles": 1,
          "position": 266,
          "iteration": 0,
          "httpRequestId": "85218a8a-a297-44fe-95aa-8875e6ccd967"
        },
        "item": {
          "id": "4c172841-30a4-4a56-bba8-cf28575f072f",
          "name": "credentials_verify:proof:jws:integer"
        },
        "response": {
          "id": "0295c075-866f-46db-95ec-ced4b5f9e3d5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b3541c6f-30be-4b88-93fa-98f97d616316",
        "cursor": {
          "ref": "96044b65-3203-4847-8f8e-8fce02fe1fef",
          "length": 282,
          "cycles": 1,
          "position": 267,
          "iteration": 0,
          "httpRequestId": "861f3db0-83ed-433b-bc2a-752273419d2f"
        },
        "item": {
          "id": "b3541c6f-30be-4b88-93fa-98f97d616316",
          "name": "credentials_verify:proof:jws:null"
        },
        "response": {
          "id": "a2887d42-d2af-4bbb-8c8e-7e1a2efc8733",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 172
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "74fb7c29-931d-465e-8924-2f3bd1fa2250",
        "cursor": {
          "ref": "184d4ad5-15dd-42ac-9ee6-7d0f71f7ae6b",
          "length": 282,
          "cycles": 1,
          "position": 268,
          "iteration": 0,
          "httpRequestId": "ed21b62a-db4f-4a86-bab5-307601a9e618"
        },
        "item": {
          "id": "74fb7c29-931d-465e-8924-2f3bd1fa2250",
          "name": "credentials_verify:proof:jws:object"
        },
        "response": {
          "id": "72cba20d-cc8a-4eb7-8eea-38f7d44668a8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "57242e47-aa18-4941-b102-adaec5740375",
        "cursor": {
          "ref": "5c847df2-fd42-4b09-8b7f-30accb6374b2",
          "length": 282,
          "cycles": 1,
          "position": 269,
          "iteration": 0,
          "httpRequestId": "2484134e-2e9e-4f43-a192-0acdb2863489"
        },
        "item": {
          "id": "57242e47-aa18-4941-b102-adaec5740375",
          "name": "credentials_verify:proof:proofPurpose:array"
        },
        "response": {
          "id": "f472a32e-c985-44eb-b723-38bd1f353dfb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 102,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7e026b50-c416-42f9-a09f-69aeedd389da",
        "cursor": {
          "ref": "b17ab9a0-3c29-4fb0-8887-0c3cf87ad55c",
          "length": 282,
          "cycles": 1,
          "position": 270,
          "iteration": 0,
          "httpRequestId": "4ea073ef-f01e-4b66-b3e9-28d1511973c3"
        },
        "item": {
          "id": "7e026b50-c416-42f9-a09f-69aeedd389da",
          "name": "credentials_verify:proof:proofPurpose:boolean"
        },
        "response": {
          "id": "f005c4a9-0803-4e6c-8d53-21fc56de8eef",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c24b24f2-3151-4efb-80d3-b5d5b8a3bc9c",
        "cursor": {
          "ref": "efbde56d-9a18-4c1a-9c03-88f3e3244eb7",
          "length": 282,
          "cycles": 1,
          "position": 271,
          "iteration": 0,
          "httpRequestId": "c794da01-0211-478b-a935-f84b4ac90ca9"
        },
        "item": {
          "id": "c24b24f2-3151-4efb-80d3-b5d5b8a3bc9c",
          "name": "credentials_verify:proof:proofPurpose:integer"
        },
        "response": {
          "id": "df7f39a3-35a7-4c1d-9f2e-f7ed047f384b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9d177ffe-97bf-4d46-988c-86ada3e06cfd",
        "cursor": {
          "ref": "cf8f5ec9-47b0-4e2b-a234-184d7facf11b",
          "length": 282,
          "cycles": 1,
          "position": 272,
          "iteration": 0,
          "httpRequestId": "fed47d77-0fc5-4eb5-a662-d05bd89fdac5"
        },
        "item": {
          "id": "9d177ffe-97bf-4d46-988c-86ada3e06cfd",
          "name": "credentials_verify:proof:proofPurpose:null"
        },
        "response": {
          "id": "581d13e6-11fe-4311-9db8-ef17a84db33f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dbcd0dea-8b2e-4659-acf2-c8bf8c67d747",
        "cursor": {
          "ref": "f1cf2189-60fa-4af0-9db8-41e06fa258f7",
          "length": 282,
          "cycles": 1,
          "position": 273,
          "iteration": 0,
          "httpRequestId": "8e7fea76-d869-41ba-942c-c5bc8241048a"
        },
        "item": {
          "id": "dbcd0dea-8b2e-4659-acf2-c8bf8c67d747",
          "name": "credentials_verify:proof:proofPurpose:object"
        },
        "response": {
          "id": "8292e852-62b2-4455-a2ba-a370e2f749fb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0a88043e-81df-4df3-aafb-bc5f42909c2a",
        "cursor": {
          "ref": "0e56ab0a-0f42-4ba9-85a2-664d8d411fa7",
          "length": 282,
          "cycles": 1,
          "position": 274,
          "iteration": 0,
          "httpRequestId": "a643e85e-baaa-4c9f-b043-ff1910c36ed8"
        },
        "item": {
          "id": "0a88043e-81df-4df3-aafb-bc5f42909c2a",
          "name": "credentials_verify:proof:proofPurpose:string"
        },
        "response": {
          "id": "ac72ca9c-b1ac-40af-a97a-ba11d2135a50",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cdbdf8fe-ca58-43c1-b48c-2489222e9be7",
        "cursor": {
          "ref": "8e6c59c2-33ee-4f9d-a82b-8d9000266f2b",
          "length": 282,
          "cycles": 1,
          "position": 275,
          "iteration": 0,
          "httpRequestId": "93a76d09-2941-4ef0-b384-37d1e1dde0b8"
        },
        "item": {
          "id": "cdbdf8fe-ca58-43c1-b48c-2489222e9be7",
          "name": "credentials_verify:missing_auth"
        },
        "response": {
          "id": "77544a2f-b56e-47f1-8a2b-88a6b4ca7284",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 78,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "99c0aec4-f8a6-4995-b2eb-e5575bb02638",
        "cursor": {
          "ref": "e471846e-86f9-40d7-ba9d-aee425f839af",
          "length": 282,
          "cycles": 1,
          "position": 276,
          "iteration": 0,
          "httpRequestId": "31ea5006-67ea-4dec-b7c4-3890a246f9c3"
        },
        "item": {
          "id": "99c0aec4-f8a6-4995-b2eb-e5575bb02638",
          "name": "credentials_verify:bad_signature"
        },
        "response": {
          "id": "77ba24b1-2603-4329-8332-fff032cf8865",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 112,
          "responseSize": 1083
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 200",
              "message": "expected response to have status code 200 but got 400",
              "stack": "AssertionError: expected response to have status code 200 but got 400\n   at Object.eval sandbox-script.js:1:277)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is false",
            "skipped": false
          }
        ]
      },
      {
        "id": "e06018d0-82be-4eef-97c1-d5da867bef00",
        "cursor": {
          "ref": "3091b91f-559b-45f7-aa8a-de3095763920",
          "length": 282,
          "cycles": 1,
          "position": 277,
          "iteration": 0,
          "httpRequestId": "0559f432-6f6e-45e9-80af-bc4d24559456"
        },
        "item": {
          "id": "e06018d0-82be-4eef-97c1-d5da867bef00",
          "name": "credentials_verify"
        },
        "response": {
          "id": "61fff087-edaf-49b0-ad58-3b3a1e577708",
          "status": "OK",
          "code": 200,
          "responseTime": 1260,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "7dbaf970-01fd-4855-8d69-578dc9f256c7",
        "cursor": {
          "ref": "1abbd85b-284c-495d-a355-784bf3853c04",
          "length": 282,
          "cycles": 1,
          "position": 278,
          "iteration": 0,
          "httpRequestId": "22eee2f3-c5af-4011-8c81-e0d60637781e"
        },
        "item": {
          "id": "7dbaf970-01fd-4855-8d69-578dc9f256c7",
          "name": "credentials_verify:issuer:object"
        },
        "response": {
          "id": "15e12695-0bf2-4a85-b89e-60a0285b5141",
          "status": "OK",
          "code": 200,
          "responseTime": 947,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "8aa1a3cb-1763-4203-9526-6f659a3a096f",
        "cursor": {
          "ref": "e4c75566-a8fd-40a2-9e9b-d30913a1ee67",
          "length": 282,
          "cycles": 1,
          "position": 279,
          "iteration": 0,
          "httpRequestId": "71c3bab1-9210-44a2-8002-3f8f05358a16"
        },
        "item": {
          "id": "8aa1a3cb-1763-4203-9526-6f659a3a096f",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "016f8f7f-fdd3-4e6d-91ef-1673efcdfdb5",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 82,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8aa1a3cb-1763-4203-9526-6f659a3a096f",
        "cursor": {
          "ref": "e4c75566-a8fd-40a2-9e9b-d30913a1ee67",
          "length": 282,
          "cycles": 1,
          "position": 279,
          "iteration": 0,
          "httpRequestId": "71c3bab1-9210-44a2-8002-3f8f05358a16"
        },
        "item": {
          "id": "8aa1a3cb-1763-4203-9526-6f659a3a096f",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "016f8f7f-fdd3-4e6d-91ef-1673efcdfdb5",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 82,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4b568d0c-47e5-4fcc-8960-10feb1fdf4d5",
        "cursor": {
          "ref": "cc45ef8e-8fe4-4234-a9f5-88913e9d82e6",
          "length": 282,
          "cycles": 1,
          "position": 280,
          "iteration": 0,
          "httpRequestId": "dd587c3c-5487-4a8b-9e57-679a29b0192e"
        },
        "item": {
          "id": "4b568d0c-47e5-4fcc-8960-10feb1fdf4d5",
          "name": "presentations_prove:missing_auth"
        },
        "response": {
          "id": "a1f0f094-f6e3-44c1-8c55-a067fe34b177",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 78,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "96ff6756-3faf-4482-b84a-fcd1790d459b",
        "cursor": {
          "ref": "03252115-41ad-4079-b53f-142067a923b9",
          "length": 282,
          "cycles": 1,
          "position": 281,
          "iteration": 0,
          "httpRequestId": "7b6c61ed-d5d8-4dbf-aa61-f355251744f2"
        },
        "item": {
          "id": "96ff6756-3faf-4482-b84a-fcd1790d459b",
          "name": "presentations_verify:missing_auth"
        },
        "response": {
          "id": "e7bf0622-1602-4efe-b968-9cb187bbf1a5",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 77,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      }
    ]
  }
}