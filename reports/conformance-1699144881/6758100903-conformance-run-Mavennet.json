{
  "collection": {
    "info": {
      "_postman_id": "0b8a4a7f-f952-4403-a9a4-909b37b8fa24",
      "name": "Conformance Suite",
      "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
    },
    "item": [
      {
        "id": "7d7a9b1e-a822-473f-842c-b2889102863a",
        "name": "Clear Cache",
        "item": [
          {
            "id": "bf64343f-daa8-4787-b1fc-5464b6d98cf5",
            "name": "Clear Token Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "4994649d-225d-4212-b7c2-e43383b527ac",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"tokenCache\");",
                    ""
                  ],
                  "_lastExecutionId": "2c5191ae-ef6e-4b68-a1e7-43f2c8ae99aa"
                }
              }
            ]
          },
          {
            "id": "16a53a53-cff4-4d24-b0eb-bff2e7dfd474",
            "name": "Clear DID Web Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "e86fd9c5-2dad-40a7-84e8-03329b641652",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"didWebCache\");",
                    ""
                  ],
                  "_lastExecutionId": "a0ec9c85-a3e6-4629-a253-b05ed0c54f9c"
                }
              }
            ]
          }
        ],
        "event": []
      },
      {
        "id": "c5982d1f-8cd2-4c81-9c4d-1786122a9121",
        "name": "Discovery - API Configuration",
        "item": [
          {
            "id": "1d08e4fe-6c9f-4e0c-865b-375e0986a116",
            "name": "Positive Testing",
            "item": [
              {
                "id": "b1c69b63-21d2-4396-863d-cb871bf955ec",
                "name": "did_json",
                "request": {
                  "url": {
                    "host": [
                      "{{did_web_endpoint}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "2f44fc64-d8b1-421b-88d5-09f71a9ad204",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200ApiConfiguration\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "c022846a-1ef6-4352-8141-acf615fa2336"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "52f8e347-f366-4c29-a54a-b909e6101709",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "1f7c81bc-d443-4686-9edb-14bf2496dfee"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "52637ef3-8318-48fd-8388-04e44aaa72c5",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "0efa9bee-3414-480a-aa35-a9ceffee16b4"
                }
              }
            ]
          }
        ],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "4e9effc6-14b3-4528-8e89-7493a8721545",
              "type": "text/javascript",
              "exec": [
                "// Discovery requires a multi-tenant aware did web endpoint",
                "const did_web = pm.environment.get(\"ORGANIZATION_DID_WEB\");",
                "const did_web_endpoint = utils(pm).convertDidWebToEndpoint(did_web);",
                "pm.variables.set('did_web_endpoint', did_web_endpoint);",
                ""
              ],
              "_lastExecutionId": "b130079b-2106-4203-a660-b27c493f66d3"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "9083a0ad-cfab-4269-9a89-9c63e379bc87",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "d033a09f-5277-4ea2-aa0a-9860284f7ebb"
            }
          }
        ]
      },
      {
        "id": "f57e1571-076b-4767-9040-ac30894c42b5",
        "name": "Identifiers - Resolve",
        "item": [
          {
            "id": "8092db73-85aa-4e87-9261-2a0427c03bdd",
            "name": "Negative Testing",
            "item": [
              {
                "id": "dc019315-452e-4b0c-bd77-1695b1b958a8",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "72252574-6b91-424f-b6d2-5388d0a7c807",
                    "name": "did:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "invalid_did"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a7a76ce1-c71c-449a-9ee5-7151e41a1f5c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400Identifiers\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "0ca71dc5-56bd-4aa0-be4d-5338ddeea199"
                        }
                      }
                    ]
                  },
                  {
                    "id": "07d8f2a8-66ce-41c4-8bc9-161f12b95733",
                    "name": "did:not_found:did_web",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "did:web:example.com"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "eb3c4e2b-92ad-4949-84aa-47d0e902616e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "8b36b6b9-b811-4754-b101-e34da69963af"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5b814007-4c6d-42a6-bf23-93eb7ea1d524",
                    "name": "did:not_found:urn",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "urn:uuid:{{$randomUUID}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e12e92ff-adec-43c9-8a65-d88467d8f635",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "b792d893-4bca-410c-87b6-8af0bba2f587"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "0d8fe4c3-b274-492a-bcaf-1f15ff8f261b",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "bfb93826-df96-4958-ab45-b6eaa28e4071",
                    "name": "identifiers:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET",
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b35efd28-8f7c-4fcf-a662-f6a6eaba0009",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "9757bef3-b7e7-48ce-91c1-d12d1dcd9908"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "999c6168-fdd6-477a-b71f-cf23833e8339",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0ef5b617-5807-4eb5-b9ce-2846e5baadc8"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "968bbb96-d2ef-4767-a47c-dc1a7e69db5d",
            "name": "Positive Testing",
            "item": [
              {
                "id": "e41a7211-5ec1-413a-8e1b-70595dd8e4cf",
                "name": "identifiers",
                "request": {
                  "url": {
                    "path": [
                      "identifiers",
                      "{{ORGANIZATION_DID_WEB}}"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "c8e0f06f-da3f-4a39-8daf-8973dad8c3d1",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200Identifiers\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString), {",
                        "     strict: true,",
                        "     strictSchema: true,",
                        " });",
                        "});"
                      ],
                      "_lastExecutionId": "d1cb1f84-9b2d-4f76-a021-ea2e062eef5b"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "dd2c48da-582c-4c40-843b-4ab24f10a4e0",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                ""
              ],
              "_lastExecutionId": "fcec7d7e-6460-410e-85a9-79679bbb02fd"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "e2664efb-c640-4247-acd9-c227d198c3c9",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "361642c4-8e40-42ac-9414-c786603e8d93"
            }
          }
        ]
      },
      {
        "id": "da69f55c-0771-4be0-b44f-f63bc6f4c334",
        "name": "Credentials - Create",
        "item": [
          {
            "id": "83715079-33a0-47a6-889b-96487766ce0c",
            "name": "Negative Testing",
            "item": [
              {
                "id": "6753d42c-3903-4594-8da2-3a3311f55ccc",
                "name": "Bad Request",
                "description": {
                  "content": "This folder contains requests which mutate a valid request body in a way that should provoke a \"400 Bad Request\" response from the server.",
                  "type": "text/plain"
                },
                "item": [
                  {
                    "id": "649cdfc0-9e9f-43d3-a3d9-099c700c9a56",
                    "name": "credentials_issue:credential:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2b3cc641-35f0-4af6-9f3d-f6d43cc5a796",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3cb43326-cb3a-4d1a-b06f-ae35bc2e9be3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9f1855b1-e4af-4bf1-b2e3-a904f9be88ef",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential\" is a required field",
                            "    delete req.credential;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "1cd2bc2f-05fb-4a07-ae27-7168e5e32e9d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fdafb41c-ada8-48d3-a4c1-e0f156a0bf14",
                    "name": "credentials_issue:credential.@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c435f816-baba-406f-80aa-8aeab36f2441",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3e78bcef-3b85-49cf-839e-54c865ec47d1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "92e2c267-cbbc-4474-82c4-6c40dbe633d5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" is a required field",
                            "    delete req.credential[\"@context\"];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "12432e5e-e9fd-44fd-85bf-8567e75838cb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a253af9f-e1a7-4af4-b6b6-dab030ff4057",
                    "name": "credentials_issue:credential.@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fddd119b-0d3a-4f79-ba99-41847f0e7321",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cebb7952-c2eb-4d27-9758-f105a9792596"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "09ef3163-5f04-441d-932d-494f707c804e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a boolean",
                            "    req.credential[\"@context\"] = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "3e218c71-6995-43c9-98c2-a7e07a053e33"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ebab231f-f960-4697-be06-2ff147a5c95b",
                    "name": "credentials_issue:credential.@context:integer Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c982cdfd-5943-444f-99bf-ca3225e50b5a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "35a98383-54e0-4907-8de1-d1308883af67"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0287186d-1d9c-4608-8318-286aa4132ef7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an integer",
                            "    req.credential[\"@context\"] = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "559c22c2-918e-484d-b457-9cd26ac4e7d4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bcd92cf8-2ee2-4aa9-8251-c0a57b92affa",
                    "name": "credentials_issue:credential.@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0cf2367d-dd2a-42bc-8f71-93925a597134",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ad6fda46-bc7c-43c5-9688-45b11e21b53c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5a736ce0-72a7-463f-9a02-b59c7c2970c2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not null",
                            "    req.credential[\"@context\"] = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "7c543f50-59a2-4029-947a-840d82b7d3ff"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ccdbe69b-8278-4581-aca0-71819762f2e7",
                    "name": "credentials_issue:credential.@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "705e1b19-559b-4e95-907b-e400bbfc86cc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ea8359ef-06f7-42c7-b7c6-6576d76f7beb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a2330d0d-81d2-41d9-a0ca-4f3a24464a58",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an object",
                            "    req.credential[\"@context\"] = {\"@vocab\": \"https://www.w3.org/2018/credentials/v1\"};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "2ca1ea53-23d1-4749-98e1-7630b7300b60"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e7296413-0463-40e4-9fd0-59619934417b",
                    "name": "credentials_issue:credential.@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "51c842d4-b2c9-44d7-a1a1-71edd280bd81",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "41729457-454b-4dc9-8bfa-036e631a3472"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cd9e6a8e-caf4-4dee-b902-7106bfd94832",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a string",
                            "    req.credential[\"@context\"] = \"https://www.w3.org/2018/credentials/v1\";",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "442fc36f-f8f0-4653-95a5-6dc22fd681c0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dc7b284c-85c3-4848-a289-769c6f488c2a",
                    "name": "credentials_issue:credential.@context.item.array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "68ad4d7b-b89f-4f9f-9219-fbd8333f204c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "aa2c562a-1fe3-4757-8bef-852e4b672532"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cca349e7-6727-4127-9791-b475343d0e44",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not array",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        [\"https://w3id.org/traceability/v1\"],",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "85668908-9f55-48f8-b9b7-1a9334bfef50"
                        }
                      }
                    ]
                  },
                  {
                    "id": "80c296f8-6c06-4411-b48f-a11516af8221",
                    "name": "credentials_issue:credential.@context.item.boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "78884dba-1fb7-48d9-bfb8-093438d7be70",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "adb23600-5741-43fd-ba35-eb7a85074776"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8dbccc14-0220-406f-a338-66036abb8127",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not boolean",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        false,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "87bf2bb5-6d96-4c86-aec4-eaf498688218"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4952f27a-6373-4d6c-8314-4b34893f54d2",
                    "name": "credentials_issue:credential.@context.item.integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5be2c9d9-c438-4cb0-8fdc-f3a6cbe0079d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "685042a5-f1e5-43c9-b818-753d028b5423"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6dcee136-6300-4831-9110-da9146679346",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        42,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "55b71f21-a3f7-4ccb-98c7-2a9ad12fb60f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "72166b1e-8589-4b66-a579-7e1dbc3289fc",
                    "name": "credentials_issue:credential.@context.item.null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7fa2865c-a176-4a9f-959f-8e448c2c98cf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2bb24c3f-91ba-4140-8d29-197316e057c1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "be4d9f1c-4043-4303-9b9d-d4874bf72d37",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        null,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "ebebe732-fef1-4252-a48b-f498a6e51b92"
                        }
                      }
                    ]
                  },
                  {
                    "id": "897ee9c9-b0cd-4c89-9c87-3542dc163e7d",
                    "name": "credentials_issue:credential.@context.item.object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "25ee21dc-318e-4843-a7a4-40739032437c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c7089bcc-fe1d-45c5-8968-ca2c858a931e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "493b8b85-dc78-4620-b1a4-f5a99b672086",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not object",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        {\"@vocab\": \"https://w3id.org/traceability/v1\"},",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "149a6cc7-531f-4019-b379-619455f50cb0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "776a0c57-24fc-433c-b606-5b9dcf413e76",
                    "name": "credentials_issue:credential.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "84080fa2-2546-4416-95d0-cb19033e4e0a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0e2f5103-042c-4b2a-ad9c-55b918a9f1db"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "34212c70-f49a-47dc-9cbb-b201acaf54cc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not array",
                            "    req.credential.id = [pm.variables.get(\"credentialId\")];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "8896ff24-1a25-4422-92bf-886f474d0f17"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a76d2f4a-8218-4d99-8066-0d4c60c2f59c",
                    "name": "credentials_issue:credential.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "672dc3f4-27d8-401c-b4ca-4368a8c2d0d3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "af8d92a0-02b0-409c-afa4-d09b472953d9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "05abf827-bf7d-41e3-85e8-50a9a5470c78",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not boolean",
                            "    req.credential.id = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "d413b29b-5b40-46bd-9c22-56f50ff5e75b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "efb3fa44-0860-466b-9f82-933a36324cbe",
                    "name": "credentials_issue:credential.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "076a4151-5673-4529-8677-1e17367c97fd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "665659f5-b0ec-4eaa-a0c9-bad69564fea4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d7a95b5c-a13f-4e65-b68a-7df61268a19f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not integer",
                            "    req.credential.id = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "74b81748-0ace-4c67-9f87-82560a403fcc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "408cb164-4c84-4219-8942-2c113625bcd2",
                    "name": "credentials_issue:credential.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c24d9ed3-1244-4628-ad30-3c3f7f2c6d7b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cf0e710f-631d-4dda-945b-08f49ad55f73"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "46d96d0d-3dd4-472a-ac73-c72d32a3ac48",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not null",
                            "    req.credential.id = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "6fc1e5fa-a489-4eca-bdb1-0d73744a6bac"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5aa5bc43-24bc-461c-97d6-23e47bd9a272",
                    "name": "credentials_issue:credential.id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c2a1a498-3a4b-4a5c-8f62-35f9db087555",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1841866f-0e2b-493f-9d1e-771fcef50ce9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7ee054cf-d47a-4a5c-9455-1d56c538da75",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not object",
                            "    req.credential.id = {\"id\": pm.variables.get(\"credentialId\")};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "4f3d7a51-aafa-42cb-900f-be64cacacb90"
                        }
                      }
                    ]
                  },
                  {
                    "id": "af02343a-dc61-42bb-8cbc-007e8af90fc1",
                    "name": "credentials_issue:credential.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "63cb8f03-0557-4422-bec8-599e5437bf63",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "02efeb56-9b1b-4c6d-8a06-96bc101394a8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f27df3eb-7871-449f-b07e-9a71acc2efa9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type is a required property",
                            "    delete req.credential.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "9316c533-058d-4666-a7e6-669c4b5fd8e4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "27da3eba-40e1-4f59-80d1-17765c43dc17",
                    "name": "credentials_issue:credential.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "495d08ef-934d-45c9-9894-b301b8b95fbb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "69ff0d16-9c2f-42b5-8aa2-096e7cb8c338"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eecc5dc7-93f2-46be-a3fa-59bc53245d2a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not boolean",
                            "    req.credential.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "19681166-54e5-4573-94b9-b11908a140a0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "63488ac6-e500-46a0-bc8d-e96773f36508",
                    "name": "credentials_issue:credential.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8284c031-9b55-44e1-8313-f57d1975c417",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d048987d-a31e-434e-a230-15f9fcb3bccf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d30d6841-9982-44cf-a726-861227aef8db",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not integer",
                            "    req.credential.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "72922a97-1f1c-406f-8ca2-034ec26649dc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8f0fc7da-7ece-47cf-95d8-8bf188750866",
                    "name": "credentials_issue:credential.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "defc3028-a07f-4ed8-b834-b9116b1f500e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5f71f983-ec63-4ae5-8c9c-4f211a22733c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a7c57640-2bf0-404f-b1fb-614719ccfa5b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not null",
                            "    req.credential.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "a19617fa-9aa5-4365-880a-afd28b7aaf2f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "19f8be20-56a9-49bc-9107-d4d5b16d7097",
                    "name": "credentials_issue:credential.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "403f6426-4eb8-4c08-949f-40735a523088",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "61151fd3-69ea-4d7e-a90d-f7757d5cfb87"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "10360319-ac91-4f5d-86c7-239e226cce3d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not object",
                            "    req.credential.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "61ae49cc-e4ae-4336-bf71-a34886c2df1a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f628e1b5-37f8-4ccf-b36e-2e91894e1fde",
                    "name": "credentials_issue:credential.type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "73929402-a21c-40ac-b027-aeb859869243",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "81e6f995-77e3-4cdc-8cb0-c60a38f8d33e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "be1fdf4f-c5e5-4bc3-bd5d-c94fd439af52",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not string",
                            "    req.credential.type = \"VerifiableCredential\";",
                            "}));"
                          ],
                          "_lastExecutionId": "dc8ee819-a9a7-4c96-95dd-85a09b7f4c36"
                        }
                      }
                    ]
                  },
                  {
                    "id": "28696c2e-4c2f-43e4-a9fe-71bdc7266471",
                    "name": "credentials_issue:credential.type.item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ecf6c784-d57e-483f-a793-82c5eaac47e7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "45b62993-92cb-46c1-9381-02efcfd74f3d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cbfee3bd-f71b-41e2-abf0-95122fbefd30",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must have at least one element",
                            "    req.credential.type = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "0980a144-e29d-4821-b7ae-65762bcdef2e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a16ad2e3-b74b-4161-a964-ea1bd393f327",
                    "name": "credentials_issue:credential.type.item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b9fb724b-2fef-4eb5-8cbb-855f887f3b46",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b3d31666-2401-47a1-bc60-1ca3922c6467"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "102b3e25-c402-48af-a3e6-1170a5fbd0e8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not array",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        [\"AnotherType\"],",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "6dfa0316-bad0-46b3-aa40-692afbc52902"
                        }
                      }
                    ]
                  },
                  {
                    "id": "22627e32-dcc7-4ac4-9391-893728f27e5e",
                    "name": "credentials_issue:credential.type.item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5fcfa7f4-fd54-4238-9ceb-480b4c3e95e2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b17b1ad8-b392-4da1-83b6-1ef59366f57b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eeef2c53-bbca-4802-91db-9bcfab45fb9a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not boolean",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        false,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "99fac62a-1c1d-40f7-9797-55b7f48389dc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7fad7b87-9f35-4451-88b4-5edd27044ad7",
                    "name": "credentials_issue:credential.type.item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "79aeb942-4303-4acc-9c79-4b389b83807e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "37802ff8-1907-41b2-9696-2ecd8ee5cfc0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "365135a9-9bfb-4c2d-871f-56c387c508af",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not integer",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        42,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "5cfb5b37-bdd9-40a8-bfa3-fc83db798fbd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d6e8144e-5c1e-4137-b494-5509948442bb",
                    "name": "credentials_issue:credential.type.item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7a1dd0dc-fe80-440e-a34e-1d53da945d72",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "28da0041-81fc-4c77-8306-1023a188e2f2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a3a8738b-aa4b-4c21-9625-8f6632362fd0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not null",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        null,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "5aeb3726-846a-485d-ae07-b70b9542a056"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fb659243-a7f9-4a19-a414-abf4c0c12bbd",
                    "name": "credentials_issue:credential.type.item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3ea85807-2bcf-4a7f-a597-054a9b17e3ce",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "95c93455-67dd-4f81-a844-90c74b82866a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b5276723-2dae-4afa-a873-078225040b67",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not object",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        {},",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "a8c5e149-a081-4844-8044-f2b22fa2069d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0a2ace76-ee8e-4fa4-b897-108173bffd52",
                    "name": "credentials_issue:credential.issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7813a713-8ccc-485e-9d32-3318ec4a86db",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "68e8d3bf-f936-4b2d-92df-2baab8484632"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b62ee609-42d5-40bc-ac04-7e7f6a837f51",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer is a required property",
                            "    delete req.credential.issuer;",
                            "}));"
                          ],
                          "_lastExecutionId": "221817f1-b08c-4a1c-ace0-89cda4d3bd4e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7ba1895a-44df-4232-a0f2-43c9e645d76a",
                    "name": "credentials_issue:credential.issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e76c1989-04ba-4144-84fc-10c242da7be3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9f99fa41-a8a2-4757-8cfd-1709019d574b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2c946bbf-55bb-4f23-b7bb-11e5cbdc2528",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not array",
                            "    req.credential.issuer = [pm.variables.get(\"issuer\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "0a320e77-1b9b-4cd1-96da-53f446410bae"
                        }
                      }
                    ]
                  },
                  {
                    "id": "023a9c62-276c-40e9-ab88-75e0a574c886",
                    "name": "credentials_issue:credential.issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "24efef6e-cc24-4934-a8fe-3d293ba49b13",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "25780cf8-fde3-4c4c-afb2-a3be68a12863"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "daea8cf3-ba81-4e54-a905-bb1e48aa68ec",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not boolean",
                            "    req.credential.issuer = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "684dd9f5-0657-49ed-b773-8f755a51c976"
                        }
                      }
                    ]
                  },
                  {
                    "id": "711c053b-457b-464e-93c5-4b703ca55993",
                    "name": "credentials_issue:credential.issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1dc3d81e-f97a-4b9e-916f-7dd68d8a1a8e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "554ade4e-8995-473b-9971-fcac6ebb0501"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cc98de95-e87b-4e0b-bb46-ea0bf91fdf31",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not integer",
                            "    req.credential.issuer = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "0a831133-fb21-4b96-bb3b-b079e0d10249"
                        }
                      }
                    ]
                  },
                  {
                    "id": "92e9d2c1-6ba8-4bc1-b687-64c3b5b46965",
                    "name": "credentials_issue:credential.issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7cc5f3a2-b8bd-412c-88ad-35c84bbc2da9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "46171f4b-6645-4d62-a328-573431b8d1b9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1113a90a-6735-46bd-baf1-06e07197e066",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not null",
                            "    req.credential.issuer = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "f64a6a41-abeb-4db5-bd39-840583e3ec55"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ac400dd4-5066-45cd-8592-24e78d569058",
                    "name": "credentials_issue.credential.issuer:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "751d3501-23ed-4ce8-8169-a0100ffb4903",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dfadc9dd-e06e-479a-a942-0eae6fc87673"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "172bd84d-0b82-480c-a66b-5eae42e928e0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be a valid URI",
                            "    req.credential.issuer = \"not.a.uri\"",
                            "}));"
                          ],
                          "_lastExecutionId": "563f67b3-6e1f-4ed0-9364-650e97d98f90"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d31e9249-03cc-4ef2-a69b-344adb6eec2f",
                    "name": "credentials_issue.credential.issuer:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "32c0432c-62ce-4e3b-a3d3-e8a73eff6b26",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "7331d661-e14f-4c73-a24b-84321af89e5d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f5e17ec3-74fe-492f-9c40-260d0b2dadc6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be known to the endpoint.",
                            "    req.credential.issuer = \"urn:uuid:{{$randomUUID}}\";",
                            "}));"
                          ],
                          "_lastExecutionId": "4fad8500-dee6-43e7-8d49-f5861bc4d97e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "250c95dc-f75c-4c3f-b87b-a4b7865c6860",
                    "name": "credentials_issue:credential.issuer.id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ae15f437-2665-4f28-bfe2-8d97c9cb76dc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4bf0e8c6-d090-47d7-9f50-3df4d811b0f3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "94eb8aa9-0b4b-4ff2-8811-766b1b7f0c99",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id is required when issuer is in object format",
                            "    req.credential.issuer = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "24bdbb41-3fa9-48c6-a113-b504d142ee14"
                        }
                      }
                    ]
                  },
                  {
                    "id": "07f00620-bd72-4d9b-a527-c90294958998",
                    "name": "credentials_issue:credential.issuer.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "caf98761-7529-4609-b830-1cb222e9b752",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1e7bd8ee-a275-4a58-a891-1542d22f868d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5be9e67b-8b08-4cd3-8e4c-956dfb62af61",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not array",
                            "    req.credential.issuer = {\"id\": [pm.variables.get(\"issuer\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "ac0f2119-7f09-47ff-894c-35fbb37dc893"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5480681e-bd30-4422-9be4-f463e3f5a868",
                    "name": "credentials_issue:credential.issuer.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6aeae544-26fd-4b42-ae0f-49a4a5d77cde",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "92936597-d5cb-41e3-bc50-2bf95122897b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c52e8761-c3f1-48af-9e4f-a91bedf2813f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not boolean",
                            "    req.credential.issuer = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "98b261e0-3452-4ca6-9ee8-49c09228aaf8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4c369c2a-af30-4b66-8e20-c190c2f3dd83",
                    "name": "credentials_issue:credential.issuer.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a65c431f-f34c-41f8-9569-c32cb42b6f8f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "20ae1385-05c3-4209-bd0c-b4c6ebad8874"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e6b8d199-d348-4898-9506-24b356184def",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not integer",
                            "    req.credential.issuer = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "0a5879ef-9dfc-4755-8bf6-5c881c8cba47"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aa4d6670-439b-48d6-9668-c157d89f541c",
                    "name": "credentials_issue:credential.issuer.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "98f7e7f6-f23b-48ab-9133-7b178a7695f9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a33ba830-6fd4-433e-9e12-c4abfe068f84"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8e62bf27-d5f2-4c7d-91c1-7f90bebc64b8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not null",
                            "    req.credential.issuer = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "3fefb016-5603-4bf3-90b7-479e1ff2cfaf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e427dc72-6b84-4e5c-864d-8475959c3d89",
                    "name": "credentials_issue.credential.issuer.id:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "df01d7c3-1913-4fea-a64d-f43ecc80aacd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "71aa90b4-df61-4590-9e97-84197ab2d7d6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f04fa503-4740-4783-82ce-f56b3fab0973",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be a valid URI",
                            "    req.credential.issuer = {\"id\": \"not.a.uri\"}",
                            "}));"
                          ],
                          "_lastExecutionId": "2d20e169-3a32-4060-95d2-f49617963142"
                        }
                      }
                    ]
                  },
                  {
                    "id": "54fa3f1c-2f7b-43c8-a0c2-9d321e597e34",
                    "name": "credentials_issue.credential.issuer.id:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "99947df8-6ab2-4e8d-9ac7-0f6d4ed7744d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bebb6c32-de7d-41d5-bea6-d49acdea5082"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "94e8cdbe-726e-4149-9ad1-cea3f9df73f3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be known to the endpoint.",
                            "    req.credential.issuer = {\"id\": \"urn:uuid:{{$randomUUID}}\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "4c25a600-be11-4cd9-9561-83ca1e4ed9fb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9463944e-7496-46bd-bc2a-a0b9c70be1c6",
                    "name": "credentials_issue:credential.issuanceDate.missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f2fab6c2-4626-412c-b618-d4c69c4d0a7c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8f7c9ee2-e5d4-4056-b26a-7b912fbd3c4e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ff79d2f5-a1e6-4be4-8859-d71d33633a52",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate is a required property",
                            "    delete req.credential.issuanceDate;",
                            "}));"
                          ],
                          "_lastExecutionId": "9ac8a14c-83ec-40d0-b01c-f94387659191"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d9aa543f-4cda-418b-9748-445e67e681b5",
                    "name": "credentials_issue:credential.issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3b744c89-5a64-470e-8455-88c150ac1445",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "adcd2eb6-3931-41d2-a9d6-0a7c6dbb8655"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1b3730eb-9655-41b0-b6f9-f8a40995eca5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not array",
                            "    req.credential.issuanceDate = [pm.variables.get(\"issuanceDate\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "11ecb94d-d900-4440-93c0-f4649388ec84"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8f6c49d7-b933-4a44-a8ee-33f4e947e109",
                    "name": "credentials_issue:credential.issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fb2f713d-7422-4769-9915-0dd502fc59a5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1ecbfc58-be2b-4948-b3c3-6d969a4f7ca0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "815c2d81-6ba6-4dd6-8377-db103360aa90",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not boolean",
                            "    req.credential.issuanceDate = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "37b0d565-7ea4-4286-8030-6dbc1cacf847"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0a84365b-2dd9-4b4b-a674-532cb3f35a75",
                    "name": "credentials_issue:credential.issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "91c9da8d-e68e-4318-92ea-5c077b990495",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3e7c0f9c-7d4c-46ae-86e7-8fd429b84115"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7130dc82-b6a6-4390-bb8b-f59fd5fbf58f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not integer",
                            "    req.credential.issuanceDate = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "b0aad62d-f2b6-441e-841e-d9f553eb165b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2c06aea0-9722-4c02-a4d5-43755249a29d",
                    "name": "credentials_issue:credential.issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6e8afec6-5bf6-4616-bb25-b410a27ccc10",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9f76df1a-8bf8-43d0-8e64-79a4b6c482e3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b15724a4-da35-4f72-b696-2d104dfde05d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not null",
                            "    req.credential.issuanceDate = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "24d56f5e-49d9-4b03-93f2-c6097fd4ae51"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9f404c0e-f1dd-4a05-9422-a9a579349638",
                    "name": "credentials_issue:credential.issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "89537df9-25ef-46ce-9203-0dfc01d5fb5f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "84736db4-94cd-4780-a138-50665873fdf4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bb21dc89-1baa-4903-a3b7-cba0bf61a744",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not object",
                            "    req.credential.issuanceDate = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "f7c82e14-e240-4606-a515-06e1c3ab6335"
                        }
                      }
                    ]
                  },
                  {
                    "id": "afc8115f-032c-47a9-87ad-ed67aa5cac22",
                    "name": "credentials_issue:credential.issuanceDate:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "85295f21-3d91-4fed-80f2-6697eb38a1a0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8163e198-5b23-49b6-b8fc-5dbe10823360"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bf877f99-1867-4de1-a536-23dbb864487e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be a valid XML date time string",
                            "    req.credential.issuanceDate = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "8979a3ee-650e-4c8c-a436-739eeedd5980"
                        }
                      }
                    ]
                  },
                  {
                    "id": "417237d1-2adf-421d-b0d0-a51ecbf162f7",
                    "name": "credentials_issue:credential.credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2a23e8d3-c743-4b8a-aef2-fc409557598f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "03c27328-7518-4a8b-a1ac-f1dd1b2dd57a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c5c84c51-3846-45f1-ab87-8a2fb0442ba8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject is a required property",
                            "    delete req.credential.credentialSubject;",
                            "}));"
                          ],
                          "_lastExecutionId": "d7c779e3-e47c-4af2-8d0b-be727510b09b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ce8f60aa-6c9d-451b-887a-0a5795ec4fee",
                    "name": "credentials_issue:credential.credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f21de6cd-4bb6-4ef0-9b11-5d975f1cac02",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0919bc5f-373d-4b5b-a4c8-2fff0e2bf811"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "25d937d4-9dad-441e-8243-4ea52110788d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not array",
                            "    req.credential.credentialSubject = [pm.variables.get(\"credentialSubject\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "3734c995-6c04-4483-a2cf-a4d1c450aba0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aaa3cb5f-216a-48ec-a0ad-5314b33a1f4c",
                    "name": "credentials_issue:credential.credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8e5c6b17-40b7-4db6-b9c1-af985d1bce63",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "018c15d8-21d1-4960-9144-b6252db3064a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a55aa6de-5901-49e6-a524-5cc452f1f5fd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not boolean",
                            "    req.credential.credentialSubject = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "2a39555a-55f3-4b8a-bedc-0141c690fa6a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a78eee7c-13f9-47fb-83b4-b3f9fb89cfda",
                    "name": "credentials_issue:credential.credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a10b7be5-7f7f-4d95-83d2-98c33fbc7c1e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7d7b9ffb-72f8-47c2-a903-e82575b8876d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "17088312-3c9a-40bc-b056-7470484fb790",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not integer",
                            "    req.credential.credentialSubject = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "4aa74a55-622e-4c08-b105-74ae3f1adc36"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9f64f47a-7af4-4cbc-9c50-d8e17c5cf5cc",
                    "name": "credentials_issue:credential.credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d50811e4-5196-4375-ac01-f01b1e543caf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "08868580-1b57-4cd6-8d01-5b869e1ab41a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "33b0b7f4-fc3c-469a-b8fd-032c28dd0e41",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not null",
                            "    req.credential.credentialSubject = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "7feae8d5-ce36-4d23-bf1b-61efddbba481"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3df30251-e6fe-4dc6-a1ca-1dbf6177bb98",
                    "name": "credentials_issue:credential.credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6fbda6a9-21a8-4e25-95a9-815af1d0e9b5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c7b9ae4b-6459-4e3c-a37c-a29e69cb3265"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2dcf902b-1679-4b84-b0ec-8daffb78551f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not string.",
                            "    req.credential.credentialSubject = pm.variables.get(\"credentialSubject\");",
                            "}));"
                          ],
                          "_lastExecutionId": "68bc147f-2324-4ddd-84ed-16078e85689a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ac632b53-9425-4f6a-9357-bbf2eff155a5",
                    "name": "credentials_issue:credential.credentialSubject.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9f9c1a3b-b944-4786-9723-2fce6a053323",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "88367a8f-ad2e-41ea-8da4-b9ca5a797c7a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "73a489de-169a-460e-a514-49ba07ee9577",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not array",
                            "    req.credential.credentialSubject = {\"id\": [pm.variables.get(\"credentialSubject\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "b4de693d-0d6a-4123-9c6a-e505245336c2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0bcbd7d3-7348-4921-a6e0-b0508538f339",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8c2e1f84-4fc6-44e3-9dfe-5652bf40b7f0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ef12c3df-70ea-4be6-85da-1526b059d352"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f98d3e2d-7a46-4892-96cf-4c7d3057e476",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not boolean",
                            "    req.credential.credentialSubject = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "d01d99dc-0a5e-42cc-b096-030a18157af0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "425bedbd-4817-4a60-ada5-03ce2c17e229",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 2",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d06c69e1-df7f-4d01-adf4-408eadb0d12e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1a126c37-d4c0-4b93-b1d8-d8c651f5eec5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "aaced39e-8778-47a9-aa5b-a11e812f6790",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not integer",
                            "    req.credential.credentialSubject = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "ff4d3b9f-8fd2-479c-b919-6c9603dc5401"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2fed4c37-364d-42c0-94a9-3fef12e86382",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 3",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "56e51ea4-3054-4c1a-861d-d9b7c4aec4a6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "84ea6c3f-cdb6-47fa-bb50-ace312ad8c07"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1d66140a-2903-4e3e-9e20-cb2d411e8e7f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not null",
                            "    req.credential.credentialSubject = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "aa1ddfc9-5630-482c-b572-ec5b8b760724"
                        }
                      }
                    ]
                  },
                  {
                    "id": "84b92a5f-d9b8-49b3-ada1-8dd908589a50",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 4",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9b9c2bbb-6cd6-430f-b77c-8b44e4d2eb74",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0dc1069f-2613-46ae-85f7-e568813fa553"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a7534cbb-3982-4330-8d00-f087680a5556",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not object",
                            "    req.credential.credentialSubject = {\"id\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "dd365184-ddc0-49aa-b128-54633fb8e851"
                        }
                      }
                    ]
                  },
                  {
                    "id": "20ca5230-bc89-44aa-938f-8b07439bed34",
                    "name": "credentials_issue:options:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4c6c4585-d657-444e-8101-52d2017cc9f7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "83eb7b46-b35a-49a4-8173-51e2080420c9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b6b8c545-c301-4144-a6b9-6881a86d06e5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options is a required property",
                            "    delete req.options;",
                            "}));"
                          ],
                          "_lastExecutionId": "5975b055-cf45-4f7f-a5db-db4b3712268f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "baa55527-a98c-4031-afd6-05eec55f8d7c",
                    "name": "credentials_issue:options:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dbab3e5a-841c-4755-bbb4-1eb3208e9ae5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "133082eb-5cc5-4807-b60b-3198b7512c43"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d887870a-d40f-4040-a487-46b028e08ce1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not array",
                            "    req.options = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "f6b48ef5-a056-4de0-8c56-c81ef93c6c57"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2f670f53-6ea5-4d11-b7e3-ac68b12caac4",
                    "name": "credentials_issue:options:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "75c098af-a717-4ee3-8254-86e63c522138",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "87bad83a-3215-4fb8-934b-4765d8faf1f0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "27562819-991d-4d07-91a0-85bab1cb763f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not boolean",
                            "    req.options = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "ee4b8674-8f6a-4dd6-91d3-be51334965ce"
                        }
                      }
                    ]
                  },
                  {
                    "id": "70616f69-fdb9-4a51-b89f-2f35351ec20e",
                    "name": "credentials_issue:options:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "85c54227-a4a8-426c-b0a5-a11f1678d6bf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fe94fe3b-fa09-4359-abc0-4fc269013587"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "63976462-8d7b-4359-aff4-70be70bd6ae2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not integer",
                            "    req.options = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "88ac3299-76b4-4d7c-b83b-352ebeb7d482"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3dc125e1-3738-42c3-964b-b7970a1d6499",
                    "name": "credentials_issue:options:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dd4654af-a9d8-470d-a5d1-4f65cc099c4a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0e427692-a6c2-4ea8-94d9-c008b5f92d6e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "710abc14-c985-4039-b5ca-a9d56301f392",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not null",
                            "    req.options = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "de3d0c08-f4d9-4d98-8aa9-0f8cf5319c41"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eadc6370-f2a5-4299-a9fd-c521268fd20c",
                    "name": "credentials_issue:options:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2f1c48c5-570b-47d5-88e6-39d584a81b0b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "abdf0865-7208-456a-9707-0c23eaf63c6d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ea1d3408-6ef3-4109-bbbf-adcef9e7dfb0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not string",
                            "    req.options = \"\";",
                            "}));"
                          ],
                          "_lastExecutionId": "bf6b4a9e-623c-4d25-bb6a-11c092f773d8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "650ddd14-eeda-4b8a-a331-1888a6aaf2bb",
                    "name": "credentials_issue:options.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fc36d5d8-9d87-4725-ada4-a6a0a260b20d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "18633374-44e0-45cc-9a59-42e42e536ac9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3841582f-002e-4812-a492-63bc8589c9da",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type is a required property",
                            "    delete req.options.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "ab1894c1-0434-450c-96cf-a5325a7288ea"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2af18a22-7e30-4be7-82bf-193f509ed03a",
                    "name": "credentials_issue:options.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7503bae4-6d46-4e5e-8c72-562c528edcb8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4f3f7558-3b77-482c-b0e4-291ec859e57f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "573c0fa1-bc06-47ee-b4ae-393059c39fdf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not array",
                            "    req.options.type = [\"Ed25519Signature2018\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "c253fad3-3b3f-40de-8911-149132f63a8d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fb13da65-fd37-4029-8a2f-5469c38ad787",
                    "name": "credentials_issue:options.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7bd6dc55-5e85-4a8b-a67c-edce88806ae4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "300f6d6d-54b0-4299-8db0-ecff606eff9e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7c48b406-01d5-4c63-9147-8cbbe81d9c81",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not boolean",
                            "    req.options.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "6e1b99f6-4a66-4335-842e-80532af12bd0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7515f31e-fb90-4b80-98f0-99fd74786cdf",
                    "name": "credentials_issue:options.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ce0a2aa9-ec9f-4bf2-9b15-1349392d8236",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "026b32cc-bf0d-403b-82f9-9934ea310aa0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b123d920-27a5-4236-8acd-f95960c5d388",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not integer",
                            "    req.options.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "657d7ac7-0e48-4998-9fdd-154de3324dbc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5305da44-0323-4d49-a5a9-c83973452190",
                    "name": "credentials_issue:options.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6ee893a5-a61d-474b-bd45-0da061aab4e2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3df4d83d-360a-48f6-85c8-d5593a46c07b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b80f26f9-fa25-4a35-a595-d2630ed936ae",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not null",
                            "    req.options.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "0d8b9cab-8ccf-4ce2-826c-77a48541b20f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f95a60b1-ed85-44bd-a37a-fe481a74b3d6",
                    "name": "credentials_issue:options.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1500686c-cf6b-41e3-9e74-a600ab997835",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3c98b22c-55be-46e2-ad25-4f0b1d58cb01"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b2aad44f-62ae-4f2d-89dc-73d54796a145",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not object",
                            "    req.options.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "1367f7e9-83f4-4361-a778-fb6af50a3930"
                        }
                      }
                    ]
                  },
                  {
                    "id": "899f4336-9e4e-4d02-b406-980824dc1aee",
                    "name": "credentials_issue:options.type:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b76d2f7c-478d-4b50-ba9e-3afdad1c863b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "00f063ba-2e1c-48d8-89c4-746c59b5edc7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6429c674-269f-4333-b85f-3fd63abf4d94",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be one of the valid values",
                            "    req.options.type = \"invalid value\";",
                            "}));"
                          ],
                          "_lastExecutionId": "73fa5d62-9bab-4a96-9d71-d66673a0aaf2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "27353e5a-04e1-40da-b15a-9233a0721e4d",
                    "name": "credentials_issue:options.created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f0d8aea6-42ce-4374-b2fc-6741ec52738b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f93b50be-bc57-457c-90d7-eaa86e9b733e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "29d59196-1bc1-4d01-a310-01084b966415",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not array",
                            "    req.options.created = [pm.variables.get(\"created\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "26a147a3-92e6-4191-83da-fe8e40a98122"
                        }
                      }
                    ]
                  },
                  {
                    "id": "18bf2038-d930-4b8d-b5c4-6e99ea1f443e",
                    "name": "credentials_issue:options.created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2c69689c-a6c0-4aeb-b10b-21f21f04d8ef",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0315b15b-a4c2-477b-833c-9afd7891ff51"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cea4b68d-3bac-4135-ac7c-f70ee98f86b3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not boolean",
                            "    req.options.created = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "b6349ea4-ea2e-4314-9846-a63827d22ce3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1b81b3d0-59ac-4428-9fb2-3b7146108262",
                    "name": "credentials_issue:options.created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f47d63db-721d-4120-bd02-1afb8912c6fe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4cbea294-1f3d-4d10-a4e4-eb74ab921553"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1cce0b0a-8a3d-441d-a61b-d55b79b39471",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not integer",
                            "    req.options.created = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "436af112-1a3e-4d6d-b97f-21036f90c139"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ef6be9e6-4f9b-4108-8fd7-85c339c38721",
                    "name": "credentials_issue:options.created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c6e57145-730f-4aca-bf98-49f6e8147881",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ef9f4380-bec6-427f-9ef6-6bc105618f91"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "39d47e2e-c11f-49fc-b591-6ffc44851bdd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not null",
                            "    req.options.created = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "8f81207a-1d6f-41e3-bdef-856d2c2df864"
                        }
                      }
                    ]
                  },
                  {
                    "id": "243ca6cf-b4f9-40d1-b13a-652410d7100c",
                    "name": "credentials_issue:options.created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "641b5620-237e-449c-9b0a-bf836380b989",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d93c2a19-8a59-43f7-9419-c35223476141"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7f5685f4-5ff2-4b91-90aa-5c15973d426e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not object",
                            "    req.options.created = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "604a37c9-f9a6-441c-bf98-3aaa88c7b06d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8acd20ab-64b0-4b5d-8574-6f5ec0a67c58",
                    "name": "credentials_issue:options.created:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "55f33e93-0c75-4e7f-bf2f-8929b7e82f74",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "42bcc843-fe49-4534-a7af-745b18db71ab"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cc50f979-90e5-4519-b94f-ad7fb3a053f1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be a valid XML date time string",
                            "    req.options.created = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "91a93e4e-241d-4de7-bb14-080e3c223963"
                        }
                      }
                    ]
                  },
                  {
                    "id": "977d46b6-0db8-42d2-9a15-ffe4e005d796",
                    "name": "credentials_issue:options.credentialStatus:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a1f1c617-46b9-433b-9062-1494281a59c1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "001ee274-f962-4656-8911-61c50daf4fbd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8b3f424e-50ee-45e3-aa0c-386e5996803f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not array",
                            "    req.options.credentialStatus = [\"StatusList2021Entry\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "dd2030c1-13e1-4bc8-ba49-a6282eda48b0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2a0077c4-1dc0-4f90-bc4f-afe33ff072f2",
                    "name": "credentials_issue:options.credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "db4d3315-3349-43a5-916d-b46ea5cd7eed",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2912518a-f512-4f37-afbc-828bedfc10ed"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "76833463-e65c-4639-9127-0aac4eb80fae",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not boolean",
                            "    req.options.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "6a6533a8-6050-4181-97ec-e5e71bd50309"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e05dd348-3f1e-4260-8503-35160c373df5",
                    "name": "credentials_issue:options.credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e6492aae-2046-464e-8880-4ccc8612b486",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "399c94e0-d13d-4d5a-a9ab-d288e7fe7967"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fba85428-b334-4247-85ac-9397230b6ab5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not integer",
                            "    req.options.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "054de4be-01b9-41d1-a465-0ac2fb21bdf8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a52c3919-a20b-4dfe-bece-73d42eed6579",
                    "name": "credentials_issue:options.credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8bd0e49a-5700-4dd5-ab0a-fc5fb58e02b5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "773d2f4b-395e-4c89-bc11-da2366cb144b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e5a72df9-2eb2-45f2-af77-bc492512cef4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not null",
                            "    req.options.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "5196038f-06a9-495e-8d2e-e5d6af032b21"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d01a0ab9-1635-4030-bc13-721988976dd1",
                    "name": "credentials_issue:options.credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a1306303-0b19-423f-b49c-c012eca4ee7b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a7b87521-c3e4-4046-a7ff-81947e1506b4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a7ac524c-e3ef-40a2-bb6d-b080878213a3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not string",
                            "    req.options.credentialStatus = \"StatusList2021Entry\";",
                            "}));"
                          ],
                          "_lastExecutionId": "15f971ac-a752-4b85-b980-909173f064f9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cc29fcd3-bfa5-46c1-8ff9-2186d44a27b3",
                    "name": "credentials_issue:options.credentialStatus.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "18a907bc-bf29-4ac0-8577-cb8a3d0ded54",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e3223496-2bde-4308-854b-6280cf2ce9f5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2d29c9cb-3de3-4376-93a2-1f87784841d5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must contain \"type\" when present    ",
                            "    req.options.credentialStatus = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "ac9e3694-ea77-48da-aaf5-33210aae218a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b8106a25-55a6-4fdc-b4ae-e86ca2107f7e",
                    "name": "credentials_issue:options.credentialStatus.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "80d98f35-e729-4b79-8352-17f61ddd2d85",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5641af66-0421-42d6-8f48-cb207dbeac08"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b08f7fcc-f718-4c3d-aaf5-e627305aa59c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not array",
                            "    req.options.credentialStatus = {\"type\": [\"StatusList2021Entry\"]};",
                            "}));"
                          ],
                          "_lastExecutionId": "4910acd4-a4c0-4523-9fe7-b89bf5b78cf4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4702ab2e-f8f2-4e05-bf3c-6efac18afc0b",
                    "name": "credentials_issue:options.credentialStatus.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a8550761-353f-4403-be41-e995fa2a22bd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "55ebb19f-2d68-4062-ba21-c97370e76f96"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c6b7f6e8-9031-4725-9c9b-dd01ee47c67a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not boolean",
                            "    req.options.credentialStatus = {\"type\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "729cf5a7-f2c1-405a-9a76-3db8cea30089"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fbc92c39-7feb-4333-897a-d8feaa031d5f",
                    "name": "credentials_issue:options.credentialStatus.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ef73914b-08be-425a-afdb-840adebb8ba5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "232c0271-5c01-4f32-b412-576f18c1a323"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "51767b51-0d51-4962-9ae2-3444249bf01b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not integer",
                            "    req.options.credentialStatus = {\"type\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "7c7c7ec3-df09-4c9c-aeaf-67c53518a567"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a8aad83a-95b2-4f48-85dd-b5771c0f41fc",
                    "name": "credentials_issue:options.credentialStatus.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d1165cf8-82c2-4fb4-b201-856c61a2ef9f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "507bc3eb-826c-4aac-a5f1-5166fae0c097"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7329db5f-7e6a-43a7-9eea-f103a993456f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not null",
                            "    req.options.credentialStatus = {\"type\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "580c61d6-af81-4eb5-9d66-f8e14198e40f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eb91a7ab-4935-407f-bba5-fb33051e0b33",
                    "name": "credentials_issue:options.credentialStatus.type:null Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "91a966f4-4fe7-4258-bf0d-80de1d8d7a6f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6d12a607-84d7-4f1d-acff-b6a8819b8d86"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "00b34db6-ec6e-40f8-8dd2-4641e64cbf2f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not object",
                            "    req.options.credentialStatus = {\"type\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "1b6037c2-7128-4981-a8f9-9807942e13ad"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5f064f14-6ad3-488d-9022-04a6f4113707",
                    "name": "credentials_issue:options.credentialStatus.type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d507fee2-1bb4-41c7-a3b0-8c685b02c8d2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "d32baf65-8e5a-49f7-9aee-ac8b9bde74aa"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9b5c7a28-88c2-4e0e-8a17-8b470116f3de",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be a valid value",
                            "    req.options.credentialStatus = {\"type\": \"invalid value\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "6ddf24be-cd07-401e-9025-d6f9863d7102"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "d3039cc9-4bc4-4e44-9cbc-d3c77409a864",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "6ebfdb47-b2ec-4fa3-b967-b4556ee09e22",
                    "name": "credentials_issue:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "029018de-eedf-4d6d-91bb-3512ef2c2e1a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "6c175e3a-a5f5-49b6-a386-deb73b2ef59e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dfa7c631-e8b1-4f1d-944d-5b8ef74e479b",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "883abf57-2b8c-42c1-8289-60ed0fdd09c7"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "12e8f584-af9c-4740-83ce-6c234c467946",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "8f073c16-fe43-4b41-8472-8939f8f2a3de"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "0b384b60-6508-4a3f-bef9-45e5c78485b7",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "824e4621-7a03-493f-a07e-958cfae7bb7a"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "4edb303a-b0ee-43ab-89da-edda31d32b75",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "a493a659-bbfe-43e6-a26f-50ae1a55d6e1"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "386de0b3-9027-4205-b5f0-870d643bb774",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "db2d3913-7dfa-491f-8643-09ac2cdced6f"
                }
              }
            ]
          },
          {
            "id": "a24c9afe-bd7e-456c-8ccd-f86848452d98",
            "name": "Positive Testing",
            "item": [
              {
                "id": "2e6b38d2-132a-4a2b-90b2-8abd95dd5acc",
                "name": "Duplicate Keys",
                "item": [
                  {
                    "id": "534f046b-e8ad-4f7c-b0e4-9414c672ab07",
                    "name": "credentials_issue.credential.issuer:dup",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"credential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"issuer\": \"{{issuer}}-ignored\",\n        \"issuer\": \"{{issuer}}\",\n        \"issuanceDate\": \"{{issuanceDate}}\",\n        \"credentialSubject\": {\"foo\": \"bar\"}\n    },\n    \"options\": {\n        \"type\": \"Ed25519Signature2018\"\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "text"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "71520852-e8f9-450d-8b41-ae7585aaf78c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 201\", function () {",
                            " pm.response.to.have.status(201);",
                            "});",
                            "",
                            "pm.test(\"response issuer matches request credential.issuer\", function() {",
                            " const { issuer } = pm.response.json().verifiableCredential;",
                            " pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "ca1dd6d3-7a53-496e-8f2f-c6cfe1fdadb5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b7f62073-b4ef-4251-86f3-4fc36a21a9d0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "859beb44-b826-4c61-b75e-b3bf70498f49"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "b640a2dd-a8ae-4483-a4a3-c200db0828e5",
                "name": "credentials_issue",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "673c149a-06c0-4e1b-a91f-c22b26c64a2f",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        "});",
                        "",
                        "pm.test(\"response issuanceDate matches request credential.issuanceDate\", function() {",
                        " const { issuanceDate } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuanceDate).to.equal(pm.variables.get(\"issuanceDate\"))",
                        "});",
                        "",
                        "pm.test(\"response proof.created is close to 'now'\", function() {",
                        " const { proof } = pm.response.json().verifiableCredential;",
                        " const delta = Math.abs(Date.parse(proof.created) - Date.now());",
                        " const tenSecondsInMs = 10000;",
                        " pm.expect(delta).to.be.lessThan(tenSecondsInMs);",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "3f7d9188-91fc-4ae0-a7dd-39b396f1ea6e"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "ad24147f-fa79-4eb3-9548-72fcc5406347",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // noop",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "e55b50bf-e2a1-470d-ab8a-ac6490ce6bad"
                    }
                  }
                ]
              },
              {
                "id": "494f5932-7eb8-43f5-965d-edef08643e80",
                "name": "credentials_issue:credential.opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "3589f1a8-cd66-4043-8434-668b6f61d7aa",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verifiableCredential.id matches request credential.id\", function() {",
                        " const { id } = pm.response.json().verifiableCredential.id;",
                        " pm.expect(id).to.equal(pm.variables.get(\"id\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "f92192d2-2682-46dd-aad1-42945e79a493"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "96ff1149-71cc-494f-bb72-8b344612655e",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.credential.id = pm.variables.get(\"credentialId\");",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "f84a5aad-c502-4a91-8336-cda765f1a504"
                    }
                  }
                ]
              },
              {
                "id": "c00d809b-4280-428e-a203-58364eab9a37",
                "name": "credentials_issue:credential:alt.issuer.object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "53f787f7-bab0-4e69-aed8-ffe658596149",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer.id\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " // Implementations may reduce object with just \"id\" property to a bare string",
                        " if (typeof issuer === 'string') {",
                        "  pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        " } else {",
                        "  pm.expect(issuer.id).to.equal(pm.variables.get(\"issuer\"))",
                        " }",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "e5231a67-481d-44c1-bc79-ebe9957064c5"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "8268659d-13a8-44e7-83cf-858a2eba6047",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.issuer can be an object with required 'id' element",
                        "    req.credential.issuer = {\"id\": pm.variables.get(\"issuer\") };",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "ebfa2447-4798-4d5d-9c34-152eef92bfab"
                    }
                  }
                ]
              },
              {
                "id": "8128ff3e-84c7-4648-beec-25ff17b441a9",
                "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "90cf9708-9c51-4ac9-936a-11d8640831a4",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject.id matches request credential.credentialSubject.id\", function() {",
                        " const { credentialSubject } = pm.response.json().verifiableCredential;",
                        " pm.expect(credentialSubject.id).to.equal(pm.variables.get(\"credentialSubject\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "636971a5-dcdc-44d8-a9fa-9e0c02c3d97c"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "bcdeba62-4378-4e79-9507-20460a8339a9",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.credentialSubject can be an object with optional 'id' element",
                        "    req.credential.credentialSubject = {\"id\": pm.variables.get(\"credentialSubject\") };",
                        "}));"
                      ],
                      "_lastExecutionId": "0dcf7da8-bb09-4ac7-89c3-756a6718391f"
                    }
                  }
                ]
              },
              {
                "id": "7f63ddac-41b8-485d-a555-cc2df1b55f2e",
                "name": "credentials_issue:options:opt.created",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "865b42ab-3972-4c58-836b-be1d2844b7be",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response proof.created matches request options.created\", function() {",
                        " const { created } = pm.response.json().verifiableCredential.proof;",
                        " pm.expect(created).to.equal(pm.variables.get(\"created\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "2dfc2ef2-3a77-4fcf-af31-c26a348eb307"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "e293cd0e-82d1-40c3-8184-f4ebc557a05b",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.options.created = pm.variables.get(\"created\");",
                        "}));"
                      ],
                      "_lastExecutionId": "c1c2ae2f-4924-4587-a49d-036ea720c19f"
                    }
                  }
                ]
              },
              {
                "id": "e4dab461-79f8-470e-805e-4e8864ca6582",
                "name": "credentials_issue:options:opt.credentialStatus",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "49c7e0c3-d6cf-44d3-9344-517c69bb87bd",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "52419c51-4020-4ed6-bacf-9a53de1625d2"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "4d97fc88-c17c-47b6-8cdf-0f333043c299",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // options.credentialStatus can be an optional object",
                        "    req.options.credentialStatus = {\"type\": \"StatusList2021Entry\"};",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "0675cdc5-43a7-4f46-a25a-c5490854054c"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "69d85b7d-60b7-409f-b97c-7e4f55ba8e7d",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "45a07e0a-d2af-4913-881b-4643562f4afa"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "e74bebc1-516f-4231-9fd9-09c776618fe3",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "bddc9519-23c3-400f-a524-a90ec5f6c543"
                }
              }
            ]
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "0291c9f0-1602-4327-ba46-f9ebacfe16a4",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "pm.variables.set(\"credentialSubject\", \"did:example:123\")",
                "pm.variables.set(\"issuanceDate\", \"2006-01-02T15:04:05Z\");",
                "pm.variables.set(\"issuer\", pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "pm.variables.set(\"created\", \"2006-01-02T15:04:05Z\");",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credential\": {",
                "        \"@context\": [",
                "            \"https://www.w3.org/2018/credentials/v1\",",
                "            \"https://w3id.org/traceability/v1\"",
                "        ],",
                "        \"type\": [",
                "            \"VerifiableCredential\"",
                "        ],",
                "        \"issuer\": pm.variables.get(\"issuer\"),",
                "        \"issuanceDate\": pm.variables.get(\"issuanceDate\"),",
                "        \"credentialSubject\": {\"foo\": \"bar\"}",
                "    },",
                "    \"options\": {",
                "        \"type\": \"Ed25519Signature2018\"",
                "    }",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};",
                ""
              ],
              "_lastExecutionId": "70c83f0a-1422-4eee-8d11-e5192802917e"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "bacfe129-dd42-4de8-bb39-76f170fc259e",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "609e56d8-94aa-4e7f-8017-0231ff87ae8c"
            }
          }
        ]
      },
      {
        "id": "982389ea-0132-4a54-8b62-69d05adbdfbb",
        "name": "Credentials - Update Status",
        "item": [
          {
            "id": "7261cfc4-2b00-43a2-a6d5-9ac84177008b",
            "name": "Negative Testing",
            "item": [
              {
                "id": "a6efa9c6-7ba6-45a1-a890-c6e367e6243f",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "ace29894-273c-48e1-8a75-fb6bbea3bb1b",
                    "name": "credentials_status:credentialId:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e516daf6-ea44-4366-8864-544f52f51c3f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a0fffb87-f7ac-4d42-8602-6566c2ded1a9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f209fe4a-dbd0-44e7-ab51-ea27e9abf260",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId is a required property",
                            "    delete req.credentialId;",
                            "}));"
                          ],
                          "_lastExecutionId": "6c8db9d5-0212-40fb-9fbd-218cbe220cba"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b69e11a6-c8fb-45e3-823b-56532d49f315",
                    "name": "credentials_status:credentialId:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "118f532b-9ada-4477-a1f2-3fd1fa10ef1d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9c04efcb-16c1-4a8f-86fc-0a7242f148cd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bb65a4fc-f92e-4acf-bf6c-f957b45bd07a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not array",
                            "    req.credentialId = [pm.variables.get(\"credentialId\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "13de1355-9f26-450e-a64d-7e4ea0f55045"
                        }
                      }
                    ]
                  },
                  {
                    "id": "83f82512-5a22-415a-857a-7dd84ea10de2",
                    "name": "credentials_status:credentialId:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d7d0a9a1-c22f-4d90-87b9-c79736ae47b5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ca88cc1a-7c48-4d83-9084-bcf1bda922ed"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "17065ed7-5a67-430e-8ea1-5c0c9549211d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not boolean",
                            "    req.credentialId = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "88fc283b-157f-4860-a1e5-148003334410"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bdf40645-5f92-4074-bf6b-106a83a702a6",
                    "name": "credentials_status:credentialId:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "25e64efc-db4d-491c-8900-f0f97d524f37",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c317d906-09aa-410b-a4fd-4268bf390ec1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ad5e8729-194c-4b5b-93a4-d0af898b273c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not integer",
                            "    req.credentialId = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "e0cbbbe3-5d43-4ec6-981a-5faba8abebe9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "be6424c5-48ec-4d50-a8c2-ec2562335252",
                    "name": "credentials_status:credentialId:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9ab73a72-8cc0-4e23-9e9c-2161afb5ca10",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a25761f8-274c-4af4-8742-617a6e7ed1b7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a6f2aa18-b858-411d-8419-95ff8d8f1450",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not null",
                            "    req.credentialId = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "18cdfaaa-3552-44dd-b8ef-0caf5b3549a8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cd7bd8e7-7028-4941-925b-8a36eb13c261",
                    "name": "credentials_status:credentialId:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a7097cac-1a75-4f63-9e91-1ba441a7370c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "945bf457-9635-4417-b8b2-2a273cbc395e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "62abfea9-4b9c-4a04-a55e-f4a3d8d98785",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not object",
                            "    req.credentialId = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "91626f06-9b54-4683-93cb-43aeebc09c1b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a91f3c4d-821d-4001-9cb6-dfa6d3108a5e",
                    "name": "credentials_status:credentialStatus:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "55d5da8c-0bfc-44ca-892f-49d28e9e4164",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fff3d75a-90c1-41fb-ad0b-7915bdc70ca0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "62b10c17-3dca-4c49-8537-904194344391",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus is a required property",
                            "    delete req.credentialStatus;",
                            "}));"
                          ],
                          "_lastExecutionId": "114a1ace-93c9-48b7-9377-b162621219ca"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d6485478-7e2f-42fd-8028-7391a6a54f3f",
                    "name": "credentials_status:credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e3cfb694-a8ec-4f64-855f-10b8f214b142",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9dac3384-ccb9-41ff-8c10-f3defc3743f3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5c86222f-229c-4936-8264-5f483b4a1ad6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not boolean",
                            "    req.credentialstatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "c2808f94-3895-42b4-9eaf-b4e0aa93dac4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f6cec94d-98c2-49dc-9677-137cd967accf",
                    "name": "credentials_status:credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f219b9b2-ed88-495f-a7e5-e1c51e87f7eb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b7518e65-48ad-4cc8-9c6a-2ac135e3fde4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f7204354-0750-464d-9f88-57ea63d0b347",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not integer",
                            "    req.credentialstatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "449cc103-6064-4d41-87b0-a9e31e69cba3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a1956d27-4e88-4d9a-bae1-08e1069d146c",
                    "name": "credentials_status:credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2c76157e-4686-4420-b96c-f37541fa14a6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "122ed0e0-4309-4bbd-b8ad-aebd41bcaaa1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e1bf2522-5608-431e-9a55-654d04aef7ff",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not null",
                            "    req.credentialstatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "bd4e1bce-8ab1-479c-9b46-158735c5ef26"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fb9a8e14-2ed7-43ec-8031-0192ab76eb8c",
                    "name": "credentials_status:credentialStatus:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "74a80d76-7c0c-4276-8283-614c6d331cad",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f3a17e6c-491d-4029-b631-7803c09c7f95"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "88483b6f-3f1f-47b6-b8ec-bb812c65f4c1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not object",
                            "    req.credentialstatus = {",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"0\"",
                            "    };",
                            "}));"
                          ],
                          "_lastExecutionId": "7aa62235-23af-46e5-97a7-b5e80e60c6f6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f7e3ff68-4a0a-4350-b071-379a49c54ed2",
                    "name": "credentials_status:credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8a0394bc-8d34-43d3-be17-176222d2b545",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "31400fb7-15bc-485f-9a3f-7e1841afc5bb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "27477471-fb1f-4ed3-b09c-40cd77baafec",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not string",
                            "    req.credentialstatus = \"RevocationList2020Status\";",
                            "}));"
                          ],
                          "_lastExecutionId": "815f80ce-10b4-4c07-ae33-63053d037b4f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c7bf1ad8-a113-4c9e-b808-e054e8339284",
                    "name": "credentials_status:credentialStatus:too_long",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "34176477-fb7e-4b7a-a45f-977874fcbf1b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "da4ed479-772d-48b3-ba24-7f29f0ae6b1c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "71dcd210-e39e-405f-be34-5c31fb0926db",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus can only have zero or one elements.",
                            "    req.credentialstatus = [",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"0\",",
                            "        },",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"1\",",
                            "        }",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "bfc7169b-2864-4961-a652-aeda198018d7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d8444127-969c-4768-8c68-b4d442f342f1",
                    "name": "credentials_status:credentialStatus:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d8a3bda3-2bb5-4775-962f-76cc6c1605b7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "067c8998-bf1c-4ab6-aac9-37eab210ca28"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "63d031d8-4ed0-4aa7-a815-62bd4a0bdd19",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not array",
                            "    req.credentialstatus = [[]];",
                            "}));"
                          ],
                          "_lastExecutionId": "3986c8a6-46c9-4e9a-9b04-803721b6e156"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7b4369aa-beac-4b2b-997c-70247017439b",
                    "name": "credentials_status:credentialStatus:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "65719678-75c5-409d-99eb-9c4ea88f457c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "811a1a46-f5cd-4350-981d-acefcd30f6c7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "734b8ff2-17f7-4c00-91e8-6d0ce840bafd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not boolean",
                            "    req.credentialstatus = [false];",
                            "}));"
                          ],
                          "_lastExecutionId": "1cdc249b-9665-4d12-9164-d699dd196876"
                        }
                      }
                    ]
                  },
                  {
                    "id": "77f86d18-ee6a-4afa-baa2-0de9d55fefc9",
                    "name": "credentials_status:credentialStatus:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "33518fbd-5214-48ad-b72a-48b89d9bf0b7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d5c6addb-b36d-4003-996f-550d20fb001a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "562cf641-55ec-4c10-b1b9-ba9c50b4e370",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not integer",
                            "    req.credentialstatus = [42];",
                            "}));"
                          ],
                          "_lastExecutionId": "dd8491d8-8db4-49e4-986e-7afc0166ca71"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2ae6f5a7-409a-4bd7-be27-fa2986092820",
                    "name": "credentials_status:credentialStatus:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "72252a5e-022d-41e8-8c95-2ce588b276ef",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "255f1c3c-1336-43a2-8a3d-9c801035758a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0a6e87a0-57dc-4992-bc76-0a1aca220e17",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not null",
                            "    req.credentialstatus = [null];",
                            "}));"
                          ],
                          "_lastExecutionId": "8ba3f6f9-7861-4e40-bd05-6606fe59712a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1235492c-fc8c-45a0-a4d9-b5822892744c",
                    "name": "credentials_status:credentialStatus:item:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "71579dd1-b5a7-41db-9cc0-8b82e562da98",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "72e4f7bf-6e1b-42b1-8e8e-db3d35a1d60f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "778d36d4-4cd3-4ba4-beae-e4d0cdffdd2b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not string",
                            "    req.credentialstatus = [\"RevocationList2020Status\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "6032c446-0d15-4362-a0d1-183e7fed4779"
                        }
                      }
                    ]
                  },
                  {
                    "id": "df076611-75fb-4033-8d78-40ceedc8e74d",
                    "name": "credentials_status:credentialStatus:item:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7327dfc6-c677-4a89-8035-b30eb0793ac8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6704354f-9cc7-451c-95d7-9399a5adea69"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "607f36af-6fc7-4ca4-b8ce-2295d04c6a3a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type is a required property",
                            "    req.credentialstatus = [{",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "bc90069c-0b34-4776-849f-bdffe91e42e3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d8be6122-5c4c-40a7-8d69-75dccf04916a",
                    "name": "credentials_status:credentialStatus:item:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ba5abf4d-cd08-49e3-a54d-81f8a5f3bd1d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d3c3efd1-86a2-450c-85ae-20d8e07102f6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d6ac039b-717c-4985-9e91-ddcc2b8b750f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": [\"RevocationList2020Status\"],",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "a3195d01-6756-4967-b624-b50eb246a4c0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "15ef7d71-c068-4317-b0fe-8039efe646ef",
                    "name": "credentials_status:credentialStatus:item:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "57e9b9c8-5ef8-47cc-a6eb-43027b5ddfe2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bf3f2ef0-fdc5-45a6-b88f-b40cbc366eaf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "243b82b3-fd6f-4ae2-9d4c-64d77ddd9fed",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": false,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "ad6377ab-7ef4-4bcb-9c4f-c78954b3ec89"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b9f0540e-3591-4601-841e-94fd55ecbb15",
                    "name": "credentials_status:credentialStatus:item:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b7e27725-c196-4ef3-b10e-96ae6fa9e4e2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "483e03fa-09a3-4c9c-b989-5b23c70b152c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "85bc9ca4-4db9-4839-8fd3-bfb5ba27c9e3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": 42,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "e247795f-0dfa-48f1-a551-8c573cd3899e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b15c4cb6-fe9f-4e71-a601-0f8daff00c6b",
                    "name": "credentials_status:credentialStatus:item:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "910a1719-2b6b-455b-811b-6222e06faf6d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a096a4fe-933f-4bc9-8e08-3b1358af757c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "80df120b-4fd6-46a2-8db8-e3a059e4c985",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": null,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "681b0227-b70c-43f2-9749-70434f6e1d78"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c119788b-eb1b-4a48-a61c-e17d8b4c58ae",
                    "name": "credentials_status:credentialStatus:item:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a7152ba9-9fe7-4fec-bd84-202c3544288e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "59842ae6-2990-483d-b001-b80123cc67c9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "63faaeee-bf0c-4782-9a45-738bc5b05eda",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": {},",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "760ae229-3396-429a-9d58-2da7eb13caec"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3860f934-c8d8-469f-8531-c212c7701821",
                    "name": "credentials_status:credentialStatus:item:type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0a316a5d-607f-4067-992b-3dd4cb60c789",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "92a42a27-0d1e-432e-a8f3-0be7131fe462"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4e127e89-624e-49e9-8d92-052ba01545fc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"invalid value\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "a0621f12-599b-4db7-a5d0-653db242a95e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c74576f8-ce53-4e49-b59d-c0aa7973483e",
                    "name": "credentials_status:credentialStatus:item:status:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "87c30b98-8f01-45fc-b2da-a0a80c6654ee",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "28245732-f461-4954-ba68-d9c7f1182043"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "655daaf1-8a34-4a49-b49a-9afa9b4a434f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "4b3103c4-5002-4f56-ab35-cbaa1e641038"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f445b034-cb7e-4474-bea0-88233e931a4d",
                    "name": "credentials_status:credentialStatus:item:status:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "aa44f5b2-ac37-4835-97c8-18be18f8d740",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3cd57cca-86e9-4225-a0e8-42e13ef5ad3a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "144f5c85-35de-48a5-8034-11657a6b428a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": [\"0\"],",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "3c2c0ed5-7576-4646-b547-e745bdebf4e7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6a6c8020-f5cb-4668-87e6-f98540a4bc25",
                    "name": "credentials_status:credentialStatus:item:status:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a99fa9d4-d51d-4463-83e2-36317c138293",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "95a61fae-1ffb-411f-b233-da76dfd6463a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3bcd7371-f572-4eb0-9bb2-68b253833f3b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": false,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "3260c30e-8071-4df1-9d0f-5d382d20063a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "281df9e7-fae6-4b29-9a41-d7e843a0d387",
                    "name": "credentials_status:credentialStatus:item:status:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6691b460-e821-4897-b27c-8767238f8ae8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "79e9d424-d895-4c2d-a8ed-76de250fe6b0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dbd3e788-4a29-4283-9549-930d0b122cd2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": 1,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "2a8513e9-3004-4899-935d-8d245cca5620"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d1072f36-c7e2-46ff-b17a-cb93c578f8a2",
                    "name": "credentials_status:credentialStatus:item:status:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d02db66c-d172-4fa0-a68c-26d469e18f2c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "63a56f08-33de-49b1-8ffe-80b3b93ef96f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bf96e9ec-7c55-406e-ac77-83290fbd7acc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": null,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "d78d4229-0ddb-4c89-80c2-18a0624315a3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8eff53e7-b951-40e2-a5c6-d6ae52837ebb",
                    "name": "credentials_status:credentialStatus:item:status:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "aaaacfca-e722-41ac-8ab1-ee43674ca026",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fbca81a6-c3a2-4c8d-add4-58fcbd8d20cf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "992c4cbd-2ff0-46b7-9ef3-c0b48123446b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": {},",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "b03bcc88-28d0-447c-a846-09f9a65198f1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dd1ad4eb-2377-4117-bff7-4ca7233529a6",
                    "name": "credentials_status:credentialStatus:item:status:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e0cd4152-fde5-4144-b82d-cf0ef4acbb3c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "10d9071b-f217-476e-8359-a06e022ace07"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ab596035-7026-47a5-b437-43c2faeb9355",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"invalid value\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "b371cbab-86c6-4e18-bb44-469b040ca066"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "27eb1897-c90a-4f74-86ef-4c40da4d6442",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "76ecc629-c60f-4aa4-9c21-2fbd0154cacc",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7a1abd52-f870-4208-ad33-0c2c4e9da6c9",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "a6fb1057-721c-40ab-9f74-44c26d34cd52"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b052a2a2-c6fe-434e-bd4f-9f731d3b0e40",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "cddf41cd-8ab1-498a-adc0-c5d40b0077b2"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "75397dc4-0ab3-41b2-8f32-e517aaa31aa3",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "14b6e84a-80f9-4e1e-a78c-fa3b3837a7bd"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "85d149c5-5a31-4f0b-bfe8-838537756652",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "dbf4d7cc-ff96-46c5-8fb4-4e097d8f6be2"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "56db20ef-50d7-4ca7-b149-b072d47a4428",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credentialId\": pm.variables.get(\"credentialId\"),",
                "    \"credentialStatus\": [],",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "55647f3a-e8c3-4f67-84e0-f06de527797c"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "0b5cec2a-2baf-40dd-991c-547cb9603db4",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "4f9f3a75-7d82-4b38-9bb2-b82932b9cda8"
            }
          }
        ]
      },
      {
        "id": "f2aaa731-7bef-427b-b070-8682d283da29",
        "name": "Credentials - Update Status (StatusList2021)",
        "item": [
          {
            "id": "c8765dd3-f781-49aa-9af7-725e81ea071f",
            "name": "Negative Testing",
            "item": [
              {
                "id": "d331499f-b4d7-4696-ae09-7b1d6d8d5c90",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "68740232-7e2b-4919-a60e-2dcc02691994",
                    "name": "credentials_status:credentialId:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f5f8bbb2-a8b7-4ed3-a833-c3173129b694",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1a0c3423-ee9f-435d-904f-a611821d4f81"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f13d5af3-8fe4-49ff-b434-a805da6aeb96",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId is a required property",
                            "    delete req.credentialId;",
                            "}));"
                          ],
                          "_lastExecutionId": "ff3e02f6-4c4f-474b-a350-28b51c000fa1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "53707b82-e540-4a79-bca0-91abbab44dd2",
                    "name": "credentials_status:credentialId:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5a3260c8-504a-41b1-a1f6-ef187cfe0ad8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2a2e0ee6-73e9-4ae6-bab5-3707dfacac4c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ac56e035-2253-400e-8e29-46a8a8eaf116",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not array",
                            "    req.credentialId = [pm.variables.get(\"credentialId\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "3b6d35aa-8559-496c-9bf0-e5d7c754034b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "647c5f26-c5dc-4b99-9204-faed325dff30",
                    "name": "credentials_status:credentialId:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "35bf0559-0366-42c9-9038-a07a885e2a43",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "563926aa-dd04-464f-897e-08e81fc6bd76"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "99391ed6-28f5-47fe-b67c-cdd9bf1e2d07",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not boolean",
                            "    req.credentialId = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "5156639f-32bc-4e3d-91d5-99365e4bf440"
                        }
                      }
                    ]
                  },
                  {
                    "id": "24b92597-6eec-4c27-a823-d99844a58497",
                    "name": "credentials_status:credentialId:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "462880ae-cc38-44b7-8e07-555509f79d14",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fb63ce5a-3e72-4078-98dd-42819a296b0e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "50fb9491-6cd1-4c25-8da8-6de03d4fe5ae",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not integer",
                            "    req.credentialId = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "45444837-8ca8-471f-a859-f43668b26fec"
                        }
                      }
                    ]
                  },
                  {
                    "id": "88df71ba-0bdd-4319-91e3-5312fc6cea46",
                    "name": "credentials_status:credentialId:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5c9ad7e0-39be-4d09-abd9-d738b880be90",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4780c8e2-2264-43b0-a7e3-711157fe98af"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6c442fc0-3518-46ac-b3e0-d8c8cb141bd0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not null",
                            "    req.credentialId = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "30da8a16-94c7-4ea7-9db7-4dc2b9b9c60e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "03e93d9b-60ef-4756-b5cd-3acc5e776081",
                    "name": "credentials_status:credentialId:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b9784611-8dfc-44e6-b1eb-dcc44f31265d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6d77abdc-41f2-48fe-9329-2d90409d1972"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8c243be6-63e0-4985-aa74-49cc32f4ecac",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not object",
                            "    req.credentialId = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "0f6286e9-e16b-4ce9-bd52-8dd73b8ca31e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0883b22c-9892-4036-93c2-71c5afa76690",
                    "name": "credentials_status:credentialStatus:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2e855477-afe7-4aaf-92a1-7522717265f2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "93b009e0-eac7-4b8a-8c2a-5fed69690fc2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "949b7a4e-e336-4e70-94c0-c4b03dcd39b1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus is a required property",
                            "    delete req.credentialStatus;",
                            "}));"
                          ],
                          "_lastExecutionId": "6a38cc30-e991-475b-8d1c-766c4d9d40d9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "96b35b0d-17f8-464c-8d17-c43f55e0cd8f",
                    "name": "credentials_status:credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b0e0d062-3d14-4f4f-961b-49a0c5d9c9a2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9e441b64-2ebd-4005-97c2-1b53fdffde22"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dd0a4455-0d7d-41f2-9378-21b70b43547a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not boolean",
                            "    req.credentialstatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "71966170-eccb-49eb-9518-2d30dc289223"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d9b7b917-2a99-4cbf-bd6c-17267ee1632c",
                    "name": "credentials_status:credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "613ebdee-ba9c-415e-875b-33db81b4f378",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7852be76-4705-4ea3-817d-6c7c6837404e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "50801e63-3379-4341-a4ed-a0953f1b753e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not integer",
                            "    req.credentialstatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "9f3d32a0-54ea-4aa5-955a-1fcdbc738970"
                        }
                      }
                    ]
                  },
                  {
                    "id": "22a585e3-de21-47f3-a38c-95c83589f7c7",
                    "name": "credentials_status:credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "56d7df66-dc3f-4041-8164-48f317f06a36",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1329ffa0-8782-434c-8068-f589fd6c314a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "39d723fe-5785-4bd9-a7c7-70ebf11aba28",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not null",
                            "    req.credentialstatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "a8dd97d0-1141-4fab-83f3-c5f44b7a3eb4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fb6f2e3f-6f94-4d3b-8aae-4137a0002be9",
                    "name": "credentials_status:credentialStatus:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dad03081-1bdd-45d6-8473-bb39935ee7c9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "07fec513-b2b4-40c7-aa79-5111be3f02ea"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3852e51f-d349-43d9-af66-b1e64d107568",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not object",
                            "    req.credentialstatus = {",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"statusPurpose\": \"revocation\",",
                            "        \"status\": \"0\"",
                            "    };",
                            "}));"
                          ],
                          "_lastExecutionId": "f4c0b957-7b00-476b-b1fa-45d0a8f1e09c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b9dd4afd-860d-489a-b494-04e3d5ef1214",
                    "name": "credentials_status:credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cbb82383-76c5-4621-a206-57ea2b62a5fe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "37988da1-e59d-462b-897b-4eb9af49f3ce"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6e3d5569-9797-4a2d-b6f7-a97775919407",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not string",
                            "    req.credentialstatus = \"StatusList2021Entry\";",
                            "}));"
                          ],
                          "_lastExecutionId": "3476fdce-c42e-45a8-8774-5a8be8c5e3aa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a20824ce-6260-4574-b01c-bd8b4c0cf57d",
                    "name": "credentials_status:credentialStatus:too_long",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0706c637-5cca-45e4-bbf5-078825613d25",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8b378012-bb9b-4498-8fb9-c1a1e8707580"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "821a284a-372f-49d6-9f61-9794941ff08a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus can only have zero or one elements.",
                            "    req.credentialstatus = [",
                            "        {",
                            "            \"type\": \"StatusList2021Entry\",",
                            "            \"statusPurpose\": \"revocation\",",
                            "            \"status\": \"0\",",
                            "        },",
                            "        {",
                            "            \"type\": \"StatusList2021Entry\",",
                            "            \"statusPurpose\": \"revocation\",",
                            "            \"status\": \"1\",",
                            "        }",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "22ff09b9-12b4-40bb-9a00-3e19f61fcead"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9321cae1-63a0-4343-bdb1-4c6b9b6405da",
                    "name": "credentials_status:credentialStatus:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d72f1ac6-9cb1-4f32-9679-df9cf0836c47",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "242859eb-4ca9-4793-b44a-42273d96768b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c01b2561-ec5b-472c-8fe2-c37c7b4167a8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not array",
                            "    req.credentialstatus = [[]];",
                            "}));"
                          ],
                          "_lastExecutionId": "f55823e4-a05f-4497-a94b-e0fbba1d544d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "90aa4a69-99af-44ca-a65a-9f32fa457b2f",
                    "name": "credentials_status:credentialStatus:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "30b416f0-d549-4d5c-a999-a1b6fe1c39d0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "39276e28-d7c0-437e-bab5-8633e5940a60"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e70c34f4-d05d-46d2-aaa9-59776580a2e5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not boolean",
                            "    req.credentialstatus = [false];",
                            "}));"
                          ],
                          "_lastExecutionId": "b8334d6b-d535-4197-83f6-0c25aacc943e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "59611bfd-d92f-44f4-87ab-bc1ee2312d72",
                    "name": "credentials_status:credentialStatus:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3bcd02e1-dbca-47e9-9dac-6ba16dd2651e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c9c3c3e8-caad-4682-9413-16291b96508b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0264935b-7821-4c2f-95ec-064eb85245ca",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not integer",
                            "    req.credentialstatus = [42];",
                            "}));"
                          ],
                          "_lastExecutionId": "4be44fca-6312-4511-b075-696f48ff7edf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e6d5a657-69a4-425c-b2ca-99d26091998b",
                    "name": "credentials_status:credentialStatus:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b60ec6ae-5d53-4a69-85b6-fd88bd21b4bb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a9fe0dd9-e9f5-42e0-8f87-43f9074573de"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1d1ca421-7e0f-4867-85f0-8938338ce3c8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not null",
                            "    req.credentialstatus = [null];",
                            "}));"
                          ],
                          "_lastExecutionId": "a03b573d-f5a8-44a9-9a1d-a09377a310a3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b60ddb4b-9d91-480d-b166-c4d3903ccaea",
                    "name": "credentials_status:credentialStatus:item:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f5c113c9-2151-4008-80ac-21bd9672ba67",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "eea9f56d-c330-4322-80d7-3bbed668ad24"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0b6ea399-f000-48bb-a536-ace251e7485a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not string",
                            "    req.credentialstatus = [\"StatusList2021Entry\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "23b78e60-66d2-4bf9-9738-e641eab2a646"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7d2bf3f9-03cb-4a13-b8db-891f62239b9d",
                    "name": "credentials_status:credentialStatus:item:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8bebd19a-e364-430d-81a6-813db3085095",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ee6f0cd6-74fb-42c8-b322-57155eb04b9e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3e7f37e6-a599-4f63-b1eb-a393c3ddb226",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type is a required property",
                            "    req.credentialstatus = [{",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "10b8e4e2-591f-4e5a-aca5-ac6d2df5d3b2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1f5ca62c-d24c-4d23-a862-2c47b0b36152",
                    "name": "credentials_status:credentialStatus:item:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e29486d4-d112-402b-a148-f66996f9a764",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "132c73fe-e807-4f41-b123-229aa31c1345"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1d4aa4a0-17e4-41a3-b256-ae53c5d6f4e4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": [\"StatusList2021Entry\"],",
                            "        \"statusPurpose\": \"revocation\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "0158ddd9-2022-4ea7-bbb6-187117723230"
                        }
                      }
                    ]
                  },
                  {
                    "id": "18f51291-3562-423e-9e23-61ea532852c3",
                    "name": "credentials_status:credentialStatus:item:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f37464e2-8e1f-48bc-8654-aca4d4f8245d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d51bf850-a7ce-4463-80ae-90b0820e6c03"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "afc9a4bf-66da-406b-966c-6780d8fff981",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": false,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "c8511c19-7b8e-4def-a949-7b5fbcead7ba"
                        }
                      }
                    ]
                  },
                  {
                    "id": "69281bb4-3e02-40ff-ad8a-da632fd49bc0",
                    "name": "credentials_status:credentialStatus:item:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0d676521-39da-4271-b759-e416350122c1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "23ba7e7a-d7df-478d-99ee-b2076fcbc753"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3815b144-7d09-4e4d-9c12-35bcd99cf8f1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": 42,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "131f297d-981d-4517-b014-8d049b191dbc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4605bbe3-38ad-473f-b094-e97f0d39d74c",
                    "name": "credentials_status:credentialStatus:item:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ce9625ba-ad2c-453b-b072-e8bd473d2611",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d1077e59-8269-4fed-8631-95c69cec3607"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e4f269a9-1c88-4d00-b3df-924e49cecf70",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": null,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "26d47ca5-acd8-4b87-9764-60dc2371172a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "93561443-1ec9-4e50-a197-29454f99ef00",
                    "name": "credentials_status:credentialStatus:item:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a2cb8c64-bf36-4402-a162-b2b8ae0c9a17",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1c68b22d-3fcb-458c-9ca0-023a9937269b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3ee89ca1-6323-4f53-b2e5-e9fab6d4e007",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": {},",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "2bc36099-e8f9-4214-9c5d-ec48246fcf3b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a45f84ec-998e-4d48-8b5e-1d1b0e2d1926",
                    "name": "credentials_status:credentialStatus:item:type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "42bb0db7-ce1c-4e43-b5bb-4aa572a1cb82",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "05413bd0-7f34-454e-9096-6a62f652ea15"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2a5cf6cb-026a-402a-98a9-dfe47cf84e02",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"invalid value\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "2dc95b5d-9df7-463d-aeaf-7eb496487cdb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "27fa122f-c95f-4195-a86e-a3b6faa9189c",
                    "name": "credentials_status:credentialStatus:item:status:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "30a511f5-a585-4066-a841-4b4efd0449f8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9387e2dc-c27f-4a5e-aa6e-c3f891c6af5a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ce925145-79fd-4a39-ac28-5d75baaa6bba",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "92a508cd-2aaa-4105-98f4-53e19599b957"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6f87ae55-850f-428d-8659-9dd37828c0b8",
                    "name": "credentials_status:credentialStatus:item:status:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dfcd0e45-cafa-4159-9e03-911acdae36b1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b68482f2-3271-4e37-910e-83fa7015912c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f15dfde5-c88c-489e-94c5-a1232f30b35a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": [\"0\"],",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "22324d90-1e25-47d5-9cb5-f62c1c6eedea"
                        }
                      }
                    ]
                  },
                  {
                    "id": "59679fc1-43bf-434c-a1c7-d4de64a6a22e",
                    "name": "credentials_status:credentialStatus:item:status:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "80e7b61d-b43c-4c71-a66c-b42b5a168222",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cd2ee835-3a6b-4adf-903a-b51dcd67fde8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ca7f66e9-e291-465a-8e7a-68b91ac8f99a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": false,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "8a761253-9a82-43cd-8d5c-eae03aa8545d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e836cc18-1869-4d14-adf3-095b7ef77f19",
                    "name": "credentials_status:credentialStatus:item:status:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f3ec5f3f-f16b-43fb-ae05-3dca8208150b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "254e513f-7a64-4f52-85eb-05c9c080392a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "38d76e18-c905-4d0e-b82a-25c5ca9c4502",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": 1,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "f0298801-eb01-4775-b37a-af687a44717e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c47bf30a-32ae-4371-872d-0953ee295689",
                    "name": "credentials_status:credentialStatus:item:status:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d9fd0a28-bd16-4af3-9113-6044da6aa897",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "238e255d-d209-49f0-86e5-8ed959ae0ea4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d80336a7-8cbc-4e4b-b64d-b286e8c75639",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": null,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "1655e3bd-7af7-41d9-bed1-1a97ee4c9bcd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "085a8fa4-b8d5-4cd7-b5ff-d8864dfb4115",
                    "name": "credentials_status:credentialStatus:item:status:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d3aaf822-c1b9-42a6-9263-9e47b68611df",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4f1bbb57-87b7-48c7-9621-edec14581f79"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ceba7907-de0f-4e3c-a76f-5ab37254d5bf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": {},",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "63c02cd1-00dc-4790-9bee-ae3083c914b4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c2b5c16f-82c7-4223-b182-2ca8530af64c",
                    "name": "credentials_status:credentialStatus:item:purpose:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f1b1a6d8-10c6-4f60-8c4e-e457b6b92783",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f54ad3ad-d098-4ffb-86ad-ac683d147ec6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "307e1223-df80-48da-8cdb-46e45b02d95f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "5d33940b-9b1f-4ca2-9e31-6306b05860bb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f9a36d1c-d44f-4d0e-8036-f36099a8118c",
                    "name": "credentials_status:credentialStatus:item:purpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2514a634-695b-4bda-8481-6c66928f97fe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e1f699da-97f5-4a2d-92dd-3a60e77b944c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ad18065b-7166-4d84-982c-d2048f0b42ef",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": [\"revocation\"],",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "f0934258-3147-433c-9bdb-586d40d8ca50"
                        }
                      }
                    ]
                  },
                  {
                    "id": "360522c8-50ae-4937-b2bd-ad156543c324",
                    "name": "credentials_status:credentialStatus:item:purpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f44d854b-f9c9-47d7-9075-fdb88435cf9c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fd372242-7ca5-4d64-8b27-d361a6a745d1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "03ccc170-2d55-4c9e-86af-5f40831690eb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": false,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "c1559f20-7449-4a12-ac20-0c4d780ffb76"
                        }
                      }
                    ]
                  },
                  {
                    "id": "465dea5b-7609-4361-a472-ac5863dae8c3",
                    "name": "credentials_status:credentialStatus:item:purpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b8858c6c-97ef-4254-b6f6-37eaf2443784",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d4bcbfdb-5715-43c6-83ee-1df350cee5c0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8f84ca2b-021e-4a4b-8d45-990cac08327a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": 42,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "b025d199-c318-42f3-88d7-efbc278ef57e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bea1a2be-887e-4918-a732-864fe238f127",
                    "name": "credentials_status:credentialStatus:item:purpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "604bc40d-fec3-464f-a9b7-eac1e5eb056e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "befca275-e218-40d7-a0f9-cdcce7abcb5e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1f168228-1653-483b-b003-2c75597c0c2d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": null,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "e09779ed-10c3-4e46-8698-4248f11dbbd4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f995cd2a-02f0-498e-add9-b6db6f77ae4c",
                    "name": "credentials_status:credentialStatus:item:purpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b73333de-3a6f-4222-a1bd-bdac86373539",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0e37bd9a-a60d-493a-a117-19c03f3d1679"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dfec7721-5bf2-45be-851a-25ba5d2184ae",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": {},",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "3d6c9024-8ec6-4c5f-b552-0d2f35dd85f3"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "b4eb2d28-36ee-4d07-964e-cf4d12096f5b",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "0b96f7fc-9904-4512-bff4-713b02e9ac72",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "63c0d193-4cff-42b5-9b1d-994381c86314",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "b5a3f28e-e4a5-48f4-a378-67387ed886d7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c065c6fc-82de-4065-b9b2-d207e9978de1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "b2f71013-af08-4713-a349-be888be1be82"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "d8510ef1-a284-4c4f-8429-f64f5931ac29",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "b29fbf23-9d50-49ae-a919-fbb8691f7771"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "44c3e02d-8984-4116-93e7-2807782db685",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "9a86f4fd-f0b9-44b8-9412-666c7f657767"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "75557235-e42b-46d8-8331-02ddb2d7eabd",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credentialId\": pm.variables.get(\"credentialId\"),",
                "    \"credentialStatus\": [],",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "82b67391-1022-4765-b54d-7afd26010e08"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "2163ffc4-a158-47d2-97da-c9cbaad32027",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "91ef039d-a4ae-4191-92a1-1829b370b979"
            }
          }
        ]
      },
      {
        "id": "6cc467d5-e136-4c78-bf99-5c030ba37ba9",
        "name": "Credentials - Verify",
        "item": [
          {
            "id": "513e1f71-3010-42dd-b22b-ed471e1f2f80",
            "name": "Negative Testing",
            "item": [
              {
                "id": "4e15543c-34bb-48ba-974e-27d3df7dc31c",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "4480b7aa-9aad-4a5b-a763-3eff47453523",
                    "name": "credentials_verify:vc:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fff321ec-e3a2-4945-b272-bceae00c0184",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "84e504a7-f2af-4fee-b268-da6ae353a7bd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "45a76f76-0f83-4ecd-9063-9db71a07a1c9",
                    "name": "credentials_verify:vc:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": \"string\"\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "01518087-6ed1-4b0f-a71d-e6ca3b663d60",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "32ca6c99-ad01-4b59-af02-c26fe68432e6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1a79bce4-6cad-4f06-8776-9e5b10e3e3cb",
                    "name": "credentials_verify:vc:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": null\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c75fddb1-89f5-4dc4-8661-1e6e49834655",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c1377a90-1d05-4f8c-9c93-de5b19afa05a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6c83796e-a301-4734-9140-5335f410ac15",
                    "name": "credentials_verify:vc:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": 123\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0fcd32e8-fa2e-49b7-8af3-9b02a25026d5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cbaffcb8-b32b-441b-af3b-fad2c1aa814f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cf250580-9ac9-4114-a4e3-37c7ad49f733",
                    "name": "credentials_verify:vc:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": true\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "99741635-c7cc-449d-b041-e1d9e1f87b52",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8fb56c1d-7cb2-4655-a4b0-358d9376803f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c114e25a-aa13-42cb-b269-28dd91a72421",
                    "name": "credentials_verify:vc:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": []\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "54a09470-f7b0-4250-9930-120ec9e4a8b1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c4b8726b-3767-4d21-8d31-3fc902f41562"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b4710040-e27f-40ab-97fe-0df9743098ba",
                    "name": "credentials_verify:vc:@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..V5PnQzCWxrPiCYT-WAyKAnypebgwYeD7lX_hyIjFa_lbJje23pZAfFdgnlqBnXLd19Ksa8fZpCE9TN7kAjzxDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "63de731c-5fe9-4bef-9e01-78f8ea73bc1f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7aec4f64-5802-48e0-9e02-3fd05ca0c278"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6b2e13d8-4d65-43df-8535-de183bbd0fc4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1e8a143b-d82f-48cd-9942-8350ea6c48a8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3cc6e3ac-6dbc-4df2-8736-77901f0038e3",
                    "name": "credentials_verify:vc:@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6e8dab2f-5633-47ca-aafd-c30996e8d706",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d47741d4-28ec-4897-aa7c-dc1c76b20a91"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a18b1a8c-8fe7-4b79-a74d-351722573c41",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1899d6d3-872f-444d-8b2a-4fed036ee27b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d6d6c205-d60c-4081-b646-a8638dfdfd13",
                    "name": "credentials_verify:vc:@context:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cf70747b-8c32-4ff7-8fa6-6b03a9a56c77",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0d9b5a6d-a5b8-476d-bda7-c39f3f228b6b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "42f00fc3-1118-46d6-ba2c-b9796d9d68ea",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a38ca8f4-da10-435e-8c19-3065b5575e22"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2addc1bd-46f7-4b01-847e-331578300177",
                    "name": "credentials_verify:vc:@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "98ceb166-6c2d-4154-8e34-ac22f8e07cd6",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d4a8937b-0173-4550-b244-73f5e771cf80"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bfc1d5c2-f2fe-4223-9813-3e17f605df65",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "76cc53a1-775c-4ffd-a086-295186bfc9df"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6cfe3516-f03d-49c3-a4de-af112ccadb05",
                    "name": "credentials_verify:vc:@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": {\n            \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n        },\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..w4xJhf2l_4JzwE4kp8pD8dNJdWSaws5HiBgal8zFzB6i9p05tmPITdsrUttpUwopW5UAq9M_EZVqlz-kRfSFBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "77502e2b-e793-4243-9df5-88dc24199cd8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1098539f-6e02-4224-b4ed-76b35745a783"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ff1e5110-d61c-4ffc-9c17-e645c884bcec",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1e1aa84d-a0d6-43d8-bf31-ca80d55da3e7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a20f1932-6584-47f1-b245-5a991a2c756b",
                    "name": "credentials_verify:vc:@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": \"https://www.w3.org/2018/credentials/v1\",\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5b6c9695-39c5-4230-8759-407f99b123f6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0feb070c-4491-4ed2-b86d-2129daae0f01"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a1ddf962-f1b7-47c9-a320-1ac1fc6b1cef",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cfe47ddc-4c70-432a-bb2a-d394a8e06b1d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3e91e67e-3845-4046-b1a9-61a8303c36f0",
                    "name": "credentials_verify:vc:@context:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2658d973-8528-4f57-9335-6f2db96e80c6",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "adf80089-dc4d-40e3-9829-ef695a0029ed"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5831e9f4-ca15-4fd9-b9b3-192cc113d4c5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d5016ed9-e048-412f-bca8-a42d866b2a37"
                        }
                      }
                    ]
                  },
                  {
                    "id": "326e84b9-517a-4c8b-8771-ebe3f34b1262",
                    "name": "credentials_verify:vc:@context:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6e5b4cae-cdf5-40b3-8f45-a4c207025cf9",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "de90c7cc-bf4a-4a94-bffa-20dfc752a745"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "770cf214-ba9e-4513-b0ad-69a4c60f0f5d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a7328c1b-8936-44c7-8f5d-ba7c9430503e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6e5eaed1-e3d6-4b01-b1c4-c7928dba9e53",
                    "name": "credentials_verify:vc:@context:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "941aae0e-c50a-4695-88a6-bf09883a111b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d45f3e4e-6829-424b-a3b6-90409fec9a06"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b0346d54-5d08-4bc2-b0e3-2ecaca12b717",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7cbde6c5-04d5-402d-ac01-d56b4866b4a5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "096e21b8-2932-4547-a3e1-6cf8f06f3f40",
                    "name": "credentials_verify:vc:@context:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "53d5ac62-7ff3-42b4-88b9-e7e3864968a0",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "395a27c8-0e3f-4fb9-a494-b95022189cb1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "34c0bbc2-8831-41f2-8058-93c9a1ff26d3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c52dc9ff-9530-47fe-8aee-dabb0b78f9bb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "92a2137a-9dec-4832-afc4-47bab8097d02",
                    "name": "credentials_verify:vc:@context:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            {\n                \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n            }\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a68dcb6a-d129-4f8b-9e65-6363d747e7f4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "269ac514-ce49-4950-bca4-81ef2f0e4005"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1d37d5d1-c8c3-4621-a2c8-53929bb5cc9f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d806f2bc-bfae-4856-b74a-c3bf297aa86f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ff539355-acda-4663-9013-6916851425bc",
                    "name": "credentials_verify:vc:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": [\n            \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        ],\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..iom-sOLAz9-9FhadLRpqOYXXBhx4Rgwa3I3w1oh087xFQqIMhVTzcSpHCGdGWu2QT1KwrrgVAXPeTT2EthmxBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7012f447-3939-481c-8c45-d30d2ac321f7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "79ff90ff-ed3c-4e66-a17d-5caf1b14fd62"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ffcfc0aa-ce7d-43d6-90e1-4bd09eef6f43",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bb50eafe-47ea-4b62-8c9b-783f38f1837f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0440387f-bd16-42b7-a912-5f521563d8c7",
                    "name": "credentials_verify:vc:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": false,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..xftqB9cBFsSe226cWEZ4wr5sfxlAOJYYo6yjwPCVeHDdk6OoWGjZQGO7xXpSidrrr6e1imP18LiFK34xtRWADQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bff10e4a-3611-47ef-8594-16cca9cdf8ce",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ccd9bc0e-94bc-43dd-ad65-0847a623efab"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5ef6638f-d22d-47a3-aeda-03cd2d6e0c1e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b481b093-30e7-422b-a282-3b64f2bfe97b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "46131d40-5492-4ac0-b673-7369ed595eb3",
                    "name": "credentials_verify:vc:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": 123,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ZqV-qqLOh_Kb4vAdXKBfmFdNyv3FzXJAIYV9JltcYGDAefU3OUOnoaAU2WSEufkuYkvczxfRLhrMKgkoVoIRAA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "96ff2982-7f1e-4093-a627-246e172b04eb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7acf98e9-67d8-47a6-aa72-06ac3bbf506b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e2e24ebd-c7ed-43c5-ae7a-065dd730884b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6961147e-5a9a-4155-a336-5b95a607b99d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f716a882-bd1f-4330-a5a9-13c985539bde",
                    "name": "credentials_verify:vc:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": null,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fa99e749-81ed-45cd-92d4-b59ff9ea62ee",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c9bdfd35-a578-460f-b556-a553cfbe5bc7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1e6d96b6-0348-407b-a549-69b0b8e4f2f7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bedb0917-739d-4ba0-afa0-3f51895b60a9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5ceb992b-4c4d-493c-84d4-5af43c2565e2",
                    "name": "credentials_verify:vc:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": {\n            \"key\": \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..0Nrj_srTLYyA-9ZVA_dkVGjUcKx6xELHjbbdppEMFPGEN5c2gPXgstNRjnrr8hhMMegSAbvGASKWseBXGR9uAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3b1589da-629b-4e5f-bf8c-d2711708841a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e659fc41-5b6d-4056-94d4-cdc1f4c33b61"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1fd9460f-9620-43ee-bb84-30b1de26c0af",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dbfca260-3603-4a1d-8966-02a44d2a9656"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fbc785b4-7787-4ba8-b135-7b2313f61b64",
                    "name": "credentials_verify:vc:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Bx6sv21fSmT7fCCxU3fDaLhEOhfRK8llXSiFTgApd4PHot00nVjhaKQyhBW9FfFmJljstlOV_Zff164cxOKiCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6787c7b4-006a-4511-8e1a-c046e158ddb1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "71a52b9f-7194-438e-a3ba-21a5ba998ca1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "70d8091c-2414-4d42-b706-919424517951",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "87f420b5-7662-42b3-b331-c72882bb39c9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6a5c0399-e6fe-4710-aad6-3031ae3b5b7c",
                    "name": "credentials_verify:vc:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "511b1759-7d3e-448b-94f8-26ebb227dd7a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "180bb0d1-fb61-4561-8c9a-802b8819d6cc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "dc7af047-7005-482a-a8ca-88009f667c05",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8b71faed-79ea-4199-8749-ed11446b7cbd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a065f3e9-acfc-48ad-bfa3-31f02acd1ccb",
                    "name": "credentials_verify:vc:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a3d80ad4-8792-46d0-91aa-47bb678eaa6e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6bfbe886-ddd4-47ca-bd18-fefc09305cd2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2be64ff8-9e6e-4a20-8cac-e4acb5f02746",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "02bebc86-b4fc-4a7a-b163-c4d3e39a8c4e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d6ad7d83-cd10-40a6-9ca3-cac4beb52238",
                    "name": "credentials_verify:vc:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b6165bbd-9743-4306-af26-17634efa1f3c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a35bd31b-6634-4fca-8c91-6ce424365a5d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6f871d0a-2239-4273-ab12-1e72b686dc8e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "351d5802-77a9-4085-9fae-e897b50d7221"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3b4bf0ea-0f69-4dcd-b3f6-b45b93c4fa7b",
                    "name": "credentials_verify:vc:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7aaaf4fc-442a-4ccc-a94e-d43a1fa7c74b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = {\"key\": \"VerifiableCredential\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "52f4593d-e7f0-4dc4-99f4-6743a6b6fc77"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f0edfee4-59a4-4955-8597-4f0be5c9ec02",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "382ffcb8-2958-4301-bae9-25b45be1d44e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c5af2270-54f6-4971-853a-34ab8d343921",
                    "name": "credentials_verify:vc:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": \"VerifiableCredential\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1abd1f4b-2abe-4f50-8b82-cbe54af9b943",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "175329d2-576e-477a-9fef-b034beefde6b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8165afbf-ff5a-4916-aa6b-d09ec54a06de",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a036e1d0-9a85-4964-9a05-4d8b77d3e7f0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "54e6e44b-8f23-4402-b00b-cc35c8be081b",
                    "name": "credentials_verify:vc:type:item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "635b8b3f-ef39-4609-969a-597d4cb63675",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must have at least one element",
                            "rawBody.type = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a285dbff-df63-49f4-8c19-4cc83172de33"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "64936a0f-4389-42a1-ad45-9ad6810f6358",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e418ba9d-36c8-4021-846b-118d04b7b69c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "11762d70-b692-49be-9824-bf4a3abb456a",
                    "name": "credentials_verify:vc:type:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cdc57ed1-aa74-4ebf-948a-38d5f1172901",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f576d40a-b7fe-4b11-9b1d-461a2b787269"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1625e7e7-e7e1-4fc5-a41a-51bb9acf28af",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "671b4dec-d928-4353-98c9-763f6b66055d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e087281e-3c76-4c9f-98b5-2b0cb9f547a7",
                    "name": "credentials_verify:vc:type:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bdee6171-feb9-4644-9183-0ef74b5ff3de",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a2815260-4bc2-4893-a7cf-c76a14607a85"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4ffe2d26-42f0-431c-9488-a732570b1a20",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2bee0c38-8873-44f1-b8d7-72f29980e907"
                        }
                      }
                    ]
                  },
                  {
                    "id": "962fadc7-edeb-480e-ae64-b449242caccc",
                    "name": "credentials_verify:vc:type:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3cdc4b88-42fb-4fe6-92f6-59c6b9e1a80a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "04d0a351-4417-4295-8291-1cea32d8a609"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "decafa2c-e0d9-4347-acc2-bd1c3ac9fb50",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "30556430-8926-434a-b6ea-b2a220323eea"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d15d6d8f-7905-4d71-9f97-d8c3eaa9dd84",
                    "name": "credentials_verify:vc:type:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "70ad269c-c4d1-4e01-b4df-0714d36796e7",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "33c0a370-9cb3-45e1-a902-7e4596dcf10c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4c4910ce-9a06-45ae-8a1f-50095126c4cd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b33a6a49-c70a-4297-ab06-c5bbb67b07c6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f917737a-7988-4c5d-9c82-1e2b6059e595",
                    "name": "credentials_verify:vc:type:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ad819cb0-676c-44e1-bba8-425c5e9b6550",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", {\"key\": \"VerifiableCredential\"}];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "986b1904-376a-49ef-91ab-6052c311676d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e83398f1-e72e-4e04-923d-d076975d1e63",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "06514e1b-2092-40a4-8a10-3c917838c8ac"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c50d7bbf-072a-47f3-9c47-9b694956fc4b",
                    "name": "credentials_verify:vc:issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b8f0ef41-1286-448a-9d3a-18675581df54",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "500ed9a5-f9b3-4f4e-b26b-9a6a73a8590e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "308f4257-3d45-45d8-88b4-4bf187e4f423",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7b634476-acfc-4a27-9e72-e98b556bab5c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cb41b7ec-8c1b-469e-b2d6-342462ee30ca",
                    "name": "credentials_verify:vc:issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": [\n            \"did:example:123\"\n        ],\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Mdpb0nbZLuHLqh6IBr6ouahKZNFB-cIKJXn-b-O6Pt6HyJaECfc399qgMTWovf-l04XYEpuYDmfZeYVThBeMDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "87925bda-aed9-4061-8df6-908d49c0b2b1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3c793e55-fa05-4e9f-a1db-6efa82a5bd70"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d2626868-f614-4c32-843f-80a337895cba",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "72a1dc1c-0dbf-4438-94c1-23d55371b3e8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a109687c-5c3c-49e5-8b0b-f4f54f5712a5",
                    "name": "credentials_verify:vc:issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": false,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ryGzH1cVI0oyA0eBPKjIBDGJ8FYapvVnUEcovWWepoAASL3SzOOUvcQ9XOnQlclFU8dYhkEN2L8TQAj2OHlcBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a0f75c48-769d-498c-bef0-26c30e69fe71",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "73d15965-a34d-4bca-a36e-93860b82543f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c68571a5-824f-4e71-b2f7-94f97ef29a42",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7d93a190-9f27-4cb1-a7c0-3649f506579a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f9b5bd74-c531-4c9e-ae30-ac7e7087c68c",
                    "name": "credentials_verify:vc:issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": 123,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..kEE8wQKYgVQlcBvJeVeV151aR_iD6vPrlW2bgXPW8NvJx9AOuW5eGtL3j_I3xIGR_JWDA5jGy6KDVkqJNEDHAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "68c70898-2575-40ad-9259-7e55ecfb5c2f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3837d631-d9f5-4a7f-afae-3704ed459ea3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "71c34c85-b6c7-489d-80d1-7ecd59fd3ddd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f3267bbb-2ce1-4595-8f3b-5caefb83ba52"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e667efa7-7893-4353-896d-5b6013813668",
                    "name": "credentials_verify:vc:issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": null,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3c7f9878-dfb9-4511-ba44-740b193d12bb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7aad820a-8013-481e-975a-fe2a0a02551f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "48ad3cca-819e-42ef-90fc-53dfa5542b36",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9defdbbd-d19c-4d9a-ab4c-52b4bc7a1ced"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f3fc2caa-8ae6-4b74-a4af-624f3e045c42",
                    "name": "credentials_verify:vc:issuer:id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {},\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "74faecc1-89fd-473f-a01a-10749058693c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4e2d50d0-8349-4b7c-8f35-c16c8faba98c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "41339b64-909f-4858-a6e5-e13669358f5b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ff577f4d-bad1-4cea-9aa7-daf42c255e0b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "52f81564-a7ff-4252-ba18-39eef8058bd1",
                    "name": "credentials_verify:vc:issuer:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TsN_31UJYzTTx1xh5CB9PjhnehJza3N5gAEFoNO55HLtQvoqGiEd-SI_4Xy7cpuYMbHdYf5CKHwP0eooyzjrAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4a18225a-79b7-4dfc-9f74-7eb36f413567",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "82c12b9b-09f2-4add-aa19-140e054b60a5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c377c77b-b363-4f85-9afe-b8e41461323c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "222afb8b-80b4-46a4-9ccd-9239c127c3d4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "258b2256-f200-4059-9d9b-589ef2cf6139",
                    "name": "credentials_verify:vc:issuer:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": false\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JOl3FF8mG94K8DDAtSYeirCtE5GRVHXYZcIbf3JRCquZ7obaBm1wh3rEzbG-t8kjdWMn7Zwy8q4zw7pMC2-gAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b4b71e2f-d68c-4637-9cea-66416d2e93f7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9ca67a08-33e9-4a2c-b748-bcb84109d8a6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "382ea7b5-cd73-4fd9-a612-5d39edd05d28",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "486638d5-a6b6-405f-af50-1de88a57182b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2fed4f68-7e20-4b91-8950-bca0212d49ef",
                    "name": "credentials_verify:vc:issuer:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": 123\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Ibp_FWO5FwzfTfd_PeTgedqAEcbS7dtCOoREanyZP0yAg63ZGay4hjjd-NwZfmWG8LRbMSqtjX2_Cu5BbBEoAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ce00e6e0-c161-410e-892f-dc6fe9bbe12d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "89920ca9-6720-410f-8631-6470f6c9049a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bba46fb9-19ef-4fee-ab77-dadf4882a030",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2441ec3d-7a1c-4602-a682-4c19e09f22fc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "73214b16-a5c0-48fc-90d2-cef468f45fab",
                    "name": "credentials_verify:vc:issuer:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": null\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "23250db9-675f-4fbb-9ae4-c22f7f468c22",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "50f5922a-f8dc-47f2-a2e7-f5b039611bf5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bbb9f966-65cb-4b63-b724-265c25a7f1d7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "293ee389-d3e0-429d-b435-cef8722c2159"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a3e67ef3-bfe0-4ddb-a995-87f62fe79607",
                    "name": "credentials_verify:vc:issuer:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..n3pFfPx4jY7EjlOpLNJT4CAJYI1roVE6LoUgLQhJ1bMgS5xUKbsIhynp7xDW-vSGzIcu58w-Z8_d9--99NCDBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4f1a0976-6ae8-4987-bfdd-530cf9d08ba7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b33004c1-7ba1-469a-a99d-53770a3c3302"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cbf3b58e-f87c-4f73-b6f0-aea71a6f1177",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1f946413-989b-4ba0-924d-e85e1f81e1a7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "84cfb6bc-4601-4695-be7d-969fa139ad7e",
                    "name": "credentials_verify:vc:issuanceDate:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0252a6c6-4005-4847-9b58-87cd984843f3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8ca81e07-52d8-47f3-922a-00f57ce3afeb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2d037ef5-19e2-436e-b3d4-d04db8c60e70",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4f811120-53e3-47ba-ae06-1d352228d815"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b25b9afb-646d-4f2f-a133-a28b271d9e11",
                    "name": "credentials_verify:vc:issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": [\n            \"2010-01-01T19:23:24Z\"\n        ],\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..eJGt2anEVhR3qXrd8726C2a8PNJ-S4SnhIUB2YpAUiLJhTQ4FcY_nONpl-U0MbpWgwlpJ7xa1_uk4EMrGmOUBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f3afb329-0b72-4968-b5a0-802f4e86f606",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "aae88d47-6a11-4b21-930f-59159337f0d4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "61d7675c-f3b3-4808-8ad3-1ae337660897",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "945309a1-1320-4057-af0e-94c5ceb00394"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a7fcf1ca-e01a-414e-b0c3-79d1abc90b6c",
                    "name": "credentials_verify:vc:issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": false,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8Ax_d8Yp8MIszSaGQa1WkiT4xktUk0Ltg7EF3QQ-GGY8JaV_jR6-zRUlEF2iW0HcK6C8ZoAt0KrllUUDdJkdDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8254a754-a3cb-4794-88a4-46a5ac595b9f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c26d0e8e-4fc3-4be6-9d40-9256971ec88d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8743a4bf-b2aa-448c-b9ee-fab6ec187b7c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6ebc1298-fe67-42e8-b802-aed571b6b587"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9c613e71-9cb9-4427-85df-45c798c81895",
                    "name": "credentials_verify:vc:issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": 123,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..x-sSX9vqc6977YPFhNbzjKdisDv4qD2mx-yBSH_EG-UQCpyH_ErCzoFWnpJzRJKIKbOLEvvZ5SO_fWbNWyNdCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3b7ec96e-3a7d-4e45-89b9-9261754a126d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0fb61ac2-5b9e-4ab5-b1e1-9523d16be19a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "44173cf3-aeeb-4f90-bf62-e3ca6fa95564",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "214d89cc-4234-40aa-9b2c-e9cb0e7fb97e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "311e8fbd-bc58-46a1-8317-2ff821d05c0c",
                    "name": "credentials_verify:vc:issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": null,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "13f66332-119d-494d-9dcc-7e54b57edd77",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d56c779a-5c52-472a-98bf-2b31cbd206b7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5c6aee10-c995-442f-b77e-c80004a56412",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4c0395dd-acbc-4bf1-9f0b-e2941db4e50a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2df07759-803f-40a0-8580-ccb7505ba369",
                    "name": "credentials_verify:vc:issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": {\n            \"key\": \"2010-01-01T19:23:24Z\"\n        },\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Z1GVMKiJuJeJMpR_Ag4Wpv6940N3WUreYSxEsPaZgU_J1C_EDUj8ycRJitlJNEBBuGhibJ0GWyK-WW9RO2WCDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d6c3b43b-20a3-4eda-a2a5-204e9a196478",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b274e0b8-e063-489a-8d91-0a3a00c099af"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "dcbdb401-b9e0-4b4a-af8f-6be866a8f087",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7d6c0829-dea0-4617-af3f-0ef258847118"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c0032e1c-eabf-4d2c-96b5-9768f39591cb",
                    "name": "credentials_verify:vc:issuanceDate:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"not a valid XML Date Time string\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ebrsCszvH6TQHw1QhA8laajPRWL_zGvQ96Up8A4TiJrY7ueFm3V-Suk-KNd6JKckpOxLoF-Cb24KG_g73AqHAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2be7e4b3-54fb-4d89-8473-063be1371a95",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d219d289-bd77-4be1-b3c7-df3d6cdfcabb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c26c1369-308e-478a-aef9-752e25ea735c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d3a64509-d76a-483f-9c1a-1ece1aab1237"
                        }
                      }
                    ]
                  },
                  {
                    "id": "764381d6-0bbe-49c9-822d-f5276dbcdc2c",
                    "name": "credentials_verify:vc:credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0c60e649-58f6-4964-99de-1ec5e3a86238",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a4fdee7e-ee54-4ecc-8a2c-1a6e2781ef6e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fbb8c534-b0bf-4fc4-9d43-b2ff9654f402",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a366fc89-7150-41fc-aef6-6950ad41bb14"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4159b7e2-7955-47f5-ac56-599f0cd8058b",
                    "name": "credentials_verify:vc:credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": [\n            \"did:example:123\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a67ed575-7e50-4607-8968-6529779b2b37",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3a7a7e8a-7132-4838-8f7d-dd928b2da11f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "079c0b0f-7657-49c8-8f46-2edb20f6c2bf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c52c2b8c-46a6-42e6-96e6-8c8ebf24a09e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c1c39ebb-5f5d-41b0-9e3f-a32bc611e64e",
                    "name": "credentials_verify:vc:credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": false,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..VK75R0RpQX9g4E_vGExhb_aDUNycy1UlQYvhCL1Ydl9bWiT1oUPeHEUgJMRGzmRRvyByyj13oHI2yB3cOLWXCA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "68767d00-9a65-4e7e-8ca0-7a1f730e9b30",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a9334892-b079-4dcb-9456-d6510d92d21e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "326f900d-af73-4414-b30e-85e8f0274fa3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "70cdb414-7c81-45a9-85ca-df101a7813f8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e9bda57a-7eb5-40d5-984b-945549a933f6",
                    "name": "credentials_verify:vc:credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": 123,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..dQnu8mT7YMECvDQPODQ1YUudQIO9Yx7WsZ07UWpHRqw0iV3ZvJOebbBoY0gFvsF9t6foFFEaaWcKi4vNgIdfCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ef96d935-7cca-4235-9590-693a5fffbd4b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1c5b3822-0f0e-495f-a4ad-66d788973a0a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f5a5a52f-1eed-4b4a-aa2c-51c9ec3c5102",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c84e1d96-ec65-409b-bb97-028010c4d280"
                        }
                      }
                    ]
                  },
                  {
                    "id": "22f5a02f-8d86-4a02-8762-df3ff87abb47",
                    "name": "credentials_verify:vc:credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": null,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ec5bbcc9-c00b-4afb-907a-ab73bf0dc0c5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b64f8bf5-7f41-4064-8349-2d81d0263003"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "68726dd9-4fe8-4608-8595-bb0ff944b0e6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ea2ab2d2-429a-4a6f-902b-3bbc8f493d75"
                        }
                      }
                    ]
                  },
                  {
                    "id": "365cac59-c39d-4cd3-84ff-8e3404260c9b",
                    "name": "credentials_verify:vc:credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": \"did:example:123\",\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d5c2006d-453e-4cb2-93a1-b735c5e0ceae",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8448f2d9-953e-46f3-9f0e-d09c7c7605de"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7066b773-6f66-48e8-8dcd-ecca3811b92d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2e944214-1522-400c-8646-f053dd59f7a6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3ac49d88-a0ee-4c05-b4cd-d32f2026d115",
                    "name": "credentials_verify:vc:credentialSubject:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8KJ136ciaI5X01UO8dPG0KMcsxmd7qzxvrahflTNqsrjjd-vF8bBKpjVDLOOj7bUolO277JWFCPX1xvvAVAvAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "30fee110-8a66-4351-adef-c7ff85f777a6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5276d0ee-6b07-47ee-821a-ada2e284e08d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "27dbfc46-cddd-4640-9a88-a4759fd604dd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e77b58c1-f27c-4c01-be4e-76e7fb71ed6b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "be79204c-f337-437a-8f89-ac44ad5cf9fb",
                    "name": "credentials_verify:vc:credentialSubject:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": false\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..1Tatn2a45JYHHvhGvCLNbO1VUDV_lkvRVosGzDXDF-DseqRorDTFmY7XSyYqrl5yc6B200ET0RBvgK2vyEC6BA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "edecbad3-26ae-40c6-a9b5-35ce70f2e227",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d4a8bf44-19d0-4c82-9857-828df96097fd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2fabf570-f784-498e-965b-ccc4484cbdcd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ae034055-66bc-493d-9832-ffff3b5df969"
                        }
                      }
                    ]
                  },
                  {
                    "id": "467519cc-04c8-418f-bafa-08cb4d7654d6",
                    "name": "credentials_verify:vc:credentialSubject:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": 123\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..qPc7PrMuniibwI74A9ELPRd1YyUjNyeccnUFc4GCfj7I3oREDl0RT6PEt1pEY81mq7vlIsNG1myE86igC__qBA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3fc1967c-ebcb-44f8-9271-213a18bd4eff",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b787a709-7025-4fca-9228-522124010311"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a0456470-084a-4073-bae7-7da56978ba35",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a037a02d-1bcb-4e98-9cd9-e21406d7be4b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bf3a3c49-21af-4046-90af-0cd5b674faa4",
                    "name": "credentials_verify:vc:credentialSubject:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": null\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..10vzNYPpxv6gZwVR-V23lgvIgseVOwxT6Tc1Zbn5T6pWGmUhrkur_O-OexNVjkVSf7Qu_6NDnIL1m0KcNKGBCg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "461557a1-c033-4e02-9567-5488427726c9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "33ad26f2-7f6b-49fc-b73e-30d1e464d816"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1409410c-dad8-4ad0-8e66-ece1b6485b72",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "59266de2-2ade-4644-8c2f-a509fb48cb0d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3e77315b-e35f-4c8d-9186-c1f11967ef6f",
                    "name": "credentials_verify:vc:credentialSubject:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..tQJMGZTsqt1RhpxKkq647EHc3pjQ183zd4KchfvD3dXWVfL9X1fUedMbj33l8eev6YWua2-6_4_sUTDr2MLEDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5da28fd1-e49c-4912-b732-132174452201",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "13d33346-beba-4cfe-8edf-38e930b4ab16"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c9cc647b-f481-414e-a09f-a2695192b036",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "49760381-9911-491e-9c5f-955d53b25f19"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b265a19b-4a8a-439b-8c40-e3dd92c4f1d1",
                    "name": "credentials_verify:proof:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9419498b-9b68-40d5-a4b7-1826fe8234d3",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required for embedded proof VCs",
                            "delete rawBody.proof",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9a5cf038-4452-4c0a-b10e-da7e02046085"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2d8b9e7b-72cf-4d76-8b49-dcb21b983cc7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e3e9cb69-0f78-4286-af2d-6e9309bd46dc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "114ef6ea-4fff-4b02-9508-2d3cf0d1c228",
                    "name": "credentials_verify:proof:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0369b788-ec2f-4e8f-8bb4-7d9a542363af",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "81bdfb98-42bf-4738-bc11-bb3407d42740"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e8422be7-d6be-40de-8998-7fe45232e9a6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8ad37218-6479-4097-9be3-726358a27a35"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eacfc72a-be7f-4074-9d6e-2de39113afec",
                    "name": "credentials_verify:proof:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1fa66f92-6b00-4489-9a98-e5543f59f34e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3c5f9954-2453-4a3e-9732-557bc721822f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4d66ec12-654a-44c6-8f5a-d0a1172de257",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "af18f502-2bc8-415d-a75a-41ea6540bef5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3cbd15ec-4180-4c5a-b95a-a9a5be0af01b",
                    "name": "credentials_verify:proof:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ab1cddde-d666-4fcf-8b5f-79217d0b6708",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = 10;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f308a13f-5973-4d53-a32b-df4a69deb020"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "68fe5aea-5f2e-47c2-a441-3bea658eba32",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cc03d639-369f-4cd4-b23f-d2f1e6216b13"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c121760b-38a6-441d-82a4-29c9efad4362",
                    "name": "credentials_verify:proof:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "26d04353-7f8b-42bd-8705-0247f4edfd64",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8b84b30f-7d92-4f40-98e3-4f6fa5ea37d7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b09f766b-01e2-489b-9136-dced500e8c4d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f8fe51e1-dd86-4173-a244-39c6a0c825fa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f385ab1b-d20d-46a8-9b1f-c1c69d02c1f5",
                    "name": "credentials_verify:proof:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c27a3de4-28d0-4fe5-b80b-f514e0677a4f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = \"string\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "34a2ae5a-ff63-4eb6-9742-e8a252421bad"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "49b68644-b6ff-47f7-b776-825075355b1d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ae68ea94-682f-4db5-819b-0bda6d773579"
                        }
                      }
                    ]
                  },
                  {
                    "id": "06bb5bef-d3dc-4d6c-a6d4-776d95f62914",
                    "name": "credentials_verify:proof:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "988dd5ab-3c05-4259-8290-c61e4083adaa",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required for embedded proof VCs",
                            "delete rawBody.proof.type",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0dd3f95c-dff8-4341-98a2-0dade44ff086"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b1c0a44b-d685-4a26-876e-2bc6518a47ba",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7446da3e-97c7-41f2-a0f6-68bb5673aa6c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9894ffa7-cf59-48c3-9deb-e35397c29b9c",
                    "name": "credentials_verify:proof:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5fafd265-46e8-45fd-8bc3-4d7f4cec2054",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = [\"Ed25519Signature2018\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7401f180-3fd7-4faa-a3d7-b177f5a79381"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "edebbca7-3fa0-4e72-a7f1-2e519a4c120d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "047937d8-3866-4e83-a87a-de568d28df2d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "256f3e71-4e90-4435-b862-bfce39c85e13",
                    "name": "credentials_verify:proof:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "61107aba-f211-46fc-ad25-389631078740",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d27c0724-0459-4143-afc7-7423f952819e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "50b54fcf-882d-4de5-b26d-5585371d330f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "088ff435-5ae8-4e4c-b604-13ab1bc05859"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ebf029cf-6b5e-4b37-9742-37c4e50d691a",
                    "name": "credentials_verify:proof:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "70dda775-f28e-4ea2-bd37-2b4627580427",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "06bcbfb2-661c-4941-bd86-062083efd83e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5b0737a8-e18d-4471-a39b-5f87a6b69507",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0bcd7524-b5f7-4cff-89b6-e739ae89e618"
                        }
                      }
                    ]
                  },
                  {
                    "id": "94874262-5397-4a5b-a31d-221558de9830",
                    "name": "credentials_verify:proof:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3442f0cf-932e-4f32-ad22-a47127756e84",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e83fa73e-b26a-43be-ae2e-e87d8677b0fc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "37dcecfb-80e1-4967-8b3f-6bf5cab42ae8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d08df369-4aa5-4318-9b0f-0e39fc0e8d4d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0704d03d-9c90-471c-923e-758842a9b090",
                    "name": "credentials_verify:proof:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d8546c28-b03e-4c2f-895a-e3f0b839e9ed",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = {\"key\": \"Ed25519Signature2018\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d5959280-b89e-4742-96bc-6875532450e9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "935b5e8f-7750-4771-bf74-866132a65437",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "29d600ef-9eb4-40e5-b1f0-ff08bce97aff"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e43218d0-b4a9-488d-bd8a-884821b6a4e8",
                    "name": "credentials_verify:proof:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c7871897-397b-46a0-9fb1-d27952fc1497",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = \"not one of the valid values\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c6fc0e82-7a15-43d0-838e-a840e46c3ebc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a8961ad9-bf3d-4c8e-9eba-c6f9c858154f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b56fe52e-cb90-4fbf-9f35-81123130528e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "74925ed2-0de6-4afd-b884-d89c7ae88766",
                    "name": "credentials_verify:proof:created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "717e3ebd-b645-4bec-8846-7cd8b9bb06d9",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = [\"2020-04-02T18:28:08Z\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "80ced28e-9e89-4835-acc1-ca1462420ce8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7bac0892-9ebc-4c24-8141-682e045fa44a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3bef1eed-a1b2-47fc-ae15-105f43b70c51"
                        }
                      }
                    ]
                  },
                  {
                    "id": "150db40c-5797-4846-b267-cf68a6b9ffd2",
                    "name": "credentials_verify:proof:created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "41006b1d-da9e-4ff9-881b-96e2d94d520c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "91008ef5-5210-49d1-b0f3-deb9db454690"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5830dd08-f9f3-435a-bd01-93fe37180209",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "25c40a46-a97d-49d2-9592-9b63feb45e21"
                        }
                      }
                    ]
                  },
                  {
                    "id": "db320d7e-9e5a-4b95-bea2-f37470c5f6bc",
                    "name": "credentials_verify:proof:created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5a071d3e-18a7-4e0e-ba0a-525e61e7fd30",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "457fa663-9771-4a5c-9116-3ed8debeabcd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9512ed20-be01-4566-b736-9280594249e8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "290006a6-5a0b-4a10-9402-b1e56289b077"
                        }
                      }
                    ]
                  },
                  {
                    "id": "35d2c164-c341-4431-8054-89f4938acd27",
                    "name": "credentials_verify:proof:created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "28412b7f-8cbe-464b-a86b-ae39b0cf3feb",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "eb265994-843b-4465-9073-2d927626777b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "01577d68-68f6-4edc-9028-4675cb6d5f53",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fe1ad5fd-842e-453b-887a-cf20df50c212"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2258f138-a1e1-4631-a7d7-b6e3bd0151f4",
                    "name": "credentials_verify:proof:created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8213a388-2423-4c19-8b2c-92e561f67ace",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = {\"key\": \"2020-04-02T18:28:08Z\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7e3b3f28-f7d0-4496-8db1-bb3ee307c41d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d8b55f5e-2e94-4826-b315-4b1761774036",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "157669a6-7ede-4011-a2c4-029d3b69a848"
                        }
                      }
                    ]
                  },
                  {
                    "id": "954ec65a-8e13-4309-9327-107fa322cc6a",
                    "name": "credentials_verify:proof:verificationMethod:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "11a753a8-7252-4bfe-a2ef-2c03a855ae41",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = [\"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a3d37ddc-02be-4c25-98cb-c85c9e4e0017"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2b38c5fe-5b35-4c56-810a-07174039e478",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1e2e06dc-d6c7-4eb5-b664-12a89ecd6430"
                        }
                      }
                    ]
                  },
                  {
                    "id": "69caacf7-0ecc-416c-a40c-81524cc1b288",
                    "name": "credentials_verify:proof:verificationMethod:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5541b740-324d-426a-a423-544c1f9eaa53",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9ee4d7db-61af-4df8-8a36-a5d003124dcd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e8169c6f-e266-4cf6-a531-3ac86a70f069",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d063fd3b-ad8e-4223-abf3-02c0f5118cd9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1334676a-b958-4aec-9482-e0297391f334",
                    "name": "credentials_verify:proof:verificationMethod:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bba20cdd-bae3-4214-9871-c7aea22973b0",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e487f567-b700-4537-bd43-5e1c269460a8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "240d7cea-e2b7-497b-9aea-a720f91dc7b5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f7174aa8-947d-4873-a384-ff13befa0bc6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f0296c67-f3de-4a2b-840b-33376ec7b50a",
                    "name": "credentials_verify:proof:verificationMethod:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3708fa16-4f6f-4df5-ad6b-c9f58f88e646",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4a0b2a5e-0c23-4b30-8823-0be1a234b54a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4972870c-43d2-478f-8ec5-cf7b0ce99163",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0d5d1b30-1ec9-4667-bc5f-f8862acbc66e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "da85d76e-08b7-4be1-8d3c-a242b7a1147f",
                    "name": "credentials_verify:proof:verificationMethod:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "69f4ccac-9c95-44f6-b725-f65e8fa2d308",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = {\"key\": \"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0cbb2c21-1a6f-4e37-ad45-3bc2bb7e9027"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1ebc15f1-ccda-4525-af2b-32eead316048",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "728ae6e9-31d2-4693-82bf-aca1cce4ce2c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "49ac2747-ad56-49eb-b375-a55ea7e62adf",
                    "name": "credentials_verify:proof:jws:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1d094011-ad9e-42bc-96bc-905ef6bb385f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = [\"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "339524f5-be26-4d44-b460-b60dab06dcf9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "96e6e9b6-d22b-4736-a8cb-5b3618ccd3af",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d05ca33c-caf1-4ae1-8a89-bf8ad9528019"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eca814ea-fd79-4384-b9ab-0174c9ce84f3",
                    "name": "credentials_verify:proof:jws:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5ddecd92-d87d-4a0c-b691-6f307ec7f488",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f7bf8461-4099-4ffa-8ab2-d9816c53a2ed"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6570550a-21a2-4177-b0fc-10e22339de32",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0bd80342-5487-4085-b8c1-0b64684fd048"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fae0c8bf-c86f-456e-b16d-6aeb8bee9c96",
                    "name": "credentials_verify:proof:jws:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "289fe353-7028-42b5-be53-fa7ea0c8d77d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "77bed694-da8a-4775-9b85-a975436ce919"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2aea6cb2-8f1f-4839-81de-9d9ee5f1bad8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2c956cac-371b-4806-a0d6-9a4e82c758d0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a2731ffc-2f16-4a43-b6a0-996653c7af23",
                    "name": "credentials_verify:proof:jws:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "191fe8ec-5eb7-413e-bcad-80796d03edaa",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "69f7e04b-dc9a-4bcf-b1d6-f17c240fbd41"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1b4ab68b-9e88-4ffe-9ce9-284a84a49848",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7aa90031-de57-45b9-9b92-ff8a6a3dc201"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ae456d75-1f03-44fd-9086-b5af7e6a8062",
                    "name": "credentials_verify:proof:jws:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ae2f605d-c36a-4d95-add3-3b461941d4b4",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = {\"key\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "31a7c3f7-3570-4775-9fbc-14a1d132340e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ca44be3e-c96c-4a3f-ac5b-10c0ba93eef4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e3d80676-80ce-4093-99bc-58d98e6df977"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6dda4c7e-9fc7-43f7-b02d-d451e3786c2a",
                    "name": "credentials_verify:proof:proofPurpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2bf69696-a3f9-46d9-a150-1ca67a337925",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = [\"assertionMethod\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1e30019b-c5b6-41cb-92e6-96eb99936f0d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b8b0648c-81b4-489a-8a90-7dcff8754748",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f823e875-5287-44eb-aa6d-bae76ea7c5ef"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f88b3963-c324-45e9-91d0-8b66735e5fbf",
                    "name": "credentials_verify:proof:proofPurpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "22aacd01-c164-44bb-8929-d7626408e69c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "45cd1d7e-1c31-4410-8c4f-ed98d81253a8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0664dfe1-cd70-4df8-ab5e-da9b0f5ebe47",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "af9ead01-b7d8-4a4f-8fcf-64b01f13c33a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1af36f6a-f57f-4a57-b46f-c654bda37b67",
                    "name": "credentials_verify:proof:proofPurpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "375ab271-ce49-44a3-86fc-aaf5b70f97af",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "653290b6-bccc-4b74-97d2-dc417d06c51f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "14c2fd50-e8d8-470e-9abe-b0dd172ada28",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "15dcec33-f4d8-47f0-9a19-74c3a111ec46"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7caa6722-25b4-4ebb-af7a-7d6e90993382",
                    "name": "credentials_verify:proof:proofPurpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "40151cf2-a62f-48c8-b15e-ed2ed19de2ac",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a5cb1e6b-0905-420f-be03-b5e5ebd9cb6a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5cc319b4-99a6-49fc-94f6-93b781848e07",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1db222fe-1721-4e95-869c-09365840709f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5be8784d-703b-4db9-b48b-d4c8859142c4",
                    "name": "credentials_verify:proof:proofPurpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1b5b3679-273e-447e-b041-506f342792a1",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = {\"key\": \"assertionMethod\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "700074d5-57de-43e9-aebc-66e22cc2ce19"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9fb8cbc1-7f40-472c-a0e7-f69dfeb93733",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "53febb55-68cc-4c69-9878-65d9ac97baa6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "361c3711-45ed-49ac-a38b-741dafa789fb",
                    "name": "credentials_verify:proof:proofPurpose:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3b469ea0-1794-407f-89ac-a61a55732889",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = \"not a valid value\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "64e69779-782b-4919-b194-2967e236280d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "659fbf78-0ef5-46e4-9ebd-8785c0201a58",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dd4e9f3e-24f8-43da-8bd4-856b350fd556"
                        }
                      }
                    ]
                  }
                ],
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "34b9986f-bb4d-4a2d-9aa6-64ce405d9476",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "4a12e3f4-05f1-4c99-9426-c598bd10ebd6"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "3d66b1c8-2906-4c9d-a84d-38f5e5f18f7f",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 400\", function () {",
                        " pm.response.to.have.status(400);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "1f68888f-4f3c-47a7-9924-f611922110a4"
                    }
                  }
                ]
              },
              {
                "id": "83d3cec1-5513-46ec-b35c-30d7d1959ffb",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "610a333f-40c7-4057-a25f-083e530ef86c",
                    "name": "credentials_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2b4da31e-ddeb-4296-84f9-af771b4ce55c",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"valid_vc\")));"
                          ],
                          "_lastExecutionId": "6132d522-3068-4234-9a87-e98eb90ff22e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "dc0026fd-dd17-4511-bdcd-840a89ce4ac7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "c912ae55-c938-4991-84d4-2dc1a611d353"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "0481be3d-1300-4762-9d9f-40b117d6570b",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "1597adfb-b051-4daf-8577-b87c365a8083"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "25e43a80-bc09-4ebb-a8eb-993121e135cf",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "99f13b75-2b7a-4949-8b00-f1b7ccc0d957"
                    }
                  }
                ]
              },
              {
                "id": "c6d466c2-829f-4300-89ea-ac94fe196d3e",
                "name": "Bad Signature",
                "item": [
                  {
                    "id": "9d9fbbbc-ef46-4ae6-9fc7-1f2cd0df92ee",
                    "name": "credentials_verify:bad_signature",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"id\": \"urn:uuid:e22ccc92-2c81-411f-a80f-e7f8334000a7\",\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..mvbcalofPOi7o7nxByyxXCuSOKXuGFM7_W9a8N62-EERarrH4p4T_0c2ZfGnGLiHOvY6Q-dyy38t9HPvXy-MBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "41952bf6-8572-417a-8346-c73c20dc0a67",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 200\", function () {",
                            " pm.response.to.have.status(200);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            "pm.test(\"response verified is false\", function() {",
                            " const { verified } = pm.response.json();",
                            " pm.expect(verified).to.be.false;",
                            "});"
                          ],
                          "_lastExecutionId": "a64fdd22-a06e-401b-8f3b-45a6b485c6c8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "57e27d58-3ed9-4679-b2db-8964edada1d1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "95c78bb8-8b6f-45eb-ac70-c2b0ecca5810"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "55554c4d-a544-49ef-8e16-a6ecd10d9c6d",
            "name": "Positive Testing",
            "item": [
              {
                "id": "83620186-4097-4df0-996b-777d2af530ff",
                "name": "credentials_verify",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "1a8a9969-5b4c-412a-bb5c-e14a07ab482e",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "adea8d16-0071-4ea7-ac4f-29e12da71118"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "f69ba532-8be2-4384-9a09-41c0d56d1c38",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "44f6de28-2088-4c26-a773-7d5bf726f4c1"
                    }
                  }
                ]
              },
              {
                "id": "20a58fd0-a6c3-4efe-8552-937722239d83",
                "name": "credentials_verify:issuer:object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\"\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "7fc13e8c-c685-46f3-9939-cbe941f04564",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "c5bcb33a-984b-43ad-b938-296393669bab"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "814f77bf-534d-4a80-9737-77a7d907ef38",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "027bdfd6-716a-4b9c-ab16-e83e1540ab4b"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "94aee6e2-7060-40aa-b6a2-203d4e736285",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Dummy VC issued for testing",
                "pm.variables.set(\"valid_vc\", {",
                "    \"@context\": [",
                "        \"https://www.w3.org/2018/credentials/v1\"",
                "    ],",
                "    \"credentialSubject\": {",
                "        \"id\": \"did:example:123\"",
                "    },",
                "    \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",",
                "    \"issuanceDate\": \"2006-01-02T15:04:05Z\",",
                "    \"issuer\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\",",
                "    \"proof\": {",
                "        \"created\": \"2020-04-02T18:48:36Z\",",
                "        \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..R618vVfGIF2jTe5dVkzMqQYIFKoIkyK_3_35z15tp_aFzew_4ruQt2DcaxdtkwsRff7bFsrVfigTl_XeE3tPDA\",",
                "        \"proofPurpose\": \"assertionMethod\",",
                "        \"type\": \"Ed25519Signature2018\",",
                "        \"verificationMethod\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV#z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\"",
                "    },",
                "    \"type\": \"VerifiableCredential\"",
                "});",
                ""
              ],
              "_lastExecutionId": "26885f68-ca3f-4a1f-aafd-e688e218457a"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "84491541-d33f-41ae-951c-e91924aae502",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "70d635a2-61c2-41d9-bc69-6c8e467c8c39"
            }
          }
        ]
      },
      {
        "id": "65ee3f56-2fb6-49f7-b106-4b3cf2c811ba",
        "name": "Presentations - Present",
        "item": [
          {
            "id": "2df91b58-a54f-4314-8f9d-4d03b0e5ae7e",
            "name": "Negative Testing",
            "item": [
              {
                "id": "d7f148b0-46ea-49d2-b250-06587ff16d93",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "080e93bc-fec2-45df-a48a-fa42345f6cce",
                    "name": "presentations:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "05017c09-5af3-4cff-a907-79e756fe5eca",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "3e507ec1-72f9-40f1-ab4a-9353721f8ca6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d857349a-0186-4cc2-9f1f-ca6f02649cc5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "59b15d51-af6a-4da4-af53-f10f74bc179b"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "27a8524a-2aad-4b27-9df5-4dc3a638272c",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "8a148911-40f4-40fa-ad8f-3fb3bef2f82f"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "5ef3f5d7-aa1b-43c9-a3df-b0362971d96e",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "49b7b58e-cc00-4e98-8a7a-93e7ee410c03"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "bae846ef-32a7-432b-a70e-5406706fd92c",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "93aaa2f3-0349-486d-b0cf-4e9fb2a7a3e5"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "f43c6c53-470e-4dd3-8504-0ee1c64fbc03",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "18f68fd4-a986-4478-950c-62b2f42f8e5c"
            }
          }
        ]
      },
      {
        "id": "f442aa91-a366-4583-a119-1f76ad2691d1",
        "name": "Presentations - Create",
        "item": [
          {
            "id": "ab7c3dda-8063-47f3-8efb-c767ec6478d7",
            "name": "Negative Testing",
            "item": [
              {
                "id": "04804334-abfd-4d59-8748-033702125fab",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "0cb07fe3-48e6-4969-916f-7124b3176a17",
                    "name": "presentations_prove:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e74c6f24-a6aa-426b-aa0b-cfdc3a86f6b0",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "b9b32901-5998-40b7-9bb8-06cf52f804a2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0850375c-9d24-4275-95f7-bb0fd3ec4df6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "bb0fd12b-50c7-41e0-bd6c-d1b9928982ef"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "c4f85574-43a1-48ba-9f40-412ad1df392f",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "4490371d-08b5-4d52-9c55-32a620ddf774"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "8dbac9f6-9e61-45d0-affd-112f3761bac2",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "f5a19795-5ecb-41f2-a9c3-62ff45e32043"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "749d4146-9a25-4462-bd4c-d1432e88ed9a",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "fc040104-ce8d-46cc-9444-b8f8e18d05c0"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "4d480f70-6134-4894-b6be-40b30b751e03",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "d23c1c75-5d64-46fc-8152-e1114aeb9de3"
            }
          }
        ]
      },
      {
        "id": "9deea211-44f5-4c3f-aae1-a3941998afbb",
        "name": "Presentations - Verify",
        "item": [
          {
            "id": "5c0fc305-6fbd-490b-b6a5-1d67be2a8aed",
            "name": "Negative Testing",
            "item": [
              {
                "id": "cc3ee6a7-aeea-482d-af2d-611a39683620",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "8162300c-7e47-4be6-8a56-109517aa217e",
                    "name": "presentations_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b024b14c-5f56-4e5f-ac62-2e91bd6bd7ca",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "7d0cd8c4-77b9-4ca1-8e33-f2c7d9706508"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3cf3721f-71f0-4222-8ef1-fc2fb658077d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "7ad03992-712b-4846-9822-1f787e318819"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "796f52c8-8230-46de-9e10-2b838b4d62cb",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "3bd4d425-3826-4204-b0b3-d7e3bbea1146"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "7a1bc5cc-ca4c-47f7-a1db-172a0f5d89bd",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "067602e3-38a0-4c35-981a-3da8db6a9990"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "b00ccaca-2e15-4340-aa85-2634b1f9bd0e",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "619db9ef-2c9e-46fa-a550-bdca3cada276"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "4d6f9b8c-43e4-48ff-84a4-c9be6af68cb4",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "ba9275fd-e1fe-4e88-a4b4-577e4f749d69"
            }
          }
        ]
      },
      {
        "id": "e210afa6-9a34-46c2-b926-3055d5691c46",
        "name": "Presentations - Notify",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "0316a706-9b03-4dff-982b-543f4367e399",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "58b04add-9ab7-4e64-b0e8-c838f8440773",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      },
      {
        "id": "e7c97159-5f88-4dd2-92cd-402c682d624c",
        "name": "Presentations - Submit",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "2273962c-7e00-42f0-8d1a-6ae1726de963",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "bce6b453-c297-49c0-aa30-5fe844324daa",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      }
    ]
  },
  "run": {
    "stats": {
      "iterations": {
        "total": 1,
        "pending": 0,
        "failed": 0
      },
      "items": {
        "total": 283,
        "pending": 0,
        "failed": 0
      },
      "scripts": {
        "total": 2091,
        "pending": 0,
        "failed": 0
      },
      "prerequests": {
        "total": 283,
        "pending": 0,
        "failed": 0
      },
      "requests": {
        "total": 285,
        "pending": 0,
        "failed": 0
      },
      "tests": {
        "total": 283,
        "pending": 0,
        "failed": 0
      },
      "assertions": {
        "total": 573,
        "pending": 0,
        "failed": 69
      },
      "testScripts": {
        "total": 1050,
        "pending": 0,
        "failed": 0
      },
      "prerequestScripts": {
        "total": 1041,
        "pending": 0,
        "failed": 0
      }
    },
    "timings": {
      "responseAverage": 58.08070175438601,
      "responseMin": 6,
      "responseMax": 486,
      "responseSd": 63.75999801502482,
      "dnsAverage": 0,
      "dnsMin": 0,
      "dnsMax": 0,
      "dnsSd": 0,
      "firstByteAverage": 0,
      "firstByteMin": 0,
      "firstByteMax": 0,
      "firstByteSd": 0,
      "started": 1699144614285,
      "completed": 1699144642828
    },
    "executions": [
      {
        "id": "bf64343f-daa8-4787-b1fc-5464b6d98cf5",
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 283,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "acc12f8a-4129-4ac4-92ff-8515c99b6aff",
          "httpRequestId": "47a6a6e4-35a7-49df-b4b5-34a3ba0d590c"
        },
        "item": {
          "id": "bf64343f-daa8-4787-b1fc-5464b6d98cf5",
          "name": "Clear Token Cache"
        },
        "response": {
          "id": "72715169-51f2-4490-a892-417f1947f099",
          "status": "OK",
          "code": 200,
          "responseTime": 53,
          "responseSize": 0
        }
      },
      {
        "id": "16a53a53-cff4-4d24-b0eb-bff2e7dfd474",
        "cursor": {
          "ref": "cb439a32-7587-4101-ac36-18b725770969",
          "length": 283,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "be5e77c2-87b2-4510-a2ff-7abf0d020d34"
        },
        "item": {
          "id": "16a53a53-cff4-4d24-b0eb-bff2e7dfd474",
          "name": "Clear DID Web Cache"
        },
        "response": {
          "id": "6b7f64c9-2336-46c4-af70-1646452bdf95",
          "status": "OK",
          "code": 200,
          "responseTime": 6,
          "responseSize": 0
        }
      },
      {
        "id": "b1c69b63-21d2-4396-863d-cb871bf955ec",
        "cursor": {
          "ref": "a2d139eb-1224-4e3f-929a-3af028a54dbb",
          "length": 283,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "118b05f5-cfbd-47a9-beb7-8429e717544e"
        },
        "item": {
          "id": "b1c69b63-21d2-4396-863d-cb871bf955ec",
          "name": "did_json"
        },
        "response": {
          "id": "30946280-b686-4b31-a841-205d6245e828",
          "status": "OK",
          "code": 200,
          "responseTime": 86,
          "responseSize": 1446
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "72252574-6b91-424f-b6d2-5388d0a7c807",
        "cursor": {
          "ref": "a0eae924-9911-4592-8c78-a8403910cdce",
          "length": 283,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "5655e4fd-c984-429f-9c30-1703e7277dd8"
        },
        "item": {
          "id": "72252574-6b91-424f-b6d2-5388d0a7c807",
          "name": "did:invalid"
        },
        "response": {
          "id": "2a150b30-e8d6-4262-83fd-252024f3bae2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 81
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "72252574-6b91-424f-b6d2-5388d0a7c807",
        "cursor": {
          "ref": "a0eae924-9911-4592-8c78-a8403910cdce",
          "length": 283,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "5655e4fd-c984-429f-9c30-1703e7277dd8"
        },
        "item": {
          "id": "72252574-6b91-424f-b6d2-5388d0a7c807",
          "name": "did:invalid"
        },
        "response": {
          "id": "2a150b30-e8d6-4262-83fd-252024f3bae2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 81
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "07d8f2a8-66ce-41c4-8bc9-161f12b95733",
        "cursor": {
          "ref": "f902ef8d-f481-49e9-8fbc-2107f18d1546",
          "length": 283,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "db3b997e-3526-455e-8bc4-6890d56eb2cb"
        },
        "item": {
          "id": "07d8f2a8-66ce-41c4-8bc9-161f12b95733",
          "name": "did:not_found:did_web"
        },
        "response": {
          "id": "598d52e0-b1e7-462b-a57d-b0cb2ed3b730",
          "status": "Not Found",
          "code": 404,
          "responseTime": 89,
          "responseSize": 53
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5b814007-4c6d-42a6-bf23-93eb7ea1d524",
        "cursor": {
          "ref": "0170c94b-2fa0-4e04-be83-3d96e08b925b",
          "length": 283,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "2fabda6d-ef44-40a4-8c74-eeb1ded8dc3f"
        },
        "item": {
          "id": "5b814007-4c6d-42a6-bf23-93eb7ea1d524",
          "name": "did:not_found:urn"
        },
        "response": {
          "id": "a9857821-6ab5-4d4a-bddf-9d90db71090e",
          "status": "Not Found",
          "code": 404,
          "responseTime": 37,
          "responseSize": 86
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bfb93826-df96-4958-ab45-b6eaa28e4071",
        "cursor": {
          "ref": "a207f301-d8f8-4c6b-9c1a-3eb48b63c535",
          "length": 283,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "04a1c20b-2dd6-45ee-a235-4961b85a708a"
        },
        "item": {
          "id": "bfb93826-df96-4958-ab45-b6eaa28e4071",
          "name": "identifiers:missing_auth"
        },
        "response": {
          "id": "b7afc0f5-6366-46e0-8098-52af22e8015b",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 21,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e41a7211-5ec1-413a-8e1b-70595dd8e4cf",
        "cursor": {
          "ref": "95474386-e54d-498c-b338-aae7e07504a3",
          "length": 283,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "58c341a5-8911-493c-8c40-36dbf32dafc5"
        },
        "item": {
          "id": "e41a7211-5ec1-413a-8e1b-70595dd8e4cf",
          "name": "identifiers"
        },
        "response": {
          "id": "ca6c2f55-5ae9-4696-81e5-251aec89bd73",
          "status": "OK",
          "code": 200,
          "responseTime": 74,
          "responseSize": 1462
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "649cdfc0-9e9f-43d3-a3d9-099c700c9a56",
        "cursor": {
          "ref": "d3de5c95-6726-4e3d-92a6-95c151938384",
          "length": 283,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "140326df-ad53-4f17-b076-f7dcac97c99c"
        },
        "item": {
          "id": "649cdfc0-9e9f-43d3-a3d9-099c700c9a56",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "6500e245-7da9-447f-ba54-17efac1ff580",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fdafb41c-ada8-48d3-a4c1-e0f156a0bf14",
        "cursor": {
          "ref": "29210f2b-c926-4a7f-813c-d56252badd08",
          "length": 283,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "5aa6dd7d-4aac-42c1-85e6-da7c44133bb2"
        },
        "item": {
          "id": "fdafb41c-ada8-48d3-a4c1-e0f156a0bf14",
          "name": "credentials_issue:credential.@context:missing"
        },
        "response": {
          "id": "9f07220e-02f4-4f39-b27b-a60687ea3a09",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a253af9f-e1a7-4af4-b6b6-dab030ff4057",
        "cursor": {
          "ref": "408a6492-123b-430d-be95-095c0b1dd416",
          "length": 283,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "8aabe03e-865c-43ab-8ddc-fb1e72c37abf"
        },
        "item": {
          "id": "a253af9f-e1a7-4af4-b6b6-dab030ff4057",
          "name": "credentials_issue:credential.@context:boolean"
        },
        "response": {
          "id": "a6c420d6-ecff-49cf-bf07-3e4610924c73",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ebab231f-f960-4697-be06-2ff147a5c95b",
        "cursor": {
          "ref": "00b0716e-e5da-46e9-93a1-4e1c13ddb4ec",
          "length": 283,
          "cycles": 1,
          "position": 11,
          "iteration": 0,
          "httpRequestId": "16c7e3a5-b7f1-42e1-ad57-4f02647c4d87"
        },
        "item": {
          "id": "ebab231f-f960-4697-be06-2ff147a5c95b",
          "name": "credentials_issue:credential.@context:integer Copy"
        },
        "response": {
          "id": "aaf60eff-ea00-4668-be15-b067422ecc39",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bcd92cf8-2ee2-4aa9-8251-c0a57b92affa",
        "cursor": {
          "ref": "e1fe79c8-224a-4606-9f3d-8c7039269344",
          "length": 283,
          "cycles": 1,
          "position": 12,
          "iteration": 0,
          "httpRequestId": "40361193-cc81-4ab7-a024-533c5156ed47"
        },
        "item": {
          "id": "bcd92cf8-2ee2-4aa9-8251-c0a57b92affa",
          "name": "credentials_issue:credential.@context:null"
        },
        "response": {
          "id": "cd3e40a6-1f73-4adb-a8b9-f56660c5dc2a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ccdbe69b-8278-4581-aca0-71819762f2e7",
        "cursor": {
          "ref": "c4b2aa7b-f873-4b80-8d15-6c70a3ee1f16",
          "length": 283,
          "cycles": 1,
          "position": 13,
          "iteration": 0,
          "httpRequestId": "130fcedc-53d9-4e9c-b33c-23e57d941b48"
        },
        "item": {
          "id": "ccdbe69b-8278-4581-aca0-71819762f2e7",
          "name": "credentials_issue:credential.@context:object"
        },
        "response": {
          "id": "d6e89b40-309b-4c55-be25-0acdd9692351",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e7296413-0463-40e4-9fd0-59619934417b",
        "cursor": {
          "ref": "eb5feeb6-f0aa-45d4-9553-db42c8b03cf1",
          "length": 283,
          "cycles": 1,
          "position": 14,
          "iteration": 0,
          "httpRequestId": "334b6fec-ab92-41f8-b876-0afec39a64aa"
        },
        "item": {
          "id": "e7296413-0463-40e4-9fd0-59619934417b",
          "name": "credentials_issue:credential.@context:string"
        },
        "response": {
          "id": "3a0bcd0c-2559-4819-8375-53c400edc57e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dc7b284c-85c3-4848-a289-769c6f488c2a",
        "cursor": {
          "ref": "8f5d7865-51ee-4d5e-923a-3ae152583c34",
          "length": 283,
          "cycles": 1,
          "position": 15,
          "iteration": 0,
          "httpRequestId": "9934a732-ec33-47f5-8a68-0cbd3da8732b"
        },
        "item": {
          "id": "dc7b284c-85c3-4848-a289-769c6f488c2a",
          "name": "credentials_issue:credential.@context.item.array"
        },
        "response": {
          "id": "537cab79-7ac8-41e2-964d-8967303ef46e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "80c296f8-6c06-4411-b48f-a11516af8221",
        "cursor": {
          "ref": "4ebae6c2-8076-425c-95b7-147b65541c30",
          "length": 283,
          "cycles": 1,
          "position": 16,
          "iteration": 0,
          "httpRequestId": "63c264b2-d6fb-4b14-86be-6a89f76e6c79"
        },
        "item": {
          "id": "80c296f8-6c06-4411-b48f-a11516af8221",
          "name": "credentials_issue:credential.@context.item.boolean"
        },
        "response": {
          "id": "b4084b88-1d28-4801-a7aa-5865a0319464",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4952f27a-6373-4d6c-8314-4b34893f54d2",
        "cursor": {
          "ref": "fc364d76-a29f-4a4b-af94-830741025450",
          "length": 283,
          "cycles": 1,
          "position": 17,
          "iteration": 0,
          "httpRequestId": "c802129e-c306-41b8-bf46-6014782643f1"
        },
        "item": {
          "id": "4952f27a-6373-4d6c-8314-4b34893f54d2",
          "name": "credentials_issue:credential.@context.item.integer"
        },
        "response": {
          "id": "317cfc0f-7d7c-4903-9ecd-8a1f7e91cf7d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "72166b1e-8589-4b66-a579-7e1dbc3289fc",
        "cursor": {
          "ref": "740f8f52-250d-46be-9914-33a23a18b389",
          "length": 283,
          "cycles": 1,
          "position": 18,
          "iteration": 0,
          "httpRequestId": "23bf5e17-3755-43f4-9dd8-08c7431b0524"
        },
        "item": {
          "id": "72166b1e-8589-4b66-a579-7e1dbc3289fc",
          "name": "credentials_issue:credential.@context.item.null"
        },
        "response": {
          "id": "13758f86-839a-4cfe-926d-71c22796eca6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "897ee9c9-b0cd-4c89-9c87-3542dc163e7d",
        "cursor": {
          "ref": "0eb41ef7-137b-433b-bd06-d138ff24ee61",
          "length": 283,
          "cycles": 1,
          "position": 19,
          "iteration": 0,
          "httpRequestId": "963bec86-276b-4ee0-a3ab-a4adca506923"
        },
        "item": {
          "id": "897ee9c9-b0cd-4c89-9c87-3542dc163e7d",
          "name": "credentials_issue:credential.@context.item.object"
        },
        "response": {
          "id": "5011360b-1d2e-42e3-9c61-1f1b0246514f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "776a0c57-24fc-433c-b606-5b9dcf413e76",
        "cursor": {
          "ref": "af4fb68a-848d-478c-adec-8882b6b10764",
          "length": 283,
          "cycles": 1,
          "position": 20,
          "iteration": 0,
          "httpRequestId": "f36de5c3-c298-4fd7-941a-548a6c355482"
        },
        "item": {
          "id": "776a0c57-24fc-433c-b606-5b9dcf413e76",
          "name": "credentials_issue:credential.id:array"
        },
        "response": {
          "id": "46d65d9f-94ce-4520-82c3-1bbb11b1aed3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a76d2f4a-8218-4d99-8066-0d4c60c2f59c",
        "cursor": {
          "ref": "a185b07d-6177-42d1-8a5a-8e3fcf93bb32",
          "length": 283,
          "cycles": 1,
          "position": 21,
          "iteration": 0,
          "httpRequestId": "941264e1-58a9-4759-b985-aeaa27bfa1d1"
        },
        "item": {
          "id": "a76d2f4a-8218-4d99-8066-0d4c60c2f59c",
          "name": "credentials_issue:credential.id:boolean"
        },
        "response": {
          "id": "108a4e95-3378-4ecc-a5fb-ee8698ef907f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "efb3fa44-0860-466b-9f82-933a36324cbe",
        "cursor": {
          "ref": "b45d544d-3d35-42fe-a11c-2c32e4c4e7e0",
          "length": 283,
          "cycles": 1,
          "position": 22,
          "iteration": 0,
          "httpRequestId": "c8561510-c61e-47b2-a5e6-32d22fbb6b93"
        },
        "item": {
          "id": "efb3fa44-0860-466b-9f82-933a36324cbe",
          "name": "credentials_issue:credential.id:integer"
        },
        "response": {
          "id": "47cdde54-3734-475b-b375-986d12492e12",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "408cb164-4c84-4219-8942-2c113625bcd2",
        "cursor": {
          "ref": "84db63e2-542b-4037-9bae-f81217c4e05c",
          "length": 283,
          "cycles": 1,
          "position": 23,
          "iteration": 0,
          "httpRequestId": "d75b2fd8-a912-464d-a8ec-72090f4f8474"
        },
        "item": {
          "id": "408cb164-4c84-4219-8942-2c113625bcd2",
          "name": "credentials_issue:credential.id:null"
        },
        "response": {
          "id": "6d74280c-1609-4647-b86a-33636a2d7996",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5aa5bc43-24bc-461c-97d6-23e47bd9a272",
        "cursor": {
          "ref": "1c3cf706-2f64-49b6-a48a-d2e3ec20242d",
          "length": 283,
          "cycles": 1,
          "position": 24,
          "iteration": 0,
          "httpRequestId": "97e928a4-bbc6-4608-b696-b9347e7c57f4"
        },
        "item": {
          "id": "5aa5bc43-24bc-461c-97d6-23e47bd9a272",
          "name": "credentials_issue:credential.id:object"
        },
        "response": {
          "id": "639bb550-ff08-4088-b964-66aa50b2e1c1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "af02343a-dc61-42bb-8cbc-007e8af90fc1",
        "cursor": {
          "ref": "d3845329-63dc-4167-92b3-ed6b162c3947",
          "length": 283,
          "cycles": 1,
          "position": 25,
          "iteration": 0,
          "httpRequestId": "1bbc0175-ad0a-40d5-ada0-7c46dd345a45"
        },
        "item": {
          "id": "af02343a-dc61-42bb-8cbc-007e8af90fc1",
          "name": "credentials_issue:credential.type:missing"
        },
        "response": {
          "id": "926058ce-6e7a-4e0c-bcad-58ea66be4b65",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "27da3eba-40e1-4f59-80d1-17765c43dc17",
        "cursor": {
          "ref": "82d3fa9a-3625-44d4-b425-a5e994f54b48",
          "length": 283,
          "cycles": 1,
          "position": 26,
          "iteration": 0,
          "httpRequestId": "6829a7ae-d765-47c7-801f-4ca8aa26b782"
        },
        "item": {
          "id": "27da3eba-40e1-4f59-80d1-17765c43dc17",
          "name": "credentials_issue:credential.type:boolean"
        },
        "response": {
          "id": "58ec0608-7696-42fe-8ffb-469f9b40613b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "63488ac6-e500-46a0-bc8d-e96773f36508",
        "cursor": {
          "ref": "61606c90-7353-436c-8fca-9d53e9aa484a",
          "length": 283,
          "cycles": 1,
          "position": 27,
          "iteration": 0,
          "httpRequestId": "5402f05b-34b8-412e-8f73-2c80d7c8cc08"
        },
        "item": {
          "id": "63488ac6-e500-46a0-bc8d-e96773f36508",
          "name": "credentials_issue:credential.type:integer"
        },
        "response": {
          "id": "2f58497f-8a87-4793-86b2-16de4b2bf6a3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8f0fc7da-7ece-47cf-95d8-8bf188750866",
        "cursor": {
          "ref": "584df1d6-f2b0-4ba6-ae56-9236c65989c9",
          "length": 283,
          "cycles": 1,
          "position": 28,
          "iteration": 0,
          "httpRequestId": "32683099-a674-4d5f-b333-198d5d297326"
        },
        "item": {
          "id": "8f0fc7da-7ece-47cf-95d8-8bf188750866",
          "name": "credentials_issue:credential.type:null"
        },
        "response": {
          "id": "13b347c2-b73e-4503-a883-1c0a04c6f288",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "19f8be20-56a9-49bc-9107-d4d5b16d7097",
        "cursor": {
          "ref": "19ab027a-c1e9-42b0-92c1-5941dbd25833",
          "length": 283,
          "cycles": 1,
          "position": 29,
          "iteration": 0,
          "httpRequestId": "d422150a-2d39-498a-86c8-614a911f6728"
        },
        "item": {
          "id": "19f8be20-56a9-49bc-9107-d4d5b16d7097",
          "name": "credentials_issue:credential.type:object"
        },
        "response": {
          "id": "07dd997e-86c4-432a-84e3-2b2f6bc638ed",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f628e1b5-37f8-4ccf-b36e-2e91894e1fde",
        "cursor": {
          "ref": "b32a5cf8-9ecd-4c0f-b803-a0bedbf1b0c9",
          "length": 283,
          "cycles": 1,
          "position": 30,
          "iteration": 0,
          "httpRequestId": "0d296146-8926-4e27-a6fc-c5d5c122623c"
        },
        "item": {
          "id": "f628e1b5-37f8-4ccf-b36e-2e91894e1fde",
          "name": "credentials_issue:credential.type:string"
        },
        "response": {
          "id": "c0519f54-619e-41a4-a644-041bea57b8f1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 107
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "28696c2e-4c2f-43e4-a9fe-71bdc7266471",
        "cursor": {
          "ref": "9f5d78b2-6731-4809-9cce-51fa8edd1581",
          "length": 283,
          "cycles": 1,
          "position": 31,
          "iteration": 0,
          "httpRequestId": "ab825bc8-00a3-4c5c-9433-a5852dc7a8c7"
        },
        "item": {
          "id": "28696c2e-4c2f-43e4-a9fe-71bdc7266471",
          "name": "credentials_issue:credential.type.item:missing"
        },
        "response": {
          "id": "c8144ea1-fb6b-4a7e-8346-6d194b48c384",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 107
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a16ad2e3-b74b-4161-a964-ea1bd393f327",
        "cursor": {
          "ref": "2088c614-8114-42b2-92af-80035edfc411",
          "length": 283,
          "cycles": 1,
          "position": 32,
          "iteration": 0,
          "httpRequestId": "b3ac9722-7e3b-44a2-b949-0ea0fd0c0b82"
        },
        "item": {
          "id": "a16ad2e3-b74b-4161-a964-ea1bd393f327",
          "name": "credentials_issue:credential.type.item:array"
        },
        "response": {
          "id": "8e78cf90-3192-4945-b697-0f92ed249461",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "22627e32-dcc7-4ac4-9391-893728f27e5e",
        "cursor": {
          "ref": "cf59e2d4-9ded-4a96-9cda-92e6de16d810",
          "length": 283,
          "cycles": 1,
          "position": 33,
          "iteration": 0,
          "httpRequestId": "375d3e58-1740-47ae-b400-2b7f0165ec54"
        },
        "item": {
          "id": "22627e32-dcc7-4ac4-9391-893728f27e5e",
          "name": "credentials_issue:credential.type.item:boolean"
        },
        "response": {
          "id": "c55f35fb-bae7-4c7e-830d-23cb42bf65df",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7fad7b87-9f35-4451-88b4-5edd27044ad7",
        "cursor": {
          "ref": "267857a7-5d66-4e4b-b9a7-767df6c0aecc",
          "length": 283,
          "cycles": 1,
          "position": 34,
          "iteration": 0,
          "httpRequestId": "2bd88595-b598-4411-b086-48f44f86e6bb"
        },
        "item": {
          "id": "7fad7b87-9f35-4451-88b4-5edd27044ad7",
          "name": "credentials_issue:credential.type.item:integer"
        },
        "response": {
          "id": "3313b44e-80c8-4225-be1f-fff8731ee83c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d6e8144e-5c1e-4137-b494-5509948442bb",
        "cursor": {
          "ref": "c63e8678-90e1-45f5-bd95-8c139e418358",
          "length": 283,
          "cycles": 1,
          "position": 35,
          "iteration": 0,
          "httpRequestId": "96bfee44-26b6-439b-95c4-5cde701c616b"
        },
        "item": {
          "id": "d6e8144e-5c1e-4137-b494-5509948442bb",
          "name": "credentials_issue:credential.type.item:null"
        },
        "response": {
          "id": "4e375195-0b2c-4012-a01f-6208a52a261d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fb659243-a7f9-4a19-a414-abf4c0c12bbd",
        "cursor": {
          "ref": "db568875-123e-4d87-9798-a07aae2ed517",
          "length": 283,
          "cycles": 1,
          "position": 36,
          "iteration": 0,
          "httpRequestId": "a7d58fb1-4cb7-4164-b7a0-e4d7e6b2d2ba"
        },
        "item": {
          "id": "fb659243-a7f9-4a19-a414-abf4c0c12bbd",
          "name": "credentials_issue:credential.type.item:object"
        },
        "response": {
          "id": "d0908a23-96f0-4faa-a3de-2a0f275c11e1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0a2ace76-ee8e-4fa4-b897-108173bffd52",
        "cursor": {
          "ref": "21b8c183-1539-4013-a90f-c2a89547155b",
          "length": 283,
          "cycles": 1,
          "position": 37,
          "iteration": 0,
          "httpRequestId": "3fbd6e25-ef0d-44f7-b82e-7efa74bb2349"
        },
        "item": {
          "id": "0a2ace76-ee8e-4fa4-b897-108173bffd52",
          "name": "credentials_issue:credential.issuer:missing"
        },
        "response": {
          "id": "54769896-36e6-4953-b3be-406d2829fb85",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 96
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7ba1895a-44df-4232-a0f2-43c9e645d76a",
        "cursor": {
          "ref": "f5062ba4-0233-45ff-8fcb-05d38797077c",
          "length": 283,
          "cycles": 1,
          "position": 38,
          "iteration": 0,
          "httpRequestId": "615f2932-5998-4252-b8a2-79f71c9ad599"
        },
        "item": {
          "id": "7ba1895a-44df-4232-a0f2-43c9e645d76a",
          "name": "credentials_issue:credential.issuer:array"
        },
        "response": {
          "id": "2bd5a597-40db-44b0-ba22-335836e50853",
          "status": "Created",
          "code": 201,
          "responseTime": 486,
          "responseSize": 691
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:39)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:39)"
            }
          }
        ]
      },
      {
        "id": "023a9c62-276c-40e9-ab88-75e0a574c886",
        "cursor": {
          "ref": "2a3a75a5-b710-45eb-af75-d8e89b7bb597",
          "length": 283,
          "cycles": 1,
          "position": 39,
          "iteration": 0,
          "httpRequestId": "5642fc32-68ea-45f1-a30d-7d83b5cac37b"
        },
        "item": {
          "id": "023a9c62-276c-40e9-ab88-75e0a574c886",
          "name": "credentials_issue:credential.issuer:boolean"
        },
        "response": {
          "id": "b29fe62c-b03a-4d2e-aa85-15e97f56aad3",
          "status": "Created",
          "code": 201,
          "responseTime": 229,
          "responseSize": 650
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:40)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:40)"
            }
          }
        ]
      },
      {
        "id": "711c053b-457b-464e-93c5-4b703ca55993",
        "cursor": {
          "ref": "1ce86049-df23-44d3-8142-02e737793239",
          "length": 283,
          "cycles": 1,
          "position": 40,
          "iteration": 0,
          "httpRequestId": "bc1ea830-6149-43d6-a449-5d1b11ff6b0a"
        },
        "item": {
          "id": "711c053b-457b-464e-93c5-4b703ca55993",
          "name": "credentials_issue:credential.issuer:integer"
        },
        "response": {
          "id": "82926c5b-edf5-4d31-9be0-88e4081877aa",
          "status": "Created",
          "code": 201,
          "responseTime": 228,
          "responseSize": 647
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:41)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:41)"
            }
          }
        ]
      },
      {
        "id": "92e9d2c1-6ba8-4bc1-b687-64c3b5b46965",
        "cursor": {
          "ref": "1f2e234d-17b1-4775-8b26-13391fc6d7f9",
          "length": 283,
          "cycles": 1,
          "position": 41,
          "iteration": 0,
          "httpRequestId": "398b137f-c6d1-4d7f-9568-7198a5b400e5"
        },
        "item": {
          "id": "92e9d2c1-6ba8-4bc1-b687-64c3b5b46965",
          "name": "credentials_issue:credential.issuer:null"
        },
        "response": {
          "id": "90df94b4-d581-43c6-93a9-1075f559a3e4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 96
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ac400dd4-5066-45cd-8592-24e78d569058",
        "cursor": {
          "ref": "59bf12db-1624-4377-ab55-55490ba9d11a",
          "length": 283,
          "cycles": 1,
          "position": 42,
          "iteration": 0,
          "httpRequestId": "e97bbff6-8660-40d2-9df7-997e3b6946f5"
        },
        "item": {
          "id": "ac400dd4-5066-45cd-8592-24e78d569058",
          "name": "credentials_issue.credential.issuer:invalid"
        },
        "response": {
          "id": "1a49df9f-2ce3-44b7-862d-eb0ba7ac372e",
          "status": "Created",
          "code": 201,
          "responseTime": 221,
          "responseSize": 656
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:43)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:43)"
            }
          }
        ]
      },
      {
        "id": "d31e9249-03cc-4ef2-a69b-344adb6eec2f",
        "cursor": {
          "ref": "3afc2171-76e7-474c-9d31-006066899f4e",
          "length": 283,
          "cycles": 1,
          "position": 43,
          "iteration": 0,
          "httpRequestId": "5b694b79-fa47-4e04-8950-116aefdcc5aa"
        },
        "item": {
          "id": "d31e9249-03cc-4ef2-a69b-344adb6eec2f",
          "name": "credentials_issue.credential.issuer:unknown"
        },
        "response": {
          "id": "9441bddd-25a5-41f0-a202-15dbdc612382",
          "status": "Created",
          "code": 201,
          "responseTime": 355,
          "responseSize": 692
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 201",
              "stack": "AssertionError: expected response to have status code 422 but got 201\n   at Object.eval sandbox-script.js:1:44)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:44)"
            }
          }
        ]
      },
      {
        "id": "250c95dc-f75c-4c3f-b87b-a4b7865c6860",
        "cursor": {
          "ref": "afcd6c20-0249-42ab-a89c-2e3ed3c189f0",
          "length": 283,
          "cycles": 1,
          "position": 44,
          "iteration": 0,
          "httpRequestId": "73209a7f-54e2-46c7-b94b-d8c294e66890"
        },
        "item": {
          "id": "250c95dc-f75c-4c3f-b87b-a4b7865c6860",
          "name": "credentials_issue:credential.issuer.id:missing"
        },
        "response": {
          "id": "5ec30404-cca9-4115-b75a-452371a302c1",
          "status": "Created",
          "code": 201,
          "responseTime": 219,
          "responseSize": 647
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:45)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:45)"
            }
          }
        ]
      },
      {
        "id": "07f00620-bd72-4d9b-a527-c90294958998",
        "cursor": {
          "ref": "e5a97827-359b-47ac-b242-ff7996395b31",
          "length": 283,
          "cycles": 1,
          "position": 45,
          "iteration": 0,
          "httpRequestId": "40b0faed-2f50-4b8c-a4cf-53f271a47e9d"
        },
        "item": {
          "id": "07f00620-bd72-4d9b-a527-c90294958998",
          "name": "credentials_issue:credential.issuer.id:array"
        },
        "response": {
          "id": "d66822d4-2571-48e1-86cb-1631b3aa50b6",
          "status": "Created",
          "code": 201,
          "responseTime": 226,
          "responseSize": 698
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:46)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:46)"
            }
          }
        ]
      },
      {
        "id": "5480681e-bd30-4422-9be4-f463e3f5a868",
        "cursor": {
          "ref": "52076b31-2bb9-44ff-b155-03d2cf484537",
          "length": 283,
          "cycles": 1,
          "position": 46,
          "iteration": 0,
          "httpRequestId": "becf9488-8380-46bc-be20-9e4500ba76b4"
        },
        "item": {
          "id": "5480681e-bd30-4422-9be4-f463e3f5a868",
          "name": "credentials_issue:credential.issuer.id:boolean"
        },
        "response": {
          "id": "1541cfa8-dac4-4778-bd99-07f563b1ac66",
          "status": "Created",
          "code": 201,
          "responseTime": 235,
          "responseSize": 657
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:47)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:47)"
            }
          }
        ]
      },
      {
        "id": "4c369c2a-af30-4b66-8e20-c190c2f3dd83",
        "cursor": {
          "ref": "7f5169a8-6157-4e74-94b3-e73849ce1e58",
          "length": 283,
          "cycles": 1,
          "position": 47,
          "iteration": 0,
          "httpRequestId": "a4e2a38f-c3ae-40f4-8b6a-e23139e575d8"
        },
        "item": {
          "id": "4c369c2a-af30-4b66-8e20-c190c2f3dd83",
          "name": "credentials_issue:credential.issuer.id:integer"
        },
        "response": {
          "id": "43b922d7-2795-4041-a160-69d7f74a3aea",
          "status": "Created",
          "code": 201,
          "responseTime": 229,
          "responseSize": 654
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:48)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:48)"
            }
          }
        ]
      },
      {
        "id": "aa4d6670-439b-48d6-9668-c157d89f541c",
        "cursor": {
          "ref": "c1632a59-893f-4711-93f3-84eb8a3794ba",
          "length": 283,
          "cycles": 1,
          "position": 48,
          "iteration": 0,
          "httpRequestId": "50e11e8b-9c8e-4af3-bd54-a75738169689"
        },
        "item": {
          "id": "aa4d6670-439b-48d6-9668-c157d89f541c",
          "name": "credentials_issue:credential.issuer.id:null"
        },
        "response": {
          "id": "c7483a32-314b-4ce4-a00d-0cf4747ba4fc",
          "status": "Created",
          "code": 201,
          "responseTime": 336,
          "responseSize": 656
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:49)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:49)"
            }
          }
        ]
      },
      {
        "id": "e427dc72-6b84-4e5c-864d-8475959c3d89",
        "cursor": {
          "ref": "7ad40e0b-8e74-48e7-94e6-969f55c1e70c",
          "length": 283,
          "cycles": 1,
          "position": 49,
          "iteration": 0,
          "httpRequestId": "cf80504f-50a3-4f22-928f-7bd426c98ce1"
        },
        "item": {
          "id": "e427dc72-6b84-4e5c-864d-8475959c3d89",
          "name": "credentials_issue.credential.issuer.id:invalid"
        },
        "response": {
          "id": "7e642ed2-eb29-494d-bfcb-47f279dd1fe8",
          "status": "Created",
          "code": 201,
          "responseTime": 232,
          "responseSize": 663
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:50)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:50)"
            }
          }
        ]
      },
      {
        "id": "54fa3f1c-2f7b-43c8-a0c2-9d321e597e34",
        "cursor": {
          "ref": "a15117ab-21f9-4ede-a107-0e344d77b0e7",
          "length": 283,
          "cycles": 1,
          "position": 50,
          "iteration": 0,
          "httpRequestId": "478d4304-3554-47b2-bf27-14813e95b81a"
        },
        "item": {
          "id": "54fa3f1c-2f7b-43c8-a0c2-9d321e597e34",
          "name": "credentials_issue.credential.issuer.id:unknown"
        },
        "response": {
          "id": "3737c4be-9752-4bc9-a6ef-c8ee46d6c084",
          "status": "Created",
          "code": 201,
          "responseTime": 238,
          "responseSize": 699
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 201",
              "stack": "AssertionError: expected response to have status code 422 but got 201\n   at Object.eval sandbox-script.js:1:51)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:51)"
            }
          }
        ]
      },
      {
        "id": "9463944e-7496-46bd-bc2a-a0b9c70be1c6",
        "cursor": {
          "ref": "f0f87efb-8190-419a-b34f-85c5e76eb9ab",
          "length": 283,
          "cycles": 1,
          "position": 51,
          "iteration": 0,
          "httpRequestId": "7c14a795-d4fe-4e1e-8dfb-86843c715150"
        },
        "item": {
          "id": "9463944e-7496-46bd-bc2a-a0b9c70be1c6",
          "name": "credentials_issue:credential.issuanceDate.missing"
        },
        "response": {
          "id": "ec5fd680-bdfa-4b1e-ae00-e62d057f2625",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 167
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d9aa543f-4cda-418b-9748-445e67e681b5",
        "cursor": {
          "ref": "db715f1f-d494-477f-9ed3-ae39bb86481f",
          "length": 283,
          "cycles": 1,
          "position": 52,
          "iteration": 0,
          "httpRequestId": "133cbacd-8741-453d-b263-d43d2e26c80e"
        },
        "item": {
          "id": "d9aa543f-4cda-418b-9748-445e67e681b5",
          "name": "credentials_issue:credential.issuanceDate:array"
        },
        "response": {
          "id": "24279fae-5d10-4b72-baa9-e632db93c236",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 70,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8f6c49d7-b933-4a44-a8ee-33f4e947e109",
        "cursor": {
          "ref": "35213d76-4ae1-4ab4-9486-e5f456d76a7f",
          "length": 283,
          "cycles": 1,
          "position": 53,
          "iteration": 0,
          "httpRequestId": "4ae0d6c5-adee-4f25-8a35-2ba9b353a284"
        },
        "item": {
          "id": "8f6c49d7-b933-4a44-a8ee-33f4e947e109",
          "name": "credentials_issue:credential.issuanceDate:boolean"
        },
        "response": {
          "id": "c2025526-46ca-45e1-b394-89a2119de509",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 126,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0a84365b-2dd9-4b4b-a674-532cb3f35a75",
        "cursor": {
          "ref": "e6b0da9a-1a12-4bea-b617-dca5ff6cbc5c",
          "length": 283,
          "cycles": 1,
          "position": 54,
          "iteration": 0,
          "httpRequestId": "6a9a1fbf-2190-4ff0-a430-a4a886464867"
        },
        "item": {
          "id": "0a84365b-2dd9-4b4b-a674-532cb3f35a75",
          "name": "credentials_issue:credential.issuanceDate:integer"
        },
        "response": {
          "id": "743a71e7-6ddd-4317-87ba-18934f028413",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2c06aea0-9722-4c02-a4d5-43755249a29d",
        "cursor": {
          "ref": "4fdb6b82-f42d-406c-88c3-e62ac76eb17b",
          "length": 283,
          "cycles": 1,
          "position": 55,
          "iteration": 0,
          "httpRequestId": "aeb9891d-a523-40bd-862a-7b926a6355d8"
        },
        "item": {
          "id": "2c06aea0-9722-4c02-a4d5-43755249a29d",
          "name": "credentials_issue:credential.issuanceDate:null"
        },
        "response": {
          "id": "4e40ef72-6709-4261-9530-9a67bee09d34",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 167
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9f404c0e-f1dd-4a05-9422-a9a579349638",
        "cursor": {
          "ref": "3675ed03-a180-498d-a5fa-7844ac290919",
          "length": 283,
          "cycles": 1,
          "position": 56,
          "iteration": 0,
          "httpRequestId": "f1bdb697-3303-4787-a3e8-ccf562958303"
        },
        "item": {
          "id": "9f404c0e-f1dd-4a05-9422-a9a579349638",
          "name": "credentials_issue:credential.issuanceDate:object"
        },
        "response": {
          "id": "fb85773f-3e0b-434a-883e-f9b101811918",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "afc8115f-032c-47a9-87ad-ed67aa5cac22",
        "cursor": {
          "ref": "f6cad426-e6fa-4de9-a268-8302aa1a73a9",
          "length": 283,
          "cycles": 1,
          "position": 57,
          "iteration": 0,
          "httpRequestId": "03094831-b58e-42b6-b734-b59be09facb8"
        },
        "item": {
          "id": "afc8115f-032c-47a9-87ad-ed67aa5cac22",
          "name": "credentials_issue:credential.issuanceDate:invalid_value"
        },
        "response": {
          "id": "8ddc7d8f-6700-407b-a713-4d9736a1c09e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "417237d1-2adf-421d-b0d0-a51ecbf162f7",
        "cursor": {
          "ref": "5fa354f4-f7cd-48d1-a86a-6de06e4ad5e0",
          "length": 283,
          "cycles": 1,
          "position": 58,
          "iteration": 0,
          "httpRequestId": "ff7c581a-ff50-4a5b-b696-6e72ae0c0f41"
        },
        "item": {
          "id": "417237d1-2adf-421d-b0d0-a51ecbf162f7",
          "name": "credentials_issue:credential.credentialSubject:missing"
        },
        "response": {
          "id": "aafd9095-e128-46e0-a4a7-f47202d88706",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ce8f60aa-6c9d-451b-887a-0a5795ec4fee",
        "cursor": {
          "ref": "0dab95f6-a3e2-4075-b9b4-88fb9062e5cc",
          "length": 283,
          "cycles": 1,
          "position": 59,
          "iteration": 0,
          "httpRequestId": "b40d1c6b-50af-4c21-bc74-6deec69ad7d3"
        },
        "item": {
          "id": "ce8f60aa-6c9d-451b-887a-0a5795ec4fee",
          "name": "credentials_issue:credential.credentialSubject:array"
        },
        "response": {
          "id": "701699b3-3447-4f1b-8bee-67392d6e611c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 203
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "aaa3cb5f-216a-48ec-a0ad-5314b33a1f4c",
        "cursor": {
          "ref": "728366ab-9c66-4539-a6af-52e36eec2b83",
          "length": 283,
          "cycles": 1,
          "position": 60,
          "iteration": 0,
          "httpRequestId": "c5cfce63-81f8-4d3c-a156-dfd01f55b756"
        },
        "item": {
          "id": "aaa3cb5f-216a-48ec-a0ad-5314b33a1f4c",
          "name": "credentials_issue:credential.credentialSubject:boolean"
        },
        "response": {
          "id": "3cddc177-0d03-4fad-9a55-c54b81fb48a4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 185
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a78eee7c-13f9-47fb-83b4-b3f9fb89cfda",
        "cursor": {
          "ref": "249a1c2e-8966-4580-8c74-507a9f8e3dab",
          "length": 283,
          "cycles": 1,
          "position": 61,
          "iteration": 0,
          "httpRequestId": "5a0981ad-5b93-42bb-b909-b828966abb77"
        },
        "item": {
          "id": "a78eee7c-13f9-47fb-83b4-b3f9fb89cfda",
          "name": "credentials_issue:credential.credentialSubject:integer"
        },
        "response": {
          "id": "f2b64b02-346d-4e92-9382-9bd534adc7fe",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 185
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9f64f47a-7af4-4cbc-9c50-d8e17c5cf5cc",
        "cursor": {
          "ref": "ca8fc0c8-f769-47a9-9584-bc137bb504b9",
          "length": 283,
          "cycles": 1,
          "position": 62,
          "iteration": 0,
          "httpRequestId": "ae784603-4077-4673-b77d-c79265f51ce4"
        },
        "item": {
          "id": "9f64f47a-7af4-4cbc-9c50-d8e17c5cf5cc",
          "name": "credentials_issue:credential.credentialSubject:null"
        },
        "response": {
          "id": "22cac6fe-5671-44c9-8349-aad08316614b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 238
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3df30251-e6fe-4dc6-a1ca-1dbf6177bb98",
        "cursor": {
          "ref": "a7bf02e7-5647-427a-8e48-8b588eedbeb3",
          "length": 283,
          "cycles": 1,
          "position": 63,
          "iteration": 0,
          "httpRequestId": "bd963997-9b4a-4143-86ca-5ff18e98cc0c"
        },
        "item": {
          "id": "3df30251-e6fe-4dc6-a1ca-1dbf6177bb98",
          "name": "credentials_issue:credential.credentialSubject:string"
        },
        "response": {
          "id": "78475bb3-c0a4-43cf-91e2-05d87d2c2535",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 185
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ac632b53-9425-4f6a-9357-bbf2eff155a5",
        "cursor": {
          "ref": "76ad19d7-54b5-48aa-bf7a-5fea040cf7c9",
          "length": 283,
          "cycles": 1,
          "position": 64,
          "iteration": 0,
          "httpRequestId": "f2b148d7-4ecd-4f54-aa7f-e90e3bd612b4"
        },
        "item": {
          "id": "ac632b53-9425-4f6a-9357-bbf2eff155a5",
          "name": "credentials_issue:credential.credentialSubject.id:array"
        },
        "response": {
          "id": "9503c4b3-74e1-4687-a94b-9ee29f078925",
          "status": "Created",
          "code": 201,
          "responseTime": 214,
          "responseSize": 702
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:65)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:65)"
            }
          }
        ]
      },
      {
        "id": "0bcbd7d3-7348-4921-a6e0-b0508538f339",
        "cursor": {
          "ref": "aaa73e32-d5d8-4522-b8a6-37964d5dfd61",
          "length": 283,
          "cycles": 1,
          "position": 65,
          "iteration": 0,
          "httpRequestId": "fc40da60-c324-4111-bea1-761fcdbeb75b"
        },
        "item": {
          "id": "0bcbd7d3-7348-4921-a6e0-b0508538f339",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy"
        },
        "response": {
          "id": "dd171fd5-4c5a-44fc-a583-24ab368c04ea",
          "status": "Created",
          "code": 201,
          "responseTime": 234,
          "responseSize": 688
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:66)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:66)"
            }
          }
        ]
      },
      {
        "id": "425bedbd-4817-4a60-ada5-03ce2c17e229",
        "cursor": {
          "ref": "b8265ef9-ab01-4a45-98cd-1b2e638b23d2",
          "length": 283,
          "cycles": 1,
          "position": 66,
          "iteration": 0,
          "httpRequestId": "e4941eef-550b-447d-82a9-2cffdbbad364"
        },
        "item": {
          "id": "425bedbd-4817-4a60-ada5-03ce2c17e229",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 2"
        },
        "response": {
          "id": "9f5c69c9-bcd4-4079-ace4-b6d804635e76",
          "status": "Created",
          "code": 201,
          "responseTime": 217,
          "responseSize": 685
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:67)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:67)"
            }
          }
        ]
      },
      {
        "id": "2fed4c37-364d-42c0-94a9-3fef12e86382",
        "cursor": {
          "ref": "9a4e56d8-ea14-4c83-923b-0a9919665d63",
          "length": 283,
          "cycles": 1,
          "position": 67,
          "iteration": 0,
          "httpRequestId": "be5120bb-e3dd-40a8-bb4a-7bbaf404e2f6"
        },
        "item": {
          "id": "2fed4c37-364d-42c0-94a9-3fef12e86382",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 3"
        },
        "response": {
          "id": "cf961456-ad9d-473d-8294-7480949d0fba",
          "status": "Created",
          "code": 201,
          "responseTime": 218,
          "responseSize": 687
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:68)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:68)"
            }
          }
        ]
      },
      {
        "id": "84b92a5f-d9b8-49b3-ada1-8dd908589a50",
        "cursor": {
          "ref": "28ef7891-8d08-4986-bf7a-e98144802a9c",
          "length": 283,
          "cycles": 1,
          "position": 68,
          "iteration": 0,
          "httpRequestId": "e0e3b8c8-d23e-4941-9621-f7d168f4115b"
        },
        "item": {
          "id": "84b92a5f-d9b8-49b3-ada1-8dd908589a50",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 4"
        },
        "response": {
          "id": "79cdd0d1-d87b-433c-b64b-2c9d35bb6313",
          "status": "Created",
          "code": 201,
          "responseTime": 220,
          "responseSize": 685
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:69)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:69)"
            }
          }
        ]
      },
      {
        "id": "20ca5230-bc89-44aa-938f-8b07439bed34",
        "cursor": {
          "ref": "ae8d4d87-b19a-4324-82cd-05e2d97d28b7",
          "length": 283,
          "cycles": 1,
          "position": 69,
          "iteration": 0,
          "httpRequestId": "a4613ede-d98d-4c22-99c1-8cd2c2011dcc"
        },
        "item": {
          "id": "20ca5230-bc89-44aa-938f-8b07439bed34",
          "name": "credentials_issue:options:missing"
        },
        "response": {
          "id": "a179b1a0-4e54-4fdc-bcef-08314d45f9c0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 116
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "baa55527-a98c-4031-afd6-05eec55f8d7c",
        "cursor": {
          "ref": "b662860d-8863-4bd2-9f34-3a1badc0327a",
          "length": 283,
          "cycles": 1,
          "position": 70,
          "iteration": 0,
          "httpRequestId": "6f175a7d-f6c1-4c37-8328-f07d28355ac9"
        },
        "item": {
          "id": "baa55527-a98c-4031-afd6-05eec55f8d7c",
          "name": "credentials_issue:options:array"
        },
        "response": {
          "id": "ad3f6c5f-8225-4ed7-9d7f-aa31edde6366",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2f670f53-6ea5-4d11-b7e3-ac68b12caac4",
        "cursor": {
          "ref": "efb47003-dce2-4f79-8a59-4640a882e8fd",
          "length": 283,
          "cycles": 1,
          "position": 71,
          "iteration": 0,
          "httpRequestId": "22dd8ac7-9eb6-46a7-bc87-93db5216eed3"
        },
        "item": {
          "id": "2f670f53-6ea5-4d11-b7e3-ac68b12caac4",
          "name": "credentials_issue:options:boolean"
        },
        "response": {
          "id": "5f443674-5f3a-4ad1-9f4c-3024eed6cb72",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 157
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "70616f69-fdb9-4a51-b89f-2f35351ec20e",
        "cursor": {
          "ref": "1cdae85c-0810-4784-93ee-a90fea3087ed",
          "length": 283,
          "cycles": 1,
          "position": 72,
          "iteration": 0,
          "httpRequestId": "72ab9b05-d216-4a65-a88e-e4a52d96049a"
        },
        "item": {
          "id": "70616f69-fdb9-4a51-b89f-2f35351ec20e",
          "name": "credentials_issue:options:integer"
        },
        "response": {
          "id": "344c0334-d1f2-4940-9879-90fb880052b0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 157
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3dc125e1-3738-42c3-964b-b7970a1d6499",
        "cursor": {
          "ref": "b3bcd6b5-7e65-4a46-a258-650d95e71bfd",
          "length": 283,
          "cycles": 1,
          "position": 73,
          "iteration": 0,
          "httpRequestId": "a4edca61-3e33-4004-a8ff-e3788ef2666c"
        },
        "item": {
          "id": "3dc125e1-3738-42c3-964b-b7970a1d6499",
          "name": "credentials_issue:options:null"
        },
        "response": {
          "id": "2d0982cd-67a3-4797-905f-bfd9bd8ccf32",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 189
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "eadc6370-f2a5-4299-a9fd-c521268fd20c",
        "cursor": {
          "ref": "0157bc9d-d81c-483a-8a1b-35b24782b76c",
          "length": 283,
          "cycles": 1,
          "position": 74,
          "iteration": 0,
          "httpRequestId": "f703c10a-5396-4ee3-974f-7d9f3ec93f78"
        },
        "item": {
          "id": "eadc6370-f2a5-4299-a9fd-c521268fd20c",
          "name": "credentials_issue:options:string"
        },
        "response": {
          "id": "9ad8e5b2-26aa-4faa-9c47-ae3a69c8bff6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 189
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "650ddd14-eeda-4b8a-a331-1888a6aaf2bb",
        "cursor": {
          "ref": "e780bfe9-bb90-413f-ac0c-a572b4f98a05",
          "length": 283,
          "cycles": 1,
          "position": 75,
          "iteration": 0,
          "httpRequestId": "2c9d5231-f393-42e3-a620-2f86618d53b9"
        },
        "item": {
          "id": "650ddd14-eeda-4b8a-a331-1888a6aaf2bb",
          "name": "credentials_issue:options.type:missing"
        },
        "response": {
          "id": "a64eac46-6386-42f4-8d4a-ba446b08c37c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 278
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2af18a22-7e30-4be7-82bf-193f509ed03a",
        "cursor": {
          "ref": "550258e1-726c-44b2-b57f-e84bac1146ac",
          "length": 283,
          "cycles": 1,
          "position": 76,
          "iteration": 0,
          "httpRequestId": "2108bb44-d593-441d-996f-adf89a498504"
        },
        "item": {
          "id": "2af18a22-7e30-4be7-82bf-193f509ed03a",
          "name": "credentials_issue:options.type:array"
        },
        "response": {
          "id": "29f62cf0-6d3c-4d41-a352-353dbcc6686b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fb13da65-fd37-4029-8a2f-5469c38ad787",
        "cursor": {
          "ref": "598f9837-b912-4595-9f77-32a21258a822",
          "length": 283,
          "cycles": 1,
          "position": 77,
          "iteration": 0,
          "httpRequestId": "7d54bc91-069d-41bf-947c-2728b5b7e357"
        },
        "item": {
          "id": "fb13da65-fd37-4029-8a2f-5469c38ad787",
          "name": "credentials_issue:options.type:boolean"
        },
        "response": {
          "id": "5906b3a7-9480-4198-90e7-2d358ee2d693",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7515f31e-fb90-4b80-98f0-99fd74786cdf",
        "cursor": {
          "ref": "041286b1-a88e-401b-9b23-54ec3d7cc895",
          "length": 283,
          "cycles": 1,
          "position": 78,
          "iteration": 0,
          "httpRequestId": "2a5064fc-33dc-4250-a346-2d7b25244547"
        },
        "item": {
          "id": "7515f31e-fb90-4b80-98f0-99fd74786cdf",
          "name": "credentials_issue:options.type:integer"
        },
        "response": {
          "id": "64859010-d905-4e2b-8cd5-49e32b12be99",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5305da44-0323-4d49-a5a9-c83973452190",
        "cursor": {
          "ref": "c5aeb82d-d3d4-4f3e-ba44-763bab082553",
          "length": 283,
          "cycles": 1,
          "position": 79,
          "iteration": 0,
          "httpRequestId": "55c21007-1906-458d-a8b8-e0fc87e05e5b"
        },
        "item": {
          "id": "5305da44-0323-4d49-a5a9-c83973452190",
          "name": "credentials_issue:options.type:null"
        },
        "response": {
          "id": "0cbd9462-6de4-4fba-9d74-555273b1769e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 278
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f95a60b1-ed85-44bd-a37a-fe481a74b3d6",
        "cursor": {
          "ref": "7953485d-cc96-4210-950e-2ce3764e9001",
          "length": 283,
          "cycles": 1,
          "position": 80,
          "iteration": 0,
          "httpRequestId": "c1f24a3a-61ca-4825-90bf-621c3ea1e65f"
        },
        "item": {
          "id": "f95a60b1-ed85-44bd-a37a-fe481a74b3d6",
          "name": "credentials_issue:options.type:object"
        },
        "response": {
          "id": "ae23572c-7d9c-4299-8517-97b54b10b5dc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "899f4336-9e4e-4d02-b406-980824dc1aee",
        "cursor": {
          "ref": "d6a145b0-a069-4e0b-a0c5-f6dd7ecbd393",
          "length": 283,
          "cycles": 1,
          "position": 81,
          "iteration": 0,
          "httpRequestId": "bf4a3bc4-2b2c-4a27-870b-d8e062b668e4"
        },
        "item": {
          "id": "899f4336-9e4e-4d02-b406-980824dc1aee",
          "name": "credentials_issue:options.type:invalid_value"
        },
        "response": {
          "id": "ca9b227c-e9d4-47e5-97f9-de85080e2603",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 207
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "27353e5a-04e1-40da-b15a-9233a0721e4d",
        "cursor": {
          "ref": "4e77c25f-21b7-4d6b-8bca-11446dc51cb8",
          "length": 283,
          "cycles": 1,
          "position": 82,
          "iteration": 0,
          "httpRequestId": "7f1ba563-cbf6-4bbb-91ac-8480b337ddbe"
        },
        "item": {
          "id": "27353e5a-04e1-40da-b15a-9233a0721e4d",
          "name": "credentials_issue:options.created:array"
        },
        "response": {
          "id": "d4e2091d-286c-4f6b-b869-fc5e9b71226f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "18bf2038-d930-4b8d-b5c4-6e99ea1f443e",
        "cursor": {
          "ref": "49093503-bf1a-4976-924e-c4c158c1ad6f",
          "length": 283,
          "cycles": 1,
          "position": 83,
          "iteration": 0,
          "httpRequestId": "9055cedf-e7df-4457-acd2-6494625048f4"
        },
        "item": {
          "id": "18bf2038-d930-4b8d-b5c4-6e99ea1f443e",
          "name": "credentials_issue:options.created:boolean"
        },
        "response": {
          "id": "dd256d0f-f77e-4296-98da-9d59e0b0d3b8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1b81b3d0-59ac-4428-9fb2-3b7146108262",
        "cursor": {
          "ref": "b12c28d5-6cec-444b-ada8-af5d4df56023",
          "length": 283,
          "cycles": 1,
          "position": 84,
          "iteration": 0,
          "httpRequestId": "7de84473-c31f-4132-ace5-3140aa12e2c7"
        },
        "item": {
          "id": "1b81b3d0-59ac-4428-9fb2-3b7146108262",
          "name": "credentials_issue:options.created:integer"
        },
        "response": {
          "id": "92d1cfb1-b63a-42ce-9285-444cbe0cb51e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ef6be9e6-4f9b-4108-8fd7-85c339c38721",
        "cursor": {
          "ref": "55b53028-a3a7-4a40-95fb-90e28d026f73",
          "length": 283,
          "cycles": 1,
          "position": 85,
          "iteration": 0,
          "httpRequestId": "7e032576-57ea-444a-b3a8-3cc0dec0e3ec"
        },
        "item": {
          "id": "ef6be9e6-4f9b-4108-8fd7-85c339c38721",
          "name": "credentials_issue:options.created:null"
        },
        "response": {
          "id": "4f8130f4-e6b6-4825-bdfb-664122b9654f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "243ca6cf-b4f9-40d1-b13a-652410d7100c",
        "cursor": {
          "ref": "325ec455-03b5-4639-9232-77a82423e91a",
          "length": 283,
          "cycles": 1,
          "position": 86,
          "iteration": 0,
          "httpRequestId": "1147ca6f-0f36-4b49-b9d1-93f568b87c06"
        },
        "item": {
          "id": "243ca6cf-b4f9-40d1-b13a-652410d7100c",
          "name": "credentials_issue:options.created:object"
        },
        "response": {
          "id": "f631dbe3-4b3e-4047-a8d1-63602bd964a5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8acd20ab-64b0-4b5d-8574-6f5ec0a67c58",
        "cursor": {
          "ref": "249d890c-2c14-4177-86bd-6c757e8d3366",
          "length": 283,
          "cycles": 1,
          "position": 87,
          "iteration": 0,
          "httpRequestId": "05390fe5-198c-4d6e-8536-4bfceaf6058a"
        },
        "item": {
          "id": "8acd20ab-64b0-4b5d-8574-6f5ec0a67c58",
          "name": "credentials_issue:options.created:invalid"
        },
        "response": {
          "id": "df3537eb-9986-4e7d-8c9d-6f51d950b481",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "977d46b6-0db8-42d2-9a15-ffe4e005d796",
        "cursor": {
          "ref": "eaa4514e-c594-446c-9c3c-41fa3bc85f13",
          "length": 283,
          "cycles": 1,
          "position": 88,
          "iteration": 0,
          "httpRequestId": "669db78e-4027-41d0-a5a0-2c0fa5159909"
        },
        "item": {
          "id": "977d46b6-0db8-42d2-9a15-ffe4e005d796",
          "name": "credentials_issue:options.credentialStatus:array"
        },
        "response": {
          "id": "b50092c9-6ba0-4e72-9f44-31e906b4d672",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2a0077c4-1dc0-4f90-bc4f-afe33ff072f2",
        "cursor": {
          "ref": "d3b1471c-0590-4fbd-b926-95bf7f8556df",
          "length": 283,
          "cycles": 1,
          "position": 89,
          "iteration": 0,
          "httpRequestId": "dd61a2d8-908a-4399-8177-785568c998c0"
        },
        "item": {
          "id": "2a0077c4-1dc0-4f90-bc4f-afe33ff072f2",
          "name": "credentials_issue:options.credentialStatus:boolean"
        },
        "response": {
          "id": "c3c84f33-2ed5-4ca1-a050-1cef17ecb0a4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e05dd348-3f1e-4260-8503-35160c373df5",
        "cursor": {
          "ref": "9c198edf-3db1-4266-b24b-e32e6d2cfb87",
          "length": 283,
          "cycles": 1,
          "position": 90,
          "iteration": 0,
          "httpRequestId": "38504c5a-c3dd-406c-ac10-ce678173fc74"
        },
        "item": {
          "id": "e05dd348-3f1e-4260-8503-35160c373df5",
          "name": "credentials_issue:options.credentialStatus:integer"
        },
        "response": {
          "id": "18caea96-1212-4bfb-ab18-452a328c6280",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a52c3919-a20b-4dfe-bece-73d42eed6579",
        "cursor": {
          "ref": "899b63c8-b2c5-48f7-abd7-1be7a5e6e266",
          "length": 283,
          "cycles": 1,
          "position": 91,
          "iteration": 0,
          "httpRequestId": "cf1c5ce6-2d4e-49f4-b4e8-57962cbee438"
        },
        "item": {
          "id": "a52c3919-a20b-4dfe-bece-73d42eed6579",
          "name": "credentials_issue:options.credentialStatus:null"
        },
        "response": {
          "id": "129ddcc9-2ea4-404c-888a-e6e70f074469",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d01a0ab9-1635-4030-bc13-721988976dd1",
        "cursor": {
          "ref": "3ea81488-ca31-4166-ba7e-f6267a02a7bb",
          "length": 283,
          "cycles": 1,
          "position": 92,
          "iteration": 0,
          "httpRequestId": "fa1a79ba-060b-4d17-a31f-5bf70480555e"
        },
        "item": {
          "id": "d01a0ab9-1635-4030-bc13-721988976dd1",
          "name": "credentials_issue:options.credentialStatus:string"
        },
        "response": {
          "id": "8a66e7e0-c1ef-4bd7-a658-293c16a0467a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cc29fcd3-bfa5-46c1-8ff9-2186d44a27b3",
        "cursor": {
          "ref": "27bc80b8-b900-4868-94d5-8718943d0e2f",
          "length": 283,
          "cycles": 1,
          "position": 93,
          "iteration": 0,
          "httpRequestId": "0921b7a0-983e-45a3-945e-8cbd378f93cb"
        },
        "item": {
          "id": "cc29fcd3-bfa5-46c1-8ff9-2186d44a27b3",
          "name": "credentials_issue:options.credentialStatus.type:missing"
        },
        "response": {
          "id": "0c345e65-c2f0-41c9-ba29-2b461d64bbee",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b8106a25-55a6-4fdc-b4ae-e86ca2107f7e",
        "cursor": {
          "ref": "1b148e6c-a7b5-49a0-838b-92230d1f4a3b",
          "length": 283,
          "cycles": 1,
          "position": 94,
          "iteration": 0,
          "httpRequestId": "39c83673-3b82-43de-a643-4195a97bfa53"
        },
        "item": {
          "id": "b8106a25-55a6-4fdc-b4ae-e86ca2107f7e",
          "name": "credentials_issue:options.credentialStatus.type:array"
        },
        "response": {
          "id": "8d600735-61ec-49c5-8192-0dfa90487aae",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4702ab2e-f8f2-4e05-bf3c-6efac18afc0b",
        "cursor": {
          "ref": "1464a1e4-a6e2-41d1-9707-07a4e50cc62f",
          "length": 283,
          "cycles": 1,
          "position": 95,
          "iteration": 0,
          "httpRequestId": "3c0b6ba6-a8ad-40e6-b116-9a3307ef88d3"
        },
        "item": {
          "id": "4702ab2e-f8f2-4e05-bf3c-6efac18afc0b",
          "name": "credentials_issue:options.credentialStatus.type:boolean"
        },
        "response": {
          "id": "278d0bdc-fb28-4510-96f3-b49cbabda220",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fbc92c39-7feb-4333-897a-d8feaa031d5f",
        "cursor": {
          "ref": "52ca57a7-b650-4e40-a017-58958e935522",
          "length": 283,
          "cycles": 1,
          "position": 96,
          "iteration": 0,
          "httpRequestId": "22a110e0-8459-4305-9fd9-aa5ef88b5ed8"
        },
        "item": {
          "id": "fbc92c39-7feb-4333-897a-d8feaa031d5f",
          "name": "credentials_issue:options.credentialStatus.type:integer"
        },
        "response": {
          "id": "d63c575f-46c9-4e15-82d8-3ea4c9be37e4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a8aad83a-95b2-4f48-85dd-b5771c0f41fc",
        "cursor": {
          "ref": "b6d3ec1a-76e9-4ebe-ad47-5ab432a90389",
          "length": 283,
          "cycles": 1,
          "position": 97,
          "iteration": 0,
          "httpRequestId": "5c0e9f78-6929-49e0-a0b0-5e0b50914ea8"
        },
        "item": {
          "id": "a8aad83a-95b2-4f48-85dd-b5771c0f41fc",
          "name": "credentials_issue:options.credentialStatus.type:null"
        },
        "response": {
          "id": "36711340-a1a7-46cd-aa23-3c744f65d0c0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "eb91a7ab-4935-407f-bba5-fb33051e0b33",
        "cursor": {
          "ref": "ffe0cb67-8d17-4ad1-b3ba-3a44bab90ba4",
          "length": 283,
          "cycles": 1,
          "position": 98,
          "iteration": 0,
          "httpRequestId": "fff3c9e2-9c7a-40fe-8674-d80485032d37"
        },
        "item": {
          "id": "eb91a7ab-4935-407f-bba5-fb33051e0b33",
          "name": "credentials_issue:options.credentialStatus.type:null Copy"
        },
        "response": {
          "id": "b19ff901-8972-46ae-ad4e-14e3a203ec76",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5f064f14-6ad3-488d-9022-04a6f4113707",
        "cursor": {
          "ref": "7228616c-9534-40ff-a0a2-1d03833da01b",
          "length": 283,
          "cycles": 1,
          "position": 99,
          "iteration": 0,
          "httpRequestId": "937b95cf-6b58-479f-b51e-6ce436ed11bb"
        },
        "item": {
          "id": "5f064f14-6ad3-488d-9022-04a6f4113707",
          "name": "credentials_issue:options.credentialStatus.type:invalid"
        },
        "response": {
          "id": "6d8c3d02-81f9-4723-bf5d-085beb149e88",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6ebfdb47-b2ec-4fa3-b967-b4556ee09e22",
        "cursor": {
          "ref": "55c3dde6-a2b8-4b02-bb6a-bfa71f1249ef",
          "length": 283,
          "cycles": 1,
          "position": 100,
          "iteration": 0,
          "httpRequestId": "14ba8ba2-ec24-4ae5-9ed1-82509498ceda"
        },
        "item": {
          "id": "6ebfdb47-b2ec-4fa3-b967-b4556ee09e22",
          "name": "credentials_issue:missing_auth"
        },
        "response": {
          "id": "5cb25df8-ba56-4335-8de5-5936191e2147",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 17,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "534f046b-e8ad-4f7c-b0e4-9414c672ab07",
        "cursor": {
          "ref": "a6046de5-b628-4998-8f63-8d677f82ce8d",
          "length": 283,
          "cycles": 1,
          "position": 101,
          "iteration": 0,
          "httpRequestId": "5b11dd4b-d8e8-43b1-b6f0-361bee8a0292"
        },
        "item": {
          "id": "534f046b-e8ad-4f7c-b0e4-9414c672ab07",
          "name": "credentials_issue.credential.issuer:dup"
        },
        "response": {
          "id": "f513f1df-ba7e-4fee-b972-ab742fd4b029",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 400",
              "stack": "AssertionError: expected response to have status code 201 but got 400\n   at Object.eval sandbox-script.js:1:102)"
            }
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 1,
              "test": "response issuer matches request credential.issuer",
              "message": "Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.",
              "stack": "TypeError: Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.\n   at Object.eval sandbox-script.js:2:102)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:3:102)"
            }
          }
        ]
      },
      {
        "id": "b640a2dd-a8ae-4483-a4a3-c200db0828e5",
        "cursor": {
          "ref": "7261b503-23dc-4c88-bfc5-8c3a065a4404",
          "length": 283,
          "cycles": 1,
          "position": 102,
          "iteration": 0,
          "httpRequestId": "fba81ed6-9fed-4586-9090-7ab5a9f261e0"
        },
        "item": {
          "id": "b640a2dd-a8ae-4483-a4a3-c200db0828e5",
          "name": "credentials_issue"
        },
        "response": {
          "id": "64b4d1cd-7196-48a7-ade1-c911e8719ad7",
          "status": "Created",
          "code": 201,
          "responseTime": 209,
          "responseSize": 689
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false
          },
          {
            "assertion": "response issuanceDate matches request credential.issuanceDate",
            "skipped": false
          },
          {
            "assertion": "response proof.created is close to 'now'",
            "skipped": false
          }
        ]
      },
      {
        "id": "494f5932-7eb8-43f5-965d-edef08643e80",
        "cursor": {
          "ref": "fd831bb2-5e10-4c07-8d0d-29a256f6c3a0",
          "length": 283,
          "cycles": 1,
          "position": 103,
          "iteration": 0,
          "httpRequestId": "898f01a9-c401-4ded-995e-c2449d1aff44"
        },
        "item": {
          "id": "494f5932-7eb8-43f5-965d-edef08643e80",
          "name": "credentials_issue:credential.opt.id"
        },
        "response": {
          "id": "334affcc-ef39-499a-89e7-22d1957b1822",
          "status": "Created",
          "code": 201,
          "responseTime": 234,
          "responseSize": 643
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verifiableCredential.id matches request credential.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "c00d809b-4280-428e-a203-58364eab9a37",
        "cursor": {
          "ref": "a653002d-9e5b-484c-b865-2f42fc1b792c",
          "length": 283,
          "cycles": 1,
          "position": 104,
          "iteration": 0,
          "httpRequestId": "42e2f665-a1cf-48b9-8cbe-9de1c1ee4a26"
        },
        "item": {
          "id": "c00d809b-4280-428e-a203-58364eab9a37",
          "name": "credentials_issue:credential:alt.issuer.object"
        },
        "response": {
          "id": "8334b9c6-6769-4b96-af9a-3dfec9e57e7f",
          "status": "Created",
          "code": 201,
          "responseTime": 245,
          "responseSize": 696
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "8128ff3e-84c7-4648-beec-25ff17b441a9",
        "cursor": {
          "ref": "cb02e0f0-d37e-4cad-ab93-9b19d396c9be",
          "length": 283,
          "cycles": 1,
          "position": 105,
          "iteration": 0,
          "httpRequestId": "22e5a85d-aec0-431d-888d-ec830310219f"
        },
        "item": {
          "id": "8128ff3e-84c7-4648-beec-25ff17b441a9",
          "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id"
        },
        "response": {
          "id": "316f7abe-813f-448b-9fc1-4dc3b07ad330",
          "status": "Created",
          "code": 201,
          "responseTime": 242,
          "responseSize": 700
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response credentialSubject.id matches request credential.credentialSubject.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "7f63ddac-41b8-485d-a555-cc2df1b55f2e",
        "cursor": {
          "ref": "3292435c-50f9-4589-99e3-02695ef2a480",
          "length": 283,
          "cycles": 1,
          "position": 106,
          "iteration": 0,
          "httpRequestId": "9881ed38-f480-4c2b-bd22-11584e78b3b1"
        },
        "item": {
          "id": "7f63ddac-41b8-485d-a555-cc2df1b55f2e",
          "name": "credentials_issue:options:opt.created"
        },
        "response": {
          "id": "1c32f213-fb35-4740-8a20-6beccee21708",
          "status": "Created",
          "code": 201,
          "responseTime": 207,
          "responseSize": 689
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response proof.created matches request options.created",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response proof.created matches request options.created",
              "message": "expected '2023-11-05T00:37:08.063Z' to equal '2006-01-02T15:04:05Z'",
              "stack": "AssertionError: expected '2023-11-05T00:37:08.063Z' to equal '2006-01-02T15:04:05Z'\n   at Object.eval sandbox-script.js:3:107)"
            }
          }
        ]
      },
      {
        "id": "e4dab461-79f8-470e-805e-4e8864ca6582",
        "cursor": {
          "ref": "d6b97b95-1bbf-446f-a9f7-ac745c5745e6",
          "length": 283,
          "cycles": 1,
          "position": 107,
          "iteration": 0,
          "httpRequestId": "c34599c1-2b73-4fab-b53e-13a5edcaa385"
        },
        "item": {
          "id": "e4dab461-79f8-470e-805e-4e8864ca6582",
          "name": "credentials_issue:options:opt.credentialStatus"
        },
        "response": {
          "id": "c575768e-4157-4fd9-b55b-9befad9c7a06",
          "status": "Created",
          "code": 201,
          "responseTime": 242,
          "responseSize": 689
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ace29894-273c-48e1-8a75-fb6bbea3bb1b",
        "cursor": {
          "ref": "85307702-f677-4ace-b99e-289ca5607f3e",
          "length": 283,
          "cycles": 1,
          "position": 108,
          "iteration": 0,
          "httpRequestId": "9a7ee1ec-3fc5-4ee2-a1be-5cd6c88633c9"
        },
        "item": {
          "id": "ace29894-273c-48e1-8a75-fb6bbea3bb1b",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "f3f3a05c-ec0f-4f2e-b134-ca7ea69b892c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b69e11a6-c8fb-45e3-823b-56532d49f315",
        "cursor": {
          "ref": "e4004c60-38d3-4998-a979-29533e34f134",
          "length": 283,
          "cycles": 1,
          "position": 109,
          "iteration": 0,
          "httpRequestId": "65c91284-23f8-472f-831e-2a6716f6318c"
        },
        "item": {
          "id": "b69e11a6-c8fb-45e3-823b-56532d49f315",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "8125f5fc-8c26-4732-93cc-f9ac877aab2c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "83f82512-5a22-415a-857a-7dd84ea10de2",
        "cursor": {
          "ref": "c3a26f9c-aaa5-4996-8e49-2e6f243e6449",
          "length": 283,
          "cycles": 1,
          "position": 110,
          "iteration": 0,
          "httpRequestId": "a6fb6f87-80c2-4090-97ad-0298866e3d62"
        },
        "item": {
          "id": "83f82512-5a22-415a-857a-7dd84ea10de2",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "27aaf031-3a14-4e7a-b4fd-1db5e0266b37",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bdf40645-5f92-4074-bf6b-106a83a702a6",
        "cursor": {
          "ref": "3db94721-a8e2-4fc3-a015-84a03ca2272d",
          "length": 283,
          "cycles": 1,
          "position": 111,
          "iteration": 0,
          "httpRequestId": "360cc0fe-395e-4821-9ee9-ffefe7cd5397"
        },
        "item": {
          "id": "bdf40645-5f92-4074-bf6b-106a83a702a6",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "a99aab26-e7d1-45b7-8157-e6b8836e7dbd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "be6424c5-48ec-4d50-a8c2-ec2562335252",
        "cursor": {
          "ref": "cf21f8b5-ac24-477a-95f2-c76697c00488",
          "length": 283,
          "cycles": 1,
          "position": 112,
          "iteration": 0,
          "httpRequestId": "c89cfc3c-d04d-46b0-9459-2a4623ff0ccb"
        },
        "item": {
          "id": "be6424c5-48ec-4d50-a8c2-ec2562335252",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "34eb56fe-2e87-4464-986e-decf9b91611d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cd7bd8e7-7028-4941-925b-8a36eb13c261",
        "cursor": {
          "ref": "61b6583e-b373-4ad0-8397-94bc8f9ffa97",
          "length": 283,
          "cycles": 1,
          "position": 113,
          "iteration": 0,
          "httpRequestId": "b918818e-01f7-431f-a7ff-2a2c4f32de12"
        },
        "item": {
          "id": "cd7bd8e7-7028-4941-925b-8a36eb13c261",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "604d9502-b4dc-47f7-b0d6-02ecc90c9c7a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a91f3c4d-821d-4001-9cb6-dfa6d3108a5e",
        "cursor": {
          "ref": "bad08574-8393-4589-9054-88e6d88b5ac4",
          "length": 283,
          "cycles": 1,
          "position": 114,
          "iteration": 0,
          "httpRequestId": "e87a6647-4ef5-4d16-9030-e67465161d83"
        },
        "item": {
          "id": "a91f3c4d-821d-4001-9cb6-dfa6d3108a5e",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "fef2c539-0015-4071-ae3f-2c3e609d29c9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 146
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d6485478-7e2f-42fd-8028-7391a6a54f3f",
        "cursor": {
          "ref": "cd23e5f3-7f34-4bdf-b9de-ed4ec67b3e73",
          "length": 283,
          "cycles": 1,
          "position": 115,
          "iteration": 0,
          "httpRequestId": "c797c8ef-cbec-47d9-aeeb-dd65c6beaa8a"
        },
        "item": {
          "id": "d6485478-7e2f-42fd-8028-7391a6a54f3f",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "93d49248-ecb6-4649-9d99-f4a65229fa9c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f6cec94d-98c2-49dc-9677-137cd967accf",
        "cursor": {
          "ref": "4461068c-af28-4234-a294-25ca3bd1c28b",
          "length": 283,
          "cycles": 1,
          "position": 116,
          "iteration": 0,
          "httpRequestId": "8229b58b-85f6-4bce-93f3-d855b04b01d2"
        },
        "item": {
          "id": "f6cec94d-98c2-49dc-9677-137cd967accf",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "1642c03b-c4f9-4aa2-942b-d1b48db4fa02",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a1956d27-4e88-4d9a-bae1-08e1069d146c",
        "cursor": {
          "ref": "90c5a36e-ae50-4a12-bf61-539590c2ad83",
          "length": 283,
          "cycles": 1,
          "position": 117,
          "iteration": 0,
          "httpRequestId": "dc4ccfd2-a1db-49e7-bd50-dfe0c0a88b1e"
        },
        "item": {
          "id": "a1956d27-4e88-4d9a-bae1-08e1069d146c",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "6dcc5a68-8a96-4806-8472-37f0170bfa37",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fb9a8e14-2ed7-43ec-8031-0192ab76eb8c",
        "cursor": {
          "ref": "9e087356-32f5-4ed9-8c2c-8a759cd5ab40",
          "length": 283,
          "cycles": 1,
          "position": 118,
          "iteration": 0,
          "httpRequestId": "a8df3526-c877-4b48-8e71-dcfc018b435d"
        },
        "item": {
          "id": "fb9a8e14-2ed7-43ec-8031-0192ab76eb8c",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "eb92d193-131f-4eef-a8e6-bb3ddd17097b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f7e3ff68-4a0a-4350-b071-379a49c54ed2",
        "cursor": {
          "ref": "9d0cbcb8-2e14-4f35-91ed-d9794854ede5",
          "length": 283,
          "cycles": 1,
          "position": 119,
          "iteration": 0,
          "httpRequestId": "ae87527f-0809-4c9a-8846-3ac2529b0a3e"
        },
        "item": {
          "id": "f7e3ff68-4a0a-4350-b071-379a49c54ed2",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "c98a6fb2-e961-4195-9920-ccc4e525feb2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c7bf1ad8-a113-4c9e-b808-e054e8339284",
        "cursor": {
          "ref": "e849ce05-a364-481d-a9ff-4bcfee1b0b7e",
          "length": 283,
          "cycles": 1,
          "position": 120,
          "iteration": 0,
          "httpRequestId": "5742f28a-920b-4ce2-834b-004017205cfa"
        },
        "item": {
          "id": "c7bf1ad8-a113-4c9e-b808-e054e8339284",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "b10568a7-8e79-4794-86a7-bf49acce1573",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d8444127-969c-4768-8c68-b4d442f342f1",
        "cursor": {
          "ref": "29b49441-7189-4508-9e96-ef5503825857",
          "length": 283,
          "cycles": 1,
          "position": 121,
          "iteration": 0,
          "httpRequestId": "04feaa18-be7f-4795-8365-50fb0f6f90fa"
        },
        "item": {
          "id": "d8444127-969c-4768-8c68-b4d442f342f1",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "ea8bc504-f334-4fe7-80b2-949907742a71",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7b4369aa-beac-4b2b-997c-70247017439b",
        "cursor": {
          "ref": "df08546c-b4dd-46c7-bde2-5a4d2855ea99",
          "length": 283,
          "cycles": 1,
          "position": 122,
          "iteration": 0,
          "httpRequestId": "ccc35d14-495a-45cc-aa74-ce961847500d"
        },
        "item": {
          "id": "7b4369aa-beac-4b2b-997c-70247017439b",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "b015da18-8de3-49d0-95ee-c8719ebf770a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "77f86d18-ee6a-4afa-baa2-0de9d55fefc9",
        "cursor": {
          "ref": "18d65926-e27d-4a0f-8f78-280ff2b095d2",
          "length": 283,
          "cycles": 1,
          "position": 123,
          "iteration": 0,
          "httpRequestId": "b2c7081f-263b-425f-9778-566e04bd4f77"
        },
        "item": {
          "id": "77f86d18-ee6a-4afa-baa2-0de9d55fefc9",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "055ed8fe-1b23-430b-919b-79089a27bdcc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2ae6f5a7-409a-4bd7-be27-fa2986092820",
        "cursor": {
          "ref": "ad9ea80f-8e8a-4c38-8eb4-93aa84329ee1",
          "length": 283,
          "cycles": 1,
          "position": 124,
          "iteration": 0,
          "httpRequestId": "7a5a88f5-6401-4332-92ab-8f0b2d1ea94a"
        },
        "item": {
          "id": "2ae6f5a7-409a-4bd7-be27-fa2986092820",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "08540b75-6040-441b-ab13-d5f4baade9cd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1235492c-fc8c-45a0-a4d9-b5822892744c",
        "cursor": {
          "ref": "0764527e-a012-4171-9e79-b64bd8aaee0a",
          "length": 283,
          "cycles": 1,
          "position": 125,
          "iteration": 0,
          "httpRequestId": "0f2fe7fc-06d1-440a-9ff4-4ee347c59663"
        },
        "item": {
          "id": "1235492c-fc8c-45a0-a4d9-b5822892744c",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "a45d6ef1-4cbc-48f0-a676-f17285012c0a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "df076611-75fb-4033-8d78-40ceedc8e74d",
        "cursor": {
          "ref": "281f2daa-2474-45ee-8ab5-7c4ae2b2a883",
          "length": 283,
          "cycles": 1,
          "position": 126,
          "iteration": 0,
          "httpRequestId": "919ebc9f-49ca-49c9-8a1a-78e5c06457dc"
        },
        "item": {
          "id": "df076611-75fb-4033-8d78-40ceedc8e74d",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "557b85b1-4f75-4cd7-af52-cb2ac47d5b3c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d8be6122-5c4c-40a7-8d69-75dccf04916a",
        "cursor": {
          "ref": "4764eb25-87ba-450c-b507-afa2ee24e1d6",
          "length": 283,
          "cycles": 1,
          "position": 127,
          "iteration": 0,
          "httpRequestId": "ec0ab8ab-97bc-431b-8dc8-b90be3e2b445"
        },
        "item": {
          "id": "d8be6122-5c4c-40a7-8d69-75dccf04916a",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "3ddef0d7-463e-4a93-b142-e2d8c91e102f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "15ef7d71-c068-4317-b0fe-8039efe646ef",
        "cursor": {
          "ref": "761972c3-fbd8-47b5-b257-722c66c8747d",
          "length": 283,
          "cycles": 1,
          "position": 128,
          "iteration": 0,
          "httpRequestId": "739551e5-b989-4fbb-8f04-a0be52f55074"
        },
        "item": {
          "id": "15ef7d71-c068-4317-b0fe-8039efe646ef",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "918efcda-2ecd-440f-a0be-5f8859258d6d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b9f0540e-3591-4601-841e-94fd55ecbb15",
        "cursor": {
          "ref": "9fd24860-c948-457b-9c11-96d9c1e932ba",
          "length": 283,
          "cycles": 1,
          "position": 129,
          "iteration": 0,
          "httpRequestId": "c6e1dd47-9738-40df-a716-9494bb7323dd"
        },
        "item": {
          "id": "b9f0540e-3591-4601-841e-94fd55ecbb15",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "12b0a7b8-0a60-438e-84a8-c6a196a681d3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b15c4cb6-fe9f-4e71-a601-0f8daff00c6b",
        "cursor": {
          "ref": "89318214-5fa7-4348-9651-438a9a056ecc",
          "length": 283,
          "cycles": 1,
          "position": 130,
          "iteration": 0,
          "httpRequestId": "80352f75-93b6-4846-9904-ff4ace5c6368"
        },
        "item": {
          "id": "b15c4cb6-fe9f-4e71-a601-0f8daff00c6b",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "606b3e27-e59b-4961-b707-30f410a88aa8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c119788b-eb1b-4a48-a61c-e17d8b4c58ae",
        "cursor": {
          "ref": "8caff406-60b7-4906-bf37-daf3cc35a6fb",
          "length": 283,
          "cycles": 1,
          "position": 131,
          "iteration": 0,
          "httpRequestId": "6ad5653c-7fc3-428f-bf29-b781e2881664"
        },
        "item": {
          "id": "c119788b-eb1b-4a48-a61c-e17d8b4c58ae",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "54e21f71-3582-4fa5-99f8-94ee63afb32e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3860f934-c8d8-469f-8531-c212c7701821",
        "cursor": {
          "ref": "f3ce8ecc-ef47-435c-ae46-3bbe1c67ae82",
          "length": 283,
          "cycles": 1,
          "position": 132,
          "iteration": 0,
          "httpRequestId": "af81c247-dc18-4ce4-8807-c6f2fc121438"
        },
        "item": {
          "id": "3860f934-c8d8-469f-8531-c212c7701821",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "f2b3387a-5243-495b-a8a8-797bd3e05885",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c74576f8-ce53-4e49-b59d-c0aa7973483e",
        "cursor": {
          "ref": "116ec766-1efd-4018-bdbc-2ead541cabea",
          "length": 283,
          "cycles": 1,
          "position": 133,
          "iteration": 0,
          "httpRequestId": "9a19e267-90f9-4063-8776-5953f892afb6"
        },
        "item": {
          "id": "c74576f8-ce53-4e49-b59d-c0aa7973483e",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "840ed092-6adc-4f76-8cba-4312ed31bbe4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f445b034-cb7e-4474-bea0-88233e931a4d",
        "cursor": {
          "ref": "9f370110-b0c9-4f56-ad3f-e383831e843a",
          "length": 283,
          "cycles": 1,
          "position": 134,
          "iteration": 0,
          "httpRequestId": "79933b69-1f2b-4782-a2e7-99c3dac01251"
        },
        "item": {
          "id": "f445b034-cb7e-4474-bea0-88233e931a4d",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "212f22f2-6631-491f-9c93-6a501b50e078",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6a6c8020-f5cb-4668-87e6-f98540a4bc25",
        "cursor": {
          "ref": "85ea8c2b-655a-4bf4-a050-c94752b7e042",
          "length": 283,
          "cycles": 1,
          "position": 135,
          "iteration": 0,
          "httpRequestId": "fb51c22a-e31c-4b43-b43b-def1fd55e641"
        },
        "item": {
          "id": "6a6c8020-f5cb-4668-87e6-f98540a4bc25",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "cc994928-26ef-4766-84dd-ae8f0a2505df",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "281df9e7-fae6-4b29-9a41-d7e843a0d387",
        "cursor": {
          "ref": "6df92ddd-58dc-4298-b6f1-15dc76e4ff46",
          "length": 283,
          "cycles": 1,
          "position": 136,
          "iteration": 0,
          "httpRequestId": "40720842-b52c-4043-990c-8bdd8f1b12cf"
        },
        "item": {
          "id": "281df9e7-fae6-4b29-9a41-d7e843a0d387",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "bdf0afb9-bb09-44dd-986d-ab84a408d05d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d1072f36-c7e2-46ff-b17a-cb93c578f8a2",
        "cursor": {
          "ref": "9ba2af37-eec0-4264-b055-57a04a123c9a",
          "length": 283,
          "cycles": 1,
          "position": 137,
          "iteration": 0,
          "httpRequestId": "f6c1b115-ce6c-4a97-9540-0cfdd1569b72"
        },
        "item": {
          "id": "d1072f36-c7e2-46ff-b17a-cb93c578f8a2",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "bb515367-b56c-4b13-b262-200fd245cf72",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8eff53e7-b951-40e2-a5c6-d6ae52837ebb",
        "cursor": {
          "ref": "7d0a128a-ea01-4007-8180-b01ef1c864ff",
          "length": 283,
          "cycles": 1,
          "position": 138,
          "iteration": 0,
          "httpRequestId": "4be436de-0985-403a-8b35-82e841ce2de5"
        },
        "item": {
          "id": "8eff53e7-b951-40e2-a5c6-d6ae52837ebb",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "ee607b1f-5498-4da7-8385-4486e3f2e173",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dd1ad4eb-2377-4117-bff7-4ca7233529a6",
        "cursor": {
          "ref": "2f18621d-bdb3-4c77-9f20-a3a9ec8101c3",
          "length": 283,
          "cycles": 1,
          "position": 139,
          "iteration": 0,
          "httpRequestId": "0d772001-2b41-41d4-92e2-640edcf2895e"
        },
        "item": {
          "id": "dd1ad4eb-2377-4117-bff7-4ca7233529a6",
          "name": "credentials_status:credentialStatus:item:status:invalid"
        },
        "response": {
          "id": "862c4e3b-6813-4cf0-8061-b9f449e56f07",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "76ecc629-c60f-4aa4-9c21-2fbd0154cacc",
        "cursor": {
          "ref": "0927698a-c54b-4c1f-a0c0-8a9f3811ddea",
          "length": 283,
          "cycles": 1,
          "position": 140,
          "iteration": 0,
          "httpRequestId": "46c1cf7e-377b-4173-a1b8-75f106e92c16"
        },
        "item": {
          "id": "76ecc629-c60f-4aa4-9c21-2fbd0154cacc",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "3fb745ca-dc04-4b5b-a76a-d831682d839c",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 16,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "68740232-7e2b-4919-a60e-2dcc02691994",
        "cursor": {
          "ref": "31a542d0-20fc-47d9-a1ae-053949505bc0",
          "length": 283,
          "cycles": 1,
          "position": 141,
          "iteration": 0,
          "httpRequestId": "9e33b5f3-c920-4e04-ab55-01d0b463ba0c"
        },
        "item": {
          "id": "68740232-7e2b-4919-a60e-2dcc02691994",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "9919fed4-e359-4574-9e6d-c603fdc1b896",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "53707b82-e540-4a79-bca0-91abbab44dd2",
        "cursor": {
          "ref": "a111b001-0002-4a45-af1c-2ed9e23d505f",
          "length": 283,
          "cycles": 1,
          "position": 142,
          "iteration": 0,
          "httpRequestId": "39f96369-067c-4d22-ad7b-b65f5f0d0c2d"
        },
        "item": {
          "id": "53707b82-e540-4a79-bca0-91abbab44dd2",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "d736656e-4f67-4fa8-9fae-15d14934c222",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "647c5f26-c5dc-4b99-9204-faed325dff30",
        "cursor": {
          "ref": "352257be-822f-4e8c-a3a4-948a060448b0",
          "length": 283,
          "cycles": 1,
          "position": 143,
          "iteration": 0,
          "httpRequestId": "db8df875-c3e5-486c-8b8a-edb219137eb4"
        },
        "item": {
          "id": "647c5f26-c5dc-4b99-9204-faed325dff30",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "521892a1-dec0-495f-9b6a-7817cf7c953f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "24b92597-6eec-4c27-a823-d99844a58497",
        "cursor": {
          "ref": "51d09d23-69d4-469f-9f69-1db6f19f575d",
          "length": 283,
          "cycles": 1,
          "position": 144,
          "iteration": 0,
          "httpRequestId": "ccc134ea-05fc-41ca-90b7-826dc16c5f9a"
        },
        "item": {
          "id": "24b92597-6eec-4c27-a823-d99844a58497",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "37a6d610-7044-4e38-82bf-075c21b623d3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "88df71ba-0bdd-4319-91e3-5312fc6cea46",
        "cursor": {
          "ref": "7585bcac-7b1e-4f0c-9a10-2f3f845da42f",
          "length": 283,
          "cycles": 1,
          "position": 145,
          "iteration": 0,
          "httpRequestId": "2af759b0-3fc7-41d7-a701-6ac0ae0bdf5c"
        },
        "item": {
          "id": "88df71ba-0bdd-4319-91e3-5312fc6cea46",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "8613b38b-90fb-45f5-acc1-583287255d7a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "03e93d9b-60ef-4756-b5cd-3acc5e776081",
        "cursor": {
          "ref": "2170163a-cbf9-46d0-b816-42d4a6fa4694",
          "length": 283,
          "cycles": 1,
          "position": 146,
          "iteration": 0,
          "httpRequestId": "e5ba35cd-b57b-4acd-8e0a-c54602e001e5"
        },
        "item": {
          "id": "03e93d9b-60ef-4756-b5cd-3acc5e776081",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "8fd59e79-fd42-49dc-b43c-160836476e19",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0883b22c-9892-4036-93c2-71c5afa76690",
        "cursor": {
          "ref": "c12fe35f-787e-48b9-b516-9cac4d536b2d",
          "length": 283,
          "cycles": 1,
          "position": 147,
          "iteration": 0,
          "httpRequestId": "9c5d6acc-2997-475d-8203-e1aa621412b8"
        },
        "item": {
          "id": "0883b22c-9892-4036-93c2-71c5afa76690",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "cb5147c7-657c-413b-ad06-b3e404e1d51a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 146
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "96b35b0d-17f8-464c-8d17-c43f55e0cd8f",
        "cursor": {
          "ref": "703eb262-fb12-4aca-943c-4ed37857ecf2",
          "length": 283,
          "cycles": 1,
          "position": 148,
          "iteration": 0,
          "httpRequestId": "72070ea5-cbe9-416f-b762-4c209ed514e9"
        },
        "item": {
          "id": "96b35b0d-17f8-464c-8d17-c43f55e0cd8f",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "b976fd99-9cfb-4d31-960d-e915e3edfa5d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d9b7b917-2a99-4cbf-bd6c-17267ee1632c",
        "cursor": {
          "ref": "63fe0075-367b-463f-8575-95998b046240",
          "length": 283,
          "cycles": 1,
          "position": 149,
          "iteration": 0,
          "httpRequestId": "8a39436b-be99-464a-8791-c45b1c584aa1"
        },
        "item": {
          "id": "d9b7b917-2a99-4cbf-bd6c-17267ee1632c",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "6447b2db-e032-4a03-a5ae-07c5e44c206c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "22a585e3-de21-47f3-a38c-95c83589f7c7",
        "cursor": {
          "ref": "f65926de-0ba0-4aae-a76f-d4b9af8185b6",
          "length": 283,
          "cycles": 1,
          "position": 150,
          "iteration": 0,
          "httpRequestId": "ae634590-7633-4a32-aad3-24c437539e44"
        },
        "item": {
          "id": "22a585e3-de21-47f3-a38c-95c83589f7c7",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "d9b3b2d6-c73b-40b2-aa86-4a7f29975c30",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fb6f2e3f-6f94-4d3b-8aae-4137a0002be9",
        "cursor": {
          "ref": "0e0079f5-0276-4c55-850c-a2e0aa211caa",
          "length": 283,
          "cycles": 1,
          "position": 151,
          "iteration": 0,
          "httpRequestId": "5f7eebe5-ce3c-41ca-a622-431c59daceaa"
        },
        "item": {
          "id": "fb6f2e3f-6f94-4d3b-8aae-4137a0002be9",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "8de7f13e-4940-47bc-82e5-87cac0fd3620",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b9dd4afd-860d-489a-b494-04e3d5ef1214",
        "cursor": {
          "ref": "8b4088cc-966f-4265-a307-42f6bd7edf05",
          "length": 283,
          "cycles": 1,
          "position": 152,
          "iteration": 0,
          "httpRequestId": "0f9d5992-55ac-4d5e-809c-dfeb026b63a6"
        },
        "item": {
          "id": "b9dd4afd-860d-489a-b494-04e3d5ef1214",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "ce404712-ca02-47f1-b1fb-68beec82de81",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a20824ce-6260-4574-b01c-bd8b4c0cf57d",
        "cursor": {
          "ref": "71c47a84-0016-40ed-a6d7-f7542ea4f8be",
          "length": 283,
          "cycles": 1,
          "position": 153,
          "iteration": 0,
          "httpRequestId": "f0d239a0-6595-4d33-83fc-994fa25ed73e"
        },
        "item": {
          "id": "a20824ce-6260-4574-b01c-bd8b4c0cf57d",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "0c80d1d2-2c58-40fc-94e4-594edb12c5c2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9321cae1-63a0-4343-bdb1-4c6b9b6405da",
        "cursor": {
          "ref": "2458941a-88b1-4574-9458-37bd4dce052f",
          "length": 283,
          "cycles": 1,
          "position": 154,
          "iteration": 0,
          "httpRequestId": "475afc01-7aeb-4710-bf25-fa074999f0aa"
        },
        "item": {
          "id": "9321cae1-63a0-4343-bdb1-4c6b9b6405da",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "f288ad78-7e50-4a47-8091-596e2acaf4eb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "90aa4a69-99af-44ca-a65a-9f32fa457b2f",
        "cursor": {
          "ref": "8e22b9d7-9f33-4f3d-929f-cce1da0e46dd",
          "length": 283,
          "cycles": 1,
          "position": 155,
          "iteration": 0,
          "httpRequestId": "521f5f7b-743b-433b-83e4-a42b5f79a1d4"
        },
        "item": {
          "id": "90aa4a69-99af-44ca-a65a-9f32fa457b2f",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "f767e531-d6ba-4ca1-8304-0f1bb65a6792",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "59611bfd-d92f-44f4-87ab-bc1ee2312d72",
        "cursor": {
          "ref": "1177b057-8f8f-4cfd-9cb0-8de4b8a36043",
          "length": 283,
          "cycles": 1,
          "position": 156,
          "iteration": 0,
          "httpRequestId": "7be2a103-3072-49d4-a658-e4bb3880a000"
        },
        "item": {
          "id": "59611bfd-d92f-44f4-87ab-bc1ee2312d72",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "0c8b9a7d-27c9-4c78-aabe-04e82570acbc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e6d5a657-69a4-425c-b2ca-99d26091998b",
        "cursor": {
          "ref": "9bc77e25-7529-4144-b90e-d415c73442b1",
          "length": 283,
          "cycles": 1,
          "position": 157,
          "iteration": 0,
          "httpRequestId": "4a3dce6e-1a46-43a7-aa93-71d703c0dc62"
        },
        "item": {
          "id": "e6d5a657-69a4-425c-b2ca-99d26091998b",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "03663f03-5172-4348-8d84-5119fcd9c05b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b60ddb4b-9d91-480d-b166-c4d3903ccaea",
        "cursor": {
          "ref": "dc3ab845-454a-4cdd-8e2a-dc4b22444fa1",
          "length": 283,
          "cycles": 1,
          "position": 158,
          "iteration": 0,
          "httpRequestId": "3877f0b4-4fa4-44c2-bb31-f8157704f5ab"
        },
        "item": {
          "id": "b60ddb4b-9d91-480d-b166-c4d3903ccaea",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "0a773ae2-6948-4976-9ddf-a711a1aa2028",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7d2bf3f9-03cb-4a13-b8db-891f62239b9d",
        "cursor": {
          "ref": "0c725f7b-46ad-49a8-a042-b0475aa7e261",
          "length": 283,
          "cycles": 1,
          "position": 159,
          "iteration": 0,
          "httpRequestId": "cc92e68c-cb16-4615-a5da-94b975c38871"
        },
        "item": {
          "id": "7d2bf3f9-03cb-4a13-b8db-891f62239b9d",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "50b15c37-2275-49b2-af26-2f71ec1b70bc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1f5ca62c-d24c-4d23-a862-2c47b0b36152",
        "cursor": {
          "ref": "5b4d0bf5-3142-493b-bff1-30137320db7e",
          "length": 283,
          "cycles": 1,
          "position": 160,
          "iteration": 0,
          "httpRequestId": "42893c28-63f2-4fc1-845b-61ba3548209a"
        },
        "item": {
          "id": "1f5ca62c-d24c-4d23-a862-2c47b0b36152",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "ba703d26-ea64-4aa5-a5e1-0cc893d39121",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "18f51291-3562-423e-9e23-61ea532852c3",
        "cursor": {
          "ref": "c1019eb2-bd32-42c8-92fc-0c77dd40e6e5",
          "length": 283,
          "cycles": 1,
          "position": 161,
          "iteration": 0,
          "httpRequestId": "17919076-a19f-48d9-8d31-85eaae648493"
        },
        "item": {
          "id": "18f51291-3562-423e-9e23-61ea532852c3",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "cd1c77b2-cb87-4d54-9825-f76ae5ab1258",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "69281bb4-3e02-40ff-ad8a-da632fd49bc0",
        "cursor": {
          "ref": "41063ca5-724c-4ff3-9782-a656ebc3e26d",
          "length": 283,
          "cycles": 1,
          "position": 162,
          "iteration": 0,
          "httpRequestId": "cb6b0d3d-1753-474a-9643-ec9f93691ed6"
        },
        "item": {
          "id": "69281bb4-3e02-40ff-ad8a-da632fd49bc0",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "65ae2e28-48f8-48fb-b25b-681f25d2bd5f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4605bbe3-38ad-473f-b094-e97f0d39d74c",
        "cursor": {
          "ref": "40da2635-1761-4dfd-9d0e-a593a5034823",
          "length": 283,
          "cycles": 1,
          "position": 163,
          "iteration": 0,
          "httpRequestId": "4ac8bf3e-578f-445e-b512-d511eb3781af"
        },
        "item": {
          "id": "4605bbe3-38ad-473f-b094-e97f0d39d74c",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "6350e88d-a136-4c56-bdbe-93d11b353542",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "93561443-1ec9-4e50-a197-29454f99ef00",
        "cursor": {
          "ref": "0c2bcb4e-ddc1-4da3-8c29-c1eca51a1852",
          "length": 283,
          "cycles": 1,
          "position": 164,
          "iteration": 0,
          "httpRequestId": "2657739e-007f-4b30-8845-1ce5f047c987"
        },
        "item": {
          "id": "93561443-1ec9-4e50-a197-29454f99ef00",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "e56904ab-210a-4f6a-be92-2a80787ef3b6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a45f84ec-998e-4d48-8b5e-1d1b0e2d1926",
        "cursor": {
          "ref": "46fb16d2-17e8-4b7a-8198-9d015c0b1b86",
          "length": 283,
          "cycles": 1,
          "position": 165,
          "iteration": 0,
          "httpRequestId": "883d9cf7-4d50-4a6f-8005-252b31d38865"
        },
        "item": {
          "id": "a45f84ec-998e-4d48-8b5e-1d1b0e2d1926",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "68b01615-6d03-4b96-9902-5ef1a77664c2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "27fa122f-c95f-4195-a86e-a3b6faa9189c",
        "cursor": {
          "ref": "ff2f1423-bedd-40fe-bee8-64d32febbd98",
          "length": 283,
          "cycles": 1,
          "position": 166,
          "iteration": 0,
          "httpRequestId": "79c51df7-b5e6-49d2-b22e-0cc0072ee82c"
        },
        "item": {
          "id": "27fa122f-c95f-4195-a86e-a3b6faa9189c",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "802834fc-ba6c-4439-b122-9ad0630849b5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6f87ae55-850f-428d-8659-9dd37828c0b8",
        "cursor": {
          "ref": "f1ae2014-dd0b-4d93-9a26-4d30debb3743",
          "length": 283,
          "cycles": 1,
          "position": 167,
          "iteration": 0,
          "httpRequestId": "6cd5d938-deb3-4b2c-a45b-088adee3392c"
        },
        "item": {
          "id": "6f87ae55-850f-428d-8659-9dd37828c0b8",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "37e446bf-94fe-43cd-8349-421d5ece08d4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "59679fc1-43bf-434c-a1c7-d4de64a6a22e",
        "cursor": {
          "ref": "68eeeec6-df3a-4dae-abdf-3090cd9a3ff9",
          "length": 283,
          "cycles": 1,
          "position": 168,
          "iteration": 0,
          "httpRequestId": "a48d7304-8342-4897-a127-d4e7b3355db0"
        },
        "item": {
          "id": "59679fc1-43bf-434c-a1c7-d4de64a6a22e",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "5f88c2fa-423f-46d9-94ee-5617ff4279f0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e836cc18-1869-4d14-adf3-095b7ef77f19",
        "cursor": {
          "ref": "412620d6-9397-4dc4-8f67-6178df5a58e7",
          "length": 283,
          "cycles": 1,
          "position": 169,
          "iteration": 0,
          "httpRequestId": "d6ce3f96-f0eb-4676-b2d5-a8bbeaf3a6ab"
        },
        "item": {
          "id": "e836cc18-1869-4d14-adf3-095b7ef77f19",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "1bbe9f82-b355-4494-90c6-2faa61384ba2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c47bf30a-32ae-4371-872d-0953ee295689",
        "cursor": {
          "ref": "9d6d1c78-8250-41f0-84c9-0ad123f22723",
          "length": 283,
          "cycles": 1,
          "position": 170,
          "iteration": 0,
          "httpRequestId": "461bae5d-09fe-4ad2-aa5f-082cd5b34141"
        },
        "item": {
          "id": "c47bf30a-32ae-4371-872d-0953ee295689",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "6c6dfb4f-a768-4dfa-b0ae-fd75c5770292",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "085a8fa4-b8d5-4cd7-b5ff-d8864dfb4115",
        "cursor": {
          "ref": "ba80d5ba-8a1d-4f57-8a37-f084a88ba6fc",
          "length": 283,
          "cycles": 1,
          "position": 171,
          "iteration": 0,
          "httpRequestId": "f2e820f7-6c27-4557-8e77-323a7d79e889"
        },
        "item": {
          "id": "085a8fa4-b8d5-4cd7-b5ff-d8864dfb4115",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "6aff09e5-93b1-4b50-bdc4-e77476a4ebc9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c2b5c16f-82c7-4223-b182-2ca8530af64c",
        "cursor": {
          "ref": "e15d82c8-b51f-47a0-a9f1-86abacd4ae59",
          "length": 283,
          "cycles": 1,
          "position": 172,
          "iteration": 0,
          "httpRequestId": "6045e401-a576-46a0-b952-3a4b3021b8bc"
        },
        "item": {
          "id": "c2b5c16f-82c7-4223-b182-2ca8530af64c",
          "name": "credentials_status:credentialStatus:item:purpose:missing"
        },
        "response": {
          "id": "12670453-db00-488e-920b-307be539fb97",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f9a36d1c-d44f-4d0e-8036-f36099a8118c",
        "cursor": {
          "ref": "f39c0430-e311-44c4-a6b3-32615a6ff172",
          "length": 283,
          "cycles": 1,
          "position": 173,
          "iteration": 0,
          "httpRequestId": "46465933-04bc-4b5d-8782-6c39c441a12c"
        },
        "item": {
          "id": "f9a36d1c-d44f-4d0e-8036-f36099a8118c",
          "name": "credentials_status:credentialStatus:item:purpose:array"
        },
        "response": {
          "id": "435ed5e5-2f75-4b03-bc9f-98eed145e1ea",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 118,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "360522c8-50ae-4937-b2bd-ad156543c324",
        "cursor": {
          "ref": "1fa768c5-c123-4eca-9b8c-118154c49f0a",
          "length": 283,
          "cycles": 1,
          "position": 174,
          "iteration": 0,
          "httpRequestId": "cc0df3fe-6752-48b2-a844-e51ee2712f57"
        },
        "item": {
          "id": "360522c8-50ae-4937-b2bd-ad156543c324",
          "name": "credentials_status:credentialStatus:item:purpose:boolean"
        },
        "response": {
          "id": "84ce55ec-6dcc-4244-97a4-dcd36d13b4ba",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 96,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "465dea5b-7609-4361-a472-ac5863dae8c3",
        "cursor": {
          "ref": "e882a8e9-2343-4d3b-9b45-8593adb1f970",
          "length": 283,
          "cycles": 1,
          "position": 175,
          "iteration": 0,
          "httpRequestId": "ee2a4fa5-1f05-4e6e-ad4c-31c21c8ecddb"
        },
        "item": {
          "id": "465dea5b-7609-4361-a472-ac5863dae8c3",
          "name": "credentials_status:credentialStatus:item:purpose:integer"
        },
        "response": {
          "id": "5a361de6-2108-4947-b68d-3845a098bd31",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bea1a2be-887e-4918-a732-864fe238f127",
        "cursor": {
          "ref": "6a874c33-e5c9-45f0-8446-b0b671a9dff3",
          "length": 283,
          "cycles": 1,
          "position": 176,
          "iteration": 0,
          "httpRequestId": "78626c6a-fa08-4bf5-85c6-56b4a49293ba"
        },
        "item": {
          "id": "bea1a2be-887e-4918-a732-864fe238f127",
          "name": "credentials_status:credentialStatus:item:purpose:null"
        },
        "response": {
          "id": "bc3a7dbf-a446-4b6e-8a93-f23b5cacf5a7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f995cd2a-02f0-498e-add9-b6db6f77ae4c",
        "cursor": {
          "ref": "779e60ad-586c-47a5-a98c-06e1327de976",
          "length": 283,
          "cycles": 1,
          "position": 177,
          "iteration": 0,
          "httpRequestId": "714be9bb-8572-4a14-b58c-693d8364c80b"
        },
        "item": {
          "id": "f995cd2a-02f0-498e-add9-b6db6f77ae4c",
          "name": "credentials_status:credentialStatus:item:purpose:object"
        },
        "response": {
          "id": "0d298b5b-d26d-4d93-8b71-55e6111e1129",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0b96f7fc-9904-4512-bff4-713b02e9ac72",
        "cursor": {
          "ref": "5925fe3c-2843-4f3d-bc91-a3bae5c06eaa",
          "length": 283,
          "cycles": 1,
          "position": 178,
          "iteration": 0,
          "httpRequestId": "316740cb-158a-4147-8381-974563ce78b7"
        },
        "item": {
          "id": "0b96f7fc-9904-4512-bff4-713b02e9ac72",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "9cf9b881-3f02-4d30-846e-cd404fad0c50",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 16,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4480b7aa-9aad-4a5b-a763-3eff47453523",
        "cursor": {
          "ref": "e8e422b3-a9f9-48a7-9f79-85888d504f34",
          "length": 283,
          "cycles": 1,
          "position": 179,
          "iteration": 0,
          "httpRequestId": "da20ce36-b99f-4dba-984c-e04bf8b3dbaa"
        },
        "item": {
          "id": "4480b7aa-9aad-4a5b-a763-3eff47453523",
          "name": "credentials_verify:vc:missing"
        },
        "response": {
          "id": "8c307797-5c3e-457b-bba4-a4eb8815adfb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "45a76f76-0f83-4ecd-9063-9db71a07a1c9",
        "cursor": {
          "ref": "da6aa9c1-cfe5-4f54-9bf4-9b4d28f8047f",
          "length": 283,
          "cycles": 1,
          "position": 180,
          "iteration": 0,
          "httpRequestId": "e4c953d8-a051-49ae-8f26-9457f4dc5148"
        },
        "item": {
          "id": "45a76f76-0f83-4ecd-9063-9db71a07a1c9",
          "name": "credentials_verify:vc:string"
        },
        "response": {
          "id": "1f022e0c-6daa-4194-b09c-9b67be7f4e42",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1a79bce4-6cad-4f06-8776-9e5b10e3e3cb",
        "cursor": {
          "ref": "9fdf9ef5-0489-4105-bb28-9fd63d4f4dbd",
          "length": 283,
          "cycles": 1,
          "position": 181,
          "iteration": 0,
          "httpRequestId": "7ef2676b-4007-4f46-9aee-af705497cf4b"
        },
        "item": {
          "id": "1a79bce4-6cad-4f06-8776-9e5b10e3e3cb",
          "name": "credentials_verify:vc:null"
        },
        "response": {
          "id": "b00b938e-1931-4ea7-bec2-1bcd4c975b25",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 171
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6c83796e-a301-4734-9140-5335f410ac15",
        "cursor": {
          "ref": "e39ae61f-5b53-43ad-862f-71252a5d4415",
          "length": 283,
          "cycles": 1,
          "position": 182,
          "iteration": 0,
          "httpRequestId": "45b460cb-d4f1-44dd-b35a-b6868ab78b75"
        },
        "item": {
          "id": "6c83796e-a301-4734-9140-5335f410ac15",
          "name": "credentials_verify:vc:integer"
        },
        "response": {
          "id": "d7e8931a-c994-43c7-a12f-5c5ffc9c87d6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cf250580-9ac9-4114-a4e3-37c7ad49f733",
        "cursor": {
          "ref": "801beead-3d32-4e2e-a201-8f381bfedb25",
          "length": 283,
          "cycles": 1,
          "position": 183,
          "iteration": 0,
          "httpRequestId": "70d9fcac-6dc4-48b8-8a8f-b60fb38e18b5"
        },
        "item": {
          "id": "cf250580-9ac9-4114-a4e3-37c7ad49f733",
          "name": "credentials_verify:vc:boolean"
        },
        "response": {
          "id": "7a026d29-527b-4d3f-8d55-e1720bf76472",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c114e25a-aa13-42cb-b269-28dd91a72421",
        "cursor": {
          "ref": "6f5fc4cb-0e3a-4089-a26d-f376a0f6009f",
          "length": 283,
          "cycles": 1,
          "position": 184,
          "iteration": 0,
          "httpRequestId": "59fafb6d-bdac-4585-89e8-d520fcad460b"
        },
        "item": {
          "id": "c114e25a-aa13-42cb-b269-28dd91a72421",
          "name": "credentials_verify:vc:array"
        },
        "response": {
          "id": "f7e13800-2225-41f5-beba-e5adb796b80c",
          "status": "OK",
          "code": 200,
          "responseTime": 90,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:185)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:185)"
            }
          }
        ]
      },
      {
        "id": "b4710040-e27f-40ab-97fe-0df9743098ba",
        "cursor": {
          "ref": "33c7f2d7-0132-48a9-a9fe-f0735bd756a7",
          "length": 283,
          "cycles": 1,
          "position": 185,
          "iteration": 0,
          "httpRequestId": "68bf7161-d24a-4df9-aa0c-a9582eb046a3"
        },
        "item": {
          "id": "b4710040-e27f-40ab-97fe-0df9743098ba",
          "name": "credentials_verify:vc:@context:missing"
        },
        "response": {
          "id": "305ff744-6785-4f75-8f86-719006e424ae",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 242
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3cc6e3ac-6dbc-4df2-8736-77901f0038e3",
        "cursor": {
          "ref": "d13cdfe2-320f-47a6-af98-a57546908504",
          "length": 283,
          "cycles": 1,
          "position": 186,
          "iteration": 0,
          "httpRequestId": "22aec793-c74c-40c1-92b9-d74458df1092"
        },
        "item": {
          "id": "3cc6e3ac-6dbc-4df2-8736-77901f0038e3",
          "name": "credentials_verify:vc:@context:boolean"
        },
        "response": {
          "id": "46475c67-5e23-4740-8c52-392fb418c0f8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 305
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d6d6c205-d60c-4081-b646-a8638dfdfd13",
        "cursor": {
          "ref": "903fecdb-2726-4cfd-9cc6-15415d010e45",
          "length": 283,
          "cycles": 1,
          "position": 187,
          "iteration": 0,
          "httpRequestId": "d2f8ebb2-6613-42a1-aed2-0bb5e6d3df21"
        },
        "item": {
          "id": "d6d6c205-d60c-4081-b646-a8638dfdfd13",
          "name": "credentials_verify:vc:@context:integer"
        },
        "response": {
          "id": "b69f49bc-6cdc-4d6f-b014-e73c50be6282",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 305
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2addc1bd-46f7-4b01-847e-331578300177",
        "cursor": {
          "ref": "9c5d2b12-b1c0-44a6-ba12-7b94247659de",
          "length": 283,
          "cycles": 1,
          "position": 188,
          "iteration": 0,
          "httpRequestId": "1f384ed9-0872-4bf6-8052-58994b405195"
        },
        "item": {
          "id": "2addc1bd-46f7-4b01-847e-331578300177",
          "name": "credentials_verify:vc:@context:null"
        },
        "response": {
          "id": "8d454997-50a0-4751-8933-c60fee3f69e8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 305
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6cfe3516-f03d-49c3-a4de-af112ccadb05",
        "cursor": {
          "ref": "be66d08f-12c3-4232-8bc3-7c32bb9daaa8",
          "length": 283,
          "cycles": 1,
          "position": 189,
          "iteration": 0,
          "httpRequestId": "bf7eb1ec-c176-4652-9526-2eba7d1c27ae"
        },
        "item": {
          "id": "6cfe3516-f03d-49c3-a4de-af112ccadb05",
          "name": "credentials_verify:vc:@context:object"
        },
        "response": {
          "id": "222f2432-bce6-4506-b9cc-4cd230715094",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 242
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a20f1932-6584-47f1-b245-5a991a2c756b",
        "cursor": {
          "ref": "09f2fc04-6214-4643-9778-0eadecc29928",
          "length": 283,
          "cycles": 1,
          "position": 190,
          "iteration": 0,
          "httpRequestId": "8c1a0773-d3aa-40e6-b452-ba07fc77c702"
        },
        "item": {
          "id": "a20f1932-6584-47f1-b245-5a991a2c756b",
          "name": "credentials_verify:vc:@context:string"
        },
        "response": {
          "id": "390a3a30-1126-41e3-8028-ea98516c6033",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 172
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3e91e67e-3845-4046-b1a9-61a8303c36f0",
        "cursor": {
          "ref": "12aff78e-c558-486e-aa38-f302d2cebdf4",
          "length": 283,
          "cycles": 1,
          "position": 191,
          "iteration": 0,
          "httpRequestId": "6662b2a5-4759-40f7-9ae6-1f741786a077"
        },
        "item": {
          "id": "3e91e67e-3845-4046-b1a9-61a8303c36f0",
          "name": "credentials_verify:vc:@context:item:array"
        },
        "response": {
          "id": "0c6668e6-7758-487d-9ee1-cb9e86fe3c43",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "326e84b9-517a-4c8b-8771-ebe3f34b1262",
        "cursor": {
          "ref": "b695c23b-72e8-4986-b4bc-230e2e010799",
          "length": 283,
          "cycles": 1,
          "position": 192,
          "iteration": 0,
          "httpRequestId": "f38550bd-a9ed-4ae1-9a85-4cb5af6c1a70"
        },
        "item": {
          "id": "326e84b9-517a-4c8b-8771-ebe3f34b1262",
          "name": "credentials_verify:vc:@context:item:boolean"
        },
        "response": {
          "id": "92125332-defd-44e8-944c-784e33e375bf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6e5eaed1-e3d6-4b01-b1c4-c7928dba9e53",
        "cursor": {
          "ref": "c2ae4094-0a05-4ba9-b2bb-cfe96ab1d6a8",
          "length": 283,
          "cycles": 1,
          "position": 193,
          "iteration": 0,
          "httpRequestId": "d24d0fba-b560-430e-8b7a-22add1ec3b96"
        },
        "item": {
          "id": "6e5eaed1-e3d6-4b01-b1c4-c7928dba9e53",
          "name": "credentials_verify:vc:@context:item:integer"
        },
        "response": {
          "id": "28855af8-fbfe-4955-80df-755ce10b837c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "096e21b8-2932-4547-a3e1-6cf8f06f3f40",
        "cursor": {
          "ref": "89fedf1f-76de-476f-bd86-455f65010821",
          "length": 283,
          "cycles": 1,
          "position": 194,
          "iteration": 0,
          "httpRequestId": "e9b3a59c-bdbc-40a6-b799-836599a5bd37"
        },
        "item": {
          "id": "096e21b8-2932-4547-a3e1-6cf8f06f3f40",
          "name": "credentials_verify:vc:@context:item:null"
        },
        "response": {
          "id": "0c5600fa-74a3-4959-bf5a-fd3048a2e377",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "92a2137a-9dec-4832-afc4-47bab8097d02",
        "cursor": {
          "ref": "ec21e4b0-6e27-4a0b-b56f-2f55c25163ab",
          "length": 283,
          "cycles": 1,
          "position": 195,
          "iteration": 0,
          "httpRequestId": "f7f79c86-cd9b-4191-bb60-fa96acaf9c48"
        },
        "item": {
          "id": "92a2137a-9dec-4832-afc4-47bab8097d02",
          "name": "credentials_verify:vc:@context:item:object"
        },
        "response": {
          "id": "49c9aae7-a738-4485-a323-39ee47d8112b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ff539355-acda-4663-9013-6916851425bc",
        "cursor": {
          "ref": "47e9f8c5-a800-457f-acd0-5c9064e56833",
          "length": 283,
          "cycles": 1,
          "position": 196,
          "iteration": 0,
          "httpRequestId": "a8b64024-dbe5-4e98-a594-0e0c2be80abf"
        },
        "item": {
          "id": "ff539355-acda-4663-9013-6916851425bc",
          "name": "credentials_verify:vc:id:array"
        },
        "response": {
          "id": "598f6c92-eef2-4a00-b393-31ad3b50989e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0440387f-bd16-42b7-a912-5f521563d8c7",
        "cursor": {
          "ref": "2232ac91-dc45-4813-bea3-1be1b9288418",
          "length": 283,
          "cycles": 1,
          "position": 197,
          "iteration": 0,
          "httpRequestId": "6a34645f-7b0d-46f6-aa24-09d9adc482c0"
        },
        "item": {
          "id": "0440387f-bd16-42b7-a912-5f521563d8c7",
          "name": "credentials_verify:vc:id:boolean"
        },
        "response": {
          "id": "d8cd609d-2da1-4e64-9fb1-88bd46b80c2a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "46131d40-5492-4ac0-b673-7369ed595eb3",
        "cursor": {
          "ref": "2cfe22a8-253e-471e-b0cc-370e146188d3",
          "length": 283,
          "cycles": 1,
          "position": 198,
          "iteration": 0,
          "httpRequestId": "864f806a-43c1-4efb-bc6c-26442c84c079"
        },
        "item": {
          "id": "46131d40-5492-4ac0-b673-7369ed595eb3",
          "name": "credentials_verify:vc:id:integer"
        },
        "response": {
          "id": "1473458c-3d3d-49d3-b2e8-4a01dae49ec7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f716a882-bd1f-4330-a5a9-13c985539bde",
        "cursor": {
          "ref": "dfcf19c8-ef06-4752-8ff9-7768a7d1532b",
          "length": 283,
          "cycles": 1,
          "position": 199,
          "iteration": 0,
          "httpRequestId": "1613e0f6-0e41-4395-9f4e-ff511e5efb84"
        },
        "item": {
          "id": "f716a882-bd1f-4330-a5a9-13c985539bde",
          "name": "credentials_verify:vc:id:null"
        },
        "response": {
          "id": "fc2eaf77-cfd8-4a73-878f-13c35ee46266",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5ceb992b-4c4d-493c-84d4-5af43c2565e2",
        "cursor": {
          "ref": "749c66b2-54a4-4cf0-9982-90d9e6172e40",
          "length": 283,
          "cycles": 1,
          "position": 200,
          "iteration": 0,
          "httpRequestId": "8c718058-d6db-456a-9a15-9332aa21d087"
        },
        "item": {
          "id": "5ceb992b-4c4d-493c-84d4-5af43c2565e2",
          "name": "credentials_verify:vc:id:object"
        },
        "response": {
          "id": "48934300-7e02-44f4-aad7-e3055c60edb8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fbc785b4-7787-4ba8-b135-7b2313f61b64",
        "cursor": {
          "ref": "899eb4b7-d8c3-4158-b77b-03fd1ff8fcb8",
          "length": 283,
          "cycles": 1,
          "position": 201,
          "iteration": 0,
          "httpRequestId": "7179cb84-5466-4a1b-98b4-db943f6c7c9d"
        },
        "item": {
          "id": "fbc785b4-7787-4ba8-b135-7b2313f61b64",
          "name": "credentials_verify:vc:type:missing"
        },
        "response": {
          "id": "245ed882-b1ed-4327-8b4f-23852342e0ee",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6a5c0399-e6fe-4710-aad6-3031ae3b5b7c",
        "cursor": {
          "ref": "05694e2e-4daf-4954-a1a3-81954a281d6f",
          "length": 283,
          "cycles": 1,
          "position": 202,
          "iteration": 0,
          "httpRequestId": "e4f23af2-772d-40fb-9eed-c95a99a93349"
        },
        "item": {
          "id": "6a5c0399-e6fe-4710-aad6-3031ae3b5b7c",
          "name": "credentials_verify:vc:type:boolean"
        },
        "response": {
          "id": "41121da4-0b24-441b-a811-25c06347e6d5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a065f3e9-acfc-48ad-bfa3-31f02acd1ccb",
        "cursor": {
          "ref": "eaa58c25-0809-4288-afaa-e525704cf393",
          "length": 283,
          "cycles": 1,
          "position": 203,
          "iteration": 0,
          "httpRequestId": "c74fba63-41b9-42e9-8f8c-426f55f2dbc0"
        },
        "item": {
          "id": "a065f3e9-acfc-48ad-bfa3-31f02acd1ccb",
          "name": "credentials_verify:vc:type:integer"
        },
        "response": {
          "id": "47239c92-e94d-471d-8770-d96b3181b1a0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d6ad7d83-cd10-40a6-9ca3-cac4beb52238",
        "cursor": {
          "ref": "a71b1558-a882-4ee2-9dbd-7c1c73aa178b",
          "length": 283,
          "cycles": 1,
          "position": 204,
          "iteration": 0,
          "httpRequestId": "99c77428-ce72-46a2-a52d-e1555a61b223"
        },
        "item": {
          "id": "d6ad7d83-cd10-40a6-9ca3-cac4beb52238",
          "name": "credentials_verify:vc:type:null"
        },
        "response": {
          "id": "ffa02a1e-8f2b-415b-a1cb-d776dd325430",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3b4bf0ea-0f69-4dcd-b3f6-b45b93c4fa7b",
        "cursor": {
          "ref": "495d0e0c-a040-4d20-86ce-ce25c84217c4",
          "length": 283,
          "cycles": 1,
          "position": 205,
          "iteration": 0,
          "httpRequestId": "2eefa081-d1a3-4b08-8133-48653e413c2d"
        },
        "item": {
          "id": "3b4bf0ea-0f69-4dcd-b3f6-b45b93c4fa7b",
          "name": "credentials_verify:vc:type:object"
        },
        "response": {
          "id": "952d0c9a-3507-4385-ad92-1c70571a82b6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c5af2270-54f6-4971-853a-34ab8d343921",
        "cursor": {
          "ref": "42902900-1cea-403d-be79-ba14a84c5fd5",
          "length": 283,
          "cycles": 1,
          "position": 206,
          "iteration": 0,
          "httpRequestId": "b4bf7cf3-df4d-4131-a444-83565de2eba6"
        },
        "item": {
          "id": "c5af2270-54f6-4971-853a-34ab8d343921",
          "name": "credentials_verify:vc:type:string"
        },
        "response": {
          "id": "23bd276b-6e67-4681-9d3f-ae13a662149e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "54e6e44b-8f23-4402-b00b-cc35c8be081b",
        "cursor": {
          "ref": "2bc5e201-1559-4e68-9d2b-2d5d66bda963",
          "length": 283,
          "cycles": 1,
          "position": 207,
          "iteration": 0,
          "httpRequestId": "4bd91d52-8954-48bb-9f50-f21b7560f2f1"
        },
        "item": {
          "id": "54e6e44b-8f23-4402-b00b-cc35c8be081b",
          "name": "credentials_verify:vc:type:item:missing"
        },
        "response": {
          "id": "e57d9b39-a9b7-42f2-8070-b65dbaa3d496",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "11762d70-b692-49be-9824-bf4a3abb456a",
        "cursor": {
          "ref": "59470679-da56-40e3-97d8-9938272151bc",
          "length": 283,
          "cycles": 1,
          "position": 208,
          "iteration": 0,
          "httpRequestId": "e829521c-2261-4a89-9cea-bbd3ac30cdf0"
        },
        "item": {
          "id": "11762d70-b692-49be-9824-bf4a3abb456a",
          "name": "credentials_verify:vc:type:item:array"
        },
        "response": {
          "id": "8d6aa0b3-05e6-4754-b0a4-4e895e9ae1bf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e087281e-3c76-4c9f-98b5-2b0cb9f547a7",
        "cursor": {
          "ref": "c3f8ca44-c0b1-4a82-9a31-bc9a67666b88",
          "length": 283,
          "cycles": 1,
          "position": 209,
          "iteration": 0,
          "httpRequestId": "c97c7d39-6553-46c0-9bf0-52adb1538e71"
        },
        "item": {
          "id": "e087281e-3c76-4c9f-98b5-2b0cb9f547a7",
          "name": "credentials_verify:vc:type:item:boolean"
        },
        "response": {
          "id": "20d78936-bd20-4922-b621-48b91900087a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "962fadc7-edeb-480e-ae64-b449242caccc",
        "cursor": {
          "ref": "8be91bd8-a0db-4dc6-9b2d-2d3c9fc6a427",
          "length": 283,
          "cycles": 1,
          "position": 210,
          "iteration": 0,
          "httpRequestId": "0f28eb33-b26c-477f-9750-2f1b8d45c612"
        },
        "item": {
          "id": "962fadc7-edeb-480e-ae64-b449242caccc",
          "name": "credentials_verify:vc:type:item:integer"
        },
        "response": {
          "id": "d827cb3e-4eca-40f1-8aff-8ae6508c8d14",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d15d6d8f-7905-4d71-9f97-d8c3eaa9dd84",
        "cursor": {
          "ref": "509df9d2-fb9b-4cf0-a285-6ec1444bd7e6",
          "length": 283,
          "cycles": 1,
          "position": 211,
          "iteration": 0,
          "httpRequestId": "8be33bb7-7a10-4ab7-8c81-fcc0186b1df2"
        },
        "item": {
          "id": "d15d6d8f-7905-4d71-9f97-d8c3eaa9dd84",
          "name": "credentials_verify:vc:type:item:null"
        },
        "response": {
          "id": "7eb6cf7a-6c07-4d58-b135-e9a56d6aa2fe",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f917737a-7988-4c5d-9c82-1e2b6059e595",
        "cursor": {
          "ref": "12b17a56-a615-4957-acaa-2f7390ee8cf3",
          "length": 283,
          "cycles": 1,
          "position": 212,
          "iteration": 0,
          "httpRequestId": "b6931fde-0569-4e82-a33c-f75b53aaa492"
        },
        "item": {
          "id": "f917737a-7988-4c5d-9c82-1e2b6059e595",
          "name": "credentials_verify:vc:type:item:object"
        },
        "response": {
          "id": "c0625764-a1b2-41e4-b551-b0eab12582fd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c50d7bbf-072a-47f3-9c47-9b694956fc4b",
        "cursor": {
          "ref": "1f8a11a9-ad69-4d39-ab84-f612d9a7cb3f",
          "length": 283,
          "cycles": 1,
          "position": 213,
          "iteration": 0,
          "httpRequestId": "9dc3bf45-47b1-4f13-b81d-f3b1c72a946b"
        },
        "item": {
          "id": "c50d7bbf-072a-47f3-9c47-9b694956fc4b",
          "name": "credentials_verify:vc:issuer:missing"
        },
        "response": {
          "id": "f5acd604-2d0a-4c71-ad0e-b7628b4124ad",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 106
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cb41b7ec-8c1b-469e-b2d6-342462ee30ca",
        "cursor": {
          "ref": "06c9c3ec-a747-4853-9f98-6e5c2ef98c4f",
          "length": 283,
          "cycles": 1,
          "position": 214,
          "iteration": 0,
          "httpRequestId": "8c03e5de-ead8-4a9e-9bbc-e9c8e606d8b7"
        },
        "item": {
          "id": "cb41b7ec-8c1b-469e-b2d6-342462ee30ca",
          "name": "credentials_verify:vc:issuer:array"
        },
        "response": {
          "id": "b57dce08-fd95-4eb4-8b3f-690946052438",
          "status": "OK",
          "code": 200,
          "responseTime": 88,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:215)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:215)"
            }
          }
        ]
      },
      {
        "id": "a109687c-5c3c-49e5-8b0b-f4f54f5712a5",
        "cursor": {
          "ref": "2c16e17d-4346-43f3-9517-5d40f9c15ad0",
          "length": 283,
          "cycles": 1,
          "position": 215,
          "iteration": 0,
          "httpRequestId": "1a0dc3b0-4d34-4c07-8eef-b2a2761b016d"
        },
        "item": {
          "id": "a109687c-5c3c-49e5-8b0b-f4f54f5712a5",
          "name": "credentials_verify:vc:issuer:boolean"
        },
        "response": {
          "id": "cb3dcaeb-14a7-471e-92fc-0840dea55eaa",
          "status": "OK",
          "code": 200,
          "responseTime": 91,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:216)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:216)"
            }
          }
        ]
      },
      {
        "id": "f9b5bd74-c531-4c9e-ae30-ac7e7087c68c",
        "cursor": {
          "ref": "aee9c1ea-65cd-426a-a8dc-54af735218d9",
          "length": 283,
          "cycles": 1,
          "position": 216,
          "iteration": 0,
          "httpRequestId": "0b474e8d-1c7b-43ff-9573-f59383d11f83"
        },
        "item": {
          "id": "f9b5bd74-c531-4c9e-ae30-ac7e7087c68c",
          "name": "credentials_verify:vc:issuer:integer"
        },
        "response": {
          "id": "6882ed9f-2a5e-46a4-8562-72fc86181c21",
          "status": "OK",
          "code": 200,
          "responseTime": 87,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:217)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:217)"
            }
          }
        ]
      },
      {
        "id": "e667efa7-7893-4353-896d-5b6013813668",
        "cursor": {
          "ref": "453dec52-f80f-4e73-8604-dd5d251c0f12",
          "length": 283,
          "cycles": 1,
          "position": 217,
          "iteration": 0,
          "httpRequestId": "1f63fe4e-862d-4904-be6d-ae66ae80cb65"
        },
        "item": {
          "id": "e667efa7-7893-4353-896d-5b6013813668",
          "name": "credentials_verify:vc:issuer:null"
        },
        "response": {
          "id": "1f7fcb2a-572b-4810-9aae-48183fc01649",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 106
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f3fc2caa-8ae6-4b74-a4af-624f3e045c42",
        "cursor": {
          "ref": "38ae907d-b6ec-4fcf-8acf-dcc1fa533dec",
          "length": 283,
          "cycles": 1,
          "position": 218,
          "iteration": 0,
          "httpRequestId": "742075ac-005c-4261-aa5b-e313ab9d6232"
        },
        "item": {
          "id": "f3fc2caa-8ae6-4b74-a4af-624f3e045c42",
          "name": "credentials_verify:vc:issuer:id:missing"
        },
        "response": {
          "id": "f4cb01e6-e357-4d73-9565-7f65d707d541",
          "status": "OK",
          "code": 200,
          "responseTime": 126,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:219)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:219)"
            }
          }
        ]
      },
      {
        "id": "52f81564-a7ff-4252-ba18-39eef8058bd1",
        "cursor": {
          "ref": "cb7d3b17-f3d4-4d4e-9686-82d310c33a7b",
          "length": 283,
          "cycles": 1,
          "position": 219,
          "iteration": 0,
          "httpRequestId": "dc6de7cd-4e4c-4a33-8109-a6597bb107e3"
        },
        "item": {
          "id": "52f81564-a7ff-4252-ba18-39eef8058bd1",
          "name": "credentials_verify:vc:issuer:id:array"
        },
        "response": {
          "id": "9552e800-0be6-497c-8623-e25e987ba9b1",
          "status": "OK",
          "code": 200,
          "responseTime": 107,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:220)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:220)"
            }
          }
        ]
      },
      {
        "id": "258b2256-f200-4059-9d9b-589ef2cf6139",
        "cursor": {
          "ref": "e7d6be6d-0fbe-4364-a73d-efaa615ea053",
          "length": 283,
          "cycles": 1,
          "position": 220,
          "iteration": 0,
          "httpRequestId": "7dfc6be9-7d66-4059-bc1b-a8a1fbca8480"
        },
        "item": {
          "id": "258b2256-f200-4059-9d9b-589ef2cf6139",
          "name": "credentials_verify:vc:issuer:id:boolean"
        },
        "response": {
          "id": "cf61bddc-a2de-44e8-8be3-b97b5c0a25a5",
          "status": "OK",
          "code": 200,
          "responseTime": 114,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:221)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:221)"
            }
          }
        ]
      },
      {
        "id": "2fed4f68-7e20-4b91-8950-bca0212d49ef",
        "cursor": {
          "ref": "566a9fc6-93bb-4d40-8f8c-daea1ac5259c",
          "length": 283,
          "cycles": 1,
          "position": 221,
          "iteration": 0,
          "httpRequestId": "25434e09-8bb8-40e7-91fc-3e694e6818b4"
        },
        "item": {
          "id": "2fed4f68-7e20-4b91-8950-bca0212d49ef",
          "name": "credentials_verify:vc:issuer:id:integer"
        },
        "response": {
          "id": "9dcecdb1-c6b2-4a23-8ab2-ead05403d5e4",
          "status": "OK",
          "code": 200,
          "responseTime": 84,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:222)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:222)"
            }
          }
        ]
      },
      {
        "id": "73214b16-a5c0-48fc-90d2-cef468f45fab",
        "cursor": {
          "ref": "8d62112e-a238-40fa-b777-68cf8835b788",
          "length": 283,
          "cycles": 1,
          "position": 222,
          "iteration": 0,
          "httpRequestId": "c0ff9c07-bebc-47ef-9c0b-5305f7343a8f"
        },
        "item": {
          "id": "73214b16-a5c0-48fc-90d2-cef468f45fab",
          "name": "credentials_verify:vc:issuer:id:null"
        },
        "response": {
          "id": "396631ca-a695-40fd-b5f9-a8ef74820d58",
          "status": "OK",
          "code": 200,
          "responseTime": 292,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:223)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:223)"
            }
          }
        ]
      },
      {
        "id": "a3e67ef3-bfe0-4ddb-a995-87f62fe79607",
        "cursor": {
          "ref": "3d414712-38ae-4e12-8e73-ddb0b517cdff",
          "length": 283,
          "cycles": 1,
          "position": 223,
          "iteration": 0,
          "httpRequestId": "bc808c87-20b3-4228-a866-519dc3b8f975"
        },
        "item": {
          "id": "a3e67ef3-bfe0-4ddb-a995-87f62fe79607",
          "name": "credentials_verify:vc:issuer:id:object"
        },
        "response": {
          "id": "bcb7a84f-a4f0-49f9-841e-55b67bb3f8eb",
          "status": "OK",
          "code": 200,
          "responseTime": 83,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:224)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:224)"
            }
          }
        ]
      },
      {
        "id": "84cfb6bc-4601-4695-be7d-969fa139ad7e",
        "cursor": {
          "ref": "e8b390ee-ae4c-4a1b-a654-789a174fcfd3",
          "length": 283,
          "cycles": 1,
          "position": 224,
          "iteration": 0,
          "httpRequestId": "9803c899-c02d-425b-a054-b6d9a9af156b"
        },
        "item": {
          "id": "84cfb6bc-4601-4695-be7d-969fa139ad7e",
          "name": "credentials_verify:vc:issuanceDate:missing"
        },
        "response": {
          "id": "54e6e7d7-de3e-442f-889f-5f814b43f434",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b25b9afb-646d-4f2f-a133-a28b271d9e11",
        "cursor": {
          "ref": "80477cd7-1067-4080-bbf4-f2a707191ef7",
          "length": 283,
          "cycles": 1,
          "position": 225,
          "iteration": 0,
          "httpRequestId": "b509073b-50f0-419e-8d5b-5150fe5b7660"
        },
        "item": {
          "id": "b25b9afb-646d-4f2f-a133-a28b271d9e11",
          "name": "credentials_verify:vc:issuanceDate:array"
        },
        "response": {
          "id": "f4327ed9-d2c5-4ea2-91e4-4a7f9d4a5a7f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a7fcf1ca-e01a-414e-b0c3-79d1abc90b6c",
        "cursor": {
          "ref": "98cba1b7-2262-49ce-9138-7c59dc60c3d3",
          "length": 283,
          "cycles": 1,
          "position": 226,
          "iteration": 0,
          "httpRequestId": "dd2f5c6e-950a-45f7-be4b-bcfa50a76775"
        },
        "item": {
          "id": "a7fcf1ca-e01a-414e-b0c3-79d1abc90b6c",
          "name": "credentials_verify:vc:issuanceDate:boolean"
        },
        "response": {
          "id": "bf2c5dd0-3cbe-44f6-aa89-b1416b3fbb15",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9c613e71-9cb9-4427-85df-45c798c81895",
        "cursor": {
          "ref": "e83d9a78-cb40-47dd-88dd-c507a0e148db",
          "length": 283,
          "cycles": 1,
          "position": 227,
          "iteration": 0,
          "httpRequestId": "02244c88-d0b5-4ce5-9924-e5b1794135e8"
        },
        "item": {
          "id": "9c613e71-9cb9-4427-85df-45c798c81895",
          "name": "credentials_verify:vc:issuanceDate:integer"
        },
        "response": {
          "id": "42494b2c-717b-40ac-b4b1-d2ce34a67c6a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "311e8fbd-bc58-46a1-8317-2ff821d05c0c",
        "cursor": {
          "ref": "d2818336-5b52-44e4-a42a-432e31258d99",
          "length": 283,
          "cycles": 1,
          "position": 228,
          "iteration": 0,
          "httpRequestId": "c4cfaf14-7b23-4495-9710-d63e3b1722a0"
        },
        "item": {
          "id": "311e8fbd-bc58-46a1-8317-2ff821d05c0c",
          "name": "credentials_verify:vc:issuanceDate:null"
        },
        "response": {
          "id": "fc64e023-3ff7-4e24-89c8-e18cd5d87135",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2df07759-803f-40a0-8580-ccb7505ba369",
        "cursor": {
          "ref": "b4f3c883-e5f7-46ad-bc6c-2c71b6900b39",
          "length": 283,
          "cycles": 1,
          "position": 229,
          "iteration": 0,
          "httpRequestId": "7d22526e-16de-4b5f-9dd3-a3d46124e77b"
        },
        "item": {
          "id": "2df07759-803f-40a0-8580-ccb7505ba369",
          "name": "credentials_verify:vc:issuanceDate:object"
        },
        "response": {
          "id": "f8427efe-344a-4c46-b37c-300d34c6e8ff",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c0032e1c-eabf-4d2c-96b5-9768f39591cb",
        "cursor": {
          "ref": "f11f02c1-d7a9-4a42-8ab6-984b9f41281a",
          "length": 283,
          "cycles": 1,
          "position": 230,
          "iteration": 0,
          "httpRequestId": "98e87b0e-a4dc-4e36-8d0b-565e243033b2"
        },
        "item": {
          "id": "c0032e1c-eabf-4d2c-96b5-9768f39591cb",
          "name": "credentials_verify:vc:issuanceDate:string"
        },
        "response": {
          "id": "0a440cc8-c038-4538-862f-93b37fbb7c07",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "764381d6-0bbe-49c9-822d-f5276dbcdc2c",
        "cursor": {
          "ref": "5c5eb9cd-9e2f-4de5-80fb-b15ecc05deb3",
          "length": 283,
          "cycles": 1,
          "position": 231,
          "iteration": 0,
          "httpRequestId": "5537f7ef-f613-41a7-9155-10090095eda6"
        },
        "item": {
          "id": "764381d6-0bbe-49c9-822d-f5276dbcdc2c",
          "name": "credentials_verify:vc:credentialSubject:missing"
        },
        "response": {
          "id": "69877b48-521a-4595-8b07-ad450ac6bd4c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4159b7e2-7955-47f5-ac56-599f0cd8058b",
        "cursor": {
          "ref": "21d8f862-965e-42e0-893f-691d4478b2b8",
          "length": 283,
          "cycles": 1,
          "position": 232,
          "iteration": 0,
          "httpRequestId": "aa434911-3ca5-4037-ae4b-fdadfdd7fab9"
        },
        "item": {
          "id": "4159b7e2-7955-47f5-ac56-599f0cd8058b",
          "name": "credentials_verify:vc:credentialSubject:array"
        },
        "response": {
          "id": "8a794900-c02a-4038-af9b-ec15330cb43f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 223
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c1c39ebb-5f5d-41b0-9e3f-a32bc611e64e",
        "cursor": {
          "ref": "85efdbce-e453-4e37-bfdc-0622f209577c",
          "length": 283,
          "cycles": 1,
          "position": 233,
          "iteration": 0,
          "httpRequestId": "d486b1b2-46e3-4cc8-8cf1-e6c61bf0a4f3"
        },
        "item": {
          "id": "c1c39ebb-5f5d-41b0-9e3f-a32bc611e64e",
          "name": "credentials_verify:vc:credentialSubject:boolean"
        },
        "response": {
          "id": "be2953eb-0bce-4e84-9c6c-6240d5294b0e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 205
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e9bda57a-7eb5-40d5-984b-945549a933f6",
        "cursor": {
          "ref": "097d843c-1482-4bdc-8df1-89c765615111",
          "length": 283,
          "cycles": 1,
          "position": 234,
          "iteration": 0,
          "httpRequestId": "b8db5310-9b5a-42d0-b597-acae3773f076"
        },
        "item": {
          "id": "e9bda57a-7eb5-40d5-984b-945549a933f6",
          "name": "credentials_verify:vc:credentialSubject:integer"
        },
        "response": {
          "id": "47522a9d-4394-480c-936c-befeee8ca3f5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 205
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "22f5a02f-8d86-4a02-8762-df3ff87abb47",
        "cursor": {
          "ref": "ecdc3d16-0b11-453e-b9d4-ed6c27ca7adb",
          "length": 283,
          "cycles": 1,
          "position": 235,
          "iteration": 0,
          "httpRequestId": "b08b2610-a37b-4678-98d0-939a2f49993c"
        },
        "item": {
          "id": "22f5a02f-8d86-4a02-8762-df3ff87abb47",
          "name": "credentials_verify:vc:credentialSubject:null"
        },
        "response": {
          "id": "d9960bbf-5905-45a9-990a-b451daa941f5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 268
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "365cac59-c39d-4cd3-84ff-8e3404260c9b",
        "cursor": {
          "ref": "2cbc5934-daec-4e67-8736-6cb765e70ede",
          "length": 283,
          "cycles": 1,
          "position": 236,
          "iteration": 0,
          "httpRequestId": "e10d95e0-8a08-40da-97f3-64a6bd6ede70"
        },
        "item": {
          "id": "365cac59-c39d-4cd3-84ff-8e3404260c9b",
          "name": "credentials_verify:vc:credentialSubject:string"
        },
        "response": {
          "id": "c6d62479-618c-4ad8-a7bb-8dd2eb705928",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 205
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3ac49d88-a0ee-4c05-b4cd-d32f2026d115",
        "cursor": {
          "ref": "40e35cc3-2262-41d5-a254-3d3cc47c3a10",
          "length": 283,
          "cycles": 1,
          "position": 237,
          "iteration": 0,
          "httpRequestId": "19d2d6a3-8005-4a16-a027-9d25e5d4b796"
        },
        "item": {
          "id": "3ac49d88-a0ee-4c05-b4cd-d32f2026d115",
          "name": "credentials_verify:vc:credentialSubject:id:array"
        },
        "response": {
          "id": "21431f85-ca02-41c0-981e-3d451324e66f",
          "status": "OK",
          "code": 200,
          "responseTime": 86,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:238)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:238)"
            }
          }
        ]
      },
      {
        "id": "be79204c-f337-437a-8f89-ac44ad5cf9fb",
        "cursor": {
          "ref": "f7c2ea59-875d-4bf9-9a90-266c95ae3b89",
          "length": 283,
          "cycles": 1,
          "position": 238,
          "iteration": 0,
          "httpRequestId": "f74e6b9b-3d65-47d5-a786-666661bee89a"
        },
        "item": {
          "id": "be79204c-f337-437a-8f89-ac44ad5cf9fb",
          "name": "credentials_verify:vc:credentialSubject:id:boolean"
        },
        "response": {
          "id": "1e740c68-8e3c-4758-b530-9e3c5801728c",
          "status": "OK",
          "code": 200,
          "responseTime": 86,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:239)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:239)"
            }
          }
        ]
      },
      {
        "id": "467519cc-04c8-418f-bafa-08cb4d7654d6",
        "cursor": {
          "ref": "343f9bc9-54b1-47ed-b2f1-b94ffe26c65b",
          "length": 283,
          "cycles": 1,
          "position": 239,
          "iteration": 0,
          "httpRequestId": "881697df-7635-4163-9129-e306c34a63f5"
        },
        "item": {
          "id": "467519cc-04c8-418f-bafa-08cb4d7654d6",
          "name": "credentials_verify:vc:credentialSubject:id:integer"
        },
        "response": {
          "id": "9d12035e-d4f9-4d37-9ecb-5db7696eb14e",
          "status": "OK",
          "code": 200,
          "responseTime": 85,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:240)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:240)"
            }
          }
        ]
      },
      {
        "id": "bf3a3c49-21af-4046-90af-0cd5b674faa4",
        "cursor": {
          "ref": "6d9f7b43-5dcd-4ffd-baf3-e32c89a30262",
          "length": 283,
          "cycles": 1,
          "position": 240,
          "iteration": 0,
          "httpRequestId": "af0a7314-ea1e-4be7-8a5e-5c646b30a872"
        },
        "item": {
          "id": "bf3a3c49-21af-4046-90af-0cd5b674faa4",
          "name": "credentials_verify:vc:credentialSubject:id:null"
        },
        "response": {
          "id": "895928ea-6272-4194-8306-bd81c61a41dc",
          "status": "OK",
          "code": 200,
          "responseTime": 81,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:241)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:241)"
            }
          }
        ]
      },
      {
        "id": "3e77315b-e35f-4c8d-9186-c1f11967ef6f",
        "cursor": {
          "ref": "e828190f-630b-4db2-982a-434fe35a6889",
          "length": 283,
          "cycles": 1,
          "position": 241,
          "iteration": 0,
          "httpRequestId": "35f94e50-1a09-442f-bdaa-53c35fbcf0d4"
        },
        "item": {
          "id": "3e77315b-e35f-4c8d-9186-c1f11967ef6f",
          "name": "credentials_verify:vc:credentialSubject:id:object"
        },
        "response": {
          "id": "0f9a2679-b7c7-4b61-8b17-95e307917b39",
          "status": "OK",
          "code": 200,
          "responseTime": 83,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:242)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:242)"
            }
          }
        ]
      },
      {
        "id": "b265a19b-4a8a-439b-8c40-e3dd92c4f1d1",
        "cursor": {
          "ref": "1f368175-50e4-4c8e-ade9-4d61df33e0c5",
          "length": 283,
          "cycles": 1,
          "position": 242,
          "iteration": 0,
          "httpRequestId": "b5151317-3a54-467a-8b45-d70457cdfb71"
        },
        "item": {
          "id": "b265a19b-4a8a-439b-8c40-e3dd92c4f1d1",
          "name": "credentials_verify:proof:missing"
        },
        "response": {
          "id": "db26fc3b-656f-4f4d-a4be-7a50e71ca3c6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 217
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "114ef6ea-4fff-4b02-9508-2d3cf0d1c228",
        "cursor": {
          "ref": "83b39e0e-dd9f-486b-a21a-ce95ef416bea",
          "length": 283,
          "cycles": 1,
          "position": 243,
          "iteration": 0,
          "httpRequestId": "27ce0b92-b0e4-434c-9727-e4b29040f52c"
        },
        "item": {
          "id": "114ef6ea-4fff-4b02-9508-2d3cf0d1c228",
          "name": "credentials_verify:proof:array"
        },
        "response": {
          "id": "67cb9f5c-8e81-4fa7-a4c8-87dc84b97a4f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 166
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "eacfc72a-be7f-4074-9d6e-2de39113afec",
        "cursor": {
          "ref": "d1dbe670-7c18-45bd-92b4-ccbd62e75427",
          "length": 283,
          "cycles": 1,
          "position": 244,
          "iteration": 0,
          "httpRequestId": "b998ca1a-2672-455b-9449-b064cbc3cb6a"
        },
        "item": {
          "id": "eacfc72a-be7f-4074-9d6e-2de39113afec",
          "name": "credentials_verify:proof:boolean"
        },
        "response": {
          "id": "0baa21b2-b59c-4e6b-9ebb-e7794af26947",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 244
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3cbd15ec-4180-4c5a-b95a-a9a5be0af01b",
        "cursor": {
          "ref": "8d102643-a233-4799-bed4-a003207058ef",
          "length": 283,
          "cycles": 1,
          "position": 245,
          "iteration": 0,
          "httpRequestId": "b170a4a3-7554-47eb-8d73-533e65bac1c5"
        },
        "item": {
          "id": "3cbd15ec-4180-4c5a-b95a-a9a5be0af01b",
          "name": "credentials_verify:proof:integer"
        },
        "response": {
          "id": "1df85746-f92f-472b-a63a-f3d59e100640",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 244
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c121760b-38a6-441d-82a4-29c9efad4362",
        "cursor": {
          "ref": "70c94454-3977-4add-99c5-3664555679c6",
          "length": 283,
          "cycles": 1,
          "position": 246,
          "iteration": 0,
          "httpRequestId": "c72ae53a-614f-4d5e-8c04-ae1788d9c820"
        },
        "item": {
          "id": "c121760b-38a6-441d-82a4-29c9efad4362",
          "name": "credentials_verify:proof:null"
        },
        "response": {
          "id": "602f303d-f23c-4128-a5cb-8fb2c0453ec9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 295
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f385ab1b-d20d-46a8-9b1f-c1c69d02c1f5",
        "cursor": {
          "ref": "5103c8b1-3776-41bf-8579-9c776182c5bf",
          "length": 283,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "dcb440ef-d902-443c-91ef-ff1b31e39384"
        },
        "item": {
          "id": "f385ab1b-d20d-46a8-9b1f-c1c69d02c1f5",
          "name": "credentials_verify:proof:string"
        },
        "response": {
          "id": "88e02847-0734-4227-8c13-4c613cfb044f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 244
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "06bb5bef-d3dc-4d6c-a6d4-776d95f62914",
        "cursor": {
          "ref": "17a52c5c-3153-4dbe-b21b-ae16f72e703f",
          "length": 283,
          "cycles": 1,
          "position": 248,
          "iteration": 0,
          "httpRequestId": "4d975018-a52d-48e1-bc9a-1dc7c654ce80"
        },
        "item": {
          "id": "06bb5bef-d3dc-4d6c-a6d4-776d95f62914",
          "name": "credentials_verify:proof:type:missing"
        },
        "response": {
          "id": "035ce025-698a-47a9-b157-c9b4201744d7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 345
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9894ffa7-cf59-48c3-9deb-e35397c29b9c",
        "cursor": {
          "ref": "ff1ed3c2-48f6-4e05-bc57-1d3660bfa0d2",
          "length": 283,
          "cycles": 1,
          "position": 249,
          "iteration": 0,
          "httpRequestId": "81034ce4-6262-463f-b5d2-f7c056f31a3c"
        },
        "item": {
          "id": "9894ffa7-cf59-48c3-9deb-e35397c29b9c",
          "name": "credentials_verify:proof:type:array"
        },
        "response": {
          "id": "39ac5b88-0c7b-4f39-aef5-f0ea2431e203",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "256f3e71-4e90-4435-b862-bfce39c85e13",
        "cursor": {
          "ref": "ef604f86-960b-4fe3-8aaa-79171f0b7a7a",
          "length": 283,
          "cycles": 1,
          "position": 250,
          "iteration": 0,
          "httpRequestId": "7a4fa0fd-96a9-4ad3-9bb6-e4525cd1b168"
        },
        "item": {
          "id": "256f3e71-4e90-4435-b862-bfce39c85e13",
          "name": "credentials_verify:proof:type:boolean"
        },
        "response": {
          "id": "964514f2-8919-482d-8faf-2c548de8f7b1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ebf029cf-6b5e-4b37-9742-37c4e50d691a",
        "cursor": {
          "ref": "ed6767c7-468f-4cb7-9d37-f31775843955",
          "length": 283,
          "cycles": 1,
          "position": 251,
          "iteration": 0,
          "httpRequestId": "381ef51a-7de4-47ec-a5d3-492e7c9d18f2"
        },
        "item": {
          "id": "ebf029cf-6b5e-4b37-9742-37c4e50d691a",
          "name": "credentials_verify:proof:type:integer"
        },
        "response": {
          "id": "b30a68a4-9c92-4c40-ae98-6ad2dfa49da7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "94874262-5397-4a5b-a31d-221558de9830",
        "cursor": {
          "ref": "8499a977-ae01-40f3-8950-250eb7a13a9c",
          "length": 283,
          "cycles": 1,
          "position": 252,
          "iteration": 0,
          "httpRequestId": "0d45b8cf-9cc7-4ee5-94d1-bc67636f8c75"
        },
        "item": {
          "id": "94874262-5397-4a5b-a31d-221558de9830",
          "name": "credentials_verify:proof:type:null"
        },
        "response": {
          "id": "e165c6fe-feeb-430a-b6b1-437c6666bd73",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 345
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0704d03d-9c90-471c-923e-758842a9b090",
        "cursor": {
          "ref": "b3407c99-56ee-463a-b1ed-dbd6a4670aac",
          "length": 283,
          "cycles": 1,
          "position": 253,
          "iteration": 0,
          "httpRequestId": "d3c62677-ae9c-421c-930e-276893d11871"
        },
        "item": {
          "id": "0704d03d-9c90-471c-923e-758842a9b090",
          "name": "credentials_verify:proof:type:object"
        },
        "response": {
          "id": "a419376b-785e-432d-8e63-84f9ad7913ef",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e43218d0-b4a9-488d-bd8a-884821b6a4e8",
        "cursor": {
          "ref": "26e2d703-3d41-4b17-8f3a-4bb3ebda7310",
          "length": 283,
          "cycles": 1,
          "position": 254,
          "iteration": 0,
          "httpRequestId": "8821ff4b-23c7-404d-977e-4a26d5218a7e"
        },
        "item": {
          "id": "e43218d0-b4a9-488d-bd8a-884821b6a4e8",
          "name": "credentials_verify:proof:type:string"
        },
        "response": {
          "id": "d4f94890-f5c9-440f-8f9c-052401faafee",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "74925ed2-0de6-4afd-b884-d89c7ae88766",
        "cursor": {
          "ref": "2280b2f0-e3a9-4269-919c-03e6d9f3c567",
          "length": 283,
          "cycles": 1,
          "position": 255,
          "iteration": 0,
          "httpRequestId": "e56ff878-01be-47a7-986f-b0eb53c39bb4"
        },
        "item": {
          "id": "74925ed2-0de6-4afd-b884-d89c7ae88766",
          "name": "credentials_verify:proof:created:array"
        },
        "response": {
          "id": "471aa16e-739b-43ba-853a-53dfb54d5bb6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "150db40c-5797-4846-b267-cf68a6b9ffd2",
        "cursor": {
          "ref": "5c7b86d0-80a9-495c-a531-560177ab9192",
          "length": 283,
          "cycles": 1,
          "position": 256,
          "iteration": 0,
          "httpRequestId": "6f329b37-b96f-4b08-af57-970ee5d3555f"
        },
        "item": {
          "id": "150db40c-5797-4846-b267-cf68a6b9ffd2",
          "name": "credentials_verify:proof:created:boolean"
        },
        "response": {
          "id": "f2e87b1e-2e9b-4ca4-939d-b4db86949360",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "db320d7e-9e5a-4b95-bea2-f37470c5f6bc",
        "cursor": {
          "ref": "d6a25e51-9f82-4e2c-a93d-4012d3a6c0e4",
          "length": 283,
          "cycles": 1,
          "position": 257,
          "iteration": 0,
          "httpRequestId": "828fea88-4a8a-449a-b4d1-56ad5ccf9464"
        },
        "item": {
          "id": "db320d7e-9e5a-4b95-bea2-f37470c5f6bc",
          "name": "credentials_verify:proof:created:integer"
        },
        "response": {
          "id": "b431eda7-73ef-47b5-8042-c8e72c3a1995",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "35d2c164-c341-4431-8054-89f4938acd27",
        "cursor": {
          "ref": "9757b21f-5886-4e06-933e-d2a91b7f8042",
          "length": 283,
          "cycles": 1,
          "position": 258,
          "iteration": 0,
          "httpRequestId": "33422da0-e76d-4049-bbf9-890e56751d9b"
        },
        "item": {
          "id": "35d2c164-c341-4431-8054-89f4938acd27",
          "name": "credentials_verify:proof:created:null"
        },
        "response": {
          "id": "9d6eab74-d3b0-47b8-9e5b-4b99c00c9321",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 252
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2258f138-a1e1-4631-a7d7-b6e3bd0151f4",
        "cursor": {
          "ref": "ebb60fe8-74a0-4290-9ea2-85360c90577e",
          "length": 283,
          "cycles": 1,
          "position": 259,
          "iteration": 0,
          "httpRequestId": "c42ed35d-8e3b-4c50-95c3-da88d69cc95f"
        },
        "item": {
          "id": "2258f138-a1e1-4631-a7d7-b6e3bd0151f4",
          "name": "credentials_verify:proof:created:object"
        },
        "response": {
          "id": "61535192-f9b2-45a3-895f-ece810981462",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "954ec65a-8e13-4309-9327-107fa322cc6a",
        "cursor": {
          "ref": "7db31018-ebf0-481e-b558-42a0e17cfdbd",
          "length": 283,
          "cycles": 1,
          "position": 260,
          "iteration": 0,
          "httpRequestId": "7df3c77b-0f8c-4cb2-ac6e-be32a8080d6e"
        },
        "item": {
          "id": "954ec65a-8e13-4309-9327-107fa322cc6a",
          "name": "credentials_verify:proof:verificationMethod:array"
        },
        "response": {
          "id": "7e2399fc-c2af-4dbf-9cea-8987fa6925a3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "69caacf7-0ecc-416c-a40c-81524cc1b288",
        "cursor": {
          "ref": "65e23745-1be4-4bd1-b931-348c5a8a2cd3",
          "length": 283,
          "cycles": 1,
          "position": 261,
          "iteration": 0,
          "httpRequestId": "fc296edf-1a13-4ffd-af84-4ee17997546c"
        },
        "item": {
          "id": "69caacf7-0ecc-416c-a40c-81524cc1b288",
          "name": "credentials_verify:proof:verificationMethod:boolean"
        },
        "response": {
          "id": "f11e3030-2685-4072-b8a0-fa3c8423704f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1334676a-b958-4aec-9482-e0297391f334",
        "cursor": {
          "ref": "fcf7c587-e892-4cd4-bccb-a4ac2e16c3b1",
          "length": 283,
          "cycles": 1,
          "position": 262,
          "iteration": 0,
          "httpRequestId": "cb0672b7-d561-469e-8a20-790b60beea03"
        },
        "item": {
          "id": "1334676a-b958-4aec-9482-e0297391f334",
          "name": "credentials_verify:proof:verificationMethod:integer"
        },
        "response": {
          "id": "48955493-1ffb-4ae4-96cf-c73064fff6bb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f0296c67-f3de-4a2b-840b-33376ec7b50a",
        "cursor": {
          "ref": "49822294-6c0c-44c7-8c6e-d694509be3d7",
          "length": 283,
          "cycles": 1,
          "position": 263,
          "iteration": 0,
          "httpRequestId": "a606275a-8dc7-48f7-b0ef-7c776d90766e"
        },
        "item": {
          "id": "f0296c67-f3de-4a2b-840b-33376ec7b50a",
          "name": "credentials_verify:proof:verificationMethod:null"
        },
        "response": {
          "id": "9dc06b4a-37b4-41b6-8a4d-fdd204405a06",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "da85d76e-08b7-4be1-8d3c-a242b7a1147f",
        "cursor": {
          "ref": "1502043b-9e2c-466e-8cab-298df02a6a8e",
          "length": 283,
          "cycles": 1,
          "position": 264,
          "iteration": 0,
          "httpRequestId": "25a21fc9-0aa0-41fc-a91b-b3c3b15a3099"
        },
        "item": {
          "id": "da85d76e-08b7-4be1-8d3c-a242b7a1147f",
          "name": "credentials_verify:proof:verificationMethod:object"
        },
        "response": {
          "id": "8da85058-34c6-4d3a-8581-1ae6ffdb43ac",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "49ac2747-ad56-49eb-b375-a55ea7e62adf",
        "cursor": {
          "ref": "ef233686-f4c9-49f7-978d-e5f1ac8ccf1a",
          "length": 283,
          "cycles": 1,
          "position": 265,
          "iteration": 0,
          "httpRequestId": "05860db4-cc84-4b59-b5d2-3c8d1d2f388c"
        },
        "item": {
          "id": "49ac2747-ad56-49eb-b375-a55ea7e62adf",
          "name": "credentials_verify:proof:jws:array"
        },
        "response": {
          "id": "b8bab84d-d41f-4f3d-9d3b-3ad5aa569df0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "eca814ea-fd79-4384-b9ab-0174c9ce84f3",
        "cursor": {
          "ref": "1a8dda3d-2770-4835-9bbf-13f49c3b44d4",
          "length": 283,
          "cycles": 1,
          "position": 266,
          "iteration": 0,
          "httpRequestId": "55bfcecb-a64f-45ad-86d2-ffc5083b13c3"
        },
        "item": {
          "id": "eca814ea-fd79-4384-b9ab-0174c9ce84f3",
          "name": "credentials_verify:proof:jws:boolean"
        },
        "response": {
          "id": "1b7410b3-df56-4af5-99b6-0ce6ffa80bb5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fae0c8bf-c86f-456e-b16d-6aeb8bee9c96",
        "cursor": {
          "ref": "e0093737-e2d3-4afe-9a1f-1413b7e51eca",
          "length": 283,
          "cycles": 1,
          "position": 267,
          "iteration": 0,
          "httpRequestId": "5f9a37da-0f84-457d-af0a-6b323f6559b3"
        },
        "item": {
          "id": "fae0c8bf-c86f-456e-b16d-6aeb8bee9c96",
          "name": "credentials_verify:proof:jws:integer"
        },
        "response": {
          "id": "ec3ca6b4-82d9-4a33-920b-164ca9db65a2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a2731ffc-2f16-4a43-b6a0-996653c7af23",
        "cursor": {
          "ref": "432b4fc3-bb80-415a-b826-9a2a1d0053f2",
          "length": 283,
          "cycles": 1,
          "position": 268,
          "iteration": 0,
          "httpRequestId": "40dd0627-1166-4f8b-bb73-5a65176c99c7"
        },
        "item": {
          "id": "a2731ffc-2f16-4a43-b6a0-996653c7af23",
          "name": "credentials_verify:proof:jws:null"
        },
        "response": {
          "id": "f0793ed9-7c2e-4b0d-9b8b-d75a3527dc69",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 172
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ae456d75-1f03-44fd-9086-b5af7e6a8062",
        "cursor": {
          "ref": "dae8d044-9ea2-431d-8910-374e7475c9a8",
          "length": 283,
          "cycles": 1,
          "position": 269,
          "iteration": 0,
          "httpRequestId": "516eec7e-24f0-4425-b8ee-d092618fa471"
        },
        "item": {
          "id": "ae456d75-1f03-44fd-9086-b5af7e6a8062",
          "name": "credentials_verify:proof:jws:object"
        },
        "response": {
          "id": "7571887f-6a81-47b8-b442-ecefce646589",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6dda4c7e-9fc7-43f7-b02d-d451e3786c2a",
        "cursor": {
          "ref": "693e72d8-f15d-488b-807e-08a69c235aa7",
          "length": 283,
          "cycles": 1,
          "position": 270,
          "iteration": 0,
          "httpRequestId": "76676e8a-559d-4d0d-b8fd-5637decd21c7"
        },
        "item": {
          "id": "6dda4c7e-9fc7-43f7-b02d-d451e3786c2a",
          "name": "credentials_verify:proof:proofPurpose:array"
        },
        "response": {
          "id": "236d9e0f-f1c9-4e5f-9a4c-3b46b30ab01e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f88b3963-c324-45e9-91d0-8b66735e5fbf",
        "cursor": {
          "ref": "ec9164ee-a21d-4318-a79b-5bf855468947",
          "length": 283,
          "cycles": 1,
          "position": 271,
          "iteration": 0,
          "httpRequestId": "bd78fca0-1db4-4fd5-998e-67ff47db28f1"
        },
        "item": {
          "id": "f88b3963-c324-45e9-91d0-8b66735e5fbf",
          "name": "credentials_verify:proof:proofPurpose:boolean"
        },
        "response": {
          "id": "157ce52c-9090-4e94-b6a1-e964fd358209",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1af36f6a-f57f-4a57-b46f-c654bda37b67",
        "cursor": {
          "ref": "7f16bdcc-0106-42c6-9922-ab1b572f09c8",
          "length": 283,
          "cycles": 1,
          "position": 272,
          "iteration": 0,
          "httpRequestId": "79a55bfa-6798-4938-8a91-fb19d049b47e"
        },
        "item": {
          "id": "1af36f6a-f57f-4a57-b46f-c654bda37b67",
          "name": "credentials_verify:proof:proofPurpose:integer"
        },
        "response": {
          "id": "59d84fbf-985b-466b-a64b-4b8272184cd6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7caa6722-25b4-4ebb-af7a-7d6e90993382",
        "cursor": {
          "ref": "5fa0ab76-d7a9-4279-9083-ddedb4abb4ef",
          "length": 283,
          "cycles": 1,
          "position": 273,
          "iteration": 0,
          "httpRequestId": "db8f9b95-99d3-4bd1-87ce-fd8782ebc3ca"
        },
        "item": {
          "id": "7caa6722-25b4-4ebb-af7a-7d6e90993382",
          "name": "credentials_verify:proof:proofPurpose:null"
        },
        "response": {
          "id": "a0cf1991-006f-4334-9947-d8f2d4dd6765",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5be8784d-703b-4db9-b48b-d4c8859142c4",
        "cursor": {
          "ref": "a882e7c5-2de6-451a-9ada-c7bb0197c8e4",
          "length": 283,
          "cycles": 1,
          "position": 274,
          "iteration": 0,
          "httpRequestId": "68df7cb4-879d-4940-ad9e-b821890b1f0e"
        },
        "item": {
          "id": "5be8784d-703b-4db9-b48b-d4c8859142c4",
          "name": "credentials_verify:proof:proofPurpose:object"
        },
        "response": {
          "id": "458659e4-d97c-4273-a04a-fbeb38310df0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "361c3711-45ed-49ac-a38b-741dafa789fb",
        "cursor": {
          "ref": "c76bbac5-2e8c-4711-a0ef-9f663c6c0a73",
          "length": 283,
          "cycles": 1,
          "position": 275,
          "iteration": 0,
          "httpRequestId": "1cb5d8f9-92c3-4cee-a2e3-d7e376c74bf2"
        },
        "item": {
          "id": "361c3711-45ed-49ac-a38b-741dafa789fb",
          "name": "credentials_verify:proof:proofPurpose:string"
        },
        "response": {
          "id": "90f8b1f0-b39f-4f16-80e8-78273f84beb1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "610a333f-40c7-4057-a25f-083e530ef86c",
        "cursor": {
          "ref": "7847773c-6c13-4fdb-a03d-ef0b5705a67e",
          "length": 283,
          "cycles": 1,
          "position": 276,
          "iteration": 0,
          "httpRequestId": "c2a7deb9-5043-4572-af73-38d7b12c4255"
        },
        "item": {
          "id": "610a333f-40c7-4057-a25f-083e530ef86c",
          "name": "credentials_verify:missing_auth"
        },
        "response": {
          "id": "02f66a67-6bc6-46a1-85e3-4baa98ac1120",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 17,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9d9fbbbc-ef46-4ae6-9fc7-1f2cd0df92ee",
        "cursor": {
          "ref": "22b1c095-919f-443a-95e1-86a4bcf50c6c",
          "length": 283,
          "cycles": 1,
          "position": 277,
          "iteration": 0,
          "httpRequestId": "33ecee2e-c96d-435d-a089-f18a34955f18"
        },
        "item": {
          "id": "9d9fbbbc-ef46-4ae6-9fc7-1f2cd0df92ee",
          "name": "credentials_verify:bad_signature"
        },
        "response": {
          "id": "d2c74c9b-1191-47eb-bde2-887cdb898af1",
          "status": "OK",
          "code": 200,
          "responseTime": 101,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is false",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response verified is false",
              "message": "expected true to be false",
              "stack": "AssertionError: expected true to be false\n   at Object.eval sandbox-script.js:3:278)"
            }
          }
        ]
      },
      {
        "id": "83620186-4097-4df0-996b-777d2af530ff",
        "cursor": {
          "ref": "b95d4438-5773-4c63-807c-2752d6862b14",
          "length": 283,
          "cycles": 1,
          "position": 278,
          "iteration": 0,
          "httpRequestId": "493fb6da-67ca-4c1a-8ec5-996b8c7beff7"
        },
        "item": {
          "id": "83620186-4097-4df0-996b-777d2af530ff",
          "name": "credentials_verify"
        },
        "response": {
          "id": "4b350eda-d30a-40b4-b933-07b528b25e2c",
          "status": "OK",
          "code": 200,
          "responseTime": 84,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "20a58fd0-a6c3-4efe-8552-937722239d83",
        "cursor": {
          "ref": "9985c3cd-88e6-4be0-badd-b8f54f9d9f25",
          "length": 283,
          "cycles": 1,
          "position": 279,
          "iteration": 0,
          "httpRequestId": "95d6902c-f3a2-4b34-a7e9-8bff40de55c2"
        },
        "item": {
          "id": "20a58fd0-a6c3-4efe-8552-937722239d83",
          "name": "credentials_verify:issuer:object"
        },
        "response": {
          "id": "3de623af-47a9-4054-86c8-a7fab7fd7e7c",
          "status": "OK",
          "code": 200,
          "responseTime": 83,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "080e93bc-fec2-45df-a48a-fa42345f6cce",
        "cursor": {
          "ref": "e0bfb635-6be5-4a3b-b4b0-c6a4dedcc46c",
          "length": 283,
          "cycles": 1,
          "position": 280,
          "iteration": 0,
          "httpRequestId": "5cf80b80-6a3a-41c7-b879-6abe05463b29"
        },
        "item": {
          "id": "080e93bc-fec2-45df-a48a-fa42345f6cce",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "29601098-641e-4389-85a3-f14129395258",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 16,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "080e93bc-fec2-45df-a48a-fa42345f6cce",
        "cursor": {
          "ref": "e0bfb635-6be5-4a3b-b4b0-c6a4dedcc46c",
          "length": 283,
          "cycles": 1,
          "position": 280,
          "iteration": 0,
          "httpRequestId": "5cf80b80-6a3a-41c7-b879-6abe05463b29"
        },
        "item": {
          "id": "080e93bc-fec2-45df-a48a-fa42345f6cce",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "29601098-641e-4389-85a3-f14129395258",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 16,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0cb07fe3-48e6-4969-916f-7124b3176a17",
        "cursor": {
          "ref": "7b935225-7fa4-42d6-ba2e-c8f8fc2c6257",
          "length": 283,
          "cycles": 1,
          "position": 281,
          "iteration": 0,
          "httpRequestId": "74164a2a-28db-4b61-8700-2e8c212e07fa"
        },
        "item": {
          "id": "0cb07fe3-48e6-4969-916f-7124b3176a17",
          "name": "presentations_prove:missing_auth"
        },
        "response": {
          "id": "d4f5692d-05ca-4a4a-b191-b4ed527fed64",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 16,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8162300c-7e47-4be6-8a56-109517aa217e",
        "cursor": {
          "ref": "16665fcc-bb0c-48b3-ba96-ca33166dacd3",
          "length": 283,
          "cycles": 1,
          "position": 282,
          "iteration": 0,
          "httpRequestId": "44000ef0-b0d3-4965-9df9-3192b752365a"
        },
        "item": {
          "id": "8162300c-7e47-4be6-8a56-109517aa217e",
          "name": "presentations_verify:missing_auth"
        },
        "response": {
          "id": "1e5a778b-5325-4308-80d4-50ab67667e61",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 16,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      }
    ]
  }
}