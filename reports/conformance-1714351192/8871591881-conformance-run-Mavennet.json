{
  "collection": {
    "info": {
      "_postman_id": "0b8a4a7f-f952-4403-a9a4-909b37b8fa24",
      "name": "Conformance Suite",
      "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
    },
    "item": [
      {
        "id": "42229a63-aceb-4acd-891c-921d2fe74b7b",
        "name": "Clear Cache",
        "item": [
          {
            "id": "09c1485c-2a8e-4474-9350-cac9f09c4be2",
            "name": "Clear Token Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "22b1adb3-85f4-46aa-9bb3-f06cea3fd8f6",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"tokenCache\");",
                    ""
                  ],
                  "_lastExecutionId": "b3c9b48d-1835-4eff-af01-8387349baf00"
                }
              }
            ]
          },
          {
            "id": "df181992-e603-4ff9-905e-ac8938511b1a",
            "name": "Clear DID Web Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "a70ea582-4ba9-47ee-95e4-7df60c94c07d",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"didWebCache\");",
                    ""
                  ],
                  "_lastExecutionId": "59a629f9-e431-444c-b998-dccbc860cf77"
                }
              }
            ]
          }
        ],
        "event": []
      },
      {
        "id": "b62fdf87-dc1f-47e2-9dc7-a343309e6366",
        "name": "Discovery - API Configuration",
        "item": [
          {
            "id": "701604de-b7f2-4c14-92ff-ab3d6d696ab9",
            "name": "Positive Testing",
            "item": [
              {
                "id": "f010a126-5892-4b04-af6b-6c589fa31803",
                "name": "did_json",
                "request": {
                  "url": {
                    "host": [
                      "{{did_web_endpoint}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "412fa544-4951-4793-86ec-f6571babc938",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200ApiConfiguration\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "918226be-78f5-48fa-8556-e61c76e62659"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "0d82da3d-7323-4499-aa29-75bb7000c8b5",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "c96f848d-d05e-4325-b2e4-c520e4a3db92"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "6d0aa137-bbc2-40f9-a8dc-c02b18d63a55",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "2b1e0b2c-e930-4387-a687-34c01ef192cf"
                }
              }
            ]
          }
        ],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "3ed26c84-3114-4312-9b56-e2c124e8089f",
              "type": "text/javascript",
              "exec": [
                "// Discovery requires a multi-tenant aware did web endpoint",
                "const did_web = pm.environment.get(\"ORGANIZATION_DID_WEB\");",
                "const did_web_endpoint = utils(pm).convertDidWebToEndpoint(did_web);",
                "pm.variables.set('did_web_endpoint', did_web_endpoint);",
                ""
              ],
              "_lastExecutionId": "21f67a0d-b4e7-47ee-818e-1447ce1bf503"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "1c906c02-1836-48ab-ae63-a06746097cdd",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "4cf126e1-23c1-463e-bac8-a8b7f3e626d3"
            }
          }
        ]
      },
      {
        "id": "1031e592-2fca-4ca6-809d-7290b9873dc6",
        "name": "Identifiers - Resolve",
        "item": [
          {
            "id": "155d8036-327a-4849-b9e4-e063eef18352",
            "name": "Negative Testing",
            "item": [
              {
                "id": "464e29d2-e911-4dbc-8cf4-f077c8477f61",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "d9a8c865-15bf-47a2-aec0-4b489c54aee6",
                    "name": "did:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "invalid_did"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d22c718b-8a6d-4d9d-aca3-c7b780a89ae5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400Identifiers\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "3a615e15-4d02-4459-b017-d623b51c09c5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "90e75349-d869-4082-92e3-750d1358f6a0",
                    "name": "did:not_found:did_web",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "did:web:example.com"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "54e309be-1b22-48f2-ae06-b8016a506943",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "0c9b47eb-a93a-4694-bf49-d21f0923a03b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f70d181f-812c-4896-8f94-4748da27f5a2",
                    "name": "did:not_found:urn",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "urn:uuid:{{$randomUUID}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a9c479f0-2410-4afb-b127-e1ee25489404",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "bb0d6b8b-4207-424e-90cb-cf5fc0a0e3b0"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "5e7adb5a-dae7-425b-b4ef-ef9c8a87bc4b",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "678ba764-7da0-4c41-a19f-55a465febeb6",
                    "name": "identifiers:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET",
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "08b3a1c4-5aa2-4c86-8a50-1827cfde1657",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "1f0e5b36-5605-42ba-a3bb-a3ed0391fd70"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7b0cf8c1-88e7-4b0b-b7a5-8e972d499cff",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "493ba057-77c9-4fc2-bc17-e0c929ee38cc"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "e8190408-6700-4772-91e6-feceb866ed98",
            "name": "Positive Testing",
            "item": [
              {
                "id": "4059cba3-b103-4f62-89fa-985c919672fd",
                "name": "identifiers",
                "request": {
                  "url": {
                    "path": [
                      "identifiers",
                      "{{ORGANIZATION_DID_WEB}}"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "d5c80082-ce77-4757-9045-683857b99872",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200Identifiers\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString), {",
                        "     strict: true,",
                        "     strictSchema: true,",
                        " });",
                        "});"
                      ],
                      "_lastExecutionId": "4619a6d0-d9dd-4821-9d23-5aec49b6f44a"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "7cde8dc5-b4e5-4706-9ee0-5095f4bd0b96",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                ""
              ],
              "_lastExecutionId": "03acc058-a39c-4f6a-9def-fe372c430004"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "148b6f17-eca4-4f98-b07e-d6421e95071c",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "bc45866f-61f6-40b5-aa6b-886bc5efb2f8"
            }
          }
        ]
      },
      {
        "id": "ce6b89fb-895b-436d-b512-cff291b43c70",
        "name": "Credentials - Create",
        "item": [
          {
            "id": "a91ae4a5-202c-4ea6-bba2-d4b0d4fd8696",
            "name": "Negative Testing",
            "item": [
              {
                "id": "6756eeda-0d09-48b2-ab7e-800e84918b2a",
                "name": "Bad Request",
                "description": {
                  "content": "This folder contains requests which mutate a valid request body in a way that should provoke a \"400 Bad Request\" response from the server.",
                  "type": "text/plain"
                },
                "item": [
                  {
                    "id": "f21e0eae-3872-4103-8ac7-e14514839a15",
                    "name": "credentials_issue:credential:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "243262c4-2e8c-416e-97f1-3f2fc600fff8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "00d60e16-0e50-4764-a35e-da7ba4d66d46"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "96467283-adbc-434a-a98a-fa2ce26c966d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential\" is a required field",
                            "    delete req.credential;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "ff972066-a5f3-406e-8dc5-acd153b6f898"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dd07c87f-6801-430b-8e92-5359769c050b",
                    "name": "credentials_issue:credential.@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "037899c9-e1cc-44b7-947b-f889af428d2d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c2994b23-56b4-46e8-9529-08cacd41caf9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e2425269-7f0c-4acd-8be0-75e1ac5e0179",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" is a required field",
                            "    delete req.credential[\"@context\"];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "1b8addc1-8caf-473d-864d-07e369c5c41b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5c3d50d0-9162-4fbf-b788-c73c874a9c3e",
                    "name": "credentials_issue:credential.@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d9e4c06a-0ce6-4561-964f-382394efd232",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "708fc779-8779-4503-afb4-e4d41098e2c0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "66614958-99e7-4bce-b68f-dc99b5f1a100",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a boolean",
                            "    req.credential[\"@context\"] = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "08152725-b80a-439b-95c4-4c8c840651ef"
                        }
                      }
                    ]
                  },
                  {
                    "id": "04a37640-6505-4efd-984d-0daee0fbd1f4",
                    "name": "credentials_issue:credential.@context:integer Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "817eb2b2-632c-4ff6-b8e2-efe10a5abca8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "58b60c09-8f8d-4939-8dd7-dc4a880777a7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fc0c9325-cb22-44cf-bfb1-d0fc48553f7f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an integer",
                            "    req.credential[\"@context\"] = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "bb50880d-083b-47ca-abdd-b54c5029c36e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "37553531-a470-41bf-a81c-242b11542426",
                    "name": "credentials_issue:credential.@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "154ee9a4-dde9-4e01-9d45-4a32e44e69ec",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c4646f29-758b-4827-aede-ede4274c042a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7b174dcb-3f1e-4864-ad64-ea48a0143b5c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not null",
                            "    req.credential[\"@context\"] = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "90ef60f4-2554-422f-8716-ec30572af835"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0fc8506d-118c-4c5d-ae8c-49ceb8196152",
                    "name": "credentials_issue:credential.@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d766fa50-1155-469b-b3fb-f2f8974e5dc7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "56e18d32-0296-4494-a481-aaa7bd5b53c3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cdb4ac21-ee50-4ee6-af18-3bb246da8bde",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an object",
                            "    req.credential[\"@context\"] = {\"@vocab\": \"https://www.w3.org/2018/credentials/v1\"};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "ea5bf84c-eeda-4647-ba50-9b3e53e92a65"
                        }
                      }
                    ]
                  },
                  {
                    "id": "770bf4fe-8619-4500-a112-62952f10c7dd",
                    "name": "credentials_issue:credential.@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bb96f517-e89d-40f1-a7bc-e27ad64b8c48",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "50e23a3d-3767-4a2e-a47b-98897873c937"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9ecc5dc6-7ee9-4f2a-9b60-2d98f8c336ed",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a string",
                            "    req.credential[\"@context\"] = \"https://www.w3.org/2018/credentials/v1\";",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "e729bb95-c614-4ce8-a173-5482093785eb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "75f756d1-bacf-4cfd-aa5d-db0fd7bb0468",
                    "name": "credentials_issue:credential.@context.item.array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9c40cb3f-ca9a-4061-b90d-94465fbd06bb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "505c5cc9-060a-4aa7-8c6b-0036a05e4509"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a786ff5b-7607-48a8-9bcd-2b5cba98e895",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not array",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        [\"https://w3id.org/traceability/v1\"],",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "cf1432c0-5678-480c-82da-770f2936fc27"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c487f76a-37d9-47f8-9b83-8303f8ee1dbe",
                    "name": "credentials_issue:credential.@context.item.boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b0da65dc-67e6-409b-ab3c-2ddc88d9ad43",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "78633083-16f6-4fe4-b576-4c439268e480"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "033eeecd-1774-418d-b08c-6db66326366f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not boolean",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        false,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "4f90b3ed-dcbb-41bd-80ba-1ed6798d6f94"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4166d4f9-6b34-489e-823c-6e47111b009b",
                    "name": "credentials_issue:credential.@context.item.integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ea126fb4-5ef6-43c5-b33a-8ecfc6d87d8c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1315274e-ff13-44e8-b517-2bf0d9411c9e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ec239e46-9e74-4d69-843c-315521598c67",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        42,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "f1fc776c-d5bb-4912-8c7a-23e0e0a9ecc1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ce22e382-c220-483c-8abf-a1ac4c44e8d6",
                    "name": "credentials_issue:credential.@context.item.null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "26f54778-c569-40c2-bc9c-83d42ada0333",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d1d280e1-d22c-4594-9ac7-3dff1006ee19"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "667e2a77-887b-4723-bfb8-17285289693d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        null,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "43d172f6-493d-4af6-937f-bbed48987866"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fb96e8cf-c983-492c-8435-f54c96a3be45",
                    "name": "credentials_issue:credential.@context.item.object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a1fd14d1-7186-42f0-b76e-215aba371302",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7435a0dc-25a1-436e-baf3-d430b29d6bd5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3f24f6b9-5eca-41db-9062-c40fba8a89f2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not object",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        {\"@vocab\": \"https://w3id.org/traceability/v1\"},",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "8c32b1e9-2fe3-4d0b-815c-48825c099ef2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2b38b51c-6c03-4804-aad9-2608eb1c4c2d",
                    "name": "credentials_issue:credential.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "75fb51d7-61d1-4b20-ad26-40595b95d762",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bb7bd363-5dc4-40ca-9933-fde70a93c23a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c46e1b3c-7ecb-43e4-9f09-ae93b1f1777d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not array",
                            "    req.credential.id = [pm.variables.get(\"credentialId\")];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "62a90f32-2316-4a36-b777-7d6716e5ee4b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1a708e96-f375-428a-a457-a8b1442fa591",
                    "name": "credentials_issue:credential.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "848a6973-dc84-4869-9102-118e6f1eca1b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "870076d9-543d-4904-9419-19e26e691841"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a79fcb97-ba0f-4e93-a1f7-d4f6dd87c060",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not boolean",
                            "    req.credential.id = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "02e657c2-04ee-45a3-9c23-e26121f4e80b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "53e7e9a1-64dd-4512-aa89-00fe2267808a",
                    "name": "credentials_issue:credential.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "467ce029-5b58-4b4d-9e17-2c52930c3f4a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1bad6e92-01b8-46b8-ad99-a10a778d0f24"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "69b1676d-f383-4fea-9afc-9b11a50fe5d2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not integer",
                            "    req.credential.id = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "295e207b-c577-4de7-b2ef-923d38bee6c5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ad3561ba-671b-446a-9f1a-5ce049f4040a",
                    "name": "credentials_issue:credential.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "152155dc-4a93-48ea-a7e0-5d6fbf357035",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "18614b2d-e6d3-443e-ab49-568345395377"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "00a413dc-6496-4cdc-896c-3bc7429c7e88",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not null",
                            "    req.credential.id = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "f0f1ac8c-35a6-49eb-99fd-8052f24c9f2a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "158068d7-f504-482a-8c9a-42ddf6cb4033",
                    "name": "credentials_issue:credential.id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e89eea91-d4f5-41b3-a93e-c268bb511462",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0052206f-6e4a-4263-95c9-419050b0e060"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0eb88f0b-27e0-4761-8893-0c4376a952d5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not object",
                            "    req.credential.id = {\"id\": pm.variables.get(\"credentialId\")};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "8d57aed0-b4fe-4559-8b15-f179f330d823"
                        }
                      }
                    ]
                  },
                  {
                    "id": "72036ddd-0c72-4c4b-8d2a-fafbe4c87b45",
                    "name": "credentials_issue:credential.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9ae1941d-5044-4656-bce3-4027d8d63a28",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "183bbbed-09a9-4086-9843-ea9c3e64c388"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "04ffe061-9cfc-4d21-8f92-292bf8d051d2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type is a required property",
                            "    delete req.credential.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "de6bb483-e488-4f2f-ab4b-5d57c7457486"
                        }
                      }
                    ]
                  },
                  {
                    "id": "74e1ee62-2f0e-4710-8dd0-883f8b619d8a",
                    "name": "credentials_issue:credential.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a1ab77c0-515e-4a8d-94f2-c7e8e7bc96c1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "14864906-acfa-4c16-8042-c2efe73fc26e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "44eed8ec-51f0-4289-a2a2-4ca7b5d51f41",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not boolean",
                            "    req.credential.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "b4d3f16d-e780-4ce3-9d34-a1b71925e482"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cacc511a-3d93-49ad-9234-9ebc36179f84",
                    "name": "credentials_issue:credential.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8431eaae-4faf-4a98-8645-215df0e67075",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2543a02c-b0aa-4d32-ba7e-747a4d2f0703"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3c92598d-03e9-4bba-9453-53922933816e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not integer",
                            "    req.credential.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "a4abb6d2-e3b9-4d84-a368-29748d9281db"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5839892b-b81c-4e58-866d-c213e1487798",
                    "name": "credentials_issue:credential.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a94e14f0-bfaa-4818-afc5-2d969d7ee004",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "61fc0749-2371-4b45-8430-cd18559d2f01"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "23f486d3-4c86-40cf-aa6b-50300a3b3cc7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not null",
                            "    req.credential.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "9d53fa2d-f551-4c95-babe-4ad9c2fc1301"
                        }
                      }
                    ]
                  },
                  {
                    "id": "537559fa-fa0b-480a-af43-7a6293dad026",
                    "name": "credentials_issue:credential.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3fd32693-208d-471c-88d6-1d28c3d5e3b0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e6cc6585-b927-47c5-bff5-54254045a278"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d226e85b-c516-4d5c-9049-93d1d955af8a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not object",
                            "    req.credential.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "8027877a-f7fd-4073-9c58-6f39df5786cd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d080c002-35e9-478e-80b5-725a036991f6",
                    "name": "credentials_issue:credential.type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "92887629-c819-43ba-9783-8bdb31d0aebc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ee69f8bc-ac2c-49d9-aa47-371a0dd24059"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2c4361a5-5028-4e82-aa30-0c1c1aebde94",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not string",
                            "    req.credential.type = \"VerifiableCredential\";",
                            "}));"
                          ],
                          "_lastExecutionId": "3003a8d4-c09b-4368-bf41-5d5bfca3f216"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dd2f2c91-88ef-4ca6-83b8-98e6b9af5c7c",
                    "name": "credentials_issue:credential.type.item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f230912e-c85d-4541-833a-02556fa0e412",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dd4509e4-6978-4a84-9726-2fda46e34da8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cd7355fa-d805-49b4-970b-556c83edf0c8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must have at least one element",
                            "    req.credential.type = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "6c179764-9eb0-4edf-bca7-66339829b94b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "88f1d1a9-2516-49f3-be4c-69964734419d",
                    "name": "credentials_issue:credential.type.item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "355e0428-9d99-46e9-bc64-1ca63fc6e41e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "169b0ae4-036e-477f-b1f0-4245bf559990"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "21b6a341-d805-4ef0-aa11-99e008effc79",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not array",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        [\"AnotherType\"],",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "bb471ddb-1267-4e60-a7f0-30ec1b8f5495"
                        }
                      }
                    ]
                  },
                  {
                    "id": "89137730-39ac-4653-8b72-6da3141a2819",
                    "name": "credentials_issue:credential.type.item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "90f2cfd5-e424-423d-ad4c-7ca35fa66321",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "80b2a45d-aeaf-45b7-a376-a3575c80602d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "35998396-173b-4bc5-8039-594fb6c4f29d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not boolean",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        false,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "460b0cbf-99a9-4eee-b7fe-6d482fa51ad7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cb2d04f6-36e6-4626-80c1-2f999ef77741",
                    "name": "credentials_issue:credential.type.item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "667aa9f8-a40b-413d-96ed-4f03ca915351",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b599392b-7598-4ad7-9b3e-d32af425fcb3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "15bc339c-0ff9-4f7f-ae24-de24c21161b1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not integer",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        42,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "63f3c310-0ba8-4061-9390-036f7f7b1934"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f822a3de-43e5-44e1-bdf4-428f08dff23c",
                    "name": "credentials_issue:credential.type.item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9ac53488-be9b-4ad8-bf42-e23f1b8ab021",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "760ba4d6-5469-4370-873b-db24b059148c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a2b35ffa-1e2d-49af-a2f1-e7aff143fe37",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not null",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        null,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "bcbae6c2-fbc8-49f0-a10f-b7f56eb476e6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "738821c2-2ad3-4f5c-8ac6-8a6705d3a102",
                    "name": "credentials_issue:credential.type.item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c52597d9-d675-4b1b-aa44-d460f1ccb317",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "aae6a0bf-e3b9-4585-be96-7c3b8f17948f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f8a7043d-782b-49c5-9454-db0238be9a0a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not object",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        {},",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "307f7cf0-5cf3-4be5-9f02-4ab3e59ebc69"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f412c192-df05-489e-a6de-58632df53043",
                    "name": "credentials_issue:credential.issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "48338f8c-2aaa-424f-89ec-5dc3f2ecb7ab",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "19161c66-a43b-496a-8976-c3451cb5f680"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9bf6aba4-bc80-4e91-97bc-6d22acdd874b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer is a required property",
                            "    delete req.credential.issuer;",
                            "}));"
                          ],
                          "_lastExecutionId": "e74abfa2-9348-4b67-95aa-9d59906012fa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1db72b5d-21fe-4d2e-824b-4daaa36510fd",
                    "name": "credentials_issue:credential.issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ab8ed09e-a8e2-4fcf-964c-6c0b983e6323",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d52216e2-f628-4f3f-b30d-edb765c29127"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ccd464ce-5dc6-4f8a-b310-0f4e6ba3dbb9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not array",
                            "    req.credential.issuer = [pm.variables.get(\"issuer\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "1beae267-1fe5-4d96-9b6c-83bb8970257e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5aa94a97-6950-4519-9161-244f98785a7a",
                    "name": "credentials_issue:credential.issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6d72feb6-6767-4602-b2dc-3a27d12ec1f8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8a25c381-07c6-4686-a198-2a93c6ce429a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e803a0d2-2e85-47c6-8af0-bb275f6092b1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not boolean",
                            "    req.credential.issuer = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "95234fb0-872c-48e4-96a0-308c2865d0d1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3fbc67a9-1882-4471-bde2-585bd1e46618",
                    "name": "credentials_issue:credential.issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "aafe2213-5bdf-4d53-91aa-c95a99d9ed52",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "67bf26c1-d208-4dfd-957d-5a1910055b30"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "90d51819-872a-4b6a-bc8a-dfcbb9231f9f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not integer",
                            "    req.credential.issuer = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "f0c9e88e-3817-41e1-9018-57942f4a7b56"
                        }
                      }
                    ]
                  },
                  {
                    "id": "870fcb99-95c0-4d4c-b20c-dffd50d63d46",
                    "name": "credentials_issue:credential.issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3b8cc573-b761-4f00-9266-7e76b570be0d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d3813608-7495-448b-bc42-70e7c653347a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ab360e21-50c6-4968-a50f-db2eaef58fc9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not null",
                            "    req.credential.issuer = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "0145b6b2-f03f-45f8-9823-45add1a31f68"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a11dfef6-9042-436f-8a91-58d11b2bb7a2",
                    "name": "credentials_issue.credential.issuer:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6cca6092-de0c-44a0-adfe-5679b146c028",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e644f120-d223-4b39-9f35-b0dbab4100f6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b145372c-5d04-4cb8-bc4a-9d6ad5feed9b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be a valid URI",
                            "    req.credential.issuer = \"not.a.uri\"",
                            "}));"
                          ],
                          "_lastExecutionId": "060f8e49-4b5b-49d5-b59e-f00ef95b5c5c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f257b6f8-5971-4f9a-8c85-af722dfb958f",
                    "name": "credentials_issue.credential.issuer:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "53dda74a-6f76-4f4b-8e66-48dc694285c4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "62d9e0a2-7643-4222-8497-b71856f033aa"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "99516edf-036b-4171-8802-9acbd3cef7e3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be known to the endpoint.",
                            "    req.credential.issuer = \"urn:uuid:{{$randomUUID}}\";",
                            "}));"
                          ],
                          "_lastExecutionId": "c098a21e-4ff1-41c0-9155-4b39c13a59c2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "64f68d7b-5028-4fcb-9969-1a225b1a44a4",
                    "name": "credentials_issue:credential.issuer.id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "51ce458c-0c29-46b0-acff-a157b4757883",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c232da7c-89a8-4018-9cc5-fa2a8a46a991"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ef6c8e98-6098-49ca-bfb4-b39744093d1f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id is required when issuer is in object format",
                            "    req.credential.issuer = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "448cbccf-c9ac-4e7a-b43f-ba04049f4d8b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9d30f6be-38d3-48d7-b65b-2f9caffb26de",
                    "name": "credentials_issue:credential.issuer.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "76a9132a-5cdf-4f7c-b8d6-64113304e616",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "54ed1d83-94db-471c-8ffe-456599ce22b3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "893442aa-416b-4ff7-978a-dc27e6ac4eac",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not array",
                            "    req.credential.issuer = {\"id\": [pm.variables.get(\"issuer\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "130b4a9c-3356-4939-8489-7e9c52f3b8b3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3bf64a6f-511a-4ccf-8b87-3b58f0fc99e2",
                    "name": "credentials_issue:credential.issuer.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d66fca2c-14e6-41f7-9cfd-b316e7db863a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "28bedc99-750c-492d-8658-e9761bae6ef3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d9866a85-f0a7-445b-9640-f01730c86f59",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not boolean",
                            "    req.credential.issuer = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "02eb9a57-5400-4c12-baf6-068e52e9e541"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0ec8b0e1-d423-46a2-ba1f-ea8b0b95dcc0",
                    "name": "credentials_issue:credential.issuer.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "61a54ae6-b19c-4a3a-a3b7-99103dadb01c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "17770d94-a008-46f9-b4c4-e1787197a784"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "acb5679d-a7eb-45e0-848b-44062e9176eb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not integer",
                            "    req.credential.issuer = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "03f1ada6-af4b-44ae-bbae-18fd6df93424"
                        }
                      }
                    ]
                  },
                  {
                    "id": "043b58c9-f1d3-4ef5-b29a-b377676ca857",
                    "name": "credentials_issue:credential.issuer.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0f77937f-b397-4069-aa28-156c8b4d9ae5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "abd73529-33d2-4b42-8169-8a701db47312"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "de7e3fd5-8579-4736-971d-ddf22224961b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not null",
                            "    req.credential.issuer = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "12bef0cc-6943-4000-aa5c-1244e5aea684"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d0292786-58e4-4e91-b4d3-c6cb87918cae",
                    "name": "credentials_issue.credential.issuer.id:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e7dbe02c-4849-4d03-8233-b191666d43ea",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0ba03cb6-9a3a-498f-bb16-7237a1e4613a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9988a89f-7f5f-4d1f-9561-8af4a5ff7141",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be a valid URI",
                            "    req.credential.issuer = {\"id\": \"not.a.uri\"}",
                            "}));"
                          ],
                          "_lastExecutionId": "7fb750f6-f95c-4920-883a-7846ba1b6d7e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f0cceb27-de65-4a65-9059-03afed600e7f",
                    "name": "credentials_issue.credential.issuer.id:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8caedf6d-8532-409d-a19c-8091d37d834a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b33e90b4-a3a8-423f-bef7-4bdb7eb97d9c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b70d30fb-359b-4782-a1c9-c98d7ced647a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be known to the endpoint.",
                            "    req.credential.issuer = {\"id\": \"urn:uuid:{{$randomUUID}}\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "497cc907-8e2d-4261-adfa-55b40e438eb2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f241908c-5e3b-41b1-8eca-b8d0dfd463e6",
                    "name": "credentials_issue:credential.issuanceDate.missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4f141b75-6a58-44de-acc3-8a11bf70164b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5d85ee84-292d-4e0e-b8f6-d7ed7e5e4354"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d123836f-82ba-4f75-913b-78c5689a9316",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate is a required property",
                            "    delete req.credential.issuanceDate;",
                            "}));"
                          ],
                          "_lastExecutionId": "4055234f-3752-49c2-9279-79fe1fbf521a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "937eb481-85ff-48ea-9773-0e6ba95fead8",
                    "name": "credentials_issue:credential.issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3781ab40-9e12-4e35-acf2-133d3d831004",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0a7a41f1-d755-488c-8707-d6747bf18d81"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "945963de-ec5a-4e1e-bb91-3dd3a474f1a8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not array",
                            "    req.credential.issuanceDate = [pm.variables.get(\"issuanceDate\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "3dba7aea-4c9c-48a2-8e47-ab456ab4c529"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4301cadd-b8ac-42e9-ba72-257fdabe904f",
                    "name": "credentials_issue:credential.issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "145537d2-93ac-4f05-b3cf-d9ea8003bd1a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "333b2404-aafa-4fa5-b5b5-2534561e961c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "227e7605-4443-4153-b0aa-ea96facda169",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not boolean",
                            "    req.credential.issuanceDate = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "fb915645-4161-487b-a476-4719df555baf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "89cf26c8-4a25-43bc-bbf3-c857145b08bb",
                    "name": "credentials_issue:credential.issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "98f980d2-43ee-4bfe-9a30-8eb70cbeec8c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ee54bb35-4434-48fb-8970-35a8ca27afa7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "81264185-e989-4f28-b112-93e478124e0c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not integer",
                            "    req.credential.issuanceDate = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "787b7fb1-e24b-452f-83f5-5288b8543ea5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e9d209c6-af50-4f37-bdc0-1c9634d4167d",
                    "name": "credentials_issue:credential.issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7289ca29-15b8-43df-90d8-b991c8373db8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9c9c63d1-cb61-491e-bd7d-4ebae9a0dd66"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c962e35b-44d5-4b35-85b6-a77a79509718",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not null",
                            "    req.credential.issuanceDate = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "ec18cf10-0819-4fe0-b028-4073ed8c0d30"
                        }
                      }
                    ]
                  },
                  {
                    "id": "95950d78-0f49-4b1a-bdb4-e79fca88b8a7",
                    "name": "credentials_issue:credential.issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7bd2bd7b-03e8-4ca9-adef-c0186945dcfa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d6b26b75-a0ae-454d-9ea1-e1ba20639e8b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f69995c3-1dd4-4dd8-a784-9d5c51234c57",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not object",
                            "    req.credential.issuanceDate = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "9d026ad2-e191-48eb-96f3-2e2bc329762a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "546189df-746d-4aef-9d61-8d173f5b3911",
                    "name": "credentials_issue:credential.issuanceDate:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e57a3d9e-9237-4b6d-9887-02d7340f54cf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5e4d4600-3acc-42ea-9951-2e6146cf9e82"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "22605491-0601-4c84-be78-128a831a93b7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be a valid XML date time string",
                            "    req.credential.issuanceDate = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "3dfee7fc-1fc5-4497-bb48-253eba6c6734"
                        }
                      }
                    ]
                  },
                  {
                    "id": "851d0673-8860-4d21-a5df-25bcf61baa1f",
                    "name": "credentials_issue:credential.credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4363c46c-6568-4cda-83c6-4099d2f63937",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e528804c-6add-4401-9d51-ca3ff31c39fe"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f4798233-22fa-4f79-97ec-a9daff0f6f7e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject is a required property",
                            "    delete req.credential.credentialSubject;",
                            "}));"
                          ],
                          "_lastExecutionId": "c65748b0-3660-473e-b5ab-8ff40503b031"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0ae05b06-e6b8-46eb-94a2-84ad43dd949e",
                    "name": "credentials_issue:credential.credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b46b2f87-2177-45a2-8b2b-e1708b7d8c23",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "607832b1-e102-439b-88b6-c23f323df1b6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a2ad8c4b-0895-4d55-b95d-994e59c924ba",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not array",
                            "    req.credential.credentialSubject = [pm.variables.get(\"credentialSubject\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "cd07d1df-d859-49a1-b2a2-e400ea0540de"
                        }
                      }
                    ]
                  },
                  {
                    "id": "75fb516a-0282-4b61-9231-844f777ee9a3",
                    "name": "credentials_issue:credential.credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "de084e80-e32c-441c-8e5f-fe6befadeadf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9d6bb85a-722c-4ca4-be7d-f0c1d66494e9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "26e73451-2c6b-4723-af45-775eef77caf1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not boolean",
                            "    req.credential.credentialSubject = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "3e1334ff-9aab-4bf9-9598-20ec42150d67"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f2b2e6f5-8e21-4a09-9cad-643b1e88faaa",
                    "name": "credentials_issue:credential.credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "25ba747e-70f7-4f0c-8957-8a5fc574bc3b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f4767968-59dd-4505-91db-6538cf339a61"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "352c0faf-63a6-43e8-b6eb-5e267bfadc4b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not integer",
                            "    req.credential.credentialSubject = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "b3bca0b3-eaea-46e2-b160-0088d54ae32c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4a66bb30-5736-4f18-8e9f-e37a1f45650c",
                    "name": "credentials_issue:credential.credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "693e3402-31cd-4145-a7be-3e4f1ae4878c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c33b4d62-93af-4b3a-b4af-a44a3afca5e0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ca8c8042-dc54-4477-966b-430474e1d559",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not null",
                            "    req.credential.credentialSubject = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "27cffe6e-5ff1-41fe-9ff7-f92598f9f433"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dc941bce-b7c0-4773-bfae-8c443464ee67",
                    "name": "credentials_issue:credential.credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "45a2924b-d880-41df-bf52-74dc9fc3c163",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "60700e1e-2f5d-46d5-85b8-b0423b38b77e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "522284f0-68ca-43b3-9cfa-ed54c41d97d3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not string.",
                            "    req.credential.credentialSubject = pm.variables.get(\"credentialSubject\");",
                            "}));"
                          ],
                          "_lastExecutionId": "d99ead6b-caf8-4a96-96da-8ebac64e5f15"
                        }
                      }
                    ]
                  },
                  {
                    "id": "60626f02-4d56-40ce-84a6-f51ce3817b52",
                    "name": "credentials_issue:credential.credentialSubject.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ad14d0db-e9ff-45f6-90dc-91f3f959e3b5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8b564d0d-0552-4900-9c22-2d39f9cc85d0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0300e410-6450-4cae-8240-f8be4bacfc83",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not array",
                            "    req.credential.credentialSubject = {\"id\": [pm.variables.get(\"credentialSubject\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "1fde03f9-4c24-4471-a974-70979d91798f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "13516da9-3e63-4359-848a-77f8cd712dae",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3a3b0998-08dd-4a53-97dc-241749d0b921",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "30353766-b8c5-4816-aa70-05b2d9ed19e4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "70218ea6-e799-4d9b-add0-533b66e3e6ba",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not boolean",
                            "    req.credential.credentialSubject = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "75258299-e97d-417e-b126-e7d7278d060d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8c9aef9d-3787-4c0f-9142-0bd54774f229",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 2",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ab27c9aa-ffb3-4358-bbb3-ced7177fa619",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "847603a0-538a-466a-aabd-04eff8350bbf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "61746bcd-b024-4ebc-af5e-15381855c377",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not integer",
                            "    req.credential.credentialSubject = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "7eb8f35d-3b42-4329-98fb-0dcb0ac7df3e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "63b5da27-4014-4f1e-9f12-15d032526d4a",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 3",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8bb21d84-250a-4a32-808a-0805c11d60b8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c9837d3d-5b50-4a91-9373-0076940adb07"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5721ca80-7b70-4cb5-878f-20bc2848cfdd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not null",
                            "    req.credential.credentialSubject = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "0f139368-15dc-44f6-a09a-8b1bc2af6efb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7db18d7e-54b7-4ab1-8dba-2d40baa4aeda",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 4",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5481d17c-67e9-4437-b8e9-9b0a03cefe53",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "71831b9a-43f2-49d4-8e91-4a6ebeaca4a7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "12cdb10c-7050-4dd3-9124-4578142720dd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not object",
                            "    req.credential.credentialSubject = {\"id\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "c674d78a-661d-4762-b0d3-a40eafa736c3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "129221ce-86f7-4b60-b300-b71c2fd42dc2",
                    "name": "credentials_issue:options:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7e89f4fa-b967-45e6-ae6c-d45a21182239",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4627fa4c-0337-4503-a686-e266577a0d23"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c37996d1-29fd-4faa-b118-95e49bee11da",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options is a required property",
                            "    delete req.options;",
                            "}));"
                          ],
                          "_lastExecutionId": "fd8db328-ae77-4110-8bf9-a8ccc1b04b55"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0d1c5bf5-61e9-4f7f-a13d-9a4e403bad54",
                    "name": "credentials_issue:options:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "51a6564e-6fdc-4461-87bb-7dc7bc161bda",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5e6fd082-8c86-46c6-9fd6-5184d6f6feb2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3abb3d14-6228-4b87-9442-16099d1ef172",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not array",
                            "    req.options = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "96d90118-9d9a-4a1f-914e-e9ae2dad3a12"
                        }
                      }
                    ]
                  },
                  {
                    "id": "890fb7a8-4fa7-42ec-84d6-3d492bb88537",
                    "name": "credentials_issue:options:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "599c2a51-487d-4c75-af8d-e2059b70ec21",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "122a939f-cd80-40bf-bde0-413f51cf005e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f468c309-0e81-4893-95b9-441b372f52ab",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not boolean",
                            "    req.options = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "70326b8e-e9e2-43a8-bde9-8e6b39986d38"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a232b3d5-a2e5-48f4-9433-0bf2279868b6",
                    "name": "credentials_issue:options:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8df655a3-0c31-4784-be32-cb356d24a2a4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "15b0efd4-265a-471c-b257-4a425ba3fca7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cde423f8-3fc0-44c2-8f3e-f5891feece09",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not integer",
                            "    req.options = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "39484409-b060-4a1e-aea0-99c065dc52e7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bfe61fb4-0ab8-48e6-922a-76a0eb406d3e",
                    "name": "credentials_issue:options:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "815568dc-1a78-4aa5-90e5-8be23fe4aea1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7aefddf1-f710-4a1a-990d-faedb82a8c50"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9e42a689-aac1-4b51-9b92-288ea9bd7b47",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not null",
                            "    req.options = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "2aaa3e35-749d-480c-8b44-1fcd33f30a0e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c4bd78fe-fdf2-4722-b031-8a8f81b163b4",
                    "name": "credentials_issue:options:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "737442ba-e0c1-45bc-bbf1-525bc06c49cc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2d6e1580-9dbc-4c32-b4c7-b8a7f3e9d8fe"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "476774aa-0752-40e9-93d8-63bf543d9927",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not string",
                            "    req.options = \"\";",
                            "}));"
                          ],
                          "_lastExecutionId": "f9af4fb0-c4a4-4078-9643-19fc0ee71f97"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7e8b980a-b28b-4aa3-a543-8e062eb73af6",
                    "name": "credentials_issue:options.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "62b77ce5-2b89-4eb7-9f4b-fa7b1a051469",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dcd78083-afd7-4a5c-8522-03aff564ade5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ec3de1f6-ebe2-4ee5-8076-b4bd1bb84d5e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type is a required property",
                            "    delete req.options.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "57d52599-12cb-4ab1-a6a8-d32fd0a71289"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1da6cb6e-8cf0-4b87-9581-37c2d8504f68",
                    "name": "credentials_issue:options.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5ce5ca78-f0b1-4489-a1b3-af8453701b27",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5a3916fd-cecf-4803-8fa3-fa79217c7795"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9c9695c9-36cb-4d7f-b35a-dd8d2db644b7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not array",
                            "    req.options.type = [\"Ed25519Signature2018\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "e4028ecd-1e68-4b80-9a22-5ee4f0a5f9d4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c5b35038-bb3a-4cab-b58f-2807f59740c1",
                    "name": "credentials_issue:options.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f44594fd-c696-4e33-bdfc-3d93f06325eb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3f5fec0e-1840-4618-b71c-f261ce0486b2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fef7e0cd-0623-482b-9f0a-c1e60f55d1d1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not boolean",
                            "    req.options.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "971a6d5d-9e86-4ad8-b0f0-498dbf60a16e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "924a6e46-1fa2-4eda-b6d2-c9494191dc77",
                    "name": "credentials_issue:options.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f5eba4b4-a732-4540-ae2c-aca452031186",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3e6b3cb6-3ace-42f6-b5a7-967b168f309c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7e5f9454-b5ae-4d2c-a7e5-e7eabe2b4c09",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not integer",
                            "    req.options.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "ab23c218-7c93-4a75-ad39-a6fd6d3a3dd0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "42a99f13-8e7d-4822-8276-df2fa0606269",
                    "name": "credentials_issue:options.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "804c39b4-ed65-42b8-bab1-9df2dd967a43",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c9327e35-adf1-4b34-9d34-8f72913400ad"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "64293247-a177-48ff-a6e2-92a7f0e72492",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not null",
                            "    req.options.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "b9d40e31-2c6b-4fae-9e21-972ee07f593d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ef7f9d95-0535-4f69-8f50-ff8938e62a89",
                    "name": "credentials_issue:options.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "16432ab8-7132-4ae7-876f-7a285f34f6b8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4c56739f-8f9b-48ca-be19-dd047b68a746"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "85bf5ca9-204b-40d9-89b0-5e750dcdf4f6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not object",
                            "    req.options.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "7e635206-a7a3-4c8b-a3e5-7a050ca3bbfa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "846c6b22-2f16-41e4-9d1a-556c147fc23b",
                    "name": "credentials_issue:options.type:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "952f4357-2520-46ad-9ad5-8ff168c67406",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "27b3c479-aebf-47c6-931e-1b32fa17f577"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cac067d0-5b4e-4823-89a4-c95b430ae4dd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be one of the valid values",
                            "    req.options.type = \"invalid value\";",
                            "}));"
                          ],
                          "_lastExecutionId": "1e91a4e8-9f49-44e6-ac89-17088806dfe3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "61be0a39-f90e-4910-b801-27df991abf10",
                    "name": "credentials_issue:options.created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3a1ce891-34f7-4b28-85a5-8f1d790ea2c3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "17501b07-37b7-41dc-9ef3-ef2aba279804"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6dc2128c-c071-45a2-86a9-37ac917a0af8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not array",
                            "    req.options.created = [pm.variables.get(\"created\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "cc5f2aee-0a12-432d-af2d-3f35f941a86a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "39ae9413-7366-4cc9-9e08-f6e743dcb75d",
                    "name": "credentials_issue:options.created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6a03c5c9-0627-4459-99d6-e23dc6ea3093",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5970f704-25a0-490f-b3ab-7d86e9598d9c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f33bd5ee-222b-4440-ae94-5b2a2db6f3b1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not boolean",
                            "    req.options.created = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "1b9740c0-82af-4b6b-8a38-b6a01408ed1b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7fea3b40-29b0-461c-93e0-978b46a86ecb",
                    "name": "credentials_issue:options.created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1968b358-5fb8-4377-9280-6ff2c77678a6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "14660975-7c88-48ab-a2a0-b891d9fb900f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "00dae892-6bf8-48cd-8708-51347c13c5db",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not integer",
                            "    req.options.created = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "36bf9ed1-d562-4181-928d-f1c1bf99c223"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9dd5b413-acaf-49e6-8ab6-fc97a506a0a0",
                    "name": "credentials_issue:options.created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ea067cf3-322c-4337-ad80-bf84a3bd3ff2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3ae5681a-8aa3-4337-b55b-48343d9981b8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7d6f6f2c-2164-4516-a6ae-fd867f9fcf3a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not null",
                            "    req.options.created = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "c4617460-cc20-490d-9341-0abf043a849c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3c1f61fb-7d59-48c8-b1d3-725ee60225fb",
                    "name": "credentials_issue:options.created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "090ba6bc-b60a-4efc-8282-7783d33d2991",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c228d69f-3753-41fd-a40b-12bc3ce05661"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "add1fa18-1bf4-4bc0-80fd-7d6e9bf1c65c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not object",
                            "    req.options.created = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "89ca3e8f-43b5-407d-89cd-f17c01e8f65c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1c0c508b-69c8-4475-ac4a-a4d09c0cdbb2",
                    "name": "credentials_issue:options.created:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "642913d6-f49f-4327-bbc1-f579208e6c0e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "705f984a-316e-405c-9326-e9d3acb71bbf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b482a739-7203-46dd-8adb-36b1f22e9651",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be a valid XML date time string",
                            "    req.options.created = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "467751de-ac30-4e42-95b3-c4ebb10a3b96"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7918a014-9754-4c63-b76c-8e7872c31436",
                    "name": "credentials_issue:options.credentialStatus:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d5a953a6-ee1f-435f-a483-8f9ec4e0affd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d03f04dc-7022-49c2-8878-62a0f880eb62"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "85da2eac-cc66-4d58-bab7-0a4e1ddb2314",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not array",
                            "    req.options.credentialStatus = [\"StatusList2021Entry\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "0d50fedc-1c0c-43c6-9b4d-a055580827ae"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4745da26-3407-446b-b923-d06bac9541fa",
                    "name": "credentials_issue:options.credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e5c78980-b6bb-4c72-9f01-b0dbe42e7eb7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e415703b-714b-4b46-b785-6325bf59aed0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b6fc897f-9843-4a82-9cd8-16027f5bc24a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not boolean",
                            "    req.options.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "32d46724-76da-4c51-8a02-5676e27f849a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8c66a708-378b-420c-a4c0-2eb7e1d0100f",
                    "name": "credentials_issue:options.credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e2f4f367-2cff-4386-933b-5788889432ee",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d2a08ce1-fdce-4a82-be8b-d014e580e2de"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "192ebe66-8f12-442f-a0ed-bd00982e6ecf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not integer",
                            "    req.options.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "13fb0628-fa2b-407c-8f22-61019482ae85"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ea0e5b3f-9029-4a3c-9f75-f8be70ad7c20",
                    "name": "credentials_issue:options.credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cdd04bda-4dc1-4822-b8ac-f4353092cf4c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5eb830d3-6009-415b-be44-138148432a0d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6ef94dfc-a8f7-46df-9f93-e364c4afb600",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not null",
                            "    req.options.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "d2dcf890-2db2-4ed7-9da7-e3ab9bccc889"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ff049fc0-2e10-4afd-8dd3-79b35d656b2b",
                    "name": "credentials_issue:options.credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "87c24da9-e592-4bdd-8d7d-5b50374c7284",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9179bbc4-011e-4e4d-8515-16f64da617b1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "46fe6aac-8c16-4a33-9871-8386de14bb6b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not string",
                            "    req.options.credentialStatus = \"StatusList2021Entry\";",
                            "}));"
                          ],
                          "_lastExecutionId": "958ae35d-768a-45e1-bd5a-e5ab2655f17c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7c61db04-b4b8-4ed8-bc87-b3e7ab63baa3",
                    "name": "credentials_issue:options.credentialStatus.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7e181d2f-fcbc-4a20-a52b-c23faad600e8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d9653b22-bac7-4517-8215-1427f0e41125"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9ab6e940-ad1e-4196-92df-d3f3b11e8c69",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must contain \"type\" when present    ",
                            "    req.options.credentialStatus = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "dfd9aa64-aa58-4518-9067-903eaa8d7f23"
                        }
                      }
                    ]
                  },
                  {
                    "id": "46db05c3-95e5-4e7b-9f91-83138301955a",
                    "name": "credentials_issue:options.credentialStatus.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "51e9ce36-dc7e-4bee-a53e-543c9c45021a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0e355859-f806-4c5f-b667-d0192559930a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "aad3e4a9-e74e-4b99-8e37-a9598a7c4bad",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not array",
                            "    req.options.credentialStatus = {\"type\": [\"StatusList2021Entry\"]};",
                            "}));"
                          ],
                          "_lastExecutionId": "41c45417-cb8b-49eb-badb-9f2e0283cdfe"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7a818056-a25c-402d-8483-06f648f39c43",
                    "name": "credentials_issue:options.credentialStatus.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e80e30fd-b76e-4413-9d9e-a70698bae211",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dc8d1e2b-c584-4b8e-8680-3a136b8e400f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "17e36c79-5bad-4916-b0c5-f16442b0a2e4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not boolean",
                            "    req.options.credentialStatus = {\"type\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "e8b0fe6f-983c-433d-a0ea-df2eaecc702f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "34487f9a-06e6-4ece-a50f-3c86ccda6273",
                    "name": "credentials_issue:options.credentialStatus.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ed53fa0a-69c1-4025-ab81-9251280a2525",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "165fc181-0b0e-4a85-975f-123c62eb97f4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d94bffe9-cf6f-409b-80a9-72e5d099892c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not integer",
                            "    req.options.credentialStatus = {\"type\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "3cf8ec65-fdba-4a23-944f-3f0b00882ded"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2d14901f-d37a-47df-a0f2-27bf896d4b6c",
                    "name": "credentials_issue:options.credentialStatus.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5bf4fdbf-2994-41bf-bab8-d60e6f3d61af",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "943f4669-6763-402c-8433-c79ffb8d0caa"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "17526049-0a9e-40fc-b480-a4a0a2a10a85",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not null",
                            "    req.options.credentialStatus = {\"type\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "7fff67cb-9486-4d3c-af59-6e425b409d97"
                        }
                      }
                    ]
                  },
                  {
                    "id": "505fd920-0ba7-4c9a-8140-f0d95888977b",
                    "name": "credentials_issue:options.credentialStatus.type:null Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d80f5ece-4d9b-403c-8d5a-5d897ddf733a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "27635c96-f728-47a1-9d61-789052801bdd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3e79bcb6-3a5e-4652-ab7c-5c0d1efe5886",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not object",
                            "    req.options.credentialStatus = {\"type\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "dffc7cd0-dac1-4085-8179-b5a2146ed616"
                        }
                      }
                    ]
                  },
                  {
                    "id": "214ed183-3f6f-4039-a630-3d806e3cf8d7",
                    "name": "credentials_issue:options.credentialStatus.type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "06df8806-6fdc-49ba-92b6-1d0bec472bd1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "8b891ad5-deaa-4ca8-89cb-964a5121b700"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "da2df811-7f30-48ac-b35c-da732c1ff3f4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be a valid value",
                            "    req.options.credentialStatus = {\"type\": \"invalid value\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "613f828f-e8f8-4ee3-9ffd-d133f0d96009"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "3b565076-1d3b-4899-a654-ec3df6846c96",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "50580b53-8ddf-4e49-8107-f97413ef01db",
                    "name": "credentials_issue:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ef57c23f-7990-42be-acb3-9f52e7168025",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "653f1b35-b6a4-4ce1-b90d-579337f8d396"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ff72fe93-a96a-4355-a17a-51a41ae0279a",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "00dce294-aba0-434d-9ac1-1a4768c4d841"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "0776b494-b39e-4c9d-8618-393ffe7905ca",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "cd81ba18-82cb-427f-9d12-0b2cf8886e02"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "432cb058-122a-42f0-b64f-6001f0dcfd6a",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "244bf3b1-bc12-46ac-a9ae-a557ec9eddba"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "d7c47d61-3e14-4412-820d-8e46fcfc66cc",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "e0b2ddfe-5a9b-41fb-a7f0-7c4e61c8104a"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "8949c296-5295-4e19-b301-7623406e4f2c",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "ab1aeb80-c956-4bc8-aa65-9d1d7ee0099e"
                }
              }
            ]
          },
          {
            "id": "4ee6d37f-665d-4a09-ba8d-f50c9d4cfd8b",
            "name": "Positive Testing",
            "item": [
              {
                "id": "c221f3c2-5696-4903-a15e-5bf09de5f9ff",
                "name": "Duplicate Keys",
                "item": [
                  {
                    "id": "4c6ac64c-0507-461f-a1c9-e775ba955437",
                    "name": "credentials_issue.credential.issuer:dup",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"credential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"issuer\": \"{{issuer}}-ignored\",\n        \"issuer\": \"{{issuer}}\",\n        \"issuanceDate\": \"{{issuanceDate}}\",\n        \"credentialSubject\": {\"foo\": \"bar\"}\n    },\n    \"options\": {\n        \"type\": \"Ed25519Signature2018\"\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "text"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "60708af8-d287-4235-9d34-65c0826be9eb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 201\", function () {",
                            " pm.response.to.have.status(201);",
                            "});",
                            "",
                            "pm.test(\"response issuer matches request credential.issuer\", function() {",
                            " const { issuer } = pm.response.json().verifiableCredential;",
                            " pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "8c01fedb-c028-4fd1-b173-513f43431822"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4dd2974a-67b8-4a05-8107-b74b1abd2946",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0e5ccabf-117d-4796-b644-2beda3b56de1"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "30b43c8a-f4c1-4073-8b32-8b3f57fded4d",
                "name": "credentials_issue",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "b2210e23-d54b-4df1-8cea-bb9af6842a3b",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        "});",
                        "",
                        "pm.test(\"response issuanceDate matches request credential.issuanceDate\", function() {",
                        " const { issuanceDate } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuanceDate).to.equal(pm.variables.get(\"issuanceDate\"))",
                        "});",
                        "",
                        "pm.test(\"response proof.created is close to 'now'\", function() {",
                        " const { proof } = pm.response.json().verifiableCredential;",
                        " const delta = Math.abs(Date.parse(proof.created) - Date.now());",
                        " const tenSecondsInMs = 10000;",
                        " pm.expect(delta).to.be.lessThan(tenSecondsInMs);",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "3161d2f9-a2f1-45ab-ada3-e51f1c5381ce"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "16944452-b892-419f-80be-76f1bc4f919f",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // noop",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "c0f1d0f9-0b91-44e5-b91f-1abb99db62db"
                    }
                  }
                ]
              },
              {
                "id": "0d042a1a-f894-4cad-8a26-cba69c556167",
                "name": "credentials_issue:credential.opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "3a8df0b4-706d-46a6-bba5-bdd309e6d4fe",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verifiableCredential.id matches request credential.id\", function() {",
                        " const { id } = pm.response.json().verifiableCredential.id;",
                        " pm.expect(id).to.equal(pm.variables.get(\"id\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "6efc29ac-9463-486d-9096-1dd040d2452d"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "820e7c52-73af-4743-9124-1aafa1601321",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.credential.id = pm.variables.get(\"credentialId\");",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "9bba5974-0513-4564-848c-c96ace0aad9f"
                    }
                  }
                ]
              },
              {
                "id": "e25edf8b-672e-403d-8005-a8c2fc40382f",
                "name": "credentials_issue:credential:alt.issuer.object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "73af2cad-33ee-4608-99d0-93a1be015e8f",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer.id\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " // Implementations may reduce object with just \"id\" property to a bare string",
                        " if (typeof issuer === 'string') {",
                        "  pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        " } else {",
                        "  pm.expect(issuer.id).to.equal(pm.variables.get(\"issuer\"))",
                        " }",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "67e7d25a-2900-4393-92ab-1eac7e4a5698"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "231ca9d8-6a71-4e7a-ac6b-57c6b5f53ac5",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.issuer can be an object with required 'id' element",
                        "    req.credential.issuer = {\"id\": pm.variables.get(\"issuer\") };",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "31445be8-c55a-4432-9781-1a677d20c7e0"
                    }
                  }
                ]
              },
              {
                "id": "556ec3c1-0ccc-45a5-a794-ee69c7f08910",
                "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "4f6cdf81-28c8-41a1-9d3f-83d17ba80d0f",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject.id matches request credential.credentialSubject.id\", function() {",
                        " const { credentialSubject } = pm.response.json().verifiableCredential;",
                        " pm.expect(credentialSubject.id).to.equal(pm.variables.get(\"credentialSubject\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "892628ae-54b5-4505-8c62-63ebfa1982de"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "b3fd48f7-6960-4214-b128-b8c8697eb040",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.credentialSubject can be an object with optional 'id' element",
                        "    req.credential.credentialSubject = {\"id\": pm.variables.get(\"credentialSubject\") };",
                        "}));"
                      ],
                      "_lastExecutionId": "e6d3be3d-dae6-446f-a9d1-33fe74df305f"
                    }
                  }
                ]
              },
              {
                "id": "30fd0376-a921-4992-8f99-f75fbe51dad7",
                "name": "credentials_issue:options:opt.created",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "2fb38422-6444-4778-82de-8c54477343f4",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response proof.created matches request options.created\", function() {",
                        " const { created } = pm.response.json().verifiableCredential.proof;",
                        " pm.expect(created).to.equal(pm.variables.get(\"created\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "da6faec4-291e-4f9c-b7d3-c3a71c2fcd3c"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "9bfc2043-b6f7-46c2-9b83-d1206fca10f4",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.options.created = pm.variables.get(\"created\");",
                        "}));"
                      ],
                      "_lastExecutionId": "236092d7-e7f8-44ba-bf14-78e380dd8f85"
                    }
                  }
                ]
              },
              {
                "id": "824faeb4-0ccd-4d44-8aa8-8cbd41e383fe",
                "name": "credentials_issue:options:opt.credentialStatus",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "7b041168-cb34-4e24-86ee-67c3ccbd8838",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "9d299741-2af8-49bf-b3ee-2a5d87486781"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "68c852e3-4f8a-48fb-acfb-054ecc043b0d",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // options.credentialStatus can be an optional object",
                        "    req.options.credentialStatus = {\"type\": \"StatusList2021Entry\"};",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "5096253e-6202-44b8-8398-acd1e56f5ed4"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "07579877-f897-4d1e-a59e-4c0ace0797ed",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "1e4bc7b3-9cb9-4e92-8fee-028d58c39196"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "2a6dc3b1-2771-4045-9ad5-aafc1f08af76",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "9eefe087-9dd5-463f-80a6-36c062a5469e"
                }
              }
            ]
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "d36d254c-1b03-4e79-b455-da86ae4477f0",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "pm.variables.set(\"credentialSubject\", \"did:example:123\")",
                "pm.variables.set(\"issuanceDate\", \"2006-01-02T15:04:05Z\");",
                "pm.variables.set(\"issuer\", pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "pm.variables.set(\"created\", \"2006-01-02T15:04:05Z\");",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credential\": {",
                "        \"@context\": [",
                "            \"https://www.w3.org/2018/credentials/v1\",",
                "            \"https://w3id.org/traceability/v1\"",
                "        ],",
                "        \"type\": [",
                "            \"VerifiableCredential\"",
                "        ],",
                "        \"issuer\": pm.variables.get(\"issuer\"),",
                "        \"issuanceDate\": pm.variables.get(\"issuanceDate\"),",
                "        \"credentialSubject\": {\"foo\": \"bar\"}",
                "    },",
                "    \"options\": {",
                "        \"type\": \"Ed25519Signature2018\"",
                "    }",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};",
                ""
              ],
              "_lastExecutionId": "b9b90dce-5bda-4248-ae8a-9c1f03f55c24"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "93d400f4-4076-4162-a7a9-a9cf0dae4bc8",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "0e95bc97-b2fa-4710-827b-6d4dd5718c44"
            }
          }
        ]
      },
      {
        "id": "2186c469-ca57-48a9-b828-9d7a1d59b7a2",
        "name": "Credentials - Update Status",
        "item": [
          {
            "id": "5d948db6-7e81-4ac3-b4ef-95b1e6cb87c5",
            "name": "Negative Testing",
            "item": [
              {
                "id": "df40cbe1-5240-428d-9ff6-86c894fe1981",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "6e610e53-8eb3-4523-8f61-69efdd4d3215",
                    "name": "credentials_status:credentialId:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "da7a93b8-db60-4e1e-8352-3ec93cb3fa90",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "912a9422-de95-4f00-a93a-37c6bee4490c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c7872bae-f5bb-4d01-bd48-cac1320d04c7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId is a required property",
                            "    delete req.credentialId;",
                            "}));"
                          ],
                          "_lastExecutionId": "f11f8d1e-8789-45cc-af6e-34bd01a477eb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "57dc40e9-918b-4486-97d1-2b5497f7fb98",
                    "name": "credentials_status:credentialId:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cb91c935-5346-49df-9b3b-926cf9c71fdd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "91e6b7a4-0238-4664-9b31-6a04a03adf40"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cbf6e777-9518-4bbb-aa9c-fb3007e5552d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not array",
                            "    req.credentialId = [pm.variables.get(\"credentialId\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "3899f1d9-979b-4115-9332-2984b94c2e80"
                        }
                      }
                    ]
                  },
                  {
                    "id": "895c0658-6fe1-47fe-a7fc-0ea3e366c000",
                    "name": "credentials_status:credentialId:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "319f6800-ae7e-45b6-b19e-f6ce47adde6c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8c12d343-e830-4d9e-b9f3-7f9c65292194"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1a73020e-4e45-4527-978f-dbfed9608ca3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not boolean",
                            "    req.credentialId = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "e13c3ce5-4e40-46ae-a32d-04b588f1d102"
                        }
                      }
                    ]
                  },
                  {
                    "id": "989838c3-4c74-4650-a073-557827b5b954",
                    "name": "credentials_status:credentialId:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "04d1c434-3fbf-4f4f-bd00-659f8a4a90ca",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7dae01b2-714a-4748-be5e-46de5cff488e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4612301e-cad3-4e23-b085-0c71dab929df",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not integer",
                            "    req.credentialId = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "9a5d34e0-f156-4545-abd4-c321a0ef3da9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7f3fb940-d88a-45e4-b49d-22b36e0accb2",
                    "name": "credentials_status:credentialId:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "23f0301c-275e-40ba-985a-9ed9e82a7dd4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c4ba255c-802e-4cba-bbfb-d95d1683f5f7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "272a68ef-e01f-4509-aa66-882daf355dfe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not null",
                            "    req.credentialId = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "5ba3ddb8-1e5a-434e-8f2e-f28e168892a0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0ced8d9b-0d1f-418f-a081-23d01c639a89",
                    "name": "credentials_status:credentialId:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7735ab10-e803-49c1-a448-0dc18174fa9e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "47124ee6-92e6-4dfc-9ba0-3534a9025a20"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c90cf5bc-ff09-4883-a326-412931526578",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not object",
                            "    req.credentialId = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "17eec8c9-5603-4e44-a249-55ed4b0b7ae1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9fe142a0-0fc8-4a95-bb74-cdf03a0934d2",
                    "name": "credentials_status:credentialStatus:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "83d7e7a3-d422-443d-b86f-b3088e156f7b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "859a1182-0539-4718-9210-035ca70a004e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "80634340-80a0-4892-9f25-84dacadeefd4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus is a required property",
                            "    delete req.credentialStatus;",
                            "}));"
                          ],
                          "_lastExecutionId": "926ae766-b35e-41e3-ac01-fd118c4d9ee4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "01974d6b-d84c-424c-a8df-5810e020c49d",
                    "name": "credentials_status:credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b3e3893b-c4d0-4053-af0d-eddfcb0f2040",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d973da4a-8640-4c50-a602-ef2b66c1d57f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "52734150-7385-40ea-8677-36102e2db3b4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not boolean",
                            "    req.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "98f8eb1d-ab8a-4f62-8af7-35be1051f7cd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9afd56b5-757d-4eb1-a458-fa3602cde765",
                    "name": "credentials_status:credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4d329f21-aff3-4b99-93dd-c41c76ec6e65",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b68829b0-67d2-4bdb-be24-bad2a8a3574d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "39ef410e-7cf4-41c4-a16f-6ac37f98153b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not integer",
                            "    req.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "5a8a11f3-9dba-4216-b244-4fa5033e06a3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5e256d39-48dc-4cbc-af10-ec39c00dda87",
                    "name": "credentials_status:credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "87cf42cd-45bc-4660-a300-3581a3e74b65",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "76335dd0-3921-4d8e-801d-dfd350ac85af"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "07f805c9-df00-494d-b727-a70d1d361d42",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not null",
                            "    req.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "a0c0c7ab-9ddb-48b1-b343-00ab6177d064"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d967b7ac-308d-4724-a3af-0089fafc65c0",
                    "name": "credentials_status:credentialStatus:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9c53f6d5-0665-4546-87d4-d6b337958321",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b023759a-3525-408a-9416-d59367ef4c95"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4a736f58-2cee-4297-9bae-99682d50d8c6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not object",
                            "    req.credentialStatus = {",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"statusPurpose\": \"revocation\",",
                            "        \"status\": \"0\"",
                            "    };",
                            "}));"
                          ],
                          "_lastExecutionId": "294f26d4-87bb-439e-8d86-16d303c8f0d6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b3046e77-7483-4206-9992-35c3cf34060e",
                    "name": "credentials_status:credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "125c8217-e95f-4e4c-bd08-ed89baa4518c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "629846f1-c80e-4ee6-a484-a700e546e3cd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e7a09c0f-cd87-4d22-a7c9-df9c7fea650e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not string",
                            "    req.credentialStatus = \"StatusList2021Entry\";",
                            "}));"
                          ],
                          "_lastExecutionId": "899a0e8a-00cf-46b7-b84d-03acf9949eda"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e24b457a-c472-480c-acba-90a15e112e1e",
                    "name": "credentials_status:credentialStatus:too_long",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ce433586-8bf3-4cb4-ac21-7877024a32dc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b48a9518-fcae-47e7-8516-3577bb989ed3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ccc91a45-6593-4e78-9344-029359001a06",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus can only have zero or one elements.",
                            "    req.credentialStatus = [",
                            "        {",
                            "            \"type\": \"StatusList2021Entry\",",
                            "            \"statusPurpose\": \"revocation\",",
                            "            \"status\": \"0\",",
                            "        },",
                            "        {",
                            "            \"type\": \"StatusList2021Entry\",",
                            "            \"statusPurpose\": \"revocation\",",
                            "            \"status\": \"1\",",
                            "        }",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "f1edaab4-ad1b-47ea-af79-6fdc8b8117f0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "de3a9d6e-3ac8-4b61-93f0-63f1acd2341c",
                    "name": "credentials_status:credentialStatus:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1e036660-4a2f-4102-9bf1-5a634b133ae0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f647d6bf-b9cc-4875-9a28-28a6aab4875a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b55f8a8b-3b73-453d-8e49-8bc34733deb0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not array",
                            "    req.credentialStatus = [[]];",
                            "}));"
                          ],
                          "_lastExecutionId": "491e595e-2a16-48a5-9d10-d39fbe21e2b7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7ae5ef78-dfd9-463d-88b4-eebbe892b2e0",
                    "name": "credentials_status:credentialStatus:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "22435a9b-5fe4-450d-b739-e850672e12dc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "60b0af5c-7567-4f7c-beaf-c19b0d2e1bd2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ef4cbcc9-c51f-4abb-98b3-5558047e10e4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not boolean",
                            "    req.credentialStatus = [false];",
                            "}));"
                          ],
                          "_lastExecutionId": "7b6053d5-7cac-41dd-9dc6-2f5bbbd493e6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5e938d49-6496-4d16-ac24-a00dda597816",
                    "name": "credentials_status:credentialStatus:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "73cdb144-29e4-4569-98d8-0b42c1464518",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "eff28f10-b377-4df9-b313-addb195c09d4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c93a690b-9b84-48be-bddc-45f8b141fab5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not integer",
                            "    req.credentialStatus = [42];",
                            "}));"
                          ],
                          "_lastExecutionId": "272b319b-64ae-4f04-9d24-fc870ac1f9f8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "189b7b05-2f99-472e-97e1-f9fa301a0e3f",
                    "name": "credentials_status:credentialStatus:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "12e506c6-f0cc-4941-aa41-4f25cac0703b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ca78bee8-21f9-42a6-830a-c0efc3aa2676"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d83ac707-b1fb-498e-b353-eb7c46a4888b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not null",
                            "    req.credentialStatus = [null];",
                            "}));"
                          ],
                          "_lastExecutionId": "b684e3c8-ff05-4982-8d47-74d74636524b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "29d273a0-bb45-4a2c-84ea-a48e820e506c",
                    "name": "credentials_status:credentialStatus:item:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "291bde9c-cb8f-4045-b7c2-940b457ab205",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ee074629-3a13-4bda-b514-6f8e6ed29d40"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8f1c8167-9607-4882-864f-5bc20da02152",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not string",
                            "    req.credentialStatus = [\"StatusList2021Entry\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "d2f4d0a3-b807-45dd-a54f-cfa27ab01b85"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a4066ce3-be79-46ff-b7cf-03d51138b6d6",
                    "name": "credentials_status:credentialStatus:item:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "81b0a291-8ccc-4d50-a79f-acc312357669",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1bdaee29-d6cd-4402-8c52-999480e54766"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "63b19570-814c-4da6-a127-fc3c440f7a91",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type is a required property",
                            "    req.credentialStatus = [{",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "a104bb88-262e-41b8-98cf-7d6368cfcf9e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "87b4169f-9a54-48e6-8309-3f9005aa7665",
                    "name": "credentials_status:credentialStatus:item:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "155c8634-f74f-4744-b4b8-c1847879fc56",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "485c793e-acb0-43ed-b08f-4930e6aa5a00"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c6e554af-0323-48f6-8d02-9d69ebb9fe7e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not array",
                            "    req.credentialStatus = [{",
                            "        \"type\": [\"StatusList2021Entry\"],",
                            "        \"statusPurpose\": \"revocation\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "d67a85cc-d53a-42b2-9fd7-46bcf1ae4baa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aeefa475-05ed-4726-9e29-d47979080ae8",
                    "name": "credentials_status:credentialStatus:item:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e0eca6f4-7b07-4116-ab75-884af4038a74",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8959ff0f-c1cd-413f-93be-b86ee8f2caef"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1ea55ecd-aec0-4075-9149-89619900fe44",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not boolean",
                            "    req.credentialStatus = [{",
                            "        \"type\": false,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "e337c30f-0ce5-4d01-b1c9-988f8c36240e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d82358df-42d8-477f-a3f0-cd87c9eb8623",
                    "name": "credentials_status:credentialStatus:item:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c1202ddd-25ec-45ee-93db-fcbc16473fe4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "baf2fab2-8729-444b-981e-eea6623a4949"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ebbf916d-a644-4522-9a21-14459a8b2237",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not integer",
                            "    req.credentialStatus = [{",
                            "        \"type\": 42,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "222b7245-514e-45b2-a43e-565ab03a53b6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b53c6544-5f57-4762-81a5-8dfdf1d9e91c",
                    "name": "credentials_status:credentialStatus:item:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d87f8eff-ef6d-45a0-89de-6e8e8c3d8cf0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "da4274eb-2e15-405c-a28e-6b7b32cb0489"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d77495e0-e16c-458f-aa08-2a26f7ded62c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not null",
                            "    req.credentialStatus = [{",
                            "        \"type\": null,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "cde985a0-ca3d-4531-8cb8-1d9dc9fef35b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fe4f2760-1d8e-4870-8e21-b29b79621e85",
                    "name": "credentials_status:credentialStatus:item:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2a92fd73-f367-4685-8826-ba93aec3194a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "04c9f9a2-f604-4a22-b910-d086f3419810"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "540b943c-a488-4139-a3ab-1faf63819f5f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not object",
                            "    req.credentialStatus = [{",
                            "        \"type\": {},",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "13128f9d-1009-43d3-8d52-132e0fb6ed0d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b5cb618c-e1ee-487b-a2b4-4da45c725111",
                    "name": "credentials_status:credentialStatus:item:type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "755c6d0a-b81f-43d2-8394-ae6f4169150b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b6cf35f0-4906-4f41-94bf-6c6c4279a4d9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bb81eabf-5cd3-44f4-88af-d17f457c1335",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be a valid value",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"invalid value\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "c9b6730c-845d-4104-8ad1-7b2305eeb9fd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2105752d-f4e3-4cc2-aa02-ce2117b69ce1",
                    "name": "credentials_status:credentialStatus:item:status:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "78f847f5-1c22-42d7-a555-6b2b20a31334",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e516a479-fea9-40ae-bd17-5762168ba229"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "74248017-993d-4fb9-9f6b-82f8470803af",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "8ab9c8d4-1a63-42a0-b95c-ded4a201f0a5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "594a5331-2a78-404a-bcf3-fe141f18ce51",
                    "name": "credentials_status:credentialStatus:item:status:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4318089e-bebf-4f89-89db-0275ff172ee0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c00ca88e-604f-410e-b634-7f281de7db09"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8384c213-8d31-4211-acf9-6b00187ef3e4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": [\"0\"],",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "a3c9a150-a7df-4c69-b42d-a36b1a8965fc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "63b28568-80c3-43e1-a66b-e95af658ed4d",
                    "name": "credentials_status:credentialStatus:item:status:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "53c316e0-f858-49c2-97da-739d522f4d0b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b77a5a2d-6cf8-4313-83cb-d4ebaadd3106"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8bebd484-39d0-4903-ae60-da628d2ae3de",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": false,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "94cfa26f-c410-4b13-b4ba-7c04535598b5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "62507136-1294-4542-86c3-9b227dafe573",
                    "name": "credentials_status:credentialStatus:item:status:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "48411036-cfd9-44e4-aa6f-bd4fedd34e1d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a631ffce-d916-4ada-abc3-b3dbacc50421"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "953cb132-a767-4ca2-8ca1-c6166b3b1c3f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": 1,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "628957e1-55c6-41d4-be0e-8b3e5eef8b34"
                        }
                      }
                    ]
                  },
                  {
                    "id": "456804f8-1f12-47ae-ac2c-b43e0b6c84d4",
                    "name": "credentials_status:credentialStatus:item:status:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a3ee3abd-55ab-495b-9b44-1d234ad28ba9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "01e68a2c-e47c-4356-b6fb-c450e2a88630"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fd261b46-15ee-479b-98d1-4f9c69be5d6d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": null,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "358e79d3-dca1-4917-a9c5-833dceab5ba9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "afe4f533-6134-4197-a2a2-29b7b8cb5cb1",
                    "name": "credentials_status:credentialStatus:item:status:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9af9c1d0-ac7f-46f6-ba0c-9543a5cbb795",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2fc407ce-c5c8-465f-80a9-56a32edad8e3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ac31c107-c133-4b34-9b1d-a7b33aeafb34",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": {},",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "de37b435-a8bd-438f-b63b-f5de149a8c55"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4e768b97-8432-43bb-833d-a9a78c2a81b6",
                    "name": "credentials_status:credentialStatus:item:purpose:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "94d1770d-f020-4d09-8ae8-93a014cad15c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bc1f83b2-e20c-4557-9a78-1e9dcd616669"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ce843060-9279-4cd9-98ee-255588c4dfc7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "6413ec18-169e-4f64-938f-44014ea5ebcd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b8a319f7-51ac-4fe2-8e4b-7ca9fd126a89",
                    "name": "credentials_status:credentialStatus:item:purpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "53ce3457-7b20-4425-ba3d-4739aacdd593",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "978acf48-a715-458f-8364-288d489c78f0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "865c35c1-0ac1-45b5-9452-a13c112714bf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": [\"revocation\"],",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "30a4486f-46ec-4951-9cd7-49bc5cd0cc1e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "91e2bd27-8a12-4f90-85e9-056c8adb674d",
                    "name": "credentials_status:credentialStatus:item:purpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b0f57970-6d1e-4b0c-b811-ab62ed1995c2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "12f701d4-3682-455d-be6a-aa51ccbbfb4d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8d45f75f-5a7d-4418-8874-ea2ccd0c1aea",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": false,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "279c631d-8c9d-4b0e-b22c-810a3ff215ec"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f1900b89-ae03-44cf-b061-4d3bcca587e2",
                    "name": "credentials_status:credentialStatus:item:purpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7c6f4f47-9ade-4fa5-8ca4-3fe2d17c3fd6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d5cc8802-ef29-4fa2-8f9e-32c842e78ef3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a3485812-7354-436f-b60f-21705bfee896",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": 42,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "9efb7819-ceb4-4831-b879-e18b4cbe4391"
                        }
                      }
                    ]
                  },
                  {
                    "id": "27084c51-05f0-4191-bed2-0f20dd4cfa1a",
                    "name": "credentials_status:credentialStatus:item:purpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7e9d8dbb-7041-488a-be93-3bc655c744c1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7589991a-ff0a-498e-a3fc-fe5bcbae61ff"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c97673d5-1880-4911-80e7-e7665d73f213",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": null,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "f8c965a8-46be-4270-8289-58e7a303082f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1e9662e8-e4c5-426d-9d8d-6ba42d98a532",
                    "name": "credentials_status:credentialStatus:item:purpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2083fc66-c33a-49ed-a7e8-170233c83d1f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e690d40e-b3d5-4542-8940-ac4fb04cbc3c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "445e7b9a-986c-4047-beda-258fed317512",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": {},",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "fa23d003-ea0e-4f45-bc2e-c106c3cba3ba"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "21832a63-67bd-4896-b3b4-5f412576fa47",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "b9b5a3b8-7730-4037-b499-b1b232f500ce",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bf622ca6-2382-4a80-85c4-3c97ad0abcfc",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "5c732b80-eeee-49ca-b420-1a513be70835"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "dee9bb59-a8a9-4e83-a701-5421c515d791",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "d89584fe-89a3-48dc-918f-ada76a7ea1e2"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "52fdbbb5-9bcb-4d95-9383-c80a192992da",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "2c77e518-0328-4ea8-9d01-d7166296ce9d"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "1e307acc-1e5b-4fd9-8980-e03cff031916",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "b5e0f6f4-90dc-4b2a-a667-e485f4b05e50"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "f0f76299-ed77-40f3-bfe4-428238ee352a",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credentialId\": pm.variables.get(\"credentialId\"),",
                "    \"credentialStatus\": [],",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "032f4623-e14f-4897-9b32-8dd3807f320c"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "6ee1fc51-382e-4739-abcf-b38cb54e041e",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "602b5219-56a8-427a-8ec0-0307a662725c"
            }
          }
        ]
      },
      {
        "id": "d411eb5a-1139-477b-902c-8e7499030ede",
        "name": "Credentials - Verify",
        "item": [
          {
            "id": "dfc2a1a0-ff3d-4f9a-9521-3637125d6325",
            "name": "Negative Testing",
            "item": [
              {
                "id": "35c3c330-27d9-4526-a565-9f4bed179351",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "bed7eec0-9c3b-4301-ad2c-e4105ec0ec6f",
                    "name": "credentials_verify:vc:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9327b4f9-8699-47af-8cdf-51c02762ada8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9aacb238-00b1-406a-ba73-5c4dac818596"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1291c287-228f-45c1-806c-1b1ed1503ecf",
                    "name": "credentials_verify:vc:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": \"string\"\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "255a10d3-80d7-450e-a794-c586de382411",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "73b46576-b6ac-4ae7-874c-8904842f6edf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "61c4ac91-da5c-4152-91d5-1041e808c85e",
                    "name": "credentials_verify:vc:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": null\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a56d864e-470e-43c5-af20-361ea482e5fd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7168bbd6-4ad1-4e06-81b4-5bd4309ed220"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fc57c5f6-f9a8-44cd-b836-427036ed6b40",
                    "name": "credentials_verify:vc:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": 123\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fecba79f-37ad-4978-87f0-f2bd469b622c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8f73cf83-dbc0-44b3-a4df-c1d39a2924ce"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4746269b-3869-4d7d-a1cd-40ad00a87e87",
                    "name": "credentials_verify:vc:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": true\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8507e605-0ea2-46a7-aed4-002c1b67a7d1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5e281af1-cb3e-400d-8d25-06add0acb5e9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7e358aea-836e-4781-8db5-9474126ab0ce",
                    "name": "credentials_verify:vc:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": []\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b918e575-5142-4ed2-874d-cd5b5a7f6677",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "01d7a5eb-e1c3-476d-a2c7-aabeba6887ef"
                        }
                      }
                    ]
                  },
                  {
                    "id": "621ca977-1e0d-4411-ba50-5c2eb731d1bf",
                    "name": "credentials_verify:vc:@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..V5PnQzCWxrPiCYT-WAyKAnypebgwYeD7lX_hyIjFa_lbJje23pZAfFdgnlqBnXLd19Ksa8fZpCE9TN7kAjzxDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b864a9f7-fe05-4807-b51f-ddea08e47bb8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6fe6513c-c070-4fbd-8c4e-34ee2938c314"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5aff4add-280c-49ac-91da-6ef0c79a2e3b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fd21da80-a7d0-4c35-8f44-50523d8beea1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "df6250dc-48e2-4f96-a18d-824396c3f19f",
                    "name": "credentials_verify:vc:@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "443e3d13-b166-41e2-b59d-4925d33fb4c4",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b429b251-a676-42aa-a697-71248627e0c3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e54b254e-967d-4c40-a154-e3c3be10a19d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f230b9b6-d4b5-4d28-a133-94b1e6773622"
                        }
                      }
                    ]
                  },
                  {
                    "id": "83f12ec5-dd9d-479c-9323-307c8854a769",
                    "name": "credentials_verify:vc:@context:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ecccb93a-b00c-4972-9a68-d93b822cf2be",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "33893332-d4f1-4ea5-b97c-9440959ebf47"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "763156db-a6b7-4188-b766-4a232aa1c759",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c741b30b-e79e-4fd8-9c2d-fafe7ed2efef"
                        }
                      }
                    ]
                  },
                  {
                    "id": "679bd5b4-1278-40f5-b7d8-2a56f3db8973",
                    "name": "credentials_verify:vc:@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "919bcb75-e5f4-4160-b6b3-437af85ea7e1",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "57853b72-c180-47b8-a4dd-2c2ddd0f2f70"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fd627f1f-0f16-43f6-bb29-c795052f88d3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "27139aca-eb6f-4e4f-8c14-eda5c96add48"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fc6deff2-4286-4f25-927e-70712287ff82",
                    "name": "credentials_verify:vc:@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": {\n            \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n        },\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..w4xJhf2l_4JzwE4kp8pD8dNJdWSaws5HiBgal8zFzB6i9p05tmPITdsrUttpUwopW5UAq9M_EZVqlz-kRfSFBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e2295284-94b7-466e-aa48-5595c6774f39",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5534bfc4-9f03-4db8-8c08-0aeca30c5705"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f5569749-6036-4057-925a-fc4fc325b7e0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0d7d2c54-4845-4804-bb38-0d99f378b20d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7321ddea-b85c-4ab6-92c6-94f5004ab591",
                    "name": "credentials_verify:vc:@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": \"https://www.w3.org/2018/credentials/v1\",\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e6619086-e88d-4120-a59c-8f7a0ce82f6a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e61970dd-a171-46f2-9580-328155144b3f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "85824d0d-6747-4a92-8480-780b951408dd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e8b42284-0110-48ac-9265-d830ad58de83"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bdb20e35-5032-464e-8992-73212a56513e",
                    "name": "credentials_verify:vc:@context:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e413f35a-07a8-4ec4-8e8f-d7eb4ee0d9e0",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f3c4ce06-d2bb-459c-b86f-0d080c7191d1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "97ae58ef-12fc-4579-b4bb-9baf8b452b06",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dbd77740-dc58-4fc0-8639-538bd963dc6b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bd55641f-59f8-4b7b-966c-8f7fa2d56682",
                    "name": "credentials_verify:vc:@context:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "394fc191-b8c1-4af1-8d6e-7e0e804ffe01",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e8ff1aeb-d3e1-4dc2-8ac9-18bc8e252429"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bb693991-fb9e-49ab-8094-5af1d71b31ea",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d6d8abf5-b001-49ff-85fe-040b07a433c1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2bf4339e-ac5d-4042-9da2-f795cbf7dea7",
                    "name": "credentials_verify:vc:@context:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "19770ff1-7f79-4456-8059-e69d42e7d059",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "38c80eb8-3dde-41c6-8e97-ad1e2927d1b1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bbda898d-a822-4ebe-8561-0fc2d63f29e9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "40fed762-16a6-4672-8d0f-f23efa9140e7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "095baf50-e33d-4bac-91ab-477b1c497971",
                    "name": "credentials_verify:vc:@context:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "96f0e87c-9d9a-4131-a727-e2c66817b810",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a3b6d5f7-02b4-4e7e-ab6a-d3b04981170a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9fe2b652-c189-487b-8704-1055d05efbbf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "399946cd-4f3b-47ab-96a3-93f5e0e9d889"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fcc1fbe0-b434-490a-a585-5c9f5282e93a",
                    "name": "credentials_verify:vc:@context:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            {\n                \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n            }\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6b8f103f-4cef-4aac-b380-9d5619b989f1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a596e6c5-71f2-4236-add1-e4735d875c85"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8144b1e3-ee45-4360-a69c-789e9b98394f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6b1abd76-e9ba-439c-8a7c-ff1028acfdde"
                        }
                      }
                    ]
                  },
                  {
                    "id": "25e3f4eb-e264-4f12-80c5-09639b6e9b3f",
                    "name": "credentials_verify:vc:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": [\n            \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        ],\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..iom-sOLAz9-9FhadLRpqOYXXBhx4Rgwa3I3w1oh087xFQqIMhVTzcSpHCGdGWu2QT1KwrrgVAXPeTT2EthmxBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bd75a2c4-eb44-4726-8494-207161cc2b3f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4f69625c-3f19-4b8c-baa4-59ca55666406"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "db1edf51-8bd9-4744-9975-c41fdaf673da",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "711dc4b0-410c-4d24-942a-eed61b33c644"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f5e8444e-1aad-4fb0-80d6-4ea2c91ecf25",
                    "name": "credentials_verify:vc:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": false,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..xftqB9cBFsSe226cWEZ4wr5sfxlAOJYYo6yjwPCVeHDdk6OoWGjZQGO7xXpSidrrr6e1imP18LiFK34xtRWADQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0f62b366-73e5-4215-b9c5-e120c962f222",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "02b1e912-a059-4eee-a023-2123b8b1c1b8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7f37aacc-adfd-41c2-8f13-515451e60921",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cd14818b-7247-4085-ba18-cca3ea7b4c16"
                        }
                      }
                    ]
                  },
                  {
                    "id": "128462a9-0b6d-404e-b59f-de60fd2c4382",
                    "name": "credentials_verify:vc:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": 123,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ZqV-qqLOh_Kb4vAdXKBfmFdNyv3FzXJAIYV9JltcYGDAefU3OUOnoaAU2WSEufkuYkvczxfRLhrMKgkoVoIRAA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5c77670e-ed5e-46fe-910e-be957db7f446",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ce49a9f6-260b-4a39-9c6a-9c06e267eae1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b028a9b6-1a39-4deb-b1d6-2a92dbf7bcbc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d127e355-6cb8-424d-9b60-30e0a4d1903d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b4d4b0a3-4399-4ebd-936d-04c1b2673982",
                    "name": "credentials_verify:vc:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": null,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "40842181-dda5-498c-9a07-9645cb80ac1d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "aeeca1ea-5464-4a0b-82c4-9c7d95e7e4eb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "67f99971-a9ad-428c-8bb3-fe58126840c3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "65a2af92-12d4-47c0-800f-92821d8bdc11"
                        }
                      }
                    ]
                  },
                  {
                    "id": "59e20822-5ed9-41c7-b9a4-ce9c51004734",
                    "name": "credentials_verify:vc:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": {\n            \"key\": \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..0Nrj_srTLYyA-9ZVA_dkVGjUcKx6xELHjbbdppEMFPGEN5c2gPXgstNRjnrr8hhMMegSAbvGASKWseBXGR9uAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eda07012-f608-4e37-b554-40ed5afc4b91",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c3193b14-1e50-4544-9809-63489856b889"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b959132e-c1a1-4d91-b748-6d54d77391b1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "31b36d45-ca07-4885-9efe-9e7b4a9fff3d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cf6168b0-3b42-4b54-b1e9-012e07635c47",
                    "name": "credentials_verify:vc:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Bx6sv21fSmT7fCCxU3fDaLhEOhfRK8llXSiFTgApd4PHot00nVjhaKQyhBW9FfFmJljstlOV_Zff164cxOKiCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7d4a2160-6279-4651-9d9e-a1359f504594",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8df761bc-a7c3-481f-b7bb-b3b76c2e53a5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cb284a3d-2e2f-4e60-aec1-43b0b1d73adf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4a4ed0cc-ee28-45a8-8bdd-f980cc600e82"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fac65715-ed33-46be-86ee-5ad9f55984bc",
                    "name": "credentials_verify:vc:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dd89107e-89bb-4ef9-8175-e4693340ad54",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "af3b4b6d-0453-40f3-8e3e-7c94bdfd2fca"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8652b956-7468-4618-85d8-6b7f8ad4c6e0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "68b04e67-f219-4cc0-b2de-67b88ea74586"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ddef7ce5-30a9-4ce5-89e9-47e3e374635d",
                    "name": "credentials_verify:vc:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5886c827-10d3-4fef-b20c-c5340bd5e311",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5f1aef35-afdc-4427-9717-aca699cd3430"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d818bb4d-21d7-40f5-8f0a-02c4551140fd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b90c4fa5-9e6f-49af-9ae3-7f9a70c4ecb6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e7bce3f6-f027-4b85-b81d-a14ee75a0965",
                    "name": "credentials_verify:vc:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3b5e69ba-b7dc-4588-8c38-972db75e220c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a20881e2-7a10-49c2-81b0-0242ce948167"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "753e5a58-28eb-4201-ad97-a7675c6815a3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cd914de2-4722-4aa4-b7c4-ad02ac51a5e8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b5c01827-062c-4ad2-a11c-1e6a89f03097",
                    "name": "credentials_verify:vc:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a42ab952-ceaa-4c27-b762-b711fc5f25f8",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = {\"key\": \"VerifiableCredential\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b22f53c6-d6e2-4987-9dce-3eb62bd20bd3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d57e9eda-f15a-4ac9-ae00-5cb6c2b40517",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "58d3ba41-8b17-4ba5-97df-0098c98fa450"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1e377a5f-f981-429a-9df9-4767acf3d237",
                    "name": "credentials_verify:vc:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": \"VerifiableCredential\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "52df9854-08e3-4900-b48a-2021c04bb8e7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "91a16e17-2d19-4188-b024-eb1813b79eab"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "23a9776c-053e-4059-ba94-781aef2792dc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1f2d4fbf-9232-4d9b-9283-e9cb706acb32"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c5c22ece-c40a-4aa0-b371-9342b74e3509",
                    "name": "credentials_verify:vc:type:item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bf72de68-5f69-4133-989c-5eb50f550d3e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must have at least one element",
                            "rawBody.type = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "fa060ce8-6608-4e06-ad11-0c965c04a20b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1a99cdc4-83ef-44bd-a4e4-046b5817e4c7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "288abfd6-ce4d-4724-8f33-3aa351a315ae"
                        }
                      }
                    ]
                  },
                  {
                    "id": "97efa87f-6c1d-4e66-acfc-8be10eca36d7",
                    "name": "credentials_verify:vc:type:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6c3aa6db-4f4d-42f7-be94-47530e15b91b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3d233d34-7589-46ba-aa7f-6343a133d268"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9e266195-6615-4063-95fc-e599b9e6d3d3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "faffae5f-ebe4-47fb-80bd-14acf9ca50cc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9ae9f97f-dca3-40e6-869c-dcc387231038",
                    "name": "credentials_verify:vc:type:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f1bae0d3-852f-4d07-b264-25e6c971a34c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4c1b9a0b-9bfd-4471-aaa4-de3cd68b3dc5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a0954d5c-1793-469f-bc48-369a62fdf7cd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ffdc1546-873b-4689-b771-ba570b239c05"
                        }
                      }
                    ]
                  },
                  {
                    "id": "22c2f59b-80a3-48d8-a94d-855ed6ce567a",
                    "name": "credentials_verify:vc:type:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a3a315d3-898a-4018-9b2b-8fd612fd1325",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "75e0d2fb-217a-4c67-acdf-87520313f99c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8616e553-7f45-417b-8fc4-d13081bbb983",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ee0e9f67-9a36-461d-9772-9c96bf733f89"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b8b191e4-048e-4f3d-82d2-39a6b4c97d43",
                    "name": "credentials_verify:vc:type:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a9a6f0dd-d29b-4e6b-8821-0c2da9ea947b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b77b7853-8dd3-4ffe-8b44-972be7f89436"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "04378a68-29ab-4cce-953a-1d016e2ed35c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "63917a35-c7ac-4f10-a76d-0459cb3e2ec3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "082b7e8c-fd58-480b-86ab-10394c701c7f",
                    "name": "credentials_verify:vc:type:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2a2a6914-35eb-46d0-ac96-929a886aceb6",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", {\"key\": \"VerifiableCredential\"}];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "873215b6-a026-4118-87a8-2886e305f223"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bed54b74-8736-4cdd-aed2-e0a15af47b8f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "54f3f285-1d7e-49fc-b1fc-1bf5f195b820"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1f83ae96-a5d7-4c1d-b56f-34ee74ae3cfd",
                    "name": "credentials_verify:vc:issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b55a3f08-28f8-48cb-b009-16c244f15f62",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c9649df2-11c2-487f-b961-1957a2871671"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "627ca2d5-065e-4c6f-8896-0d333b9dbd05",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8c0a17f9-3b18-43b6-b73d-65687b9303ca"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2da0ee71-7785-478c-8a4e-dd724f371163",
                    "name": "credentials_verify:vc:issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": [\n            \"did:example:123\"\n        ],\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Mdpb0nbZLuHLqh6IBr6ouahKZNFB-cIKJXn-b-O6Pt6HyJaECfc399qgMTWovf-l04XYEpuYDmfZeYVThBeMDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "36a6cdc4-48bb-44ce-a3ed-64248c792674",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d01783e3-81a4-4bd7-8c44-5ee649721f5d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "546813a9-480f-4c68-86d0-0bbdaf1a9ec2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "56048e84-25c5-43ae-af84-af03f702c44c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "89c4f280-3c8d-4939-aeb6-5714c12ef01e",
                    "name": "credentials_verify:vc:issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": false,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ryGzH1cVI0oyA0eBPKjIBDGJ8FYapvVnUEcovWWepoAASL3SzOOUvcQ9XOnQlclFU8dYhkEN2L8TQAj2OHlcBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4a60e55f-021a-448d-b317-573a50d92a8e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "de93fd0a-c4b0-4275-b23d-0892f7e29267"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "eb6b5814-4c1e-4f38-b6e6-7e5a8d01d59f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9b2f7e42-94ae-426d-8e62-25d6680fc598"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ab5e6adf-0233-421f-8c22-e425cc1832de",
                    "name": "credentials_verify:vc:issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": 123,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..kEE8wQKYgVQlcBvJeVeV151aR_iD6vPrlW2bgXPW8NvJx9AOuW5eGtL3j_I3xIGR_JWDA5jGy6KDVkqJNEDHAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "43dbaf2e-d3f0-423d-afbe-320ab060bec1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "94af3019-185b-4339-a38f-7ab771b096d7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "17f2bb94-2325-4597-afab-70e2d7c26fb1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c4f6f781-38c3-4f7f-ab17-42cfe0ccdad5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4d70d9d9-183b-4b53-8509-63d77b2bebf9",
                    "name": "credentials_verify:vc:issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": null,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "34941655-e280-45fb-b92e-12783feb4c1f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "374e77c1-9b63-4ebf-a792-e90f1d30d84b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "dd61c5a8-19c7-46bb-9a12-da355a699149",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "59d4aad1-2a88-49a0-8026-ca02731e3d79"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a3ae7bb0-208d-40d3-b6b7-23befb7a02a8",
                    "name": "credentials_verify:vc:issuer:id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {},\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dadfda1f-e4c4-4bce-92c4-8ac8c05c9663",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bfdf01ee-bf79-4e94-b43f-0feadd1ea0b1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e75c8e04-2cdd-4dd9-af77-ccbeb4228770",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "74c9be51-2d3b-4ee0-aecc-084090445bfe"
                        }
                      }
                    ]
                  },
                  {
                    "id": "312875bf-8a68-425a-8366-ae2562b9f6b2",
                    "name": "credentials_verify:vc:issuer:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TsN_31UJYzTTx1xh5CB9PjhnehJza3N5gAEFoNO55HLtQvoqGiEd-SI_4Xy7cpuYMbHdYf5CKHwP0eooyzjrAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d6310cf6-67b6-432c-82c3-967791e3f018",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "faaedc97-e4ca-4ba3-b671-af606c2daa42"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cb07c2cd-6c6d-462b-9446-5a70cdd01fdf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f44b7d3a-2c2c-406c-9b4b-57f269129575"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a75247f8-02e5-4ded-8a80-e055854f8158",
                    "name": "credentials_verify:vc:issuer:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": false\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JOl3FF8mG94K8DDAtSYeirCtE5GRVHXYZcIbf3JRCquZ7obaBm1wh3rEzbG-t8kjdWMn7Zwy8q4zw7pMC2-gAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "060734e6-dffe-4c7c-9655-8398ed289b45",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "182a286c-243d-4987-915c-003a56bba4eb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b231aac9-3436-4703-a26c-1e705552bea6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "629ef511-7ee7-4596-82ce-fe8b72766395"
                        }
                      }
                    ]
                  },
                  {
                    "id": "944918a6-9610-4132-8bbb-c8a374058315",
                    "name": "credentials_verify:vc:issuer:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": 123\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Ibp_FWO5FwzfTfd_PeTgedqAEcbS7dtCOoREanyZP0yAg63ZGay4hjjd-NwZfmWG8LRbMSqtjX2_Cu5BbBEoAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4bc99e01-2c34-4ab0-9a2f-1d8945b761ab",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b28df054-4e91-4f21-ab30-ec9ad5f2456a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6110f275-0e35-4656-aac0-411a7cb0f571",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e73f4415-6a61-418f-b401-7ff5c9ac64df"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f12eefae-5e58-4571-9d80-ee9f8accb428",
                    "name": "credentials_verify:vc:issuer:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": null\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c24c1d76-4d15-49da-90a9-1dd6b7dabc72",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8b30b907-a266-457d-a5b6-f2598f02a83c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "55537966-d52d-44e8-bb09-810b07431eaf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "40649451-39ec-441f-8545-dab1e406b827"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e6ab34d4-72a8-44f8-81ee-3730e6fefb58",
                    "name": "credentials_verify:vc:issuer:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..n3pFfPx4jY7EjlOpLNJT4CAJYI1roVE6LoUgLQhJ1bMgS5xUKbsIhynp7xDW-vSGzIcu58w-Z8_d9--99NCDBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "48e7cdce-4946-4b37-a689-8a919162d7cc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "95c7ed78-2fbf-4c23-a429-e2c3a5741038"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2e05c98a-d1b9-4e5e-86f5-bf6b66438b35",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "38461d8c-2663-45c8-8328-ac3030d56921"
                        }
                      }
                    ]
                  },
                  {
                    "id": "764d4ba7-5bdd-40f1-8ab4-1d4b2cc4aae6",
                    "name": "credentials_verify:vc:issuanceDate:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ac7eedb0-1c29-4419-967b-6a5b69c67425",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f7635f01-f7d4-467b-a9d2-bf9473f59410"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "56ba6263-efb5-48e8-9fca-b88ef5bbd7eb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4a1f1c02-a46a-47a9-b542-51eee7fb47a0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fc9efa5e-b192-494f-aaf9-7d56d8cd84ab",
                    "name": "credentials_verify:vc:issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": [\n            \"2010-01-01T19:23:24Z\"\n        ],\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..eJGt2anEVhR3qXrd8726C2a8PNJ-S4SnhIUB2YpAUiLJhTQ4FcY_nONpl-U0MbpWgwlpJ7xa1_uk4EMrGmOUBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b4c3ac36-9efc-4d18-b641-ff051cb86122",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5ad0ec4d-e23e-417d-b91f-f190242bd8dc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "840a87a8-b110-444a-b154-c5c79882e3e1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "90e90001-d034-4516-9582-683d3b059b4f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "08d2b442-3389-4bc9-9a65-7afe619a26b6",
                    "name": "credentials_verify:vc:issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": false,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8Ax_d8Yp8MIszSaGQa1WkiT4xktUk0Ltg7EF3QQ-GGY8JaV_jR6-zRUlEF2iW0HcK6C8ZoAt0KrllUUDdJkdDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8adefb8c-48e5-49b8-9b4b-5ce8a224f4bf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8c35f693-3379-4198-9b97-1e21e87c32a2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9c7c8c57-c502-48ec-8ae9-39848d74a979",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2a83763e-8905-46fb-8913-a42e4a564563"
                        }
                      }
                    ]
                  },
                  {
                    "id": "42c8a8cc-38cb-4f33-9057-53dc20fe6c0e",
                    "name": "credentials_verify:vc:issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": 123,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..x-sSX9vqc6977YPFhNbzjKdisDv4qD2mx-yBSH_EG-UQCpyH_ErCzoFWnpJzRJKIKbOLEvvZ5SO_fWbNWyNdCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9a9f2c65-b27c-4034-8fba-dcce0ff9ec65",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e0bd1fe5-3c00-4c44-94da-16e39f8deb55"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7988af81-788e-4a57-95f9-4c198a190c03",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1d3dc342-5179-4f94-926b-e700adfd7e96"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7b99f820-c982-40a5-b1ed-787dea6d436e",
                    "name": "credentials_verify:vc:issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": null,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4bf647e9-26e0-42bb-94e1-43363458c70c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1ac9a4e3-b476-45ed-964c-5b843db877a9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5acee3bb-6ba6-4fe5-b08f-2588c55e55a2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8d190f1d-d5da-4222-8e90-a9e2f1e2baf3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c9899a65-45ed-4d04-950f-19ec022f549e",
                    "name": "credentials_verify:vc:issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": {\n            \"key\": \"2010-01-01T19:23:24Z\"\n        },\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Z1GVMKiJuJeJMpR_Ag4Wpv6940N3WUreYSxEsPaZgU_J1C_EDUj8ycRJitlJNEBBuGhibJ0GWyK-WW9RO2WCDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c811dcc7-9530-42a0-92f0-88e781bd584a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6d70c333-413c-46f5-b52c-9d1a8b64ebb4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f22e437e-0d08-4163-9bd0-3b3bc6782762",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8bb42859-86ac-48fa-93e9-41e9d293171a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6ae3ddab-b41f-4c40-8a1e-54ae069ef6b5",
                    "name": "credentials_verify:vc:issuanceDate:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"not a valid XML Date Time string\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ebrsCszvH6TQHw1QhA8laajPRWL_zGvQ96Up8A4TiJrY7ueFm3V-Suk-KNd6JKckpOxLoF-Cb24KG_g73AqHAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f61f9eac-5ab1-42ba-ace5-bd5aed796d24",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "09518ece-27e2-45a4-bb4f-026f27168e06"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bea50762-68be-4e0d-84bb-b04cc121e1e7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d896b272-9d6c-4355-83c2-7cea8b5c85ef"
                        }
                      }
                    ]
                  },
                  {
                    "id": "71cefb9e-975c-4de2-85bc-42aac116ed83",
                    "name": "credentials_verify:vc:credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e99be52b-40fe-481d-930b-f87df03706e6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "448b683c-b8f8-4354-9067-c13db0ced22f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a66169d9-e409-4a9c-9860-6875f10e773d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "585d2fc0-55c5-461a-839c-0f793f0c7ace"
                        }
                      }
                    ]
                  },
                  {
                    "id": "85848513-fb9e-4b86-ad39-16f518ba7323",
                    "name": "credentials_verify:vc:credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": [\n            \"did:example:123\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1f518d84-3488-4b0d-ae20-aac7f513c8d1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ac8475eb-cc0e-4075-8007-fecbc2ce87ae"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "57b1dcea-2d5d-44cb-80a6-cd9a98e562dd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "67cf50ff-a266-4c3a-99d7-e9c9715152c1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "312d13d7-5c9d-4452-ba13-4cc0b80866f9",
                    "name": "credentials_verify:vc:credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": false,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..VK75R0RpQX9g4E_vGExhb_aDUNycy1UlQYvhCL1Ydl9bWiT1oUPeHEUgJMRGzmRRvyByyj13oHI2yB3cOLWXCA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "da6b754a-2241-4aa6-baf2-9c989adb4840",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b1d7393e-0ef9-4187-b4a9-f3ab3158d943"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "37c24d47-43de-47ba-beb1-2f86081b00f2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4e52c57b-bd4c-4960-9cf1-3beb84779afa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8bca6f85-e29b-481e-9880-82dc8444859a",
                    "name": "credentials_verify:vc:credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": 123,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..dQnu8mT7YMECvDQPODQ1YUudQIO9Yx7WsZ07UWpHRqw0iV3ZvJOebbBoY0gFvsF9t6foFFEaaWcKi4vNgIdfCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3e338fa4-409d-41f3-8920-e28b78c72ce2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "65027f49-31b2-494b-ab6f-525ec131e3b4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1033ab20-9ee1-4ab9-b985-cc679af97b56",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "336ecc7f-ac57-4ee8-aca0-4b87816ad1eb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9cfd0bcf-fe0e-4c0e-91b8-d50a14a28bfe",
                    "name": "credentials_verify:vc:credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": null,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "aece8c70-eb79-409f-a08c-d00a6ea42bf8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b6deaa98-5f62-4456-b2b4-00a7b7975764"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ae25b092-4fac-40f2-9665-7d9abf302f13",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9c148f7e-b811-44fa-b61c-1a3a9232badd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "08830939-50f6-41db-9ff1-d4192ac77ec1",
                    "name": "credentials_verify:vc:credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": \"did:example:123\",\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6e885aae-7475-4bb3-bbca-ccfa3d199abf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "14c75818-fef5-440f-8f0c-8e8bf92e6b9d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fb4dc655-2ea8-4327-a44d-f430246ca181",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a5bb3d71-194a-4a95-8e95-fd90b01b41fa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "386aedc3-63f0-4e1b-8e14-937e7f99d579",
                    "name": "credentials_verify:vc:credentialSubject:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8KJ136ciaI5X01UO8dPG0KMcsxmd7qzxvrahflTNqsrjjd-vF8bBKpjVDLOOj7bUolO277JWFCPX1xvvAVAvAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a9a46218-8629-4a81-8d13-c0a16a98f854",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f90de753-9355-4134-ab38-1f7e6dc7ad4e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d7ab40fa-6a8c-4ced-93a5-8a5b1d5ee68d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cc408001-82d1-43b2-b8a6-f7784baedaf0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "af596c7e-35ca-4893-b0fb-61a41eb92203",
                    "name": "credentials_verify:vc:credentialSubject:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": false\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..1Tatn2a45JYHHvhGvCLNbO1VUDV_lkvRVosGzDXDF-DseqRorDTFmY7XSyYqrl5yc6B200ET0RBvgK2vyEC6BA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "054b91eb-70d2-4429-bd48-12b36b24f5f8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "24cc3142-e1a0-4fe2-b81f-b4bc8667f8fa"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "afa767c1-2c03-48d6-b2ce-f8028657f2f3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "37c5322f-00f7-4448-856c-83f97c3c714e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a4bd3fff-1d7b-4cb3-9782-76075b1b56c1",
                    "name": "credentials_verify:vc:credentialSubject:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": 123\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..qPc7PrMuniibwI74A9ELPRd1YyUjNyeccnUFc4GCfj7I3oREDl0RT6PEt1pEY81mq7vlIsNG1myE86igC__qBA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c0abfa5f-765b-4d39-b5c4-b766d2df7e42",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "117cf2a5-0b4a-4c01-ba5e-b46f6f7e9c76"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d9178f90-c206-4623-8df6-56e9a624eafd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "19918ee9-4d1d-4a64-88e9-a921f690e071"
                        }
                      }
                    ]
                  },
                  {
                    "id": "794334fd-3c81-4dad-be9c-d484ec61eb35",
                    "name": "credentials_verify:vc:credentialSubject:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": null\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..10vzNYPpxv6gZwVR-V23lgvIgseVOwxT6Tc1Zbn5T6pWGmUhrkur_O-OexNVjkVSf7Qu_6NDnIL1m0KcNKGBCg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5bd3d390-7872-4b7f-8972-c1342bdc1c95",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "705ce973-5d87-4cd1-9f23-4f69e163822b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2e3407e7-be40-4552-87cf-a410a8e218a2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c261f60b-4c11-4257-b5eb-e238b5afa7e4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "13ed2f0e-4e67-47cd-9081-2cf6cada1c9c",
                    "name": "credentials_verify:vc:credentialSubject:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..tQJMGZTsqt1RhpxKkq647EHc3pjQ183zd4KchfvD3dXWVfL9X1fUedMbj33l8eev6YWua2-6_4_sUTDr2MLEDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f1755e07-67af-4675-b6d8-f8aa57a49cb2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "015f0511-3db1-4411-a261-db26a23a8410"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "81024c5a-b83d-4cee-a539-1d635c93e7bf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "95063c86-2be3-4862-b8f5-204980917981"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d3c462c4-c2aa-4379-87d7-8963e7553afd",
                    "name": "credentials_verify:proof:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6614095a-c70b-4d4a-b184-8023e8803927",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required for embedded proof VCs",
                            "delete rawBody.proof",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "76f6d470-cec3-4755-8a6a-3ddb8a155c09"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "81f9e3b8-75f4-4529-b0a1-0d27ada40227",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e82d4452-0188-4e51-8f02-c8c8fea49cc6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "baccb021-e8b9-499a-b3a1-4ff09484725e",
                    "name": "credentials_verify:proof:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "12a48e60-a3ae-4a0f-8ee7-d3a60074caff",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6a0b3b8b-a598-47c7-a9d4-245dc6517927"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c0ae5f0e-7edf-4e99-b07b-3e03d3c0d09d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "239a2744-8bea-4eb3-a1af-7a12dac599eb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "49fe0bc1-2dc5-494b-ba00-8e4b3ef91756",
                    "name": "credentials_verify:proof:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7522890a-c1bc-48ea-b4a4-764f7a79053a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "42504c6d-f191-44e4-acdc-9c84e8f2252f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d10d85be-3270-4d04-99f6-8b1399b5bc76",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5cb12cb3-95ca-40dd-a1bc-cc40b75b6d9b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1d83529b-de4f-4adc-ba0b-0e8993c2e830",
                    "name": "credentials_verify:proof:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9409f366-6d03-4888-8c19-4fc4b634bf44",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = 10;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0e47a896-8eea-4cb3-acda-248d3edd307a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9a851101-1b0a-4bc5-b539-3d8880696876",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "07702652-6441-4be3-9ee2-36997a4a956f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "58e077e6-6067-4e2e-a102-822eb0c641f3",
                    "name": "credentials_verify:proof:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0508bf36-7a47-40c6-9438-465d6a6751b4",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "fc419b69-30fc-4a96-8d0b-992b2ad821df"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b24b9b35-e7f2-48e6-b1e3-a02695585bbb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ea49b254-8be1-4491-8344-8acaf6f1c0fa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "65135a5a-2d10-4de0-99b3-4e97148fbcd9",
                    "name": "credentials_verify:proof:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1b75d8f6-6bd2-46c6-97a8-1feabeed2404",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = \"string\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "cb2a8df2-005f-4b18-8467-1744a1281a96"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fb7d3a04-bf07-4fbd-8736-011c4688de54",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "477b62b0-2e1e-4e0e-96ec-16fd91761f78"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a500841a-d102-4359-921d-91990c5d64f6",
                    "name": "credentials_verify:proof:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "08a28b72-ddfc-45f1-9a98-827c6d804b39",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required for embedded proof VCs",
                            "delete rawBody.proof.type",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "08deca7b-68a4-4687-a234-7de8d5dc488b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6cb64613-5f88-4bab-bed3-209797a71368",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "272b0750-efb6-413d-83b3-ce6b45a82108"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a71ce66e-ada3-4d02-b19e-aacc308a4388",
                    "name": "credentials_verify:proof:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "60400d98-be1f-4ac2-8657-dfc1d77b8dce",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = [\"Ed25519Signature2018\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "080fe9ba-0c86-4574-a83f-c5b2ed15a38b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "632e87ba-08dd-4b48-ad6a-263ac61993a8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ecb259c7-b583-485d-93cf-a08da1706eeb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "339b9154-1b49-43d9-8a8a-f4f82f9e939f",
                    "name": "credentials_verify:proof:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5358761f-e075-4170-bd41-2e9c5455943d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ac8244eb-54f3-45e4-abae-45ffb7ad555d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e82a890b-f174-4fc5-bedc-da1b33f5e607",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6743cf4b-a3c6-418c-ab80-4adcc27f96b7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9477d1d5-917c-4968-8afc-962b3fb7377e",
                    "name": "credentials_verify:proof:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "22ad6863-44e9-4ad7-9cf8-ea56b3acc130",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1abf0b35-d2fa-4dc1-9fda-4829bfd3a4f9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "48522d91-51ce-4a76-aee4-8a2d37315989",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "73397337-d345-4428-92c4-f059201553dc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bef7f282-3b16-415e-9196-3c8c589cd1e7",
                    "name": "credentials_verify:proof:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c9e0bf31-8476-474b-866b-783681f93687",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "55cf8f31-fc5c-4c7a-96bf-054907fe7a03"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "dff86e42-bbb7-4324-af16-22c5688d5308",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e2ce58a2-b1f8-4a61-8a17-b363a5721996"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d55f6347-0e3c-4ef2-8786-da7e3867b64c",
                    "name": "credentials_verify:proof:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7e0d4c72-7de1-4831-a45f-29b70481a94a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = {\"key\": \"Ed25519Signature2018\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "23eb87f7-94aa-4abd-adc8-5bae58e0e756"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6932e165-90a4-4b71-bf5a-a37bd92d894d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9f7c0a96-3204-4dd6-99d9-d219e8189022"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d720a495-99e9-4b14-9abd-179ff31d07a2",
                    "name": "credentials_verify:proof:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e5f8e132-6bcd-47c6-b723-1b2ac3ec4045",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = \"not one of the valid values\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "37616ee7-3f73-4a50-88da-29a072cb85d1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a2a86629-584e-4cf8-89e7-cfbdbebd16ca",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dc2e1817-588f-4185-ac7e-391a9cee8f75"
                        }
                      }
                    ]
                  },
                  {
                    "id": "03063b2f-2ffa-401e-9bbd-336056cb9ef6",
                    "name": "credentials_verify:proof:created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9579cb33-4be9-434c-9286-214f9072992a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = [\"2020-04-02T18:28:08Z\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "545d8a8a-2e87-49bf-a1af-ba1236ed0e19"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b86b3638-9d04-43fc-825b-254d881d46cc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e132c63d-69ba-4f89-b81f-af3d141ca0c1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e7f4e0d9-fc28-43c8-a63a-0a58d7e2a23b",
                    "name": "credentials_verify:proof:created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8d28c9aa-63df-4319-b35b-3b8a2b3acd98",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "658476e3-13ab-4dc7-9d70-42a2d9af4afc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bb21c780-3387-4e04-b090-19c01e71543e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2cf8568a-8339-4e8d-90af-9c07670b7c45"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f85f7575-9514-43f3-9686-c79f3097cb24",
                    "name": "credentials_verify:proof:created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7342b0fe-b1b2-435d-b670-e7d4427a77b7",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5d7e253f-05b4-4518-a1a9-03e11e8e624f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a5b277b3-8aad-4dde-a8ec-da33e0285343",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "aa0e1997-9e2b-4442-b5a6-f9354fd9f06c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d17a901c-4212-4e33-81d5-11209bda0d3e",
                    "name": "credentials_verify:proof:created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4bf7c0cd-66ca-4617-a4a5-f58e55460408",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "258e1899-9c97-41fa-b6c9-703629d6f2f2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "323ee1cb-9d3d-4819-a778-e401ff86422e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "abc17481-e8a9-498a-98ec-afb7b33c356d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8facb30b-2536-4808-8a8b-f53c2f8b2829",
                    "name": "credentials_verify:proof:created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eba9230b-28ee-46ec-82a6-f1eb1d140dfe",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = {\"key\": \"2020-04-02T18:28:08Z\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ce3b67ed-236f-44eb-bbb4-6f286e2fcf56"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fe23b03c-221f-43ee-b115-e9c126581e37",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e348344b-a880-48bd-81ad-7fc1b3de792b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0df45a56-a07b-46ad-bac7-e75258fd6dcf",
                    "name": "credentials_verify:proof:verificationMethod:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0558cc94-1379-408b-a404-0398ad3bf77e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = [\"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6118eef4-fa6c-488e-be38-adcf6a511485"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4063a629-297c-4b90-ad3b-232d5bbdbcf7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f6051fde-5d63-4b3d-b273-8462049b8579"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b4e0b6a7-4b54-4402-aca2-65704bb95a7a",
                    "name": "credentials_verify:proof:verificationMethod:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "00437435-52a3-4906-88a9-3e2d269e5974",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "27609b0d-c271-40b6-8fe8-29bc9032e846"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "31e28a33-627a-487e-a046-d54394615eaf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d9962747-c06c-46bc-b8c2-49aaf5bd8a5f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "df257d7a-a16d-4095-90cb-f1adfdc32bc6",
                    "name": "credentials_verify:proof:verificationMethod:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "78bb9961-a2ac-4e16-be98-80f2ce06c0d8",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a3145a4f-12ce-4e74-80f3-92b3d92675ed"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9181b6f6-8f33-4714-bf57-ced26deccac0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7b9920ca-ab15-4aa0-9803-9bcec20b4cf7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "17e433c1-2728-4004-be34-226cb159bf49",
                    "name": "credentials_verify:proof:verificationMethod:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cd9977a9-dcfa-4a80-bfb4-1bf9e75d913e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "21f86c0d-439d-4d13-ba27-c8ed07b42252"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "82b789f5-3781-4243-9d9f-4120feddd3c0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f578a67d-d023-40c5-b8eb-50045121101d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9399577a-0433-4303-9403-0414cfadec44",
                    "name": "credentials_verify:proof:verificationMethod:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b64713ad-b8f2-4fbf-a4ed-749d18c6ed6b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = {\"key\": \"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "587dc3e6-ebb4-44f2-888c-83cceec559aa"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3caa2c0d-2061-40c3-b7b1-a8bf91ffeb15",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8065a109-6ba6-4f70-bccc-fc012f3a663f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "97a5af30-a202-48f5-b45e-d3d5cda10959",
                    "name": "credentials_verify:proof:jws:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0dcc0e4d-1181-41f6-9154-6551733f0ac8",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = [\"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e5f836df-1f2d-4efa-9596-fb0ef32552b6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "abc9d16d-9d14-4512-aa80-f085ed2dfe53",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6a51c96d-3d4d-4858-a3ec-92a7e79f9863"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c986b1d4-1cb8-446c-87d0-2596cec2078f",
                    "name": "credentials_verify:proof:jws:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f1194368-e810-4efa-9556-0d6e28054e40",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d5f48b35-9395-4ea8-8e80-735d99cc9cc2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "55e019fa-5679-464b-a17d-a15a55af9429",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0ea5decf-16e5-4e3b-9d28-66983b84058a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0f6aaa98-e9d0-46ac-b76d-cf3db2ba3b04",
                    "name": "credentials_verify:proof:jws:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4b96e7a7-fb7a-4e6f-b08e-1a00283df08a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1be40e37-ae88-4901-bb25-f61b0e580f20"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4909d67e-70d5-4aeb-a619-bdef1d9b1bda",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4eba1f3d-5329-4b7f-bef1-cef3bea81703"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b0dae6e6-c486-4889-aea2-965ac1c165f2",
                    "name": "credentials_verify:proof:jws:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ad369630-0c3b-4076-9079-65f31feb282f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a5c4c7d4-c52d-40f4-a00d-10944b20fbd4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1d00602b-b8d9-4269-9e26-10d62315289a",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0d9dcb26-ded2-48a8-a725-f0860d38d84a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9d81fe3d-8edc-454d-8375-8abb881bb59c",
                    "name": "credentials_verify:proof:jws:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "15df7791-6b22-4540-be87-dfc3e95b994e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = {\"key\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "be2a6e4a-d645-44f5-b940-92dcabc8dafa"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0240e28a-7c2d-4afe-89eb-fa1323fe5cc3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c61b08c8-03a2-4690-a221-011c9aa17652"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f573477d-70be-4f63-a533-b14bcc9b82e1",
                    "name": "credentials_verify:proof:proofPurpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a85e97ac-81cb-4346-bb6c-1978d0f69c60",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = [\"assertionMethod\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "65fded39-7f31-4073-a9fd-080282803b49"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "acac0074-4ecd-4c8b-abea-80e28a88b957",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a3de587f-1453-4778-9c60-61f64f157e56"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a4931e74-11fa-465f-bc8c-264513f116e9",
                    "name": "credentials_verify:proof:proofPurpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "177b6283-6004-4157-bac8-5ae62f376774",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f0d79b74-4f3b-4981-ba33-0ad6ac487e36"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "06dc7abc-c5d8-4793-ab36-aeca1c7612d0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ea33720f-431f-48c6-834e-0277594cc548"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e15cff54-bdb4-4862-814f-06ec6a250fbf",
                    "name": "credentials_verify:proof:proofPurpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bb701ea5-5da0-4731-ae2c-6144ecb0c9cc",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "261be4a0-6351-4377-9e58-ed3da298becd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "50264750-d3a0-477f-93cb-c4b685f5eb49",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6ae297b0-d40d-45bc-b74e-5950df995bcb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "269928a6-c3a8-417e-b9a1-2600aefc5ddc",
                    "name": "credentials_verify:proof:proofPurpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "298cecae-eaf3-4f59-ab31-dd46242a892b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b7259dc9-c3e3-4a3d-8fab-beaba028dd8e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0d7016da-a4c9-4649-9c2f-ca1f8e1e38d5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "eae4e27a-ca13-4d89-b5f1-fb4db4817ab5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7752857b-0daa-445f-839b-37b418f7a336",
                    "name": "credentials_verify:proof:proofPurpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bc34db9c-327c-407e-8975-ab89e1e1fa06",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = {\"key\": \"assertionMethod\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "aa5f5ad8-6503-48a9-b14c-74c3b474dd09"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8ecc3a87-9282-4462-a122-3493bde2795d",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "00a146cb-82ad-4f9f-922a-ccd0a298b540"
                        }
                      }
                    ]
                  },
                  {
                    "id": "86fee252-7dac-4df2-9d84-210cd225f004",
                    "name": "credentials_verify:proof:proofPurpose:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0c71fee1-9e95-4cba-967a-c3e446bdcc34",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = \"not a valid value\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4704ca57-164b-4532-a279-60bc083d23f0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f95e52fc-b266-4321-800b-be90d9632a7b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "70fc0fca-4f5d-42fa-a084-655ae12c7c12"
                        }
                      }
                    ]
                  }
                ],
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "48beb424-122c-4ee1-88c0-877b821845aa",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "fe69b73a-7af6-4fb7-8b77-b257cfb43aaf"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "340d5189-99c0-4906-8ea5-577372b4c4cc",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 400\", function () {",
                        " pm.response.to.have.status(400);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "4f696c75-6a3a-4079-a52d-1332872c9d38"
                    }
                  }
                ]
              },
              {
                "id": "fe473043-268f-424e-b112-6bdb18036cbf",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "cb782be3-fca8-4f12-9650-89e1a84bc882",
                    "name": "credentials_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d5c1c7cb-0c35-4f3d-beba-dfce9ae2267d",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"valid_vc\")));"
                          ],
                          "_lastExecutionId": "6070cfdb-c64c-4b1f-909b-21e6b5642dc8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bcb3649f-1e47-4ea6-9c23-3050fe4f0206",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "e6220297-a787-4358-9e0f-cbd95224954c"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "554568de-18d0-4cd7-bb9d-dc1c7fa748c9",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "3a930ae1-d6ff-454e-8929-ae922c2331c6"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "b553db42-ca68-4ed4-9fc4-c846b3ccfd01",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "aad2e78b-f9cd-430c-9f37-5807f4eb0261"
                    }
                  }
                ]
              },
              {
                "id": "115383a5-b5fa-43df-bc2e-c255df2a4683",
                "name": "Bad Signature",
                "item": [
                  {
                    "id": "93edda0b-488a-4598-9ab5-5be00fc8aef3",
                    "name": "credentials_verify:bad_signature",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"id\": \"urn:uuid:e22ccc92-2c81-411f-a80f-e7f8334000a7\",\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..mvbcalofPOi7o7nxByyxXCuSOKXuGFM7_W9a8N62-EERarrH4p4T_0c2ZfGnGLiHOvY6Q-dyy38t9HPvXy-MBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2f1ca7a7-1df1-439d-acfd-3bf86f115309",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 200\", function () {",
                            " pm.response.to.have.status(200);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            "pm.test(\"response verified is false\", function() {",
                            " const { verified } = pm.response.json();",
                            " pm.expect(verified).to.be.false;",
                            "});"
                          ],
                          "_lastExecutionId": "340894dd-6b61-48fa-85ed-e94f7c063648"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2fb63410-d72c-4512-9546-af60c7faa9b0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3b95250b-4a54-439a-b6e3-7570cde8807d"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "59740e1f-346a-4785-a294-a2fa7f656905",
            "name": "Positive Testing",
            "item": [
              {
                "id": "3db7d9f0-5df4-45cf-b695-17014ecf7d93",
                "name": "credentials_verify",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "6a5e464c-92ff-4920-8d1c-9011628c7d77",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "3ae0e240-8788-4995-a80e-549d48b6e760"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "bc76c94a-fb15-480b-b525-99412a43cf11",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "447c7aa4-37c1-41a3-bdce-2104e1259ab8"
                    }
                  }
                ]
              },
              {
                "id": "f3919ec2-d987-4dc6-aabe-e7e201190a05",
                "name": "credentials_verify:issuer:object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\"\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "1018955e-f6a6-449d-8ab9-0f8886558317",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "bd43e6cd-1a6f-4035-bfc8-4d8b317e53a6"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "e32ccffb-ed64-490f-9382-218b5db58426",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "092af594-3a2e-4eb8-bdf2-555e90723841"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "34984862-0516-4b29-a93e-56b64706ba6a",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Dummy VC issued for testing",
                "pm.variables.set(\"valid_vc\", {",
                "    \"@context\": [",
                "        \"https://www.w3.org/2018/credentials/v1\"",
                "    ],",
                "    \"credentialSubject\": {",
                "        \"id\": \"did:example:123\"",
                "    },",
                "    \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",",
                "    \"issuanceDate\": \"2006-01-02T15:04:05Z\",",
                "    \"issuer\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\",",
                "    \"proof\": {",
                "        \"created\": \"2020-04-02T18:48:36Z\",",
                "        \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..R618vVfGIF2jTe5dVkzMqQYIFKoIkyK_3_35z15tp_aFzew_4ruQt2DcaxdtkwsRff7bFsrVfigTl_XeE3tPDA\",",
                "        \"proofPurpose\": \"assertionMethod\",",
                "        \"type\": \"Ed25519Signature2018\",",
                "        \"verificationMethod\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV#z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\"",
                "    },",
                "    \"type\": \"VerifiableCredential\"",
                "});",
                ""
              ],
              "_lastExecutionId": "b35ae02e-0728-4034-a1d2-434c94665a22"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "f50bc01e-cf7f-45e1-aa05-d1e152568b6f",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "f7173b69-1c04-4adc-a604-6be32f1d50e3"
            }
          }
        ]
      },
      {
        "id": "80ca9df4-f224-4b5c-b27e-826a8a28b203",
        "name": "Presentations - Present",
        "item": [
          {
            "id": "ce9b5e8f-e163-41c3-987d-3caea0cd23ca",
            "name": "Negative Testing",
            "item": [
              {
                "id": "09b02984-b3ec-4c06-9e63-530efe26240b",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "895abe0a-3739-41b8-b7b8-c6220add1988",
                    "name": "presentations:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "73a11f18-12ab-4f71-912a-9937aabd3cf1",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "bf9b20de-3257-43a8-8b86-22e4653afc39"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9e7d962d-9742-4983-b7bc-dac76a443536",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "abc89090-165c-46c2-9844-0f161f7fe375"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "ed1864f3-8a5c-470d-be28-bdfbb8e50ed0",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "50f8efd4-33ce-499f-860c-4aead71657bf"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "442afc58-2fca-4a55-bb12-f2fe71a13d41",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "e49e5d92-2eb8-475f-91b8-7ca945b97340"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "d8b90d6a-ff30-4e51-9ff3-f5ed58371bca",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "3c4ca0ea-4985-45db-9faf-46dfe2a7c44c"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "25a40ce0-9dba-409e-b241-1e732bd14ff9",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "b383a044-942c-45d9-8f0b-db2b13332214"
            }
          }
        ]
      },
      {
        "id": "f7198fff-d0e7-4189-b7ff-a6c6e2bc7ed7",
        "name": "Presentations - Create",
        "item": [
          {
            "id": "583d3730-c9aa-4cb3-a387-324500c81318",
            "name": "Negative Testing",
            "item": [
              {
                "id": "98c4782f-8dcc-43d3-beec-94d6820b9461",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "a8ce486d-1784-41d6-8065-556e47ce8897",
                    "name": "presentations_prove:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "93cf7cac-dbd8-4f27-ab44-7cfd45b0b9ad",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "97fc6dab-b84c-4918-afcc-35e8a4c371b4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "dff9385e-0341-4165-8161-4063d70dac66",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "9af58627-08e5-44f9-b5e4-3f6ac43c7a69"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "33732a66-9f03-4202-859a-ab7c6fdd5def",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "00c057d2-f639-469e-91c2-d0ecb8a41702"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "7fe72e97-db81-4c28-aa92-943e28d5dc14",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "bd244968-ec0b-4d7f-83e7-db74dd1f6353"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "330a9423-534b-4b21-b6b2-21c678071fee",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "9abdbfd1-d95a-431c-803a-6211057cb233"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "fb205a75-1b2f-45cf-9dc7-5d774a747a2c",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "6092d429-f0d3-484f-9b05-5328fad1412c"
            }
          }
        ]
      },
      {
        "id": "09c5ff87-69e3-4147-87ec-d5652f353fae",
        "name": "Presentations - Verify",
        "item": [
          {
            "id": "8a26b336-0622-43ab-a895-7dcbf11c0307",
            "name": "Negative Testing",
            "item": [
              {
                "id": "47441f7b-a935-4027-afda-ddb845fb62f5",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "692597b7-5dfd-4c26-a40d-08477a630f77",
                    "name": "presentations_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "32d07aa7-4d7c-45fe-a053-c00ba1082926",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "379a9637-4841-4461-9717-80bb6b590d5c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f7b4e823-6ba4-4b65-9263-631ad72d7e87",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "669c143e-4f3b-4483-bcae-f2ad9c4113a4"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "fd227904-a572-4bc5-8343-021e274a3a26",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "3e4bbd03-fff8-478f-bec8-20f6f8cdf263"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "6af7c6ea-d48a-47e1-aed4-97095c395035",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "439146ce-6106-4b90-99c3-69e4548c5011"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "16861c37-54c8-4308-bf55-bb34be95a5ff",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "42fb60f5-3383-46eb-b97c-9c871063e312"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "b8440523-de47-431c-9f0b-f27f407b6070",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "9b5b0ce9-96a7-4433-bcef-81af3748e8c0"
            }
          }
        ]
      },
      {
        "id": "e6503af1-cf19-4277-b4d3-4ea22e51f272",
        "name": "Presentations - Notify",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "d05e016c-08aa-49e1-b767-a848069fd489",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "61fbcd5a-d255-41a5-b23f-5a0df51c9824",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      },
      {
        "id": "deae75f1-6168-48bf-ae45-be7377723c83",
        "name": "Presentations - Submit",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "e9b8337e-4e06-43c8-897d-4f000538ff5b",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "fc9c802a-9a9b-4693-a4e3-b9953a1daad1",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      }
    ]
  },
  "run": {
    "stats": {
      "iterations": {
        "total": 1,
        "pending": 0,
        "failed": 0
      },
      "items": {
        "total": 250,
        "pending": 0,
        "failed": 0
      },
      "scripts": {
        "total": 1891,
        "pending": 0,
        "failed": 0
      },
      "prerequests": {
        "total": 250,
        "pending": 0,
        "failed": 0
      },
      "requests": {
        "total": 252,
        "pending": 0,
        "failed": 0
      },
      "tests": {
        "total": 250,
        "pending": 0,
        "failed": 0
      },
      "assertions": {
        "total": 507,
        "pending": 0,
        "failed": 71
      },
      "testScripts": {
        "total": 950,
        "pending": 0,
        "failed": 0
      },
      "prerequestScripts": {
        "total": 941,
        "pending": 0,
        "failed": 0
      }
    },
    "timings": {
      "responseAverage": 51.55952380952384,
      "responseMin": 6,
      "responseMax": 599,
      "responseSd": 74.89882347876626,
      "dnsAverage": 0,
      "dnsMin": 0,
      "dnsMax": 0,
      "dnsSd": 0,
      "firstByteAverage": 0,
      "firstByteMin": 0,
      "firstByteMax": 0,
      "firstByteSd": 0,
      "started": 1714350982921,
      "completed": 1714351004479
    },
    "executions": [
      {
        "id": "09c1485c-2a8e-4474-9350-cac9f09c4be2",
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 250,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "96417402-581d-4b51-a7e4-2aa55d8f7ce1",
          "httpRequestId": "dc896f6b-760b-4d13-9cb9-f0e4ff855345"
        },
        "item": {
          "id": "09c1485c-2a8e-4474-9350-cac9f09c4be2",
          "name": "Clear Token Cache"
        },
        "response": {
          "id": "59813dd6-cf18-483f-b055-203425399bd0",
          "status": "OK",
          "code": 200,
          "responseTime": 42,
          "responseSize": 0
        }
      },
      {
        "id": "df181992-e603-4ff9-905e-ac8938511b1a",
        "cursor": {
          "ref": "0745be3a-8a07-44d5-b811-c857772a9e18",
          "length": 250,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "8b69f69b-fa96-4fa2-b2c7-72f58a6bee64"
        },
        "item": {
          "id": "df181992-e603-4ff9-905e-ac8938511b1a",
          "name": "Clear DID Web Cache"
        },
        "response": {
          "id": "f5024a7a-abf9-4ca6-9598-f8c5903a915e",
          "status": "OK",
          "code": 200,
          "responseTime": 6,
          "responseSize": 0
        }
      },
      {
        "id": "f010a126-5892-4b04-af6b-6c589fa31803",
        "cursor": {
          "ref": "71cb768f-1516-49c8-ad28-2620f53def47",
          "length": 250,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "6e10e0b7-1cfe-442d-b206-606612129adf"
        },
        "item": {
          "id": "f010a126-5892-4b04-af6b-6c589fa31803",
          "name": "did_json"
        },
        "response": {
          "id": "09bf1ac5-cd37-4efc-8bc0-e937204e4ec8",
          "status": "OK",
          "code": 200,
          "responseTime": 73,
          "responseSize": 1446
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d9a8c865-15bf-47a2-aec0-4b489c54aee6",
        "cursor": {
          "ref": "90057161-cd75-4a48-9b89-d183d32bab67",
          "length": 250,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "9d4afec4-d848-4623-a0c7-029cb2203fbd"
        },
        "item": {
          "id": "d9a8c865-15bf-47a2-aec0-4b489c54aee6",
          "name": "did:invalid"
        },
        "response": {
          "id": "c696b1de-6be8-447c-b4bb-71e0f6e84f96",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d9a8c865-15bf-47a2-aec0-4b489c54aee6",
        "cursor": {
          "ref": "90057161-cd75-4a48-9b89-d183d32bab67",
          "length": 250,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "9d4afec4-d848-4623-a0c7-029cb2203fbd"
        },
        "item": {
          "id": "d9a8c865-15bf-47a2-aec0-4b489c54aee6",
          "name": "did:invalid"
        },
        "response": {
          "id": "c696b1de-6be8-447c-b4bb-71e0f6e84f96",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "90e75349-d869-4082-92e3-750d1358f6a0",
        "cursor": {
          "ref": "96654b61-1309-4226-a562-997fb58aa430",
          "length": 250,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "7ac75f14-5ff1-4fe4-a0ff-8f0e32ccfbd3"
        },
        "item": {
          "id": "90e75349-d869-4082-92e3-750d1358f6a0",
          "name": "did:not_found:did_web"
        },
        "response": {
          "id": "89118360-6555-4900-82ad-bd887947560c",
          "status": "Not Found",
          "code": 404,
          "responseTime": 90,
          "responseSize": 49
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f70d181f-812c-4896-8f94-4748da27f5a2",
        "cursor": {
          "ref": "0730d70a-8a9b-4521-a276-10221a6096be",
          "length": 250,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "4ef145cd-1d97-421b-b30d-65222a6f359c"
        },
        "item": {
          "id": "f70d181f-812c-4896-8f94-4748da27f5a2",
          "name": "did:not_found:urn"
        },
        "response": {
          "id": "fa5da9f9-b3ac-4b0c-a602-1a546836af78",
          "status": "Not Found",
          "code": 404,
          "responseTime": 23,
          "responseSize": 82
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "678ba764-7da0-4c41-a19f-55a465febeb6",
        "cursor": {
          "ref": "2a8958ec-bdf7-4850-b2c7-329562064b58",
          "length": 250,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "58e09400-96c1-439a-9ccd-9972ac7db888"
        },
        "item": {
          "id": "678ba764-7da0-4c41-a19f-55a465febeb6",
          "name": "identifiers:missing_auth"
        },
        "response": {
          "id": "6c111ebe-0f52-4810-98ae-13e891025dcb",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 17,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4059cba3-b103-4f62-89fa-985c919672fd",
        "cursor": {
          "ref": "9dae5403-f4c6-488e-88f0-3b49747a6ed2",
          "length": 250,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "8ea809d7-d9f8-4f7d-8eb9-9b6eeb58ac2b"
        },
        "item": {
          "id": "4059cba3-b103-4f62-89fa-985c919672fd",
          "name": "identifiers"
        },
        "response": {
          "id": "0cc3b239-3910-4f27-8d7e-fa52915a7de8",
          "status": "OK",
          "code": 200,
          "responseTime": 72,
          "responseSize": 1462
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f21e0eae-3872-4103-8ac7-e14514839a15",
        "cursor": {
          "ref": "35e13422-8c48-4d9b-99ad-d9e080533c10",
          "length": 250,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "3da8fba5-0097-4575-bc1d-295eaf981e2b"
        },
        "item": {
          "id": "f21e0eae-3872-4103-8ac7-e14514839a15",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "5e671bea-efe8-46eb-b7a1-8bd186f93ba7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dd07c87f-6801-430b-8e92-5359769c050b",
        "cursor": {
          "ref": "74e11128-ece9-4b1d-aa56-5d71b04ecd7b",
          "length": 250,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "69bf1e97-7d19-46be-8b77-1d2b2b122ace"
        },
        "item": {
          "id": "dd07c87f-6801-430b-8e92-5359769c050b",
          "name": "credentials_issue:credential.@context:missing"
        },
        "response": {
          "id": "15335e25-16eb-4693-b17e-e2d7b0c0a852",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 26,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5c3d50d0-9162-4fbf-b788-c73c874a9c3e",
        "cursor": {
          "ref": "4d81873e-2648-4037-ac9a-87fe7724ca86",
          "length": 250,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "d4ea5adc-a9b0-4a09-89ba-d38e3a328b41"
        },
        "item": {
          "id": "5c3d50d0-9162-4fbf-b788-c73c874a9c3e",
          "name": "credentials_issue:credential.@context:boolean"
        },
        "response": {
          "id": "49fef8b2-1cff-4377-9ad9-a6eacfc1fab9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 25,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "04a37640-6505-4efd-984d-0daee0fbd1f4",
        "cursor": {
          "ref": "4850328e-bd0f-4db5-b6eb-8a18e747ac3c",
          "length": 250,
          "cycles": 1,
          "position": 11,
          "iteration": 0,
          "httpRequestId": "8a54fbb9-50fa-47f5-a66c-b8eb6c21a6c8"
        },
        "item": {
          "id": "04a37640-6505-4efd-984d-0daee0fbd1f4",
          "name": "credentials_issue:credential.@context:integer Copy"
        },
        "response": {
          "id": "57045585-8bb8-48da-88f9-cd6fe5f32c75",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 24,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "37553531-a470-41bf-a81c-242b11542426",
        "cursor": {
          "ref": "240b5094-635b-43f2-96f7-eeefbd903673",
          "length": 250,
          "cycles": 1,
          "position": 12,
          "iteration": 0,
          "httpRequestId": "32ba41e1-5087-4e6e-862c-ecd9e02c6fbf"
        },
        "item": {
          "id": "37553531-a470-41bf-a81c-242b11542426",
          "name": "credentials_issue:credential.@context:null"
        },
        "response": {
          "id": "a703402b-8cbf-4df3-86aa-875090d42a24",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0fc8506d-118c-4c5d-ae8c-49ceb8196152",
        "cursor": {
          "ref": "559a463c-f81e-4b12-86a1-7bd13c2230a7",
          "length": 250,
          "cycles": 1,
          "position": 13,
          "iteration": 0,
          "httpRequestId": "4e968800-0a7b-4501-8284-10c85fc73c75"
        },
        "item": {
          "id": "0fc8506d-118c-4c5d-ae8c-49ceb8196152",
          "name": "credentials_issue:credential.@context:object"
        },
        "response": {
          "id": "8a51a4a5-9586-4a55-9eb0-33de45cff749",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "770bf4fe-8619-4500-a112-62952f10c7dd",
        "cursor": {
          "ref": "faaedf05-5cfd-4742-9c49-428d785db1f3",
          "length": 250,
          "cycles": 1,
          "position": 14,
          "iteration": 0,
          "httpRequestId": "903579ad-ebe6-4b32-97b7-5b21912be4d3"
        },
        "item": {
          "id": "770bf4fe-8619-4500-a112-62952f10c7dd",
          "name": "credentials_issue:credential.@context:string"
        },
        "response": {
          "id": "97523bb8-eb35-41a0-bd73-da3da969e561",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 24,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "75f756d1-bacf-4cfd-aa5d-db0fd7bb0468",
        "cursor": {
          "ref": "15d898f7-a6a9-4bae-b853-8708d0d2f8c8",
          "length": 250,
          "cycles": 1,
          "position": 15,
          "iteration": 0,
          "httpRequestId": "6273511a-2ca3-4aa2-8e87-9b58913d2dd2"
        },
        "item": {
          "id": "75f756d1-bacf-4cfd-aa5d-db0fd7bb0468",
          "name": "credentials_issue:credential.@context.item.array"
        },
        "response": {
          "id": "3776854a-9e9e-48e0-b355-4868fee2bac0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c487f76a-37d9-47f8-9b83-8303f8ee1dbe",
        "cursor": {
          "ref": "cdbc02b2-354d-473c-a261-1d2b1ddfb03a",
          "length": 250,
          "cycles": 1,
          "position": 16,
          "iteration": 0,
          "httpRequestId": "0311f6eb-ad23-4948-b7e2-9d88c11d89e2"
        },
        "item": {
          "id": "c487f76a-37d9-47f8-9b83-8303f8ee1dbe",
          "name": "credentials_issue:credential.@context.item.boolean"
        },
        "response": {
          "id": "0e46b3d2-7d4b-4afd-8138-52e09ef9fdfc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 23,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4166d4f9-6b34-489e-823c-6e47111b009b",
        "cursor": {
          "ref": "2b96d920-f6c2-44f4-92eb-2df72de1da3b",
          "length": 250,
          "cycles": 1,
          "position": 17,
          "iteration": 0,
          "httpRequestId": "bc8e0162-64d5-4b1a-800e-551c849fc719"
        },
        "item": {
          "id": "4166d4f9-6b34-489e-823c-6e47111b009b",
          "name": "credentials_issue:credential.@context.item.integer"
        },
        "response": {
          "id": "615f794e-fe0c-4227-8f3a-9e80909daf4d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ce22e382-c220-483c-8abf-a1ac4c44e8d6",
        "cursor": {
          "ref": "78d6b488-90b5-4ae5-a919-b29dbfea6f1e",
          "length": 250,
          "cycles": 1,
          "position": 18,
          "iteration": 0,
          "httpRequestId": "92c3ddca-0ee2-4776-baba-30d5c4a8dacd"
        },
        "item": {
          "id": "ce22e382-c220-483c-8abf-a1ac4c44e8d6",
          "name": "credentials_issue:credential.@context.item.null"
        },
        "response": {
          "id": "559c2b7e-ee74-4d1f-9d5a-d8a9dc3fec2b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 23,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fb96e8cf-c983-492c-8435-f54c96a3be45",
        "cursor": {
          "ref": "961f9c17-ed53-4c06-a1f4-f989a3051f60",
          "length": 250,
          "cycles": 1,
          "position": 19,
          "iteration": 0,
          "httpRequestId": "6dc3f85a-b6a2-4fda-9e4b-ef9b962d887d"
        },
        "item": {
          "id": "fb96e8cf-c983-492c-8435-f54c96a3be45",
          "name": "credentials_issue:credential.@context.item.object"
        },
        "response": {
          "id": "a82cc714-f4d9-4c62-9f36-ab1f62eb4557",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 25,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2b38b51c-6c03-4804-aad9-2608eb1c4c2d",
        "cursor": {
          "ref": "294b8750-d0a4-4522-a077-4b1f2644dfd7",
          "length": 250,
          "cycles": 1,
          "position": 20,
          "iteration": 0,
          "httpRequestId": "3f00c37a-2cb5-4b64-8409-5a0cf0aae136"
        },
        "item": {
          "id": "2b38b51c-6c03-4804-aad9-2608eb1c4c2d",
          "name": "credentials_issue:credential.id:array"
        },
        "response": {
          "id": "5e24ab2a-627d-477f-8b71-938d0109292a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 25,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1a708e96-f375-428a-a457-a8b1442fa591",
        "cursor": {
          "ref": "14b77136-a995-441a-97cf-f0d39f928746",
          "length": 250,
          "cycles": 1,
          "position": 21,
          "iteration": 0,
          "httpRequestId": "f62eb4d1-c52f-4fe6-b3fb-b4091a02b276"
        },
        "item": {
          "id": "1a708e96-f375-428a-a457-a8b1442fa591",
          "name": "credentials_issue:credential.id:boolean"
        },
        "response": {
          "id": "d7c444cc-b129-40a2-a2c9-47bb118553ed",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 25,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "53e7e9a1-64dd-4512-aa89-00fe2267808a",
        "cursor": {
          "ref": "7f4f32ec-e6fe-4dfa-9163-4cf7f94c16d0",
          "length": 250,
          "cycles": 1,
          "position": 22,
          "iteration": 0,
          "httpRequestId": "bc99f6da-cba4-44f2-8a8f-17fdc953d2d5"
        },
        "item": {
          "id": "53e7e9a1-64dd-4512-aa89-00fe2267808a",
          "name": "credentials_issue:credential.id:integer"
        },
        "response": {
          "id": "92b40960-875e-411f-b40c-22ea7756e52a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 22,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ad3561ba-671b-446a-9f1a-5ce049f4040a",
        "cursor": {
          "ref": "625e724d-89f4-43ad-b40e-695eca6d7305",
          "length": 250,
          "cycles": 1,
          "position": 23,
          "iteration": 0,
          "httpRequestId": "810bc095-8436-4c64-8e2a-aa8ce977e11d"
        },
        "item": {
          "id": "ad3561ba-671b-446a-9f1a-5ce049f4040a",
          "name": "credentials_issue:credential.id:null"
        },
        "response": {
          "id": "58a9ac76-bf60-4e16-9cdd-36fe03647950",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 21,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "158068d7-f504-482a-8c9a-42ddf6cb4033",
        "cursor": {
          "ref": "aa068b0c-26b7-4550-8ea0-3ca0418acf24",
          "length": 250,
          "cycles": 1,
          "position": 24,
          "iteration": 0,
          "httpRequestId": "93e29d31-e3b7-4018-9f95-93819938181b"
        },
        "item": {
          "id": "158068d7-f504-482a-8c9a-42ddf6cb4033",
          "name": "credentials_issue:credential.id:object"
        },
        "response": {
          "id": "094a69b4-7d5a-4d88-8d93-0c8a2e737f84",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 26,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "72036ddd-0c72-4c4b-8d2a-fafbe4c87b45",
        "cursor": {
          "ref": "b9c3dc4e-53d3-4e18-bbd0-2f68da7cb62c",
          "length": 250,
          "cycles": 1,
          "position": 25,
          "iteration": 0,
          "httpRequestId": "62bde0a8-4458-480e-a538-d4578d4c358a"
        },
        "item": {
          "id": "72036ddd-0c72-4c4b-8d2a-fafbe4c87b45",
          "name": "credentials_issue:credential.type:missing"
        },
        "response": {
          "id": "783fc906-2b38-4adb-acc8-574de19750ec",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "74e1ee62-2f0e-4710-8dd0-883f8b619d8a",
        "cursor": {
          "ref": "366fcbe9-1873-43be-b1ee-1b84ce770e6a",
          "length": 250,
          "cycles": 1,
          "position": 26,
          "iteration": 0,
          "httpRequestId": "0ac55c2a-91bb-4b38-8af1-4d601668b02d"
        },
        "item": {
          "id": "74e1ee62-2f0e-4710-8dd0-883f8b619d8a",
          "name": "credentials_issue:credential.type:boolean"
        },
        "response": {
          "id": "1e189cbd-dd7c-4f7a-9bb5-eee109e61fff",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 24,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cacc511a-3d93-49ad-9234-9ebc36179f84",
        "cursor": {
          "ref": "536ed891-6a4e-4a90-990f-0f45a4565e2c",
          "length": 250,
          "cycles": 1,
          "position": 27,
          "iteration": 0,
          "httpRequestId": "124ac196-8add-4b03-832e-d86513804509"
        },
        "item": {
          "id": "cacc511a-3d93-49ad-9234-9ebc36179f84",
          "name": "credentials_issue:credential.type:integer"
        },
        "response": {
          "id": "0ded07fc-5477-4b46-be43-3370e71253fb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 25,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5839892b-b81c-4e58-866d-c213e1487798",
        "cursor": {
          "ref": "069a298d-f06d-40a6-8ef3-017bf0140fa0",
          "length": 250,
          "cycles": 1,
          "position": 28,
          "iteration": 0,
          "httpRequestId": "f42bf414-1178-49b5-b7e3-cb1793457a06"
        },
        "item": {
          "id": "5839892b-b81c-4e58-866d-c213e1487798",
          "name": "credentials_issue:credential.type:null"
        },
        "response": {
          "id": "e4889738-9e9f-48dc-a1a1-6a00bb091cf5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 22,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "537559fa-fa0b-480a-af43-7a6293dad026",
        "cursor": {
          "ref": "ee53979d-5cda-47ae-8572-26cf91f253d5",
          "length": 250,
          "cycles": 1,
          "position": 29,
          "iteration": 0,
          "httpRequestId": "72b08b7b-d82f-49a8-9dd8-593b32347238"
        },
        "item": {
          "id": "537559fa-fa0b-480a-af43-7a6293dad026",
          "name": "credentials_issue:credential.type:object"
        },
        "response": {
          "id": "8cedc459-5e7f-4622-8804-8db9340cff85",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 24,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d080c002-35e9-478e-80b5-725a036991f6",
        "cursor": {
          "ref": "fbf987ec-06e1-4be3-a115-16b07f14deee",
          "length": 250,
          "cycles": 1,
          "position": 30,
          "iteration": 0,
          "httpRequestId": "4ed96584-297b-4bbb-9b3a-a6d9e500420c"
        },
        "item": {
          "id": "d080c002-35e9-478e-80b5-725a036991f6",
          "name": "credentials_issue:credential.type:string"
        },
        "response": {
          "id": "e86853d7-c566-42fb-b51b-b524222693df",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 23,
          "responseSize": 107
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dd2f2c91-88ef-4ca6-83b8-98e6b9af5c7c",
        "cursor": {
          "ref": "0103a2c4-30c8-47c5-8ec0-d2af21a67ff0",
          "length": 250,
          "cycles": 1,
          "position": 31,
          "iteration": 0,
          "httpRequestId": "874ad9c4-8c09-414e-83bc-3794a6336cd4"
        },
        "item": {
          "id": "dd2f2c91-88ef-4ca6-83b8-98e6b9af5c7c",
          "name": "credentials_issue:credential.type.item:missing"
        },
        "response": {
          "id": "4735e8b8-b31e-4877-86c3-216f03b7a320",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 26,
          "responseSize": 107
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "88f1d1a9-2516-49f3-be4c-69964734419d",
        "cursor": {
          "ref": "c2ec5a48-e5f6-4f30-a00c-b47b69a519ca",
          "length": 250,
          "cycles": 1,
          "position": 32,
          "iteration": 0,
          "httpRequestId": "448f4d73-4d66-40e2-ad2a-fb312a227e4e"
        },
        "item": {
          "id": "88f1d1a9-2516-49f3-be4c-69964734419d",
          "name": "credentials_issue:credential.type.item:array"
        },
        "response": {
          "id": "b1805556-4370-43b4-a2f1-32254a78560b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 25,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "89137730-39ac-4653-8b72-6da3141a2819",
        "cursor": {
          "ref": "40fb7586-dbc8-44a9-95c3-4efa18af5319",
          "length": 250,
          "cycles": 1,
          "position": 33,
          "iteration": 0,
          "httpRequestId": "d992bccd-66cc-4536-bbeb-9d5b79c0ce2d"
        },
        "item": {
          "id": "89137730-39ac-4653-8b72-6da3141a2819",
          "name": "credentials_issue:credential.type.item:boolean"
        },
        "response": {
          "id": "fb3561d7-7d99-4aca-9bd5-27dcfd352543",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cb2d04f6-36e6-4626-80c1-2f999ef77741",
        "cursor": {
          "ref": "b2383f84-68c9-49c3-b0f2-661197831624",
          "length": 250,
          "cycles": 1,
          "position": 34,
          "iteration": 0,
          "httpRequestId": "548d9b38-bea1-4797-8d61-bfcb1cbf10ac"
        },
        "item": {
          "id": "cb2d04f6-36e6-4626-80c1-2f999ef77741",
          "name": "credentials_issue:credential.type.item:integer"
        },
        "response": {
          "id": "d7872427-467e-42cf-9f3c-1a2bd03dc2f1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 26,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f822a3de-43e5-44e1-bdf4-428f08dff23c",
        "cursor": {
          "ref": "0f6b7c1c-29f4-4086-96c4-ff2a36d9f4b9",
          "length": 250,
          "cycles": 1,
          "position": 35,
          "iteration": 0,
          "httpRequestId": "c7b015d2-dd78-49ee-a5c6-be0b351b775a"
        },
        "item": {
          "id": "f822a3de-43e5-44e1-bdf4-428f08dff23c",
          "name": "credentials_issue:credential.type.item:null"
        },
        "response": {
          "id": "9db635f7-2eb9-49dd-9887-595b07c02fbf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "738821c2-2ad3-4f5c-8ac6-8a6705d3a102",
        "cursor": {
          "ref": "7a2eac87-166e-4898-8be7-5aa8867766b0",
          "length": 250,
          "cycles": 1,
          "position": 36,
          "iteration": 0,
          "httpRequestId": "f85e537c-b979-4bda-bd75-3502298fa219"
        },
        "item": {
          "id": "738821c2-2ad3-4f5c-8ac6-8a6705d3a102",
          "name": "credentials_issue:credential.type.item:object"
        },
        "response": {
          "id": "95eb685a-03c9-4a12-959f-4f6ca792caa7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 25,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f412c192-df05-489e-a6de-58632df53043",
        "cursor": {
          "ref": "20252c6d-dd8c-4acc-a99e-1c65625abaea",
          "length": 250,
          "cycles": 1,
          "position": 37,
          "iteration": 0,
          "httpRequestId": "6118730f-b257-4b94-9667-6a874b44660f"
        },
        "item": {
          "id": "f412c192-df05-489e-a6de-58632df53043",
          "name": "credentials_issue:credential.issuer:missing"
        },
        "response": {
          "id": "160677ec-199a-4824-8de7-aab7acc14a41",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 96
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1db72b5d-21fe-4d2e-824b-4daaa36510fd",
        "cursor": {
          "ref": "57e1f6e4-84c3-4754-a35a-c7719eb542f6",
          "length": 250,
          "cycles": 1,
          "position": 38,
          "iteration": 0,
          "httpRequestId": "8abec4ab-5050-4278-ad9d-82a3e1c087d8"
        },
        "item": {
          "id": "1db72b5d-21fe-4d2e-824b-4daaa36510fd",
          "name": "credentials_issue:credential.issuer:array"
        },
        "response": {
          "id": "2ea87172-9cf2-4fa8-9e3d-d68ab2b4b0f6",
          "status": "Created",
          "code": 201,
          "responseTime": 599,
          "responseSize": 691
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:39)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:39)"
            }
          }
        ]
      },
      {
        "id": "5aa94a97-6950-4519-9161-244f98785a7a",
        "cursor": {
          "ref": "a2246ac1-55b3-4448-b5b0-7045819c49bc",
          "length": 250,
          "cycles": 1,
          "position": 39,
          "iteration": 0,
          "httpRequestId": "bfaea4ec-52a2-49d5-87fe-5365387caf44"
        },
        "item": {
          "id": "5aa94a97-6950-4519-9161-244f98785a7a",
          "name": "credentials_issue:credential.issuer:boolean"
        },
        "response": {
          "id": "d44ba57e-92af-4e96-af19-5d12ad03a666",
          "status": "Created",
          "code": 201,
          "responseTime": 242,
          "responseSize": 650
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:40)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:40)"
            }
          }
        ]
      },
      {
        "id": "3fbc67a9-1882-4471-bde2-585bd1e46618",
        "cursor": {
          "ref": "75d7536d-9188-476c-9707-8c0e359ff855",
          "length": 250,
          "cycles": 1,
          "position": 40,
          "iteration": 0,
          "httpRequestId": "6e12057d-3d38-4e67-878d-77d498f7d7ca"
        },
        "item": {
          "id": "3fbc67a9-1882-4471-bde2-585bd1e46618",
          "name": "credentials_issue:credential.issuer:integer"
        },
        "response": {
          "id": "fa77a4b2-f94c-4f58-a4d7-64f6f6554fd8",
          "status": "Created",
          "code": 201,
          "responseTime": 252,
          "responseSize": 647
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:41)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:41)"
            }
          }
        ]
      },
      {
        "id": "870fcb99-95c0-4d4c-b20c-dffd50d63d46",
        "cursor": {
          "ref": "c088ed7a-8dbb-4fcd-a272-ebc22b4573b6",
          "length": 250,
          "cycles": 1,
          "position": 41,
          "iteration": 0,
          "httpRequestId": "f1bdba55-fcc5-4ecd-ab08-5f5631899bbc"
        },
        "item": {
          "id": "870fcb99-95c0-4d4c-b20c-dffd50d63d46",
          "name": "credentials_issue:credential.issuer:null"
        },
        "response": {
          "id": "14253821-7f17-43bc-8947-ad1ff3c828f4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 24,
          "responseSize": 96
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a11dfef6-9042-436f-8a91-58d11b2bb7a2",
        "cursor": {
          "ref": "2d404ed3-4587-4520-8fcc-326df5025651",
          "length": 250,
          "cycles": 1,
          "position": 42,
          "iteration": 0,
          "httpRequestId": "3897cebb-5cfa-4d37-a711-f24297867893"
        },
        "item": {
          "id": "a11dfef6-9042-436f-8a91-58d11b2bb7a2",
          "name": "credentials_issue.credential.issuer:invalid"
        },
        "response": {
          "id": "d9131589-8f36-4207-a701-9623d99496ec",
          "status": "Created",
          "code": 201,
          "responseTime": 255,
          "responseSize": 656
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:43)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:43)"
            }
          }
        ]
      },
      {
        "id": "f257b6f8-5971-4f9a-8c85-af722dfb958f",
        "cursor": {
          "ref": "d81b3d39-3fc3-408c-b100-f7f62758cb8c",
          "length": 250,
          "cycles": 1,
          "position": 43,
          "iteration": 0,
          "httpRequestId": "8f50cc33-4105-4a00-9d86-2430c3518703"
        },
        "item": {
          "id": "f257b6f8-5971-4f9a-8c85-af722dfb958f",
          "name": "credentials_issue.credential.issuer:unknown"
        },
        "response": {
          "id": "2de471d5-5f97-41f0-bddc-a2afd1c216f5",
          "status": "Created",
          "code": 201,
          "responseTime": 259,
          "responseSize": 692
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 201",
              "stack": "AssertionError: expected response to have status code 422 but got 201\n   at Object.eval sandbox-script.js:1:44)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:44)"
            }
          }
        ]
      },
      {
        "id": "64f68d7b-5028-4fcb-9969-1a225b1a44a4",
        "cursor": {
          "ref": "597255c0-2a04-42fb-9002-0d9f8e436081",
          "length": 250,
          "cycles": 1,
          "position": 44,
          "iteration": 0,
          "httpRequestId": "35ddede6-be62-4323-967c-46569252e54e"
        },
        "item": {
          "id": "64f68d7b-5028-4fcb-9969-1a225b1a44a4",
          "name": "credentials_issue:credential.issuer.id:missing"
        },
        "response": {
          "id": "8c3e0351-50f1-444e-97ec-bbd7e117995e",
          "status": "Created",
          "code": 201,
          "responseTime": 235,
          "responseSize": 647
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:45)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:45)"
            }
          }
        ]
      },
      {
        "id": "9d30f6be-38d3-48d7-b65b-2f9caffb26de",
        "cursor": {
          "ref": "015a67c0-2c2a-47bd-a061-72747e25f52e",
          "length": 250,
          "cycles": 1,
          "position": 45,
          "iteration": 0,
          "httpRequestId": "be10ffce-e657-42d1-a846-edb5fffe7805"
        },
        "item": {
          "id": "9d30f6be-38d3-48d7-b65b-2f9caffb26de",
          "name": "credentials_issue:credential.issuer.id:array"
        },
        "response": {
          "id": "10fd2643-db1c-4480-8311-81f21e5122ce",
          "status": "Created",
          "code": 201,
          "responseTime": 236,
          "responseSize": 698
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:46)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:46)"
            }
          }
        ]
      },
      {
        "id": "3bf64a6f-511a-4ccf-8b87-3b58f0fc99e2",
        "cursor": {
          "ref": "d9e9514a-12dc-47e9-93e0-73c69e335363",
          "length": 250,
          "cycles": 1,
          "position": 46,
          "iteration": 0,
          "httpRequestId": "2473c35f-6a86-4c39-acfa-1131901a181c"
        },
        "item": {
          "id": "3bf64a6f-511a-4ccf-8b87-3b58f0fc99e2",
          "name": "credentials_issue:credential.issuer.id:boolean"
        },
        "response": {
          "id": "7d6e2129-a9af-48d9-b3ac-29ce8370a344",
          "status": "Created",
          "code": 201,
          "responseTime": 240,
          "responseSize": 657
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:47)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:47)"
            }
          }
        ]
      },
      {
        "id": "0ec8b0e1-d423-46a2-ba1f-ea8b0b95dcc0",
        "cursor": {
          "ref": "b7e5bf6d-d8d5-4984-b907-916c10bc40b7",
          "length": 250,
          "cycles": 1,
          "position": 47,
          "iteration": 0,
          "httpRequestId": "723d0a43-a5d4-4f7c-be02-81253568e123"
        },
        "item": {
          "id": "0ec8b0e1-d423-46a2-ba1f-ea8b0b95dcc0",
          "name": "credentials_issue:credential.issuer.id:integer"
        },
        "response": {
          "id": "2702e804-9fe7-4f38-aaff-04e407c31489",
          "status": "Created",
          "code": 201,
          "responseTime": 231,
          "responseSize": 654
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:48)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:48)"
            }
          }
        ]
      },
      {
        "id": "043b58c9-f1d3-4ef5-b29a-b377676ca857",
        "cursor": {
          "ref": "5dabad14-df80-474e-bd78-f7a42c1ca590",
          "length": 250,
          "cycles": 1,
          "position": 48,
          "iteration": 0,
          "httpRequestId": "017eeaa0-7df6-4992-a2dc-ad3eb5a29300"
        },
        "item": {
          "id": "043b58c9-f1d3-4ef5-b29a-b377676ca857",
          "name": "credentials_issue:credential.issuer.id:null"
        },
        "response": {
          "id": "19259661-c9fc-49f8-9f2a-a6f4b6754c0d",
          "status": "Created",
          "code": 201,
          "responseTime": 240,
          "responseSize": 656
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:49)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:49)"
            }
          }
        ]
      },
      {
        "id": "d0292786-58e4-4e91-b4d3-c6cb87918cae",
        "cursor": {
          "ref": "f2ed1f65-5311-4388-9b8e-66c7db5049de",
          "length": 250,
          "cycles": 1,
          "position": 49,
          "iteration": 0,
          "httpRequestId": "85262047-7376-4538-8eab-86eda75c422d"
        },
        "item": {
          "id": "d0292786-58e4-4e91-b4d3-c6cb87918cae",
          "name": "credentials_issue.credential.issuer.id:invalid"
        },
        "response": {
          "id": "7cb1f437-40ea-4c3a-866b-5c170a79a2d8",
          "status": "Created",
          "code": 201,
          "responseTime": 234,
          "responseSize": 663
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:50)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:50)"
            }
          }
        ]
      },
      {
        "id": "f0cceb27-de65-4a65-9059-03afed600e7f",
        "cursor": {
          "ref": "3385bf85-576f-418f-9809-72df538bbac9",
          "length": 250,
          "cycles": 1,
          "position": 50,
          "iteration": 0,
          "httpRequestId": "24749dd8-f9ed-4364-8756-a06e4038e1c8"
        },
        "item": {
          "id": "f0cceb27-de65-4a65-9059-03afed600e7f",
          "name": "credentials_issue.credential.issuer.id:unknown"
        },
        "response": {
          "id": "1f611454-f673-49ab-8cdd-f9cf112a16a0",
          "status": "Created",
          "code": 201,
          "responseTime": 249,
          "responseSize": 699
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 201",
              "stack": "AssertionError: expected response to have status code 422 but got 201\n   at Object.eval sandbox-script.js:1:51)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:51)"
            }
          }
        ]
      },
      {
        "id": "f241908c-5e3b-41b1-8eca-b8d0dfd463e6",
        "cursor": {
          "ref": "c9552f22-f07a-4691-88e5-2f2e597ad953",
          "length": 250,
          "cycles": 1,
          "position": 51,
          "iteration": 0,
          "httpRequestId": "e66618ca-837f-4b14-8078-05dc7b6af0a3"
        },
        "item": {
          "id": "f241908c-5e3b-41b1-8eca-b8d0dfd463e6",
          "name": "credentials_issue:credential.issuanceDate.missing"
        },
        "response": {
          "id": "5b006fb7-c52a-4c21-8bfc-3202e2409c2c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 23,
          "responseSize": 167
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "937eb481-85ff-48ea-9773-0e6ba95fead8",
        "cursor": {
          "ref": "161052f9-1ddd-431f-b95d-3e03d3dfc2ed",
          "length": 250,
          "cycles": 1,
          "position": 52,
          "iteration": 0,
          "httpRequestId": "d7995c0a-1a89-460d-b231-9868302c2d3c"
        },
        "item": {
          "id": "937eb481-85ff-48ea-9773-0e6ba95fead8",
          "name": "credentials_issue:credential.issuanceDate:array"
        },
        "response": {
          "id": "b137e14f-fd50-43af-8261-4714e10db3d1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 24,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4301cadd-b8ac-42e9-ba72-257fdabe904f",
        "cursor": {
          "ref": "a859694c-4b44-4aec-a8de-66c3bc598abd",
          "length": 250,
          "cycles": 1,
          "position": 53,
          "iteration": 0,
          "httpRequestId": "2fc63bf2-4d08-4880-97a0-c48ef3327f9f"
        },
        "item": {
          "id": "4301cadd-b8ac-42e9-ba72-257fdabe904f",
          "name": "credentials_issue:credential.issuanceDate:boolean"
        },
        "response": {
          "id": "799c8875-26c5-4919-81f2-e2b567be7509",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "89cf26c8-4a25-43bc-bbf3-c857145b08bb",
        "cursor": {
          "ref": "339eb9f0-c632-4491-8f48-ae478fa75ad5",
          "length": 250,
          "cycles": 1,
          "position": 54,
          "iteration": 0,
          "httpRequestId": "f8fa8950-ac62-438e-a9e2-a75ec8dfde45"
        },
        "item": {
          "id": "89cf26c8-4a25-43bc-bbf3-c857145b08bb",
          "name": "credentials_issue:credential.issuanceDate:integer"
        },
        "response": {
          "id": "ab27ce85-1a20-4ad4-85e3-6cb94d8b6810",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e9d209c6-af50-4f37-bdc0-1c9634d4167d",
        "cursor": {
          "ref": "bab00477-67ee-45df-b9e2-7e219cedca29",
          "length": 250,
          "cycles": 1,
          "position": 55,
          "iteration": 0,
          "httpRequestId": "da209845-3da3-4dcd-b3a9-543c8d98c83a"
        },
        "item": {
          "id": "e9d209c6-af50-4f37-bdc0-1c9634d4167d",
          "name": "credentials_issue:credential.issuanceDate:null"
        },
        "response": {
          "id": "7c66b150-e428-4557-99e1-9e559765af94",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 22,
          "responseSize": 167
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "95950d78-0f49-4b1a-bdb4-e79fca88b8a7",
        "cursor": {
          "ref": "568dde4b-5dbf-4c06-bac4-b5269f76743f",
          "length": 250,
          "cycles": 1,
          "position": 56,
          "iteration": 0,
          "httpRequestId": "5d711966-45fe-4bd8-9cd0-a74b6db7da2d"
        },
        "item": {
          "id": "95950d78-0f49-4b1a-bdb4-e79fca88b8a7",
          "name": "credentials_issue:credential.issuanceDate:object"
        },
        "response": {
          "id": "4457dfb8-3d0b-43cf-b6a7-0aa0ec4f5d90",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 22,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "546189df-746d-4aef-9d61-8d173f5b3911",
        "cursor": {
          "ref": "ea92bba4-aeac-4207-b195-9c6f71caa935",
          "length": 250,
          "cycles": 1,
          "position": 57,
          "iteration": 0,
          "httpRequestId": "961cddea-b738-44bd-9df5-e850f2b48d82"
        },
        "item": {
          "id": "546189df-746d-4aef-9d61-8d173f5b3911",
          "name": "credentials_issue:credential.issuanceDate:invalid_value"
        },
        "response": {
          "id": "95d16eef-cd9f-4be8-aa86-d9a1767d299e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "851d0673-8860-4d21-a5df-25bcf61baa1f",
        "cursor": {
          "ref": "526cb9c6-cc28-4870-8db6-8abff99855bc",
          "length": 250,
          "cycles": 1,
          "position": 58,
          "iteration": 0,
          "httpRequestId": "9928c93a-79db-4076-b94e-ff6838a27304"
        },
        "item": {
          "id": "851d0673-8860-4d21-a5df-25bcf61baa1f",
          "name": "credentials_issue:credential.credentialSubject:missing"
        },
        "response": {
          "id": "3a4316dc-631c-4b87-a6a2-7d8a41266b7b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 22,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0ae05b06-e6b8-46eb-94a2-84ad43dd949e",
        "cursor": {
          "ref": "423103e7-99dd-4817-94af-5848658a140b",
          "length": 250,
          "cycles": 1,
          "position": 59,
          "iteration": 0,
          "httpRequestId": "4c40b3cb-2051-4e51-9f16-4265b754d898"
        },
        "item": {
          "id": "0ae05b06-e6b8-46eb-94a2-84ad43dd949e",
          "name": "credentials_issue:credential.credentialSubject:array"
        },
        "response": {
          "id": "8f599a1a-55ab-4d4b-a231-4012210614c3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 24,
          "responseSize": 203
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "75fb516a-0282-4b61-9231-844f777ee9a3",
        "cursor": {
          "ref": "48f45798-3f9f-4ff9-9d2d-99cb83b2948a",
          "length": 250,
          "cycles": 1,
          "position": 60,
          "iteration": 0,
          "httpRequestId": "69bab843-e854-451c-8175-9defffe4073c"
        },
        "item": {
          "id": "75fb516a-0282-4b61-9231-844f777ee9a3",
          "name": "credentials_issue:credential.credentialSubject:boolean"
        },
        "response": {
          "id": "a349eafe-386a-4a27-a29f-ac3327749a0f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 24,
          "responseSize": 185
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f2b2e6f5-8e21-4a09-9cad-643b1e88faaa",
        "cursor": {
          "ref": "918f5eea-53c7-4d3f-b4e0-5d7059ef2af1",
          "length": 250,
          "cycles": 1,
          "position": 61,
          "iteration": 0,
          "httpRequestId": "d7e0c483-b676-4d06-9e85-c1b647fe6ba5"
        },
        "item": {
          "id": "f2b2e6f5-8e21-4a09-9cad-643b1e88faaa",
          "name": "credentials_issue:credential.credentialSubject:integer"
        },
        "response": {
          "id": "3570dc10-c966-4fb9-8419-515bca2996fe",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 185
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4a66bb30-5736-4f18-8e9f-e37a1f45650c",
        "cursor": {
          "ref": "e78b54cf-6a7f-4cbf-aebb-ef1de93dfd12",
          "length": 250,
          "cycles": 1,
          "position": 62,
          "iteration": 0,
          "httpRequestId": "caee9213-94ef-4a0c-8ad5-1d1a3b5bb6f4"
        },
        "item": {
          "id": "4a66bb30-5736-4f18-8e9f-e37a1f45650c",
          "name": "credentials_issue:credential.credentialSubject:null"
        },
        "response": {
          "id": "a9af23b2-7552-4378-b490-e8bbb3793ae2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 26,
          "responseSize": 238
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dc941bce-b7c0-4773-bfae-8c443464ee67",
        "cursor": {
          "ref": "ac4e51b6-b9bd-4f73-8ac6-e69b402ed648",
          "length": 250,
          "cycles": 1,
          "position": 63,
          "iteration": 0,
          "httpRequestId": "edadd1c5-d009-496f-bad9-fd111453621e"
        },
        "item": {
          "id": "dc941bce-b7c0-4773-bfae-8c443464ee67",
          "name": "credentials_issue:credential.credentialSubject:string"
        },
        "response": {
          "id": "78007392-a8c5-4052-b173-538b5c87ec65",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 22,
          "responseSize": 185
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "60626f02-4d56-40ce-84a6-f51ce3817b52",
        "cursor": {
          "ref": "59d7e40b-3272-4886-b60e-f7eab07ba745",
          "length": 250,
          "cycles": 1,
          "position": 64,
          "iteration": 0,
          "httpRequestId": "b430b26c-5850-4030-9763-658f06bddfc5"
        },
        "item": {
          "id": "60626f02-4d56-40ce-84a6-f51ce3817b52",
          "name": "credentials_issue:credential.credentialSubject.id:array"
        },
        "response": {
          "id": "d119ae8f-b491-42f9-b4cb-62a95f0563cb",
          "status": "Created",
          "code": 201,
          "responseTime": 247,
          "responseSize": 702
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:65)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:65)"
            }
          }
        ]
      },
      {
        "id": "13516da9-3e63-4359-848a-77f8cd712dae",
        "cursor": {
          "ref": "2d8c1d21-d81e-465d-87a1-097d78d3c0e7",
          "length": 250,
          "cycles": 1,
          "position": 65,
          "iteration": 0,
          "httpRequestId": "f7166a50-9613-447f-9333-fdf0260e644b"
        },
        "item": {
          "id": "13516da9-3e63-4359-848a-77f8cd712dae",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy"
        },
        "response": {
          "id": "dcf5376a-b9e8-41e1-b7ff-4aca9dac072e",
          "status": "Created",
          "code": 201,
          "responseTime": 234,
          "responseSize": 688
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:66)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:66)"
            }
          }
        ]
      },
      {
        "id": "8c9aef9d-3787-4c0f-9142-0bd54774f229",
        "cursor": {
          "ref": "b253d505-e6b4-468d-b2eb-cb1f24284c51",
          "length": 250,
          "cycles": 1,
          "position": 66,
          "iteration": 0,
          "httpRequestId": "b155421d-433a-40e2-aa42-795c0c6e02ef"
        },
        "item": {
          "id": "8c9aef9d-3787-4c0f-9142-0bd54774f229",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 2"
        },
        "response": {
          "id": "0ffc14eb-0a3f-492f-9da6-66d81a6e534a",
          "status": "Created",
          "code": 201,
          "responseTime": 352,
          "responseSize": 685
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:67)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:67)"
            }
          }
        ]
      },
      {
        "id": "63b5da27-4014-4f1e-9f12-15d032526d4a",
        "cursor": {
          "ref": "1800fd86-61e1-457b-aea3-cc93f0e837ba",
          "length": 250,
          "cycles": 1,
          "position": 67,
          "iteration": 0,
          "httpRequestId": "dcbe3642-02e6-4fc1-856c-1cfe226c54e3"
        },
        "item": {
          "id": "63b5da27-4014-4f1e-9f12-15d032526d4a",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 3"
        },
        "response": {
          "id": "18069174-34eb-4409-80f0-39c2c60cd019",
          "status": "Created",
          "code": 201,
          "responseTime": 248,
          "responseSize": 687
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:68)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:68)"
            }
          }
        ]
      },
      {
        "id": "7db18d7e-54b7-4ab1-8dba-2d40baa4aeda",
        "cursor": {
          "ref": "2bc88c33-14b7-4e9a-a88c-ad4418d6310f",
          "length": 250,
          "cycles": 1,
          "position": 68,
          "iteration": 0,
          "httpRequestId": "fcc66399-ce4f-4a68-8fb9-3c1a603ec4f3"
        },
        "item": {
          "id": "7db18d7e-54b7-4ab1-8dba-2d40baa4aeda",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 4"
        },
        "response": {
          "id": "3ea5b7cc-271f-42b3-a902-e842a9547995",
          "status": "Created",
          "code": 201,
          "responseTime": 266,
          "responseSize": 685
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:69)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:69)"
            }
          }
        ]
      },
      {
        "id": "129221ce-86f7-4b60-b300-b71c2fd42dc2",
        "cursor": {
          "ref": "56b046c6-6054-42ae-8cc8-936ad0548f48",
          "length": 250,
          "cycles": 1,
          "position": 69,
          "iteration": 0,
          "httpRequestId": "0fbba7cb-be5c-4a62-b1e1-e4ed1610dd39"
        },
        "item": {
          "id": "129221ce-86f7-4b60-b300-b71c2fd42dc2",
          "name": "credentials_issue:options:missing"
        },
        "response": {
          "id": "8d8f7f32-e1ab-4977-b420-ee6c14f1cad0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 22,
          "responseSize": 116
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0d1c5bf5-61e9-4f7f-a13d-9a4e403bad54",
        "cursor": {
          "ref": "e127032a-61dd-4bf9-b8b5-bbda246e62c1",
          "length": 250,
          "cycles": 1,
          "position": 70,
          "iteration": 0,
          "httpRequestId": "bab547ca-1c0f-46de-9cea-a0516ed83b89"
        },
        "item": {
          "id": "0d1c5bf5-61e9-4f7f-a13d-9a4e403bad54",
          "name": "credentials_issue:options:array"
        },
        "response": {
          "id": "f4a62404-60fa-43e1-b873-8e1db67b23b2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 20,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "890fb7a8-4fa7-42ec-84d6-3d492bb88537",
        "cursor": {
          "ref": "f3acb12f-9b7e-4fac-95c1-79397a3d8b3b",
          "length": 250,
          "cycles": 1,
          "position": 71,
          "iteration": 0,
          "httpRequestId": "863d2d8a-a9dd-4cdd-a99b-2c8215762b48"
        },
        "item": {
          "id": "890fb7a8-4fa7-42ec-84d6-3d492bb88537",
          "name": "credentials_issue:options:boolean"
        },
        "response": {
          "id": "0ba465ea-0d73-409d-a2a1-52a64a4f55af",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 23,
          "responseSize": 157
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a232b3d5-a2e5-48f4-9433-0bf2279868b6",
        "cursor": {
          "ref": "c48ad591-2d55-40ef-8743-5f09ac6d0eb5",
          "length": 250,
          "cycles": 1,
          "position": 72,
          "iteration": 0,
          "httpRequestId": "daadf9b8-15ef-4215-8f89-099d84259f87"
        },
        "item": {
          "id": "a232b3d5-a2e5-48f4-9433-0bf2279868b6",
          "name": "credentials_issue:options:integer"
        },
        "response": {
          "id": "8b64d3ce-1e9a-42ce-a20e-62a9929323d6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 22,
          "responseSize": 157
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bfe61fb4-0ab8-48e6-922a-76a0eb406d3e",
        "cursor": {
          "ref": "704c40a5-8703-43ef-8fd9-9d0745b08940",
          "length": 250,
          "cycles": 1,
          "position": 73,
          "iteration": 0,
          "httpRequestId": "44bf9306-1ff7-4784-b525-1d0cb015cc7e"
        },
        "item": {
          "id": "bfe61fb4-0ab8-48e6-922a-76a0eb406d3e",
          "name": "credentials_issue:options:null"
        },
        "response": {
          "id": "42213ac4-24db-42ea-b6f4-bbf245ebfa43",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 24,
          "responseSize": 189
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c4bd78fe-fdf2-4722-b031-8a8f81b163b4",
        "cursor": {
          "ref": "6340e5c9-5075-4fc2-929a-ca4bd87b2fdd",
          "length": 250,
          "cycles": 1,
          "position": 74,
          "iteration": 0,
          "httpRequestId": "97a801a9-ceb3-41a3-a815-6b68c0160fa4"
        },
        "item": {
          "id": "c4bd78fe-fdf2-4722-b031-8a8f81b163b4",
          "name": "credentials_issue:options:string"
        },
        "response": {
          "id": "34ac2703-717a-468d-bba6-49d71ca7354d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 21,
          "responseSize": 189
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7e8b980a-b28b-4aa3-a543-8e062eb73af6",
        "cursor": {
          "ref": "29464b89-2c0b-4f23-ba25-9c3cde54a90e",
          "length": 250,
          "cycles": 1,
          "position": 75,
          "iteration": 0,
          "httpRequestId": "1f671b66-30f4-475c-a227-09d9cdab94a3"
        },
        "item": {
          "id": "7e8b980a-b28b-4aa3-a543-8e062eb73af6",
          "name": "credentials_issue:options.type:missing"
        },
        "response": {
          "id": "f1555dc6-b004-4cbc-ab12-f884686cae29",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 24,
          "responseSize": 278
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1da6cb6e-8cf0-4b87-9581-37c2d8504f68",
        "cursor": {
          "ref": "6a7dbaac-b039-4715-80d2-abb7212219df",
          "length": 250,
          "cycles": 1,
          "position": 76,
          "iteration": 0,
          "httpRequestId": "c3fb733a-eeae-4893-94ba-e82984af095e"
        },
        "item": {
          "id": "1da6cb6e-8cf0-4b87-9581-37c2d8504f68",
          "name": "credentials_issue:options.type:array"
        },
        "response": {
          "id": "a597bfc3-591a-42a7-9af1-9c09b80442fc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c5b35038-bb3a-4cab-b58f-2807f59740c1",
        "cursor": {
          "ref": "248e49ba-d749-4852-bf51-5bfb63c854a3",
          "length": 250,
          "cycles": 1,
          "position": 77,
          "iteration": 0,
          "httpRequestId": "1ebe7fe0-50af-4c8c-be05-256d2e79ee24"
        },
        "item": {
          "id": "c5b35038-bb3a-4cab-b58f-2807f59740c1",
          "name": "credentials_issue:options.type:boolean"
        },
        "response": {
          "id": "81cc5124-15c6-40f2-8706-44fce3a0991f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 24,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "924a6e46-1fa2-4eda-b6d2-c9494191dc77",
        "cursor": {
          "ref": "0601486d-7f43-4709-9bbe-e86eba767a07",
          "length": 250,
          "cycles": 1,
          "position": 78,
          "iteration": 0,
          "httpRequestId": "eb1a1d59-341c-4526-b165-82c7f160846d"
        },
        "item": {
          "id": "924a6e46-1fa2-4eda-b6d2-c9494191dc77",
          "name": "credentials_issue:options.type:integer"
        },
        "response": {
          "id": "ccd12578-03f9-4ae2-8d81-c077c910c8c6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 72,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "42a99f13-8e7d-4822-8276-df2fa0606269",
        "cursor": {
          "ref": "c36f5fd5-d043-4abc-ab0d-3b31b3bbf338",
          "length": 250,
          "cycles": 1,
          "position": 79,
          "iteration": 0,
          "httpRequestId": "23ffc0bb-7cc5-49ea-867d-924e6bd3c0ff"
        },
        "item": {
          "id": "42a99f13-8e7d-4822-8276-df2fa0606269",
          "name": "credentials_issue:options.type:null"
        },
        "response": {
          "id": "d2607d1c-bfa0-4cc6-a989-d8b8c3b891d3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 23,
          "responseSize": 278
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ef7f9d95-0535-4f69-8f50-ff8938e62a89",
        "cursor": {
          "ref": "7a9529d2-aa12-41a5-9389-4672357a4c49",
          "length": 250,
          "cycles": 1,
          "position": 80,
          "iteration": 0,
          "httpRequestId": "7aa6480f-c126-4396-b789-50e03c09d6dd"
        },
        "item": {
          "id": "ef7f9d95-0535-4f69-8f50-ff8938e62a89",
          "name": "credentials_issue:options.type:object"
        },
        "response": {
          "id": "d8b46531-ec73-4e2b-b25f-773bdc359a63",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "846c6b22-2f16-41e4-9d1a-556c147fc23b",
        "cursor": {
          "ref": "189e8a9f-2ca1-4741-b86e-13739bd0e106",
          "length": 250,
          "cycles": 1,
          "position": 81,
          "iteration": 0,
          "httpRequestId": "471603ac-96ea-4e1c-b917-9c7647775749"
        },
        "item": {
          "id": "846c6b22-2f16-41e4-9d1a-556c147fc23b",
          "name": "credentials_issue:options.type:invalid_value"
        },
        "response": {
          "id": "e85207cf-a4a9-4245-ab83-4d5eeb4cdeda",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 23,
          "responseSize": 207
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "61be0a39-f90e-4910-b801-27df991abf10",
        "cursor": {
          "ref": "ee785081-9a66-4184-ae0e-e4112366ddad",
          "length": 250,
          "cycles": 1,
          "position": 82,
          "iteration": 0,
          "httpRequestId": "dce8604c-a440-4b33-acb4-45409c3ef81d"
        },
        "item": {
          "id": "61be0a39-f90e-4910-b801-27df991abf10",
          "name": "credentials_issue:options.created:array"
        },
        "response": {
          "id": "f1c61016-eb11-454d-87d3-e380bcb052de",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 25,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "39ae9413-7366-4cc9-9e08-f6e743dcb75d",
        "cursor": {
          "ref": "bd42ff18-bde9-4cb5-81b4-21a0a18f81ce",
          "length": 250,
          "cycles": 1,
          "position": 83,
          "iteration": 0,
          "httpRequestId": "e5e242f7-6ed3-44fa-8f1e-7e9c09bde53b"
        },
        "item": {
          "id": "39ae9413-7366-4cc9-9e08-f6e743dcb75d",
          "name": "credentials_issue:options.created:boolean"
        },
        "response": {
          "id": "0e2d0833-aa47-4a72-a91a-e41a38c97f1f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 22,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7fea3b40-29b0-461c-93e0-978b46a86ecb",
        "cursor": {
          "ref": "6672dee0-3624-4415-b651-fa43b13cadd9",
          "length": 250,
          "cycles": 1,
          "position": 84,
          "iteration": 0,
          "httpRequestId": "49c2e1f4-6bdf-40b3-a760-8716baadc9c4"
        },
        "item": {
          "id": "7fea3b40-29b0-461c-93e0-978b46a86ecb",
          "name": "credentials_issue:options.created:integer"
        },
        "response": {
          "id": "1fe0d700-3dc9-452e-9deb-865cb49e6df4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 26,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9dd5b413-acaf-49e6-8ab6-fc97a506a0a0",
        "cursor": {
          "ref": "f2f86588-b39b-40d4-87f3-82206a821f29",
          "length": 250,
          "cycles": 1,
          "position": 85,
          "iteration": 0,
          "httpRequestId": "d9d5abb2-89ff-43a0-9cf6-1d885c14edc1"
        },
        "item": {
          "id": "9dd5b413-acaf-49e6-8ab6-fc97a506a0a0",
          "name": "credentials_issue:options.created:null"
        },
        "response": {
          "id": "e70bfd67-2a1d-4e03-8030-55f2e57e21af",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 24,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3c1f61fb-7d59-48c8-b1d3-725ee60225fb",
        "cursor": {
          "ref": "8c8c87aa-d140-4f29-9bcf-95e86d2dccf7",
          "length": 250,
          "cycles": 1,
          "position": 86,
          "iteration": 0,
          "httpRequestId": "75fba7d3-3e6d-4188-bbeb-50969fd74523"
        },
        "item": {
          "id": "3c1f61fb-7d59-48c8-b1d3-725ee60225fb",
          "name": "credentials_issue:options.created:object"
        },
        "response": {
          "id": "d78d9814-986e-4ec4-9a80-63695881931e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 21,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1c0c508b-69c8-4475-ac4a-a4d09c0cdbb2",
        "cursor": {
          "ref": "d49bc5a4-7b9f-4731-a5a3-3bb52acfbe33",
          "length": 250,
          "cycles": 1,
          "position": 87,
          "iteration": 0,
          "httpRequestId": "aed78a58-2eaf-43d5-8ea3-9b841f1fbe19"
        },
        "item": {
          "id": "1c0c508b-69c8-4475-ac4a-a4d09c0cdbb2",
          "name": "credentials_issue:options.created:invalid"
        },
        "response": {
          "id": "284a70fb-4349-473f-8110-6fb4269ed4ee",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7918a014-9754-4c63-b76c-8e7872c31436",
        "cursor": {
          "ref": "e7bdba0a-ed39-47e6-8d32-4aa16ca4dce6",
          "length": 250,
          "cycles": 1,
          "position": 88,
          "iteration": 0,
          "httpRequestId": "1be30d23-44c3-4016-b123-30d48e46f727"
        },
        "item": {
          "id": "7918a014-9754-4c63-b76c-8e7872c31436",
          "name": "credentials_issue:options.credentialStatus:array"
        },
        "response": {
          "id": "f7aa2064-15ba-4d67-b26f-5db77c3168bd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 25,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4745da26-3407-446b-b923-d06bac9541fa",
        "cursor": {
          "ref": "2af5c59d-2236-4c66-9b68-4f602da4341b",
          "length": 250,
          "cycles": 1,
          "position": 89,
          "iteration": 0,
          "httpRequestId": "30dcfdd4-f707-4018-9fba-f2fc3bd66aef"
        },
        "item": {
          "id": "4745da26-3407-446b-b923-d06bac9541fa",
          "name": "credentials_issue:options.credentialStatus:boolean"
        },
        "response": {
          "id": "91cfad9d-5af8-40f0-a31d-ef408179e7ef",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8c66a708-378b-420c-a4c0-2eb7e1d0100f",
        "cursor": {
          "ref": "74c47126-d359-4c51-b480-d98e5f8f2e6a",
          "length": 250,
          "cycles": 1,
          "position": 90,
          "iteration": 0,
          "httpRequestId": "2274e9aa-cd9e-4985-bb53-b9875b135cc4"
        },
        "item": {
          "id": "8c66a708-378b-420c-a4c0-2eb7e1d0100f",
          "name": "credentials_issue:options.credentialStatus:integer"
        },
        "response": {
          "id": "d8296d04-b016-45f6-9093-4e31da9d9de2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 25,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ea0e5b3f-9029-4a3c-9f75-f8be70ad7c20",
        "cursor": {
          "ref": "9f1022e6-7e5e-42ed-a234-54005547aa8d",
          "length": 250,
          "cycles": 1,
          "position": 91,
          "iteration": 0,
          "httpRequestId": "1a8706c5-41e0-44bc-bb86-fe72a8490463"
        },
        "item": {
          "id": "ea0e5b3f-9029-4a3c-9f75-f8be70ad7c20",
          "name": "credentials_issue:options.credentialStatus:null"
        },
        "response": {
          "id": "be885a85-eb48-490c-be0c-3921cc57a9f1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 22,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ff049fc0-2e10-4afd-8dd3-79b35d656b2b",
        "cursor": {
          "ref": "1f0aa5d4-35ca-4ac4-9596-e3e397700d0b",
          "length": 250,
          "cycles": 1,
          "position": 92,
          "iteration": 0,
          "httpRequestId": "4ed5fe44-01f9-4245-86db-0ae018fe8879"
        },
        "item": {
          "id": "ff049fc0-2e10-4afd-8dd3-79b35d656b2b",
          "name": "credentials_issue:options.credentialStatus:string"
        },
        "response": {
          "id": "d1804ca8-72f5-4bf8-8b31-7d5a8bb6bac2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 22,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7c61db04-b4b8-4ed8-bc87-b3e7ab63baa3",
        "cursor": {
          "ref": "d95c9739-8e3c-4de6-b4fe-c5f9ecf24263",
          "length": 250,
          "cycles": 1,
          "position": 93,
          "iteration": 0,
          "httpRequestId": "45b6af31-a8ce-4674-8bea-abfc63fe7480"
        },
        "item": {
          "id": "7c61db04-b4b8-4ed8-bc87-b3e7ab63baa3",
          "name": "credentials_issue:options.credentialStatus.type:missing"
        },
        "response": {
          "id": "5a327142-27f9-4279-beac-9b9523c8204b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 19,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "46db05c3-95e5-4e7b-9f91-83138301955a",
        "cursor": {
          "ref": "b99c764e-92f9-4e89-ab55-9f3ab9c4c1a7",
          "length": 250,
          "cycles": 1,
          "position": 94,
          "iteration": 0,
          "httpRequestId": "92e5d5ec-bef5-4694-932a-2a51678f2678"
        },
        "item": {
          "id": "46db05c3-95e5-4e7b-9f91-83138301955a",
          "name": "credentials_issue:options.credentialStatus.type:array"
        },
        "response": {
          "id": "42334991-687e-4797-9b67-1834258e6ded",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 20,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7a818056-a25c-402d-8483-06f648f39c43",
        "cursor": {
          "ref": "69c5832d-3aa9-48da-afff-e46b7bf259be",
          "length": 250,
          "cycles": 1,
          "position": 95,
          "iteration": 0,
          "httpRequestId": "bf26b20f-5b7d-4e0f-adf8-8e66d36e16cc"
        },
        "item": {
          "id": "7a818056-a25c-402d-8483-06f648f39c43",
          "name": "credentials_issue:options.credentialStatus.type:boolean"
        },
        "response": {
          "id": "40af541c-8260-44e0-b883-0616510ac390",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 25,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "34487f9a-06e6-4ece-a50f-3c86ccda6273",
        "cursor": {
          "ref": "d5079437-95c5-4d9f-955f-4d4bd6f24725",
          "length": 250,
          "cycles": 1,
          "position": 96,
          "iteration": 0,
          "httpRequestId": "cb660b4d-7de8-425e-960f-d86052291961"
        },
        "item": {
          "id": "34487f9a-06e6-4ece-a50f-3c86ccda6273",
          "name": "credentials_issue:options.credentialStatus.type:integer"
        },
        "response": {
          "id": "f15b2e94-87d9-4df3-ba94-54d954a6e485",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 24,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2d14901f-d37a-47df-a0f2-27bf896d4b6c",
        "cursor": {
          "ref": "6c4bfdec-02f6-40fc-b0e2-30327f3c56c0",
          "length": 250,
          "cycles": 1,
          "position": 97,
          "iteration": 0,
          "httpRequestId": "d628f1a8-27f5-472c-a7d2-a7597d4ff7b7"
        },
        "item": {
          "id": "2d14901f-d37a-47df-a0f2-27bf896d4b6c",
          "name": "credentials_issue:options.credentialStatus.type:null"
        },
        "response": {
          "id": "3938d5b3-22e5-4dc7-be70-67ea365daf89",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 26,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "505fd920-0ba7-4c9a-8140-f0d95888977b",
        "cursor": {
          "ref": "29408c4d-fc26-40dd-91c3-d24f95c9a6e2",
          "length": 250,
          "cycles": 1,
          "position": 98,
          "iteration": 0,
          "httpRequestId": "4bd7aea1-39e5-4ae0-bca8-abb7e913f9a9"
        },
        "item": {
          "id": "505fd920-0ba7-4c9a-8140-f0d95888977b",
          "name": "credentials_issue:options.credentialStatus.type:null Copy"
        },
        "response": {
          "id": "f50596e2-4476-40f5-bd99-55cd4d3904a9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "214ed183-3f6f-4039-a630-3d806e3cf8d7",
        "cursor": {
          "ref": "c183a295-3ef6-4fff-855d-66443ecee70d",
          "length": 250,
          "cycles": 1,
          "position": 99,
          "iteration": 0,
          "httpRequestId": "99e4b225-b7cd-4455-a46c-5184cea8e8c0"
        },
        "item": {
          "id": "214ed183-3f6f-4039-a630-3d806e3cf8d7",
          "name": "credentials_issue:options.credentialStatus.type:invalid"
        },
        "response": {
          "id": "9fdf9135-4e83-4e31-9c06-f23c35d94452",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 24,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "50580b53-8ddf-4e49-8107-f97413ef01db",
        "cursor": {
          "ref": "e20f5e3d-53f0-4abe-bcc1-afda8cceb517",
          "length": 250,
          "cycles": 1,
          "position": 100,
          "iteration": 0,
          "httpRequestId": "2a91a02b-bb33-4fa6-9c5a-4db61a7f68e6"
        },
        "item": {
          "id": "50580b53-8ddf-4e49-8107-f97413ef01db",
          "name": "credentials_issue:missing_auth"
        },
        "response": {
          "id": "a62b252d-955f-41f2-abbf-61c3b6a41c2b",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 18,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4c6ac64c-0507-461f-a1c9-e775ba955437",
        "cursor": {
          "ref": "87fde20c-9b3f-47b0-90fb-e7e15e3a0017",
          "length": 250,
          "cycles": 1,
          "position": 101,
          "iteration": 0,
          "httpRequestId": "d6589935-5706-46cd-b5a3-4d2808d573fc"
        },
        "item": {
          "id": "4c6ac64c-0507-461f-a1c9-e775ba955437",
          "name": "credentials_issue.credential.issuer:dup"
        },
        "response": {
          "id": "4b9cfdf8-8189-4d5f-9af3-2c2fda19f7d0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 23,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 400",
              "stack": "AssertionError: expected response to have status code 201 but got 400\n   at Object.eval sandbox-script.js:1:102)"
            }
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 1,
              "test": "response issuer matches request credential.issuer",
              "message": "Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.",
              "stack": "TypeError: Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.\n   at Object.eval sandbox-script.js:2:102)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:3:102)"
            }
          }
        ]
      },
      {
        "id": "30b43c8a-f4c1-4073-8b32-8b3f57fded4d",
        "cursor": {
          "ref": "b9eeb610-78ab-4930-ab97-ef4ef19cb517",
          "length": 250,
          "cycles": 1,
          "position": 102,
          "iteration": 0,
          "httpRequestId": "751f5f7b-abf7-4985-8496-a825b4dc6994"
        },
        "item": {
          "id": "30b43c8a-f4c1-4073-8b32-8b3f57fded4d",
          "name": "credentials_issue"
        },
        "response": {
          "id": "2bb594ff-5ee0-4ed1-906d-873a163376bc",
          "status": "Created",
          "code": 201,
          "responseTime": 244,
          "responseSize": 689
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false
          },
          {
            "assertion": "response issuanceDate matches request credential.issuanceDate",
            "skipped": false
          },
          {
            "assertion": "response proof.created is close to 'now'",
            "skipped": false
          }
        ]
      },
      {
        "id": "0d042a1a-f894-4cad-8a26-cba69c556167",
        "cursor": {
          "ref": "a41f7f4d-4614-4a9e-b5e7-7f5cd1173dfb",
          "length": 250,
          "cycles": 1,
          "position": 103,
          "iteration": 0,
          "httpRequestId": "bb20ae27-5de7-4886-be1c-addc95d12704"
        },
        "item": {
          "id": "0d042a1a-f894-4cad-8a26-cba69c556167",
          "name": "credentials_issue:credential.opt.id"
        },
        "response": {
          "id": "85af2363-47a4-4b88-853b-5ab5ae64ffe2",
          "status": "Created",
          "code": 201,
          "responseTime": 239,
          "responseSize": 643
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verifiableCredential.id matches request credential.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "e25edf8b-672e-403d-8005-a8c2fc40382f",
        "cursor": {
          "ref": "1ee6b474-6d06-4be9-b784-3ef034ff0d41",
          "length": 250,
          "cycles": 1,
          "position": 104,
          "iteration": 0,
          "httpRequestId": "85e27f2c-3322-4179-959a-deef6c83cc2b"
        },
        "item": {
          "id": "e25edf8b-672e-403d-8005-a8c2fc40382f",
          "name": "credentials_issue:credential:alt.issuer.object"
        },
        "response": {
          "id": "5983fc6a-9812-453f-8b44-2333dcfc9312",
          "status": "Created",
          "code": 201,
          "responseTime": 233,
          "responseSize": 696
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "556ec3c1-0ccc-45a5-a794-ee69c7f08910",
        "cursor": {
          "ref": "f30e44ac-3bc0-48e8-88f3-23ebe2fa4080",
          "length": 250,
          "cycles": 1,
          "position": 105,
          "iteration": 0,
          "httpRequestId": "49410613-973e-4a0f-a031-113738a4d993"
        },
        "item": {
          "id": "556ec3c1-0ccc-45a5-a794-ee69c7f08910",
          "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id"
        },
        "response": {
          "id": "ef3d40ab-8dc7-4e22-8668-5e1d9ed5bc0d",
          "status": "Created",
          "code": 201,
          "responseTime": 233,
          "responseSize": 700
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response credentialSubject.id matches request credential.credentialSubject.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "30fd0376-a921-4992-8f99-f75fbe51dad7",
        "cursor": {
          "ref": "d03171b6-cdf6-4868-8da1-64071a0add54",
          "length": 250,
          "cycles": 1,
          "position": 106,
          "iteration": 0,
          "httpRequestId": "20ef257a-0ade-4000-83a3-f4d547827009"
        },
        "item": {
          "id": "30fd0376-a921-4992-8f99-f75fbe51dad7",
          "name": "credentials_issue:options:opt.created"
        },
        "response": {
          "id": "57bdad60-10e5-4e8a-9237-d543757973c4",
          "status": "Created",
          "code": 201,
          "responseTime": 312,
          "responseSize": 689
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response proof.created matches request options.created",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response proof.created matches request options.created",
              "message": "expected '2024-04-29T00:36:35.122Z' to equal '2006-01-02T15:04:05Z'",
              "stack": "AssertionError: expected '2024-04-29T00:36:35.122Z' to equal '2006-01-02T15:04:05Z'\n   at Object.eval sandbox-script.js:3:107)"
            }
          }
        ]
      },
      {
        "id": "824faeb4-0ccd-4d44-8aa8-8cbd41e383fe",
        "cursor": {
          "ref": "80616510-fef3-498d-bcaa-08ddf2c640a0",
          "length": 250,
          "cycles": 1,
          "position": 107,
          "iteration": 0,
          "httpRequestId": "4ccd65c0-a537-4733-9ff7-5428dceb4c3d"
        },
        "item": {
          "id": "824faeb4-0ccd-4d44-8aa8-8cbd41e383fe",
          "name": "credentials_issue:options:opt.credentialStatus"
        },
        "response": {
          "id": "31580229-9ce8-47ef-aaf9-67286e41df74",
          "status": "Created",
          "code": 201,
          "responseTime": 264,
          "responseSize": 689
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6e610e53-8eb3-4523-8f61-69efdd4d3215",
        "cursor": {
          "ref": "0ee6daa5-cc96-42d4-a216-879f6818c4a8",
          "length": 250,
          "cycles": 1,
          "position": 108,
          "iteration": 0,
          "httpRequestId": "bdfcf72e-2401-42bc-8ca9-4da5face944d"
        },
        "item": {
          "id": "6e610e53-8eb3-4523-8f61-69efdd4d3215",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "ff1a1bd1-9d28-4560-a796-cfada2becaae",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 25,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "57dc40e9-918b-4486-97d1-2b5497f7fb98",
        "cursor": {
          "ref": "83915b45-1927-4f17-be8c-4710dd072881",
          "length": 250,
          "cycles": 1,
          "position": 109,
          "iteration": 0,
          "httpRequestId": "a5ed8b88-7852-493c-b4e6-1d4158205f01"
        },
        "item": {
          "id": "57dc40e9-918b-4486-97d1-2b5497f7fb98",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "f5fba3ce-cb55-449b-a4ab-ba4f2d146903",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 22,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "895c0658-6fe1-47fe-a7fc-0ea3e366c000",
        "cursor": {
          "ref": "a44eb1ff-ccb6-4276-9639-9d783030ceb1",
          "length": 250,
          "cycles": 1,
          "position": 110,
          "iteration": 0,
          "httpRequestId": "93398c53-78dc-447a-b455-a8d2bd71bbec"
        },
        "item": {
          "id": "895c0658-6fe1-47fe-a7fc-0ea3e366c000",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "c15781d6-f3aa-427d-adee-c4768a619240",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 23,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "989838c3-4c74-4650-a073-557827b5b954",
        "cursor": {
          "ref": "1d697aa8-4b19-4187-9717-f5e91ce45a6c",
          "length": 250,
          "cycles": 1,
          "position": 111,
          "iteration": 0,
          "httpRequestId": "1ef7e2b9-a9eb-4c1f-b229-2568c9b46201"
        },
        "item": {
          "id": "989838c3-4c74-4650-a073-557827b5b954",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "0d826a4a-8fe0-42ac-be3e-620c495b793c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 22,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7f3fb940-d88a-45e4-b49d-22b36e0accb2",
        "cursor": {
          "ref": "e29395f2-4d5c-4724-b11d-02ccc6d11e35",
          "length": 250,
          "cycles": 1,
          "position": 112,
          "iteration": 0,
          "httpRequestId": "b833096f-6e64-497d-a2ab-5ee6fd320208"
        },
        "item": {
          "id": "7f3fb940-d88a-45e4-b49d-22b36e0accb2",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "4476ded7-03f0-4910-9b23-e06570fcb0f7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 21,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0ced8d9b-0d1f-418f-a081-23d01c639a89",
        "cursor": {
          "ref": "f46a80f4-fcda-4d02-aee1-75c3b442b951",
          "length": 250,
          "cycles": 1,
          "position": 113,
          "iteration": 0,
          "httpRequestId": "6b5ad761-e9ae-418f-901b-11d93ac1ad79"
        },
        "item": {
          "id": "0ced8d9b-0d1f-418f-a081-23d01c639a89",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "cb8d418c-4efe-4ac7-b7e9-275bb8d92e10",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 23,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9fe142a0-0fc8-4a95-bb74-cdf03a0934d2",
        "cursor": {
          "ref": "b20172a0-822d-4141-aba0-d5456d8ea506",
          "length": 250,
          "cycles": 1,
          "position": 114,
          "iteration": 0,
          "httpRequestId": "85aff899-ca24-4959-b5bd-c21be1a4d94d"
        },
        "item": {
          "id": "9fe142a0-0fc8-4a95-bb74-cdf03a0934d2",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "68adb2ab-bcd0-47df-bf17-fa900a66d20d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 23,
          "responseSize": 146
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "01974d6b-d84c-424c-a8df-5810e020c49d",
        "cursor": {
          "ref": "91e580dc-83fd-4372-8b56-3aca4f54c49d",
          "length": 250,
          "cycles": 1,
          "position": 115,
          "iteration": 0,
          "httpRequestId": "9d115dd4-3cb9-4918-8a9c-4491e787b990"
        },
        "item": {
          "id": "01974d6b-d84c-424c-a8df-5810e020c49d",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "4a144206-6bc7-46cd-9219-1108cf0f329a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 21,
          "responseSize": 228
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9afd56b5-757d-4eb1-a458-fa3602cde765",
        "cursor": {
          "ref": "6dd02c43-3821-4ac0-85a8-10cc6970ebf3",
          "length": 250,
          "cycles": 1,
          "position": 116,
          "iteration": 0,
          "httpRequestId": "661bccf8-709a-43f0-ae24-f6eea452fd27"
        },
        "item": {
          "id": "9afd56b5-757d-4eb1-a458-fa3602cde765",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "854da1b6-e395-4a05-b6fc-17f4354807f2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 22,
          "responseSize": 228
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5e256d39-48dc-4cbc-af10-ec39c00dda87",
        "cursor": {
          "ref": "03f7b85f-bbf1-4441-b01e-4dd2658c8771",
          "length": 250,
          "cycles": 1,
          "position": 117,
          "iteration": 0,
          "httpRequestId": "0bc11792-f6cc-4996-afdb-256edd27d8cd"
        },
        "item": {
          "id": "5e256d39-48dc-4cbc-af10-ec39c00dda87",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "8318eafe-51b2-476a-970f-e2f43e4aace4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 24,
          "responseSize": 228
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d967b7ac-308d-4724-a3af-0089fafc65c0",
        "cursor": {
          "ref": "519225b9-d413-4b12-9e34-ff93e079bbf9",
          "length": 250,
          "cycles": 1,
          "position": 118,
          "iteration": 0,
          "httpRequestId": "c8ccbbd9-fa3e-4a77-919e-7b61e577f1db"
        },
        "item": {
          "id": "d967b7ac-308d-4724-a3af-0089fafc65c0",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "76e18b52-772f-47d1-accc-8806acbd7f3d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 23,
          "responseSize": 122
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b3046e77-7483-4206-9992-35c3cf34060e",
        "cursor": {
          "ref": "a0e0610b-e13c-4c22-86b3-947b9f9df70c",
          "length": 250,
          "cycles": 1,
          "position": 119,
          "iteration": 0,
          "httpRequestId": "390e69ad-2bbb-4349-93c2-e734d4801f02"
        },
        "item": {
          "id": "b3046e77-7483-4206-9992-35c3cf34060e",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "b45d2a5e-2eae-41df-b66f-66ef7f0b749d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 228
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e24b457a-c472-480c-acba-90a15e112e1e",
        "cursor": {
          "ref": "0eb09284-8059-4ea4-9df0-e65554d58e88",
          "length": 250,
          "cycles": 1,
          "position": 120,
          "iteration": 0,
          "httpRequestId": "25b13f8a-d304-4fc0-9e70-2a67cba5d452"
        },
        "item": {
          "id": "e24b457a-c472-480c-acba-90a15e112e1e",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "7497cfbe-7018-480f-8eed-9122741cb42d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 20,
          "responseSize": 194
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "de3a9d6e-3ac8-4b61-93f0-63f1acd2341c",
        "cursor": {
          "ref": "60f4e154-3802-421c-885f-0954ee63ecda",
          "length": 250,
          "cycles": 1,
          "position": 121,
          "iteration": 0,
          "httpRequestId": "f9ad911a-92f8-4139-b88b-5d9110279229"
        },
        "item": {
          "id": "de3a9d6e-3ac8-4b61-93f0-63f1acd2341c",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "0dff209c-d381-42c0-8d35-660c02b2d7ff",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 49,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:122)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:122)"
            }
          }
        ]
      },
      {
        "id": "7ae5ef78-dfd9-463d-88b4-eebbe892b2e0",
        "cursor": {
          "ref": "31dd288f-86e1-4a01-988a-49e49d9ee5ee",
          "length": 250,
          "cycles": 1,
          "position": 122,
          "iteration": 0,
          "httpRequestId": "f4421dc8-b9d1-43a3-a6f8-e2a71c9907c5"
        },
        "item": {
          "id": "7ae5ef78-dfd9-463d-88b4-eebbe892b2e0",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "96df421a-b3e6-49a5-b3eb-fe9a7f7bb10c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 22,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5e938d49-6496-4d16-ac24-a00dda597816",
        "cursor": {
          "ref": "4639b597-1216-45cc-a763-04fdf7200b0c",
          "length": 250,
          "cycles": 1,
          "position": 123,
          "iteration": 0,
          "httpRequestId": "b235d955-5a50-4239-9603-30a122f79b63"
        },
        "item": {
          "id": "5e938d49-6496-4d16-ac24-a00dda597816",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "5c1bd68b-29a9-4d1a-8245-3754f7f00ce9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 23,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "189b7b05-2f99-472e-97e1-f9fa301a0e3f",
        "cursor": {
          "ref": "2a03f3bb-9097-4638-b0c8-6dcc4316ccc6",
          "length": 250,
          "cycles": 1,
          "position": 124,
          "iteration": 0,
          "httpRequestId": "f7fbebdc-430a-4a4e-8a8c-3d69160bcbaa"
        },
        "item": {
          "id": "189b7b05-2f99-472e-97e1-f9fa301a0e3f",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "381e5224-f21c-4e70-99d7-176689d2afb6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 22,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "29d273a0-bb45-4a2c-84ea-a48e820e506c",
        "cursor": {
          "ref": "94fe4a92-0dce-4f51-a0b7-5287d676bb70",
          "length": 250,
          "cycles": 1,
          "position": 125,
          "iteration": 0,
          "httpRequestId": "121c3994-1670-4c44-9ceb-848ce226e8f8"
        },
        "item": {
          "id": "29d273a0-bb45-4a2c-84ea-a48e820e506c",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "6d8c65a7-2c43-434f-ab93-a74847909915",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 24,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a4066ce3-be79-46ff-b7cf-03d51138b6d6",
        "cursor": {
          "ref": "6973815c-bf01-4b85-831b-fe436b9b95e3",
          "length": 250,
          "cycles": 1,
          "position": 126,
          "iteration": 0,
          "httpRequestId": "ae8a8faf-3b44-4715-8a7f-107440d80fe3"
        },
        "item": {
          "id": "a4066ce3-be79-46ff-b7cf-03d51138b6d6",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "c6d2aa18-6ba8-47dd-b73b-cdce2690cf44",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 23,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "87b4169f-9a54-48e6-8309-3f9005aa7665",
        "cursor": {
          "ref": "eb1ebe91-fb95-494c-b9dc-411745691524",
          "length": 250,
          "cycles": 1,
          "position": 127,
          "iteration": 0,
          "httpRequestId": "9c05cb0c-c7a1-4521-aaca-b5081dc96c35"
        },
        "item": {
          "id": "87b4169f-9a54-48e6-8309-3f9005aa7665",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "4e1e15f7-4189-44ce-bd1e-db0de23ed8e0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 20,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "aeefa475-05ed-4726-9e29-d47979080ae8",
        "cursor": {
          "ref": "9b68bacf-570a-46ff-8aac-43acfe27c71a",
          "length": 250,
          "cycles": 1,
          "position": 128,
          "iteration": 0,
          "httpRequestId": "8f4c16c3-490d-4c8e-a8b3-0398f5aeb398"
        },
        "item": {
          "id": "aeefa475-05ed-4726-9e29-d47979080ae8",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "6e1fce34-857f-4b0c-93bd-761c3101fdc2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 25,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d82358df-42d8-477f-a3f0-cd87c9eb8623",
        "cursor": {
          "ref": "7d38aeea-c705-4c53-914f-9b0da9aa2e4a",
          "length": 250,
          "cycles": 1,
          "position": 129,
          "iteration": 0,
          "httpRequestId": "cb10cd48-2962-4ab2-80b1-71a04c7682ad"
        },
        "item": {
          "id": "d82358df-42d8-477f-a3f0-cd87c9eb8623",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "e60c0af5-51c2-44c3-abd9-0770d1c3d4ff",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 19,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b53c6544-5f57-4762-81a5-8dfdf1d9e91c",
        "cursor": {
          "ref": "626015fa-4b28-45e7-b791-227192a05761",
          "length": 250,
          "cycles": 1,
          "position": 130,
          "iteration": 0,
          "httpRequestId": "152327fa-df5f-4286-9ced-06998b141c1f"
        },
        "item": {
          "id": "b53c6544-5f57-4762-81a5-8dfdf1d9e91c",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "e7932700-34f3-411e-a182-0e47864951b1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fe4f2760-1d8e-4870-8e21-b29b79621e85",
        "cursor": {
          "ref": "1500a613-9d53-4e9a-8f03-9bdff43facec",
          "length": 250,
          "cycles": 1,
          "position": 131,
          "iteration": 0,
          "httpRequestId": "1071d9cf-f161-4cc6-b6c5-ca56d02f6694"
        },
        "item": {
          "id": "fe4f2760-1d8e-4870-8e21-b29b79621e85",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "c4c8a15a-b29a-4128-bf07-2e0f76849c93",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 22,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b5cb618c-e1ee-487b-a2b4-4da45c725111",
        "cursor": {
          "ref": "3f27de83-248b-45bc-9b00-1e5650409c91",
          "length": 250,
          "cycles": 1,
          "position": 132,
          "iteration": 0,
          "httpRequestId": "97d02de6-8404-40e7-b90f-02c0c066fdbf"
        },
        "item": {
          "id": "b5cb618c-e1ee-487b-a2b4-4da45c725111",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "deff7017-4035-44d3-9667-34f494445bd2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 22,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2105752d-f4e3-4cc2-aa02-ce2117b69ce1",
        "cursor": {
          "ref": "b3564b91-c37e-49c5-956d-cb19a337d6ea",
          "length": 250,
          "cycles": 1,
          "position": 133,
          "iteration": 0,
          "httpRequestId": "5f848e82-3aac-4f8a-b3fe-f2bbfd55a426"
        },
        "item": {
          "id": "2105752d-f4e3-4cc2-aa02-ce2117b69ce1",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "77d44112-ed69-4443-a8c4-d0bde41d584d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 20,
          "responseSize": 221
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "594a5331-2a78-404a-bcf3-fe141f18ce51",
        "cursor": {
          "ref": "ba6a3966-5b5d-46fa-8db9-c990937ca95f",
          "length": 250,
          "cycles": 1,
          "position": 134,
          "iteration": 0,
          "httpRequestId": "0405fb0d-a430-4c5c-a685-fa3de30b7860"
        },
        "item": {
          "id": "594a5331-2a78-404a-bcf3-fe141f18ce51",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "b7a2c0c3-4f32-462f-b9fc-3af612f6d500",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 26,
          "responseSize": 171
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "63b28568-80c3-43e1-a66b-e95af658ed4d",
        "cursor": {
          "ref": "9b2ab527-1a3d-41f1-832b-16b6c2c41aa9",
          "length": 250,
          "cycles": 1,
          "position": 135,
          "iteration": 0,
          "httpRequestId": "58269425-1093-47ba-a3ab-1a794a3cd87a"
        },
        "item": {
          "id": "63b28568-80c3-43e1-a66b-e95af658ed4d",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "44fdd14c-0977-4c0b-b71d-8c54bd576915",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 20,
          "responseSize": 171
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "62507136-1294-4542-86c3-9b227dafe573",
        "cursor": {
          "ref": "c3453b55-36ec-4d71-b0cc-588f74142470",
          "length": 250,
          "cycles": 1,
          "position": 136,
          "iteration": 0,
          "httpRequestId": "f17f028e-87fc-4f48-8cfb-24eb13425bd5"
        },
        "item": {
          "id": "62507136-1294-4542-86c3-9b227dafe573",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "0ec33c68-c197-4af2-8e7c-66bf92fdd07b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 20,
          "responseSize": 171
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "456804f8-1f12-47ae-ac2c-b43e0b6c84d4",
        "cursor": {
          "ref": "5dd1b27a-a393-41c3-9572-880036e3b656",
          "length": 250,
          "cycles": 1,
          "position": 137,
          "iteration": 0,
          "httpRequestId": "1687c239-e39b-4bf9-9167-8f1d75eb1562"
        },
        "item": {
          "id": "456804f8-1f12-47ae-ac2c-b43e0b6c84d4",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "77755da9-fc39-414d-8068-b69b0172db29",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 23,
          "responseSize": 221
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "afe4f533-6134-4197-a2a2-29b7b8cb5cb1",
        "cursor": {
          "ref": "f6929f74-cbe8-4511-b5bf-ff3df7fece33",
          "length": 250,
          "cycles": 1,
          "position": 138,
          "iteration": 0,
          "httpRequestId": "465263ad-1075-48c0-a658-956a874884ba"
        },
        "item": {
          "id": "afe4f533-6134-4197-a2a2-29b7b8cb5cb1",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "e3ae9c86-f042-4d8f-864a-9a0d1e0d2d97",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 26,
          "responseSize": 171
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4e768b97-8432-43bb-833d-a9a78c2a81b6",
        "cursor": {
          "ref": "d242b1ce-5f00-4cbb-9757-b439a2c9f8c5",
          "length": 250,
          "cycles": 1,
          "position": 139,
          "iteration": 0,
          "httpRequestId": "62df7251-199d-40b6-9603-01d26a254875"
        },
        "item": {
          "id": "4e768b97-8432-43bb-833d-a9a78c2a81b6",
          "name": "credentials_status:credentialStatus:item:purpose:missing"
        },
        "response": {
          "id": "f3284d0f-d3b9-4dc4-859c-4453ad6ce46b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b8a319f7-51ac-4fe2-8e4b-7ca9fd126a89",
        "cursor": {
          "ref": "6866afee-87a8-44cd-b07d-25a53a5ee4dc",
          "length": 250,
          "cycles": 1,
          "position": 140,
          "iteration": 0,
          "httpRequestId": "b070c8a8-de4f-42cd-9f90-d706a9d09d03"
        },
        "item": {
          "id": "b8a319f7-51ac-4fe2-8e4b-7ca9fd126a89",
          "name": "credentials_status:credentialStatus:item:purpose:array"
        },
        "response": {
          "id": "c729cf04-435f-4485-bd07-4489d98402be",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "91e2bd27-8a12-4f90-85e9-056c8adb674d",
        "cursor": {
          "ref": "590a4c4e-c94f-4838-9cfa-7bfcfea38eff",
          "length": 250,
          "cycles": 1,
          "position": 141,
          "iteration": 0,
          "httpRequestId": "d737db18-3a6f-47c2-9a87-2db9d0196038"
        },
        "item": {
          "id": "91e2bd27-8a12-4f90-85e9-056c8adb674d",
          "name": "credentials_status:credentialStatus:item:purpose:boolean"
        },
        "response": {
          "id": "94260b26-3545-4c36-a220-71edc1620639",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 22,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f1900b89-ae03-44cf-b061-4d3bcca587e2",
        "cursor": {
          "ref": "4e7ec45c-5994-4c32-b7a7-b706518ee7b7",
          "length": 250,
          "cycles": 1,
          "position": 142,
          "iteration": 0,
          "httpRequestId": "a65dd211-3dea-4445-ab74-b25e5e9004bd"
        },
        "item": {
          "id": "f1900b89-ae03-44cf-b061-4d3bcca587e2",
          "name": "credentials_status:credentialStatus:item:purpose:integer"
        },
        "response": {
          "id": "27339d85-08f9-4ccf-aa65-7f8eff77ca52",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 20,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "27084c51-05f0-4191-bed2-0f20dd4cfa1a",
        "cursor": {
          "ref": "deaf2a59-07b2-43d1-bec7-260778ccc844",
          "length": 250,
          "cycles": 1,
          "position": 143,
          "iteration": 0,
          "httpRequestId": "26585265-7149-4251-a6ae-6814d7fa3590"
        },
        "item": {
          "id": "27084c51-05f0-4191-bed2-0f20dd4cfa1a",
          "name": "credentials_status:credentialStatus:item:purpose:null"
        },
        "response": {
          "id": "5e6d9ea4-2b33-4c93-95ce-69f5129a8d21",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 21,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1e9662e8-e4c5-426d-9d8d-6ba42d98a532",
        "cursor": {
          "ref": "6d0be409-93eb-4c41-b21c-2e9d54d680a2",
          "length": 250,
          "cycles": 1,
          "position": 144,
          "iteration": 0,
          "httpRequestId": "3edb7fce-acf3-4cf5-a839-2e50dc47cd69"
        },
        "item": {
          "id": "1e9662e8-e4c5-426d-9d8d-6ba42d98a532",
          "name": "credentials_status:credentialStatus:item:purpose:object"
        },
        "response": {
          "id": "3241a782-bb34-4cac-8a85-ea1147bbc4be",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 24,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b9b5a3b8-7730-4037-b499-b1b232f500ce",
        "cursor": {
          "ref": "14c93f12-3120-4097-8be8-4d75e88fd39e",
          "length": 250,
          "cycles": 1,
          "position": 145,
          "iteration": 0,
          "httpRequestId": "4518988b-0281-420e-9dfd-98624c5e82ee"
        },
        "item": {
          "id": "b9b5a3b8-7730-4037-b499-b1b232f500ce",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "7eaaba5b-17e3-48cb-aa03-40bffe0e5bf9",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 15,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bed7eec0-9c3b-4301-ad2c-e4105ec0ec6f",
        "cursor": {
          "ref": "86add9f7-8666-4b1d-8dc5-f61ab17aac2b",
          "length": 250,
          "cycles": 1,
          "position": 146,
          "iteration": 0,
          "httpRequestId": "ec4062d9-dca0-41ec-98d7-eed1f84ceb03"
        },
        "item": {
          "id": "bed7eec0-9c3b-4301-ad2c-e4105ec0ec6f",
          "name": "credentials_verify:vc:missing"
        },
        "response": {
          "id": "93379da7-d566-4fc9-997c-6c691a2565ff",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 21,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1291c287-228f-45c1-806c-1b1ed1503ecf",
        "cursor": {
          "ref": "c9133b48-6776-4127-b8c8-5a1c59c7362d",
          "length": 250,
          "cycles": 1,
          "position": 147,
          "iteration": 0,
          "httpRequestId": "9d5b3dea-bbc7-4dd3-b1e6-6a73fbd23218"
        },
        "item": {
          "id": "1291c287-228f-45c1-806c-1b1ed1503ecf",
          "name": "credentials_verify:vc:string"
        },
        "response": {
          "id": "4dbf9511-51a2-4b32-b7c6-f9da24be2ad1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 24,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "61c4ac91-da5c-4152-91d5-1041e808c85e",
        "cursor": {
          "ref": "139191a5-34fd-401c-9830-291b3d1e7d53",
          "length": 250,
          "cycles": 1,
          "position": 148,
          "iteration": 0,
          "httpRequestId": "0d1223ff-8c55-431c-ae41-09f4bed2a33c"
        },
        "item": {
          "id": "61c4ac91-da5c-4152-91d5-1041e808c85e",
          "name": "credentials_verify:vc:null"
        },
        "response": {
          "id": "da6f0ae4-3d69-4dde-b283-a098e340d290",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 20,
          "responseSize": 171
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fc57c5f6-f9a8-44cd-b836-427036ed6b40",
        "cursor": {
          "ref": "410d9bf8-6c20-4754-a904-4f76321c19b3",
          "length": 250,
          "cycles": 1,
          "position": 149,
          "iteration": 0,
          "httpRequestId": "b2f4360d-4e74-482c-bbdd-75b5bcc931dc"
        },
        "item": {
          "id": "fc57c5f6-f9a8-44cd-b836-427036ed6b40",
          "name": "credentials_verify:vc:integer"
        },
        "response": {
          "id": "eafdbd65-7702-4615-8211-64aff6f69682",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 23,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4746269b-3869-4d7d-a1cd-40ad00a87e87",
        "cursor": {
          "ref": "bd6b322b-d955-4a4f-85e0-7bf4df815aae",
          "length": 250,
          "cycles": 1,
          "position": 150,
          "iteration": 0,
          "httpRequestId": "d8f9cf9f-480c-4d25-a515-29d44605633d"
        },
        "item": {
          "id": "4746269b-3869-4d7d-a1cd-40ad00a87e87",
          "name": "credentials_verify:vc:boolean"
        },
        "response": {
          "id": "48e8e6cd-2e37-43eb-86e5-eef130be39df",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 22,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7e358aea-836e-4781-8db5-9474126ab0ce",
        "cursor": {
          "ref": "4f50bc57-69b4-453c-8b4d-e983a5949c34",
          "length": 250,
          "cycles": 1,
          "position": 151,
          "iteration": 0,
          "httpRequestId": "882c7bd0-6742-4bfe-a76c-55ff8dce3de8"
        },
        "item": {
          "id": "7e358aea-836e-4781-8db5-9474126ab0ce",
          "name": "credentials_verify:vc:array"
        },
        "response": {
          "id": "79a56b27-cac1-454d-8b99-b9fbe313d4e5",
          "status": "OK",
          "code": 200,
          "responseTime": 71,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:152)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:152)"
            }
          }
        ]
      },
      {
        "id": "621ca977-1e0d-4411-ba50-5c2eb731d1bf",
        "cursor": {
          "ref": "d69b38dc-fc5d-497e-8b68-e415f20a0948",
          "length": 250,
          "cycles": 1,
          "position": 152,
          "iteration": 0,
          "httpRequestId": "703ed153-53fd-4896-873d-8a8f761c23cc"
        },
        "item": {
          "id": "621ca977-1e0d-4411-ba50-5c2eb731d1bf",
          "name": "credentials_verify:vc:@context:missing"
        },
        "response": {
          "id": "6d54ff1a-42b2-48e7-9f98-f019a02ed6e3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 242
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "df6250dc-48e2-4f96-a18d-824396c3f19f",
        "cursor": {
          "ref": "0c9c1ff9-7368-43d2-aeb1-e70a89893ac3",
          "length": 250,
          "cycles": 1,
          "position": 153,
          "iteration": 0,
          "httpRequestId": "5ba97593-885d-4622-827e-f399d8dd9d8c"
        },
        "item": {
          "id": "df6250dc-48e2-4f96-a18d-824396c3f19f",
          "name": "credentials_verify:vc:@context:boolean"
        },
        "response": {
          "id": "99c7e479-c01c-494c-ac7a-bd42e743380a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 24,
          "responseSize": 305
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "83f12ec5-dd9d-479c-9323-307c8854a769",
        "cursor": {
          "ref": "ed928a14-bf39-46f2-a1f9-9108cb8d50eb",
          "length": 250,
          "cycles": 1,
          "position": 154,
          "iteration": 0,
          "httpRequestId": "71092ead-7202-490e-80da-fdff92281d07"
        },
        "item": {
          "id": "83f12ec5-dd9d-479c-9323-307c8854a769",
          "name": "credentials_verify:vc:@context:integer"
        },
        "response": {
          "id": "ce838652-665f-4866-ab68-1c0fd7f12288",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 24,
          "responseSize": 305
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "679bd5b4-1278-40f5-b7d8-2a56f3db8973",
        "cursor": {
          "ref": "abf86681-8f80-476b-9ac1-3bae071c66cf",
          "length": 250,
          "cycles": 1,
          "position": 155,
          "iteration": 0,
          "httpRequestId": "63ad7bd0-76ee-46f1-9125-55452d58d189"
        },
        "item": {
          "id": "679bd5b4-1278-40f5-b7d8-2a56f3db8973",
          "name": "credentials_verify:vc:@context:null"
        },
        "response": {
          "id": "72c73311-5134-499a-8022-7bbbb69c85f2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 22,
          "responseSize": 305
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fc6deff2-4286-4f25-927e-70712287ff82",
        "cursor": {
          "ref": "50a8881a-aca2-4ab5-88c7-6d4ef3553277",
          "length": 250,
          "cycles": 1,
          "position": 156,
          "iteration": 0,
          "httpRequestId": "f7c677ee-6faf-4544-90fd-62da42afa0d1"
        },
        "item": {
          "id": "fc6deff2-4286-4f25-927e-70712287ff82",
          "name": "credentials_verify:vc:@context:object"
        },
        "response": {
          "id": "30f381c8-1f48-4c0a-9687-6fff63c9fd64",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 242
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7321ddea-b85c-4ab6-92c6-94f5004ab591",
        "cursor": {
          "ref": "517e4a06-1531-4b0e-99ed-1f60f40ce2c2",
          "length": 250,
          "cycles": 1,
          "position": 157,
          "iteration": 0,
          "httpRequestId": "6ce2bf8a-bcb5-4d21-b8d8-199510d3b2bb"
        },
        "item": {
          "id": "7321ddea-b85c-4ab6-92c6-94f5004ab591",
          "name": "credentials_verify:vc:@context:string"
        },
        "response": {
          "id": "48cb66ac-0d63-49b7-bf27-332c5e359795",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 21,
          "responseSize": 172
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bdb20e35-5032-464e-8992-73212a56513e",
        "cursor": {
          "ref": "f93f6152-c28e-420c-b8a4-0d1dd68cdb39",
          "length": 250,
          "cycles": 1,
          "position": 158,
          "iteration": 0,
          "httpRequestId": "bcffae0d-e529-4c17-9868-5d35a1875064"
        },
        "item": {
          "id": "bdb20e35-5032-464e-8992-73212a56513e",
          "name": "credentials_verify:vc:@context:item:array"
        },
        "response": {
          "id": "4a500d8c-90a6-4795-a3e6-cdb5b039ab6b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 20,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bd55641f-59f8-4b7b-966c-8f7fa2d56682",
        "cursor": {
          "ref": "5a857cd6-4230-4fd1-a65e-9e6b77f4513f",
          "length": 250,
          "cycles": 1,
          "position": 159,
          "iteration": 0,
          "httpRequestId": "485539c2-8537-413c-ac81-9454a938a04f"
        },
        "item": {
          "id": "bd55641f-59f8-4b7b-966c-8f7fa2d56682",
          "name": "credentials_verify:vc:@context:item:boolean"
        },
        "response": {
          "id": "30f2a8d1-f462-4f23-84f5-b5c41b95241e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2bf4339e-ac5d-4042-9da2-f795cbf7dea7",
        "cursor": {
          "ref": "eb30dfae-1190-4667-a38d-3bb5fe735511",
          "length": 250,
          "cycles": 1,
          "position": 160,
          "iteration": 0,
          "httpRequestId": "5569ade2-fd66-4ba2-b4e3-bde2155b6876"
        },
        "item": {
          "id": "2bf4339e-ac5d-4042-9da2-f795cbf7dea7",
          "name": "credentials_verify:vc:@context:item:integer"
        },
        "response": {
          "id": "b00b85aa-2eb9-4545-b497-1fc4c358591c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 21,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "095baf50-e33d-4bac-91ab-477b1c497971",
        "cursor": {
          "ref": "52a55b8f-3920-41e8-99f4-b42634f3079b",
          "length": 250,
          "cycles": 1,
          "position": 161,
          "iteration": 0,
          "httpRequestId": "0cb0097b-64b6-4534-a17f-1c51c84d1608"
        },
        "item": {
          "id": "095baf50-e33d-4bac-91ab-477b1c497971",
          "name": "credentials_verify:vc:@context:item:null"
        },
        "response": {
          "id": "76bc8166-945e-4ea0-87d2-0d6ce963b924",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 22,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fcc1fbe0-b434-490a-a585-5c9f5282e93a",
        "cursor": {
          "ref": "cf3a5551-ea4a-472f-b46a-780388432b11",
          "length": 250,
          "cycles": 1,
          "position": 162,
          "iteration": 0,
          "httpRequestId": "2dd47765-a01a-487b-a6dc-bbfd05273b0b"
        },
        "item": {
          "id": "fcc1fbe0-b434-490a-a585-5c9f5282e93a",
          "name": "credentials_verify:vc:@context:item:object"
        },
        "response": {
          "id": "186cfb0e-53c9-4c8b-9a46-c70d1dd4ba19",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 21,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "25e3f4eb-e264-4f12-80c5-09639b6e9b3f",
        "cursor": {
          "ref": "2aca79a8-be1d-4c56-adf8-b6406a45512a",
          "length": 250,
          "cycles": 1,
          "position": 163,
          "iteration": 0,
          "httpRequestId": "e6e7cf77-71b1-4e6d-ae33-e4c643902b2b"
        },
        "item": {
          "id": "25e3f4eb-e264-4f12-80c5-09639b6e9b3f",
          "name": "credentials_verify:vc:id:array"
        },
        "response": {
          "id": "c1a4a477-d1be-4dc4-86f3-5ab91405e312",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 22,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f5e8444e-1aad-4fb0-80d6-4ea2c91ecf25",
        "cursor": {
          "ref": "15b49c90-6da0-4589-a093-6f6d37d1eb0a",
          "length": 250,
          "cycles": 1,
          "position": 164,
          "iteration": 0,
          "httpRequestId": "abe85a23-74ee-4bba-90de-8e78db507950"
        },
        "item": {
          "id": "f5e8444e-1aad-4fb0-80d6-4ea2c91ecf25",
          "name": "credentials_verify:vc:id:boolean"
        },
        "response": {
          "id": "2e7ac497-18a0-4b44-8649-446b13657b0f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 26,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "128462a9-0b6d-404e-b59f-de60fd2c4382",
        "cursor": {
          "ref": "59d504ad-b5c9-4023-b876-21a7e3fff548",
          "length": 250,
          "cycles": 1,
          "position": 165,
          "iteration": 0,
          "httpRequestId": "46d42d69-08ec-4e74-bf9d-fc6ec119049e"
        },
        "item": {
          "id": "128462a9-0b6d-404e-b59f-de60fd2c4382",
          "name": "credentials_verify:vc:id:integer"
        },
        "response": {
          "id": "3101aab3-ab8e-4a00-8f5a-3166aecb30b7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 22,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b4d4b0a3-4399-4ebd-936d-04c1b2673982",
        "cursor": {
          "ref": "c2883bdc-34d4-4775-a8cc-0750ec29d8b6",
          "length": 250,
          "cycles": 1,
          "position": 166,
          "iteration": 0,
          "httpRequestId": "bc7f2c65-e401-4d16-8bc7-a78f1628b29c"
        },
        "item": {
          "id": "b4d4b0a3-4399-4ebd-936d-04c1b2673982",
          "name": "credentials_verify:vc:id:null"
        },
        "response": {
          "id": "1e0673c1-c7c3-470d-ac5f-87a04388c6db",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 21,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "59e20822-5ed9-41c7-b9a4-ce9c51004734",
        "cursor": {
          "ref": "f2deb77b-d9f9-4632-aa50-19c3116f6fea",
          "length": 250,
          "cycles": 1,
          "position": 167,
          "iteration": 0,
          "httpRequestId": "cac70672-9558-4143-be12-b918fec373ac"
        },
        "item": {
          "id": "59e20822-5ed9-41c7-b9a4-ce9c51004734",
          "name": "credentials_verify:vc:id:object"
        },
        "response": {
          "id": "4f1b0ac7-c650-4eb7-96b6-40ee071feb6b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 20,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cf6168b0-3b42-4b54-b1e9-012e07635c47",
        "cursor": {
          "ref": "5523e791-bc94-4204-a7f5-25cfd2f3703d",
          "length": 250,
          "cycles": 1,
          "position": 168,
          "iteration": 0,
          "httpRequestId": "6a1acdcf-b42d-4931-8b19-4f68aebe6261"
        },
        "item": {
          "id": "cf6168b0-3b42-4b54-b1e9-012e07635c47",
          "name": "credentials_verify:vc:type:missing"
        },
        "response": {
          "id": "4257af60-a83b-46b9-afbf-be21a36b0860",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 22,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fac65715-ed33-46be-86ee-5ad9f55984bc",
        "cursor": {
          "ref": "b5bd4ac5-3aa0-407b-9cd4-dd4f34bbbcd6",
          "length": 250,
          "cycles": 1,
          "position": 169,
          "iteration": 0,
          "httpRequestId": "5a4b2faa-02ac-425a-80ca-e16507e21bac"
        },
        "item": {
          "id": "fac65715-ed33-46be-86ee-5ad9f55984bc",
          "name": "credentials_verify:vc:type:boolean"
        },
        "response": {
          "id": "c542ad84-caeb-44f1-a937-1b722ef68c2f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 19,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ddef7ce5-30a9-4ce5-89e9-47e3e374635d",
        "cursor": {
          "ref": "69624329-2f5c-4e08-b8e2-272653ae4939",
          "length": 250,
          "cycles": 1,
          "position": 170,
          "iteration": 0,
          "httpRequestId": "00f51ae0-1ed9-41a9-9e3a-148582f181a0"
        },
        "item": {
          "id": "ddef7ce5-30a9-4ce5-89e9-47e3e374635d",
          "name": "credentials_verify:vc:type:integer"
        },
        "response": {
          "id": "fed4ce29-91ab-408a-86bc-7eb693de01f4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 22,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e7bce3f6-f027-4b85-b81d-a14ee75a0965",
        "cursor": {
          "ref": "3951cc9a-f9bb-4299-bc0d-7a2333c58337",
          "length": 250,
          "cycles": 1,
          "position": 171,
          "iteration": 0,
          "httpRequestId": "37ee9793-4969-4c7b-96c1-9ee34bad062b"
        },
        "item": {
          "id": "e7bce3f6-f027-4b85-b81d-a14ee75a0965",
          "name": "credentials_verify:vc:type:null"
        },
        "response": {
          "id": "2965c3fc-5c49-413e-81c3-85c3969053e3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 21,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b5c01827-062c-4ad2-a11c-1e6a89f03097",
        "cursor": {
          "ref": "510de6d1-25b9-4ab7-ae0d-b40a34ca1bca",
          "length": 250,
          "cycles": 1,
          "position": 172,
          "iteration": 0,
          "httpRequestId": "6374fb7d-afdb-4bd6-b891-e691db6ea813"
        },
        "item": {
          "id": "b5c01827-062c-4ad2-a11c-1e6a89f03097",
          "name": "credentials_verify:vc:type:object"
        },
        "response": {
          "id": "5b70d645-9e8a-482a-a80e-dc1486b70639",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 24,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1e377a5f-f981-429a-9df9-4767acf3d237",
        "cursor": {
          "ref": "adb66beb-bd28-4ea3-bdd3-fc266b5c9dc1",
          "length": 250,
          "cycles": 1,
          "position": 173,
          "iteration": 0,
          "httpRequestId": "93594e8c-3a03-4d35-92b7-1ba7c710e1bb"
        },
        "item": {
          "id": "1e377a5f-f981-429a-9df9-4767acf3d237",
          "name": "credentials_verify:vc:type:string"
        },
        "response": {
          "id": "0af9cb3d-8bde-47cf-addd-1dd2021aaf68",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 23,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c5c22ece-c40a-4aa0-b371-9342b74e3509",
        "cursor": {
          "ref": "12808f73-a3d9-4b01-8d42-0df8489d7266",
          "length": 250,
          "cycles": 1,
          "position": 174,
          "iteration": 0,
          "httpRequestId": "ef2b01c6-9abc-488b-b85f-43c162bb3f37"
        },
        "item": {
          "id": "c5c22ece-c40a-4aa0-b371-9342b74e3509",
          "name": "credentials_verify:vc:type:item:missing"
        },
        "response": {
          "id": "23c568da-257b-42a5-a62c-56fd28a0ed56",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "97efa87f-6c1d-4e66-acfc-8be10eca36d7",
        "cursor": {
          "ref": "15902824-7f98-4e6e-a238-225db6545d29",
          "length": 250,
          "cycles": 1,
          "position": 175,
          "iteration": 0,
          "httpRequestId": "8a463878-d9d8-48d8-86f1-bc50d4f58ed6"
        },
        "item": {
          "id": "97efa87f-6c1d-4e66-acfc-8be10eca36d7",
          "name": "credentials_verify:vc:type:item:array"
        },
        "response": {
          "id": "c5f328a9-d898-4067-9923-1f93599a011d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 21,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9ae9f97f-dca3-40e6-869c-dcc387231038",
        "cursor": {
          "ref": "82615eb9-d061-4792-afd4-96eaf9da2a3a",
          "length": 250,
          "cycles": 1,
          "position": 176,
          "iteration": 0,
          "httpRequestId": "4d15db3c-0972-438a-bec7-5924471188e1"
        },
        "item": {
          "id": "9ae9f97f-dca3-40e6-869c-dcc387231038",
          "name": "credentials_verify:vc:type:item:boolean"
        },
        "response": {
          "id": "ba908977-4c21-478e-90d1-93aa40d0bc30",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 25,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "22c2f59b-80a3-48d8-a94d-855ed6ce567a",
        "cursor": {
          "ref": "d68d0a52-ad96-4ed9-ba09-ac74859ce8bf",
          "length": 250,
          "cycles": 1,
          "position": 177,
          "iteration": 0,
          "httpRequestId": "171e9961-3a95-4ebc-9e1b-8fb9ed1edfa4"
        },
        "item": {
          "id": "22c2f59b-80a3-48d8-a94d-855ed6ce567a",
          "name": "credentials_verify:vc:type:item:integer"
        },
        "response": {
          "id": "65e7b5a4-0d4d-4822-8e08-c0aba3865e2f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b8b191e4-048e-4f3d-82d2-39a6b4c97d43",
        "cursor": {
          "ref": "721b034c-d8b7-44bf-9930-e593bebd0907",
          "length": 250,
          "cycles": 1,
          "position": 178,
          "iteration": 0,
          "httpRequestId": "eeba504b-8d22-4138-8dad-9bf48a7f24dc"
        },
        "item": {
          "id": "b8b191e4-048e-4f3d-82d2-39a6b4c97d43",
          "name": "credentials_verify:vc:type:item:null"
        },
        "response": {
          "id": "6c487933-a11e-4a49-9f75-a14da63aeccb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 24,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "082b7e8c-fd58-480b-86ab-10394c701c7f",
        "cursor": {
          "ref": "ad31c7dc-bfa9-4265-b2d8-75d7f73bda22",
          "length": 250,
          "cycles": 1,
          "position": 179,
          "iteration": 0,
          "httpRequestId": "9655ea6f-4a9f-4d90-a029-ec993e2a43f3"
        },
        "item": {
          "id": "082b7e8c-fd58-480b-86ab-10394c701c7f",
          "name": "credentials_verify:vc:type:item:object"
        },
        "response": {
          "id": "344e5bb8-9340-4ef3-a261-4319a47f864f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 21,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1f83ae96-a5d7-4c1d-b56f-34ee74ae3cfd",
        "cursor": {
          "ref": "786fb857-f740-4ea6-a240-53a7be041d78",
          "length": 250,
          "cycles": 1,
          "position": 180,
          "iteration": 0,
          "httpRequestId": "ea0efa36-3066-42ce-9cbb-1971563b81b7"
        },
        "item": {
          "id": "1f83ae96-a5d7-4c1d-b56f-34ee74ae3cfd",
          "name": "credentials_verify:vc:issuer:missing"
        },
        "response": {
          "id": "4e871a5d-3104-4c3b-9379-595cf0286ca8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 21,
          "responseSize": 106
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2da0ee71-7785-478c-8a4e-dd724f371163",
        "cursor": {
          "ref": "7109f4ee-124d-4e53-86bf-85f4f9cc9c71",
          "length": 250,
          "cycles": 1,
          "position": 181,
          "iteration": 0,
          "httpRequestId": "b27ffc0f-1209-4811-adda-4686eaf22f71"
        },
        "item": {
          "id": "2da0ee71-7785-478c-8a4e-dd724f371163",
          "name": "credentials_verify:vc:issuer:array"
        },
        "response": {
          "id": "a68eba86-8561-49e1-bac7-11f532b9e752",
          "status": "OK",
          "code": 200,
          "responseTime": 78,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:182)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:182)"
            }
          }
        ]
      },
      {
        "id": "89c4f280-3c8d-4939-aeb6-5714c12ef01e",
        "cursor": {
          "ref": "83a2216d-b205-4af4-af54-98f431fb0268",
          "length": 250,
          "cycles": 1,
          "position": 182,
          "iteration": 0,
          "httpRequestId": "c686f720-5899-489f-aed6-734f3f8b8e29"
        },
        "item": {
          "id": "89c4f280-3c8d-4939-aeb6-5714c12ef01e",
          "name": "credentials_verify:vc:issuer:boolean"
        },
        "response": {
          "id": "d8bbebdb-89ec-4ff3-ac6b-ca765946ddb8",
          "status": "OK",
          "code": 200,
          "responseTime": 81,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:183)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:183)"
            }
          }
        ]
      },
      {
        "id": "ab5e6adf-0233-421f-8c22-e425cc1832de",
        "cursor": {
          "ref": "b27331b2-7a9c-4358-96d1-c0818c4874d0",
          "length": 250,
          "cycles": 1,
          "position": 183,
          "iteration": 0,
          "httpRequestId": "a1c32108-805a-458c-8a6f-9f0a73532754"
        },
        "item": {
          "id": "ab5e6adf-0233-421f-8c22-e425cc1832de",
          "name": "credentials_verify:vc:issuer:integer"
        },
        "response": {
          "id": "442a4853-c79c-4fe7-a6e8-1cdac71bd201",
          "status": "OK",
          "code": 200,
          "responseTime": 74,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:184)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:184)"
            }
          }
        ]
      },
      {
        "id": "4d70d9d9-183b-4b53-8509-63d77b2bebf9",
        "cursor": {
          "ref": "73b526b6-c9aa-4cb9-a9e0-5bac2e5c94c9",
          "length": 250,
          "cycles": 1,
          "position": 184,
          "iteration": 0,
          "httpRequestId": "df7ae659-bcc8-4803-8e33-48036face0bd"
        },
        "item": {
          "id": "4d70d9d9-183b-4b53-8509-63d77b2bebf9",
          "name": "credentials_verify:vc:issuer:null"
        },
        "response": {
          "id": "d9bde80b-6a07-451c-8187-acff8e7ddbf7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 22,
          "responseSize": 106
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a3ae7bb0-208d-40d3-b6b7-23befb7a02a8",
        "cursor": {
          "ref": "cb45cade-8ba9-487d-aa98-3674c9a58028",
          "length": 250,
          "cycles": 1,
          "position": 185,
          "iteration": 0,
          "httpRequestId": "f988bbe2-fcc4-4086-b532-c93336f6e4b8"
        },
        "item": {
          "id": "a3ae7bb0-208d-40d3-b6b7-23befb7a02a8",
          "name": "credentials_verify:vc:issuer:id:missing"
        },
        "response": {
          "id": "dde05ceb-c4c6-4b39-8295-80fe621ad495",
          "status": "OK",
          "code": 200,
          "responseTime": 74,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:186)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:186)"
            }
          }
        ]
      },
      {
        "id": "312875bf-8a68-425a-8366-ae2562b9f6b2",
        "cursor": {
          "ref": "00507f76-28ce-4cab-b330-b9bdf550696f",
          "length": 250,
          "cycles": 1,
          "position": 186,
          "iteration": 0,
          "httpRequestId": "ea9b30eb-2596-4259-a129-1a294e4542a2"
        },
        "item": {
          "id": "312875bf-8a68-425a-8366-ae2562b9f6b2",
          "name": "credentials_verify:vc:issuer:id:array"
        },
        "response": {
          "id": "bf00d714-11b3-448d-94c2-6da9cf3cbe10",
          "status": "OK",
          "code": 200,
          "responseTime": 73,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:187)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:187)"
            }
          }
        ]
      },
      {
        "id": "a75247f8-02e5-4ded-8a80-e055854f8158",
        "cursor": {
          "ref": "b0354ed5-ef6b-4176-99ba-799cbc85db59",
          "length": 250,
          "cycles": 1,
          "position": 187,
          "iteration": 0,
          "httpRequestId": "76d963b7-ffb9-4982-a1a4-3c3526ac3124"
        },
        "item": {
          "id": "a75247f8-02e5-4ded-8a80-e055854f8158",
          "name": "credentials_verify:vc:issuer:id:boolean"
        },
        "response": {
          "id": "994d5fcc-82ad-4e9e-8d04-f086acb54ae2",
          "status": "OK",
          "code": 200,
          "responseTime": 73,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:188)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:188)"
            }
          }
        ]
      },
      {
        "id": "944918a6-9610-4132-8bbb-c8a374058315",
        "cursor": {
          "ref": "26fa4c2a-cfc1-43ae-a294-5761be18be24",
          "length": 250,
          "cycles": 1,
          "position": 188,
          "iteration": 0,
          "httpRequestId": "e2aad2ca-716d-44e2-a951-5118303b9e70"
        },
        "item": {
          "id": "944918a6-9610-4132-8bbb-c8a374058315",
          "name": "credentials_verify:vc:issuer:id:integer"
        },
        "response": {
          "id": "04969d1c-470c-491f-a4d4-0d399e19f45b",
          "status": "OK",
          "code": 200,
          "responseTime": 94,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:189)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:189)"
            }
          }
        ]
      },
      {
        "id": "f12eefae-5e58-4571-9d80-ee9f8accb428",
        "cursor": {
          "ref": "9d3093bc-2ad9-4497-b0d5-8d9fee8e94f5",
          "length": 250,
          "cycles": 1,
          "position": 189,
          "iteration": 0,
          "httpRequestId": "3048ff21-5ff1-4ae5-9030-7bb02778367c"
        },
        "item": {
          "id": "f12eefae-5e58-4571-9d80-ee9f8accb428",
          "name": "credentials_verify:vc:issuer:id:null"
        },
        "response": {
          "id": "c1fee225-6b9d-4542-8981-c3873daaa38e",
          "status": "OK",
          "code": 200,
          "responseTime": 68,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:190)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:190)"
            }
          }
        ]
      },
      {
        "id": "e6ab34d4-72a8-44f8-81ee-3730e6fefb58",
        "cursor": {
          "ref": "a1d6a3a7-6520-4740-837e-333cf48e451b",
          "length": 250,
          "cycles": 1,
          "position": 190,
          "iteration": 0,
          "httpRequestId": "d2ddfe8c-f90a-47ea-8420-b7fb812455ff"
        },
        "item": {
          "id": "e6ab34d4-72a8-44f8-81ee-3730e6fefb58",
          "name": "credentials_verify:vc:issuer:id:object"
        },
        "response": {
          "id": "a5e31204-c196-4b6d-a67f-c79bda7ce7b1",
          "status": "OK",
          "code": 200,
          "responseTime": 71,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:191)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:191)"
            }
          }
        ]
      },
      {
        "id": "764d4ba7-5bdd-40f1-8ab4-1d4b2cc4aae6",
        "cursor": {
          "ref": "b5855547-11b3-44b6-9e9e-a5340c8fa389",
          "length": 250,
          "cycles": 1,
          "position": 191,
          "iteration": 0,
          "httpRequestId": "52aa0bc2-efbb-4aab-bbef-6df1943f09aa"
        },
        "item": {
          "id": "764d4ba7-5bdd-40f1-8ab4-1d4b2cc4aae6",
          "name": "credentials_verify:vc:issuanceDate:missing"
        },
        "response": {
          "id": "35a446bd-97c0-4c2a-9979-38fcb953ecb9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 24,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fc9efa5e-b192-494f-aaf9-7d56d8cd84ab",
        "cursor": {
          "ref": "45ef2cc8-4819-4ecc-9bd2-2798063da39a",
          "length": 250,
          "cycles": 1,
          "position": 192,
          "iteration": 0,
          "httpRequestId": "b057a63d-18bd-433a-883d-873f028c8e03"
        },
        "item": {
          "id": "fc9efa5e-b192-494f-aaf9-7d56d8cd84ab",
          "name": "credentials_verify:vc:issuanceDate:array"
        },
        "response": {
          "id": "5ce8e2dc-d3f0-47fa-b8ec-ea9dca0125bf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 25,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "08d2b442-3389-4bc9-9a65-7afe619a26b6",
        "cursor": {
          "ref": "5f9f375f-99a0-4014-a76a-ca407e564362",
          "length": 250,
          "cycles": 1,
          "position": 193,
          "iteration": 0,
          "httpRequestId": "a83ff5d1-129b-4914-83ed-9988fd148560"
        },
        "item": {
          "id": "08d2b442-3389-4bc9-9a65-7afe619a26b6",
          "name": "credentials_verify:vc:issuanceDate:boolean"
        },
        "response": {
          "id": "e3791529-9527-4d4e-9b93-8c010e1c32e0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 21,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "42c8a8cc-38cb-4f33-9057-53dc20fe6c0e",
        "cursor": {
          "ref": "aa8984a2-2533-4898-a18f-9a49c4308c38",
          "length": 250,
          "cycles": 1,
          "position": 194,
          "iteration": 0,
          "httpRequestId": "a47e230c-017b-4422-9c31-b3150a5ae78c"
        },
        "item": {
          "id": "42c8a8cc-38cb-4f33-9057-53dc20fe6c0e",
          "name": "credentials_verify:vc:issuanceDate:integer"
        },
        "response": {
          "id": "81829a11-1c2f-4235-a378-0746911907cf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 21,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7b99f820-c982-40a5-b1ed-787dea6d436e",
        "cursor": {
          "ref": "e5c6a1fd-b0fb-4d6c-a575-d3fed0833398",
          "length": 250,
          "cycles": 1,
          "position": 195,
          "iteration": 0,
          "httpRequestId": "f2d58433-0e07-4c57-862d-20cf47abd247"
        },
        "item": {
          "id": "7b99f820-c982-40a5-b1ed-787dea6d436e",
          "name": "credentials_verify:vc:issuanceDate:null"
        },
        "response": {
          "id": "2bc9aead-26ff-4c34-9043-586f87f79b11",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 21,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c9899a65-45ed-4d04-950f-19ec022f549e",
        "cursor": {
          "ref": "aaae8ddf-1218-480f-91cc-6ff894a5cd9f",
          "length": 250,
          "cycles": 1,
          "position": 196,
          "iteration": 0,
          "httpRequestId": "a0df4660-ff24-4151-8fc4-cd138fd39b1d"
        },
        "item": {
          "id": "c9899a65-45ed-4d04-950f-19ec022f549e",
          "name": "credentials_verify:vc:issuanceDate:object"
        },
        "response": {
          "id": "c1439905-2ad7-4679-866b-41bb39461c27",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 21,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6ae3ddab-b41f-4c40-8a1e-54ae069ef6b5",
        "cursor": {
          "ref": "2791092a-2098-4a1d-899d-73d93128b56d",
          "length": 250,
          "cycles": 1,
          "position": 197,
          "iteration": 0,
          "httpRequestId": "4a58a5ee-bf94-4f28-bedf-073a416eee66"
        },
        "item": {
          "id": "6ae3ddab-b41f-4c40-8a1e-54ae069ef6b5",
          "name": "credentials_verify:vc:issuanceDate:string"
        },
        "response": {
          "id": "4aa1186d-79e2-47b5-89b9-493c3c339f0e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 23,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "71cefb9e-975c-4de2-85bc-42aac116ed83",
        "cursor": {
          "ref": "d597dfbe-124a-406d-8922-0a20b5ce4995",
          "length": 250,
          "cycles": 1,
          "position": 198,
          "iteration": 0,
          "httpRequestId": "74d6c578-f878-4a60-9e84-7f9233cb7b94"
        },
        "item": {
          "id": "71cefb9e-975c-4de2-85bc-42aac116ed83",
          "name": "credentials_verify:vc:credentialSubject:missing"
        },
        "response": {
          "id": "c0dfe733-fa30-466e-a985-afee1af3f7dd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 20,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "85848513-fb9e-4b86-ad39-16f518ba7323",
        "cursor": {
          "ref": "9a80fd99-62e3-4f3f-917d-07c06219619f",
          "length": 250,
          "cycles": 1,
          "position": 199,
          "iteration": 0,
          "httpRequestId": "f19bd542-5406-4bc4-83e4-fb82a2963e27"
        },
        "item": {
          "id": "85848513-fb9e-4b86-ad39-16f518ba7323",
          "name": "credentials_verify:vc:credentialSubject:array"
        },
        "response": {
          "id": "c16a3525-b6ca-43d0-bb5c-830a0b58b223",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 23,
          "responseSize": 223
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "312d13d7-5c9d-4452-ba13-4cc0b80866f9",
        "cursor": {
          "ref": "71241101-2e1e-4465-945d-cd1e048f58d4",
          "length": 250,
          "cycles": 1,
          "position": 200,
          "iteration": 0,
          "httpRequestId": "c831fc05-2ee9-4797-a2d2-9711147ca4ac"
        },
        "item": {
          "id": "312d13d7-5c9d-4452-ba13-4cc0b80866f9",
          "name": "credentials_verify:vc:credentialSubject:boolean"
        },
        "response": {
          "id": "fabe544f-110a-4ba7-ada0-effbd9e967fd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 21,
          "responseSize": 205
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8bca6f85-e29b-481e-9880-82dc8444859a",
        "cursor": {
          "ref": "a26052a7-a1c5-41fb-9395-d5eae41881f7",
          "length": 250,
          "cycles": 1,
          "position": 201,
          "iteration": 0,
          "httpRequestId": "6cbca5a1-aaa8-4b39-bc06-f75a6679eb49"
        },
        "item": {
          "id": "8bca6f85-e29b-481e-9880-82dc8444859a",
          "name": "credentials_verify:vc:credentialSubject:integer"
        },
        "response": {
          "id": "b41e00b5-2287-40eb-b9b9-963a47df8755",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 205
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9cfd0bcf-fe0e-4c0e-91b8-d50a14a28bfe",
        "cursor": {
          "ref": "1f47da2b-ea0f-429e-910b-f79ec2d7ad80",
          "length": 250,
          "cycles": 1,
          "position": 202,
          "iteration": 0,
          "httpRequestId": "c6221561-2b31-43e5-b0d0-5ff1d213861f"
        },
        "item": {
          "id": "9cfd0bcf-fe0e-4c0e-91b8-d50a14a28bfe",
          "name": "credentials_verify:vc:credentialSubject:null"
        },
        "response": {
          "id": "5a1a8394-3675-4052-bad4-2afba0d432e4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 22,
          "responseSize": 268
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "08830939-50f6-41db-9ff1-d4192ac77ec1",
        "cursor": {
          "ref": "5ab31d88-02f9-4eb1-b5cd-686d0ebe939f",
          "length": 250,
          "cycles": 1,
          "position": 203,
          "iteration": 0,
          "httpRequestId": "70326467-27be-4815-9798-106944b19816"
        },
        "item": {
          "id": "08830939-50f6-41db-9ff1-d4192ac77ec1",
          "name": "credentials_verify:vc:credentialSubject:string"
        },
        "response": {
          "id": "b6fe0b15-10f2-4d5c-ab6a-a74725606143",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 22,
          "responseSize": 205
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "386aedc3-63f0-4e1b-8e14-937e7f99d579",
        "cursor": {
          "ref": "57254596-0bd7-4954-895a-b5cd0cd3d151",
          "length": 250,
          "cycles": 1,
          "position": 204,
          "iteration": 0,
          "httpRequestId": "18eb5228-9f8c-40f2-9f38-336b61805ccd"
        },
        "item": {
          "id": "386aedc3-63f0-4e1b-8e14-937e7f99d579",
          "name": "credentials_verify:vc:credentialSubject:id:array"
        },
        "response": {
          "id": "e9a01c4f-09af-4939-aca9-a8f949ea0f83",
          "status": "OK",
          "code": 200,
          "responseTime": 78,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:205)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:205)"
            }
          }
        ]
      },
      {
        "id": "af596c7e-35ca-4893-b0fb-61a41eb92203",
        "cursor": {
          "ref": "6ef2ccbf-3c74-48c8-bf5c-d5c10ddb7d10",
          "length": 250,
          "cycles": 1,
          "position": 205,
          "iteration": 0,
          "httpRequestId": "4c373321-33fe-4a8b-8036-44d0518b5764"
        },
        "item": {
          "id": "af596c7e-35ca-4893-b0fb-61a41eb92203",
          "name": "credentials_verify:vc:credentialSubject:id:boolean"
        },
        "response": {
          "id": "35d6e610-e83a-486b-ad4e-267c1bc2f1a8",
          "status": "OK",
          "code": 200,
          "responseTime": 70,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:206)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:206)"
            }
          }
        ]
      },
      {
        "id": "a4bd3fff-1d7b-4cb3-9782-76075b1b56c1",
        "cursor": {
          "ref": "57b0fb9a-c154-4ed1-9754-0e67c519c3c2",
          "length": 250,
          "cycles": 1,
          "position": 206,
          "iteration": 0,
          "httpRequestId": "35bdf9ed-3f97-4e55-a163-88de74b1c4dd"
        },
        "item": {
          "id": "a4bd3fff-1d7b-4cb3-9782-76075b1b56c1",
          "name": "credentials_verify:vc:credentialSubject:id:integer"
        },
        "response": {
          "id": "f1072f51-c716-47ec-aa77-9ff715a289b9",
          "status": "OK",
          "code": 200,
          "responseTime": 95,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:207)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:207)"
            }
          }
        ]
      },
      {
        "id": "794334fd-3c81-4dad-be9c-d484ec61eb35",
        "cursor": {
          "ref": "e4100da7-a058-4e57-b4e7-9878a6d8d52f",
          "length": 250,
          "cycles": 1,
          "position": 207,
          "iteration": 0,
          "httpRequestId": "fbbdcbe8-ea2b-4179-8543-343c42c28165"
        },
        "item": {
          "id": "794334fd-3c81-4dad-be9c-d484ec61eb35",
          "name": "credentials_verify:vc:credentialSubject:id:null"
        },
        "response": {
          "id": "8440ef99-2cb4-4274-a76f-4c095cbbb86d",
          "status": "OK",
          "code": 200,
          "responseTime": 66,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:208)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:208)"
            }
          }
        ]
      },
      {
        "id": "13ed2f0e-4e67-47cd-9081-2cf6cada1c9c",
        "cursor": {
          "ref": "18c81a59-fced-4e33-8a66-2ec7b61b06f4",
          "length": 250,
          "cycles": 1,
          "position": 208,
          "iteration": 0,
          "httpRequestId": "48e2afc0-610f-4a40-834a-97aa8be7e57f"
        },
        "item": {
          "id": "13ed2f0e-4e67-47cd-9081-2cf6cada1c9c",
          "name": "credentials_verify:vc:credentialSubject:id:object"
        },
        "response": {
          "id": "07786d56-3c9e-46d0-8f82-8ea626724f70",
          "status": "OK",
          "code": 200,
          "responseTime": 66,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:209)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:209)"
            }
          }
        ]
      },
      {
        "id": "d3c462c4-c2aa-4379-87d7-8963e7553afd",
        "cursor": {
          "ref": "3520a41d-9b95-4775-a7c2-5b0a92d656d6",
          "length": 250,
          "cycles": 1,
          "position": 209,
          "iteration": 0,
          "httpRequestId": "af744747-7449-4b26-b2fc-cde04e605506"
        },
        "item": {
          "id": "d3c462c4-c2aa-4379-87d7-8963e7553afd",
          "name": "credentials_verify:proof:missing"
        },
        "response": {
          "id": "7d6193a5-72d6-423f-b235-2491b8abde54",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 23,
          "responseSize": 217
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "baccb021-e8b9-499a-b3a1-4ff09484725e",
        "cursor": {
          "ref": "7009cf41-0900-401b-bfbb-c03b8d9a068d",
          "length": 250,
          "cycles": 1,
          "position": 210,
          "iteration": 0,
          "httpRequestId": "761befe3-5815-4b6a-8803-d3a9dd5a2500"
        },
        "item": {
          "id": "baccb021-e8b9-499a-b3a1-4ff09484725e",
          "name": "credentials_verify:proof:array"
        },
        "response": {
          "id": "411d08c1-3435-4ff3-b50d-ccd537e084e5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 24,
          "responseSize": 166
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "49fe0bc1-2dc5-494b-ba00-8e4b3ef91756",
        "cursor": {
          "ref": "f2a267f1-7213-48a0-a00a-254804e3d778",
          "length": 250,
          "cycles": 1,
          "position": 211,
          "iteration": 0,
          "httpRequestId": "59ebcc9c-2fe3-4d3a-94cc-2b7b9e206017"
        },
        "item": {
          "id": "49fe0bc1-2dc5-494b-ba00-8e4b3ef91756",
          "name": "credentials_verify:proof:boolean"
        },
        "response": {
          "id": "0f9edbfa-79c5-4bb4-a8b8-2e5f9350d74d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 21,
          "responseSize": 244
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1d83529b-de4f-4adc-ba0b-0e8993c2e830",
        "cursor": {
          "ref": "41711fa7-d0f8-4f15-8339-25196d06cd55",
          "length": 250,
          "cycles": 1,
          "position": 212,
          "iteration": 0,
          "httpRequestId": "f66c1fc5-45e1-41dc-bade-5cf1ecae5b0b"
        },
        "item": {
          "id": "1d83529b-de4f-4adc-ba0b-0e8993c2e830",
          "name": "credentials_verify:proof:integer"
        },
        "response": {
          "id": "f73c7d33-388c-452e-942a-374ac81bf899",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 22,
          "responseSize": 244
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "58e077e6-6067-4e2e-a102-822eb0c641f3",
        "cursor": {
          "ref": "bd2b3efd-f659-4892-88f9-2bebc6e370e0",
          "length": 250,
          "cycles": 1,
          "position": 213,
          "iteration": 0,
          "httpRequestId": "f7579793-f8b0-4445-8cf7-e74c7ee4e7b9"
        },
        "item": {
          "id": "58e077e6-6067-4e2e-a102-822eb0c641f3",
          "name": "credentials_verify:proof:null"
        },
        "response": {
          "id": "6f12c682-e102-49a2-80b5-5f6a27171b91",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 21,
          "responseSize": 295
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "65135a5a-2d10-4de0-99b3-4e97148fbcd9",
        "cursor": {
          "ref": "904b3312-3198-4e3c-a21e-6078818ca5bc",
          "length": 250,
          "cycles": 1,
          "position": 214,
          "iteration": 0,
          "httpRequestId": "b89fc183-b3e0-4b94-8c2a-13f6c50840bd"
        },
        "item": {
          "id": "65135a5a-2d10-4de0-99b3-4e97148fbcd9",
          "name": "credentials_verify:proof:string"
        },
        "response": {
          "id": "64ee2d67-53f6-4b84-8014-a3eda306c7a1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 23,
          "responseSize": 244
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a500841a-d102-4359-921d-91990c5d64f6",
        "cursor": {
          "ref": "9f00056f-f0c7-434d-b661-95b53237c7c3",
          "length": 250,
          "cycles": 1,
          "position": 215,
          "iteration": 0,
          "httpRequestId": "071a8ad6-4b6c-42de-92cd-e6c3d4467056"
        },
        "item": {
          "id": "a500841a-d102-4359-921d-91990c5d64f6",
          "name": "credentials_verify:proof:type:missing"
        },
        "response": {
          "id": "9da496a9-b165-4bc4-b84b-ca16beb85be8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 21,
          "responseSize": 345
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a71ce66e-ada3-4d02-b19e-aacc308a4388",
        "cursor": {
          "ref": "3d4e5377-8bd9-4197-b1c4-4dd98b159694",
          "length": 250,
          "cycles": 1,
          "position": 216,
          "iteration": 0,
          "httpRequestId": "757fe7e7-ebf2-4133-b083-c52c6ea62018"
        },
        "item": {
          "id": "a71ce66e-ada3-4d02-b19e-aacc308a4388",
          "name": "credentials_verify:proof:type:array"
        },
        "response": {
          "id": "e1e93091-a401-49c9-ac47-2a49e0ec82e1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 22,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "339b9154-1b49-43d9-8a8a-f4f82f9e939f",
        "cursor": {
          "ref": "3c181c10-2ffd-4212-9f90-e2603a1e484d",
          "length": 250,
          "cycles": 1,
          "position": 217,
          "iteration": 0,
          "httpRequestId": "b47d21ce-2408-4aaa-adaf-f826be35b1ef"
        },
        "item": {
          "id": "339b9154-1b49-43d9-8a8a-f4f82f9e939f",
          "name": "credentials_verify:proof:type:boolean"
        },
        "response": {
          "id": "ea20537f-353d-4396-a3dc-4cccfa660875",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 21,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9477d1d5-917c-4968-8afc-962b3fb7377e",
        "cursor": {
          "ref": "d40640be-2c4f-4f28-893f-94b00d475b58",
          "length": 250,
          "cycles": 1,
          "position": 218,
          "iteration": 0,
          "httpRequestId": "9e54bc5a-7cdf-4f1b-ab7f-57eb17ba422b"
        },
        "item": {
          "id": "9477d1d5-917c-4968-8afc-962b3fb7377e",
          "name": "credentials_verify:proof:type:integer"
        },
        "response": {
          "id": "619bec0f-7bea-4f8a-b43c-197500917158",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 22,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bef7f282-3b16-415e-9196-3c8c589cd1e7",
        "cursor": {
          "ref": "e4ed9f1a-8790-46ce-bd3f-22f2fd8a6480",
          "length": 250,
          "cycles": 1,
          "position": 219,
          "iteration": 0,
          "httpRequestId": "14aacada-d4d6-4127-ad55-2a3ac86cf353"
        },
        "item": {
          "id": "bef7f282-3b16-415e-9196-3c8c589cd1e7",
          "name": "credentials_verify:proof:type:null"
        },
        "response": {
          "id": "176bc834-3c2c-4068-a392-1c5787a5782c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 22,
          "responseSize": 345
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d55f6347-0e3c-4ef2-8786-da7e3867b64c",
        "cursor": {
          "ref": "b912b418-a53e-4f5b-a148-ee0808c75909",
          "length": 250,
          "cycles": 1,
          "position": 220,
          "iteration": 0,
          "httpRequestId": "b2959be0-0c44-40b4-b92e-33a60bc97a22"
        },
        "item": {
          "id": "d55f6347-0e3c-4ef2-8786-da7e3867b64c",
          "name": "credentials_verify:proof:type:object"
        },
        "response": {
          "id": "6b3b6069-a38f-43b4-b3ad-5f0e77e10381",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d720a495-99e9-4b14-9abd-179ff31d07a2",
        "cursor": {
          "ref": "9a90f11a-27bb-447a-a94b-fee450600aa3",
          "length": 250,
          "cycles": 1,
          "position": 221,
          "iteration": 0,
          "httpRequestId": "6d769e67-81b9-43c1-9131-35a66d42ff6b"
        },
        "item": {
          "id": "d720a495-99e9-4b14-9abd-179ff31d07a2",
          "name": "credentials_verify:proof:type:string"
        },
        "response": {
          "id": "b2d3db16-7e31-4413-9168-a119bbd216ea",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 25,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "03063b2f-2ffa-401e-9bbd-336056cb9ef6",
        "cursor": {
          "ref": "d347c8e2-1755-4f4f-ba47-c2eddb7f614f",
          "length": 250,
          "cycles": 1,
          "position": 222,
          "iteration": 0,
          "httpRequestId": "ee9ab935-214f-4f90-8834-bce223252958"
        },
        "item": {
          "id": "03063b2f-2ffa-401e-9bbd-336056cb9ef6",
          "name": "credentials_verify:proof:created:array"
        },
        "response": {
          "id": "8acc4516-924f-4ce6-ba64-472ef1056f83",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 22,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e7f4e0d9-fc28-43c8-a63a-0a58d7e2a23b",
        "cursor": {
          "ref": "e9f9dade-ea28-49e6-b920-5debd6846b7d",
          "length": 250,
          "cycles": 1,
          "position": 223,
          "iteration": 0,
          "httpRequestId": "e3ab5ebd-819e-4ece-bae6-b9e99a7aa0d5"
        },
        "item": {
          "id": "e7f4e0d9-fc28-43c8-a63a-0a58d7e2a23b",
          "name": "credentials_verify:proof:created:boolean"
        },
        "response": {
          "id": "411125dd-88a8-44d7-8000-44b70f697fe2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f85f7575-9514-43f3-9686-c79f3097cb24",
        "cursor": {
          "ref": "6eea6e69-67ba-4652-9371-17cf9290833d",
          "length": 250,
          "cycles": 1,
          "position": 224,
          "iteration": 0,
          "httpRequestId": "adae34d2-f87f-4683-a679-1c253a477f58"
        },
        "item": {
          "id": "f85f7575-9514-43f3-9686-c79f3097cb24",
          "name": "credentials_verify:proof:created:integer"
        },
        "response": {
          "id": "c92b2323-63c3-4a34-9f3b-33adbf031d3f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 21,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d17a901c-4212-4e33-81d5-11209bda0d3e",
        "cursor": {
          "ref": "8ea1ceab-c596-4f16-8566-10727bdf04cc",
          "length": 250,
          "cycles": 1,
          "position": 225,
          "iteration": 0,
          "httpRequestId": "deb0c5ed-e913-4682-a3b1-298fa02eaa1a"
        },
        "item": {
          "id": "d17a901c-4212-4e33-81d5-11209bda0d3e",
          "name": "credentials_verify:proof:created:null"
        },
        "response": {
          "id": "e92233d9-1a40-4d77-9de1-4f8fcd1b1731",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 23,
          "responseSize": 252
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8facb30b-2536-4808-8a8b-f53c2f8b2829",
        "cursor": {
          "ref": "23cad279-c8a3-4fd8-a299-d1de1640f09f",
          "length": 250,
          "cycles": 1,
          "position": 226,
          "iteration": 0,
          "httpRequestId": "35ca62e8-a3e8-4094-b72d-d645a331f40a"
        },
        "item": {
          "id": "8facb30b-2536-4808-8a8b-f53c2f8b2829",
          "name": "credentials_verify:proof:created:object"
        },
        "response": {
          "id": "5ed2d220-a07a-474d-9e2a-089762e41526",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 22,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0df45a56-a07b-46ad-bac7-e75258fd6dcf",
        "cursor": {
          "ref": "44b90341-0206-4884-b51a-d2d439c66d01",
          "length": 250,
          "cycles": 1,
          "position": 227,
          "iteration": 0,
          "httpRequestId": "b14c7fac-b601-4bed-a639-be29c596d591"
        },
        "item": {
          "id": "0df45a56-a07b-46ad-bac7-e75258fd6dcf",
          "name": "credentials_verify:proof:verificationMethod:array"
        },
        "response": {
          "id": "405e5eb1-c987-42a8-a3d0-d175347cdc14",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 21,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b4e0b6a7-4b54-4402-aca2-65704bb95a7a",
        "cursor": {
          "ref": "c0494b7b-5f16-4ae3-8ad3-ab3b35e4f456",
          "length": 250,
          "cycles": 1,
          "position": 228,
          "iteration": 0,
          "httpRequestId": "b19e0918-d22a-4a48-a5fb-3bb1b0df231c"
        },
        "item": {
          "id": "b4e0b6a7-4b54-4402-aca2-65704bb95a7a",
          "name": "credentials_verify:proof:verificationMethod:boolean"
        },
        "response": {
          "id": "db8e6ffa-2c3d-427a-8c9a-811193f882e9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 20,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "df257d7a-a16d-4095-90cb-f1adfdc32bc6",
        "cursor": {
          "ref": "014d67ac-f9b9-40bc-a373-3205ac64b875",
          "length": 250,
          "cycles": 1,
          "position": 229,
          "iteration": 0,
          "httpRequestId": "d4f52199-b56c-4479-bab3-853f93f09e55"
        },
        "item": {
          "id": "df257d7a-a16d-4095-90cb-f1adfdc32bc6",
          "name": "credentials_verify:proof:verificationMethod:integer"
        },
        "response": {
          "id": "ac39af34-1795-4862-851c-a11786a8956a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 20,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "17e433c1-2728-4004-be34-226cb159bf49",
        "cursor": {
          "ref": "59a13393-8ee9-41f2-b040-0bebafec9527",
          "length": 250,
          "cycles": 1,
          "position": 230,
          "iteration": 0,
          "httpRequestId": "8391e8d3-fd8d-4217-b633-a48e1174f138"
        },
        "item": {
          "id": "17e433c1-2728-4004-be34-226cb159bf49",
          "name": "credentials_verify:proof:verificationMethod:null"
        },
        "response": {
          "id": "d79b125c-cb88-49ee-830f-24944e8bc02b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 22,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9399577a-0433-4303-9403-0414cfadec44",
        "cursor": {
          "ref": "e7acda82-2c98-461e-8f6c-8590d9dbfe6a",
          "length": 250,
          "cycles": 1,
          "position": 231,
          "iteration": 0,
          "httpRequestId": "e02567ce-e7c7-4bd5-b9e6-662f77d8ca5b"
        },
        "item": {
          "id": "9399577a-0433-4303-9403-0414cfadec44",
          "name": "credentials_verify:proof:verificationMethod:object"
        },
        "response": {
          "id": "78aa8c53-9003-4a1b-bb93-c1118c7d0faa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "97a5af30-a202-48f5-b45e-d3d5cda10959",
        "cursor": {
          "ref": "f9662047-acfa-4eb7-9ea1-25bad7651ec1",
          "length": 250,
          "cycles": 1,
          "position": 232,
          "iteration": 0,
          "httpRequestId": "f017b957-7ae5-4354-8147-526641582b2f"
        },
        "item": {
          "id": "97a5af30-a202-48f5-b45e-d3d5cda10959",
          "name": "credentials_verify:proof:jws:array"
        },
        "response": {
          "id": "26cc78a4-8c73-4f4e-ac03-14f70eaad6dc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 22,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c986b1d4-1cb8-446c-87d0-2596cec2078f",
        "cursor": {
          "ref": "c00ba113-ee25-446c-b619-3c56d5af569e",
          "length": 250,
          "cycles": 1,
          "position": 233,
          "iteration": 0,
          "httpRequestId": "a1a0444f-2f09-403c-a258-afe63574ab3c"
        },
        "item": {
          "id": "c986b1d4-1cb8-446c-87d0-2596cec2078f",
          "name": "credentials_verify:proof:jws:boolean"
        },
        "response": {
          "id": "7eee0fa5-abba-4388-8461-620060349d37",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 19,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0f6aaa98-e9d0-46ac-b76d-cf3db2ba3b04",
        "cursor": {
          "ref": "68cd7d8b-58af-45c7-9dcd-c49260c55ea8",
          "length": 250,
          "cycles": 1,
          "position": 234,
          "iteration": 0,
          "httpRequestId": "e7138d05-8322-42bb-b977-e0d3130ead9e"
        },
        "item": {
          "id": "0f6aaa98-e9d0-46ac-b76d-cf3db2ba3b04",
          "name": "credentials_verify:proof:jws:integer"
        },
        "response": {
          "id": "4fbc2076-f592-4717-b538-c2275c1b89ff",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 22,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b0dae6e6-c486-4889-aea2-965ac1c165f2",
        "cursor": {
          "ref": "500d6ce9-522c-45a5-b071-3776eb7df15b",
          "length": 250,
          "cycles": 1,
          "position": 235,
          "iteration": 0,
          "httpRequestId": "d69e39e8-f796-41f5-bf9d-f90bbba5846b"
        },
        "item": {
          "id": "b0dae6e6-c486-4889-aea2-965ac1c165f2",
          "name": "credentials_verify:proof:jws:null"
        },
        "response": {
          "id": "81a9df89-a370-468e-9803-57e609b81a21",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 22,
          "responseSize": 172
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9d81fe3d-8edc-454d-8375-8abb881bb59c",
        "cursor": {
          "ref": "a8f80d16-c944-4a6f-89e4-246c9a26cb9e",
          "length": 250,
          "cycles": 1,
          "position": 236,
          "iteration": 0,
          "httpRequestId": "61d3c39c-a0d5-487f-b75c-ae613375b951"
        },
        "item": {
          "id": "9d81fe3d-8edc-454d-8375-8abb881bb59c",
          "name": "credentials_verify:proof:jws:object"
        },
        "response": {
          "id": "fc5f1583-4f7e-4daa-a580-a69836e5caeb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 26,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f573477d-70be-4f63-a533-b14bcc9b82e1",
        "cursor": {
          "ref": "fcf78482-05a4-4962-aced-dd60e1627db5",
          "length": 250,
          "cycles": 1,
          "position": 237,
          "iteration": 0,
          "httpRequestId": "fda14429-8d7a-4e0b-aea7-e69bb6a7df66"
        },
        "item": {
          "id": "f573477d-70be-4f63-a533-b14bcc9b82e1",
          "name": "credentials_verify:proof:proofPurpose:array"
        },
        "response": {
          "id": "710a35fd-7bca-4a20-9af6-af22b45e805c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 22,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a4931e74-11fa-465f-bc8c-264513f116e9",
        "cursor": {
          "ref": "a4f40414-bad5-4235-9de9-1f8593a158ff",
          "length": 250,
          "cycles": 1,
          "position": 238,
          "iteration": 0,
          "httpRequestId": "f7b68ef0-afe3-4174-8a63-7f6b5234d925"
        },
        "item": {
          "id": "a4931e74-11fa-465f-bc8c-264513f116e9",
          "name": "credentials_verify:proof:proofPurpose:boolean"
        },
        "response": {
          "id": "d9cedc71-4297-4ab8-a310-507a8dd026a0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 26,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e15cff54-bdb4-4862-814f-06ec6a250fbf",
        "cursor": {
          "ref": "32742b19-52e5-45a4-a17b-6ccd2b03c057",
          "length": 250,
          "cycles": 1,
          "position": 239,
          "iteration": 0,
          "httpRequestId": "ccf6293e-b147-49fd-9672-f80c03a451e9"
        },
        "item": {
          "id": "e15cff54-bdb4-4862-814f-06ec6a250fbf",
          "name": "credentials_verify:proof:proofPurpose:integer"
        },
        "response": {
          "id": "b251918c-2c40-4291-a61d-b3bcbbfa6849",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "269928a6-c3a8-417e-b9a1-2600aefc5ddc",
        "cursor": {
          "ref": "a6dff42d-be56-4169-9a29-b2aa853eacd9",
          "length": 250,
          "cycles": 1,
          "position": 240,
          "iteration": 0,
          "httpRequestId": "9b205565-a698-446d-8489-70e3ca62d7d7"
        },
        "item": {
          "id": "269928a6-c3a8-417e-b9a1-2600aefc5ddc",
          "name": "credentials_verify:proof:proofPurpose:null"
        },
        "response": {
          "id": "7e68b7e5-3c46-40e2-941a-e5bbe70db8f4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 21,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7752857b-0daa-445f-839b-37b418f7a336",
        "cursor": {
          "ref": "2e0571ff-1d0c-47c7-ae82-ac484b421a87",
          "length": 250,
          "cycles": 1,
          "position": 241,
          "iteration": 0,
          "httpRequestId": "7984cded-5354-4304-8688-523e6409d552"
        },
        "item": {
          "id": "7752857b-0daa-445f-839b-37b418f7a336",
          "name": "credentials_verify:proof:proofPurpose:object"
        },
        "response": {
          "id": "1ab17d53-ce2b-4d0b-951a-d1d7d9789ae6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 23,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "86fee252-7dac-4df2-9d84-210cd225f004",
        "cursor": {
          "ref": "c8282a94-eb44-4dac-b2b3-5d4f3eab9c8d",
          "length": 250,
          "cycles": 1,
          "position": 242,
          "iteration": 0,
          "httpRequestId": "d12010de-6209-4f21-9722-8b66ff2c7a36"
        },
        "item": {
          "id": "86fee252-7dac-4df2-9d84-210cd225f004",
          "name": "credentials_verify:proof:proofPurpose:string"
        },
        "response": {
          "id": "c7e6217e-f059-41c7-a233-0e842523bb05",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 24,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cb782be3-fca8-4f12-9650-89e1a84bc882",
        "cursor": {
          "ref": "1ecd8e35-791e-43da-b86d-6e235397a78f",
          "length": 250,
          "cycles": 1,
          "position": 243,
          "iteration": 0,
          "httpRequestId": "139c744d-97b3-4248-81ae-c19782252b66"
        },
        "item": {
          "id": "cb782be3-fca8-4f12-9650-89e1a84bc882",
          "name": "credentials_verify:missing_auth"
        },
        "response": {
          "id": "f77dac7a-8e34-46ad-b584-b3d26961b15f",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 18,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "93edda0b-488a-4598-9ab5-5be00fc8aef3",
        "cursor": {
          "ref": "4304714e-2f9b-44ba-bbe6-05f0a3eb9b46",
          "length": 250,
          "cycles": 1,
          "position": 244,
          "iteration": 0,
          "httpRequestId": "aea5819c-f139-4104-ad12-f98f2e09aee4"
        },
        "item": {
          "id": "93edda0b-488a-4598-9ab5-5be00fc8aef3",
          "name": "credentials_verify:bad_signature"
        },
        "response": {
          "id": "e5be07a4-2a85-466f-a06f-406c8adfcc35",
          "status": "OK",
          "code": 200,
          "responseTime": 70,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is false",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response verified is false",
              "message": "expected true to be false",
              "stack": "AssertionError: expected true to be false\n   at Object.eval sandbox-script.js:3:245)"
            }
          }
        ]
      },
      {
        "id": "3db7d9f0-5df4-45cf-b695-17014ecf7d93",
        "cursor": {
          "ref": "7ba53f67-607e-4f5a-b6c1-c90217870b8d",
          "length": 250,
          "cycles": 1,
          "position": 245,
          "iteration": 0,
          "httpRequestId": "c5d55fd7-a9b6-4669-92e0-8d5c4a83ae2f"
        },
        "item": {
          "id": "3db7d9f0-5df4-45cf-b695-17014ecf7d93",
          "name": "credentials_verify"
        },
        "response": {
          "id": "f3c54ae5-26f5-46c5-b565-959244c724ed",
          "status": "OK",
          "code": 200,
          "responseTime": 78,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "f3919ec2-d987-4dc6-aabe-e7e201190a05",
        "cursor": {
          "ref": "1cd319f8-234a-4cff-b773-f6f4fca0e54a",
          "length": 250,
          "cycles": 1,
          "position": 246,
          "iteration": 0,
          "httpRequestId": "4f7b16fc-c6d2-42af-9bf9-ec6b721587a7"
        },
        "item": {
          "id": "f3919ec2-d987-4dc6-aabe-e7e201190a05",
          "name": "credentials_verify:issuer:object"
        },
        "response": {
          "id": "de1bd6f5-1f7b-4737-8d2f-c0a2c7823c07",
          "status": "OK",
          "code": 200,
          "responseTime": 71,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "895abe0a-3739-41b8-b7b8-c6220add1988",
        "cursor": {
          "ref": "81c40a5b-89cc-411b-8f3c-23710d710189",
          "length": 250,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "52b0c1d1-5d66-42c4-b15c-f645f1bd4bc2"
        },
        "item": {
          "id": "895abe0a-3739-41b8-b7b8-c6220add1988",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "2bc8c844-2d4a-49cf-8b08-f6b4be58741b",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 15,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "895abe0a-3739-41b8-b7b8-c6220add1988",
        "cursor": {
          "ref": "81c40a5b-89cc-411b-8f3c-23710d710189",
          "length": 250,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "52b0c1d1-5d66-42c4-b15c-f645f1bd4bc2"
        },
        "item": {
          "id": "895abe0a-3739-41b8-b7b8-c6220add1988",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "2bc8c844-2d4a-49cf-8b08-f6b4be58741b",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 15,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a8ce486d-1784-41d6-8065-556e47ce8897",
        "cursor": {
          "ref": "dddd0b82-34de-4fc3-b720-bd40c85c0f30",
          "length": 250,
          "cycles": 1,
          "position": 248,
          "iteration": 0,
          "httpRequestId": "0b7afa4e-49a1-4000-b9e8-01200087feb1"
        },
        "item": {
          "id": "a8ce486d-1784-41d6-8065-556e47ce8897",
          "name": "presentations_prove:missing_auth"
        },
        "response": {
          "id": "10f5d947-921e-4053-b17a-af2cc3c5e53c",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 15,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "692597b7-5dfd-4c26-a40d-08477a630f77",
        "cursor": {
          "ref": "c9f3baa2-04d3-41e0-8cae-5248b6e5d050",
          "length": 250,
          "cycles": 1,
          "position": 249,
          "iteration": 0,
          "httpRequestId": "7e7a4b24-ad44-4733-8725-f499fc0ddc66"
        },
        "item": {
          "id": "692597b7-5dfd-4c26-a40d-08477a630f77",
          "name": "presentations_verify:missing_auth"
        },
        "response": {
          "id": "42fba180-7f7b-43f9-8dd0-6ebd353dc9ea",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 16,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      }
    ]
  }
}