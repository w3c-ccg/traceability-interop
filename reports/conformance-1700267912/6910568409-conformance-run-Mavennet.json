{
  "collection": {
    "info": {
      "_postman_id": "0b8a4a7f-f952-4403-a9a4-909b37b8fa24",
      "name": "Conformance Suite",
      "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
    },
    "item": [
      {
        "id": "3eb6da86-f5dc-48c9-8681-c721258cd0f9",
        "name": "Clear Cache",
        "item": [
          {
            "id": "170e8465-9451-4311-b17d-cea1a7c81728",
            "name": "Clear Token Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "0f9d320e-d698-4ca7-88a6-19361e934b9a",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"tokenCache\");",
                    ""
                  ],
                  "_lastExecutionId": "d8f34e0c-9cf8-4d51-bf3c-f04d5b4c49f9"
                }
              }
            ]
          },
          {
            "id": "d81689f7-8f2b-46be-aa3a-a54381a38b12",
            "name": "Clear DID Web Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "f9a4e88c-2d42-42ab-bb8c-f3b766121061",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"didWebCache\");",
                    ""
                  ],
                  "_lastExecutionId": "7edd573d-a3a7-489e-8e60-35124a85c948"
                }
              }
            ]
          }
        ],
        "event": []
      },
      {
        "id": "619424f2-db23-4a96-a5ac-33f970611edf",
        "name": "Discovery - API Configuration",
        "item": [
          {
            "id": "1ae916ff-38e2-4539-924b-faf00aceab7c",
            "name": "Positive Testing",
            "item": [
              {
                "id": "c1686bb1-4645-4e65-a6bc-686ae16cef33",
                "name": "did_json",
                "request": {
                  "url": {
                    "host": [
                      "{{did_web_endpoint}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "065a0ff3-51c7-4ec2-bf42-c184fc40e769",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200ApiConfiguration\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "b8c89e2f-4190-4900-a9c6-36e89025f0bf"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "dd05ee5e-5e6f-4b60-a573-c9ba90bcb1b7",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "3b5e617c-7a41-4fb7-a31c-d8eaac5ea76a"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "a2b88591-e90c-4f44-ba38-7d649ed17121",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "5557814a-275e-4e06-bfa4-35808f40ef0b"
                }
              }
            ]
          }
        ],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "395d67fa-68a6-4369-93f6-a70687e4f379",
              "type": "text/javascript",
              "exec": [
                "// Discovery requires a multi-tenant aware did web endpoint",
                "const did_web = pm.environment.get(\"ORGANIZATION_DID_WEB\");",
                "const did_web_endpoint = utils(pm).convertDidWebToEndpoint(did_web);",
                "pm.variables.set('did_web_endpoint', did_web_endpoint);",
                ""
              ],
              "_lastExecutionId": "ddd73bd4-33ba-431a-9f15-2e692c881653"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "b2d8c810-7a84-415e-8ba6-359b4c106de5",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "d58363a8-eeff-460e-b714-b8a664d284db"
            }
          }
        ]
      },
      {
        "id": "37b6290d-24cf-45e7-be9b-30f5dbc185d6",
        "name": "Identifiers - Resolve",
        "item": [
          {
            "id": "3630c40f-a1bd-46a7-b6e2-fdb5d2ad7594",
            "name": "Negative Testing",
            "item": [
              {
                "id": "d88aab20-21a0-4452-8b26-b5122c98f976",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "2d0d25a6-7483-43c5-a8f9-93ba9233c297",
                    "name": "did:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "invalid_did"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f5c8eb38-291f-490b-a45a-45cec977174f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400Identifiers\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "7e940e4c-5116-422f-a16c-ef2d2f7884a6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f1fb0643-de7c-497e-a9f4-c702c36e30d5",
                    "name": "did:not_found:did_web",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "did:web:example.com"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8e2a9a36-1ed8-4153-94e4-788b56307b8c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "f77e69bf-3592-42f5-bf79-6df5bf8ca892"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6df63ee0-b22f-4d04-a406-6dc1c77aa7cd",
                    "name": "did:not_found:urn",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "urn:uuid:{{$randomUUID}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d7b68c07-2b98-40a9-b59f-8968e6790ba3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "e145d917-e494-4c81-adb7-e6f3f600b6aa"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "de2f5849-7e46-44ea-a55e-1f9699944b43",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "bce19696-c15c-4339-a4e7-d41c1992352f",
                    "name": "identifiers:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET",
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a304c948-69f5-4d67-b941-097f9665431f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "ad44768b-f1e7-47ec-8280-bb47802d6ab4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a559dee9-50c3-4628-bf56-44d3a3e3548a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "733208ef-d8fa-4b1f-a3cd-c00cd9230807"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "a5d61450-631c-4e1f-93cd-351d9ebdc7bb",
            "name": "Positive Testing",
            "item": [
              {
                "id": "d53766b8-a34a-4b10-8a66-aa9ef6247e45",
                "name": "identifiers",
                "request": {
                  "url": {
                    "path": [
                      "identifiers",
                      "{{ORGANIZATION_DID_WEB}}"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "a053abd0-2f13-4400-ab14-053dc4a1841c",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200Identifiers\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString), {",
                        "     strict: true,",
                        "     strictSchema: true,",
                        " });",
                        "});"
                      ],
                      "_lastExecutionId": "7d86c592-20f2-4444-89e9-42d6c8eada4e"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "f3bec58c-2be9-4442-bbcd-0fb1a8eae8e1",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                ""
              ],
              "_lastExecutionId": "abedc946-c04e-4449-8328-4eb422f3abe3"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "5797c21e-8d0a-4e94-96de-7a72e326461c",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "2f071b5f-732a-4d3d-b324-b9bd08b0fa58"
            }
          }
        ]
      },
      {
        "id": "67369967-5a6c-4a3a-a33e-b7c1dfb63ac7",
        "name": "Credentials - Create",
        "item": [
          {
            "id": "3610b8b1-5605-41f6-950e-29d2dd83b6bc",
            "name": "Negative Testing",
            "item": [
              {
                "id": "76f971f1-56ce-459a-a26b-436a9e916c91",
                "name": "Bad Request",
                "description": {
                  "content": "This folder contains requests which mutate a valid request body in a way that should provoke a \"400 Bad Request\" response from the server.",
                  "type": "text/plain"
                },
                "item": [
                  {
                    "id": "30fd9081-06d9-4715-9bfc-dd4afde21c82",
                    "name": "credentials_issue:credential:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b1d6e8cb-df7a-4153-9443-9843528d126d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1782ec81-c5cb-433b-ba8d-d27494cf0de0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fbc210a0-b480-4931-9441-a7b409f9828d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential\" is a required field",
                            "    delete req.credential;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "fc397fb4-9c49-4197-95e8-beac2798138d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "512528af-bb27-4075-9d71-62e2c958af90",
                    "name": "credentials_issue:credential.@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ca08b646-7702-4311-bd14-722952799a67",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "82415d2f-e8d4-4986-a217-2fbbf57a6a3a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9f5397fb-36e1-41d3-9c1e-d7971680b747",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" is a required field",
                            "    delete req.credential[\"@context\"];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "02f1a05e-1d6c-4ef7-aae5-c3602698429c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1e63d8d1-0ff7-41ab-aa8e-41d7e60b702d",
                    "name": "credentials_issue:credential.@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0db83564-a9a2-4357-8676-539398b3d441",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4d2c4c63-8ceb-46ec-9978-3105a36fe0b2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "26603056-adae-4764-9c5f-249c79454942",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a boolean",
                            "    req.credential[\"@context\"] = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "21f95107-3c16-4e85-addd-5d4f05d922ac"
                        }
                      }
                    ]
                  },
                  {
                    "id": "afc0d99b-b093-48ee-8090-fd85ca18d459",
                    "name": "credentials_issue:credential.@context:integer Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ceb31e11-34af-4444-a774-b82972776774",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "546f0f63-a666-4ca4-a04c-e0e25fe9e480"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2a39715e-2da8-4ca7-afbb-a730d230bd03",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an integer",
                            "    req.credential[\"@context\"] = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "6aee07ea-58bf-40a0-862f-8d2750821e8b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b2bda71e-9f4f-4df7-ae2c-ffb4dd8f3b4b",
                    "name": "credentials_issue:credential.@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7f2997db-6785-452b-b059-5113634ddaf5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "feb2dffd-b347-461a-8c50-95df7f950235"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "41f6174a-d620-4987-800a-0253c2ca8e7e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not null",
                            "    req.credential[\"@context\"] = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "30a7b476-da9e-4497-9189-551bc42bfb58"
                        }
                      }
                    ]
                  },
                  {
                    "id": "429248e8-9dd6-4efc-9345-11814a2953af",
                    "name": "credentials_issue:credential.@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8423c428-3335-4804-96a9-e94b52b7ce55",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "06e1c196-5370-4188-b656-42fdd243f925"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "254dadfe-17bf-444d-a66a-dbe97cfb7c06",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an object",
                            "    req.credential[\"@context\"] = {\"@vocab\": \"https://www.w3.org/2018/credentials/v1\"};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "a1b3a8cb-cfa1-43c1-a247-493603f37d53"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4c793e52-a7cb-49da-9439-95c2b039f7d1",
                    "name": "credentials_issue:credential.@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "981c3d54-85ff-4994-81b6-2ad54eae1174",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8b773e0b-1af4-4bf0-914d-65afa9cebba1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b9c569e4-a0af-47d6-8488-055ac9dca01e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a string",
                            "    req.credential[\"@context\"] = \"https://www.w3.org/2018/credentials/v1\";",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "7c32993e-da33-4213-ae73-484d217a26b8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4ecb1564-90ef-48f2-a144-5aa855c30bfa",
                    "name": "credentials_issue:credential.@context.item.array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0e95012e-97cc-43a6-abe7-8314362dccd8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4881ca5c-46f9-4ed5-8c29-fc2d434555de"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5d075bc0-34e2-44e0-88fb-12e922ffaa10",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not array",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        [\"https://w3id.org/traceability/v1\"],",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "93d2d92b-ea02-4e48-883d-dd65629036a4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b2092d64-0807-4c2c-8c4a-da722b9736ef",
                    "name": "credentials_issue:credential.@context.item.boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "505a1927-badc-4ddc-aefc-f6b450807564",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c2626c44-b941-49cc-bcff-2add06b8a86e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a835c110-e3e4-43aa-8c5e-a8c20b658a5c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not boolean",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        false,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "0dd57836-2dd1-4d11-843f-b191ffe434cc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9ee0d01a-dad6-498e-8035-c352113a0063",
                    "name": "credentials_issue:credential.@context.item.integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f97eac34-ba5f-4032-8c95-f33696e6b3bf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "74bbfcb5-2a3a-458e-abcb-21ff94ac2c05"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1e2fd130-fdb4-491d-bb3a-369bfa332568",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        42,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "bb529e6b-1f8f-4f77-8465-de154ca1c121"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a9ff2494-3cf9-4338-b759-6c564089f7fd",
                    "name": "credentials_issue:credential.@context.item.null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "535b4d4d-6c45-4fc5-807e-dc691a6c14c4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "48fd155a-2cb6-4f0c-ba7c-6fc3576c921b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "46cd38dc-92bf-40ac-a73f-2a082abcebb1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        null,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "06cceef6-cbe5-4fb4-b296-6412e9f1e580"
                        }
                      }
                    ]
                  },
                  {
                    "id": "307f74e5-a24f-4efe-a756-0b3adee19a72",
                    "name": "credentials_issue:credential.@context.item.object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "58dbf887-2265-4fff-90b8-2a5557fd2d76",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b37f3a45-4d38-46e8-806d-04096881bd73"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "51669faf-f19a-4442-8927-41dbec4d11ea",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not object",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        {\"@vocab\": \"https://w3id.org/traceability/v1\"},",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "22ac49c5-b6c2-4f91-85e2-2f54c4bbc48c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "abc7d1e9-1d23-4634-89bd-8d538ce201de",
                    "name": "credentials_issue:credential.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7ebbdaae-6d2b-402c-a085-e232eeac851e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fde0e568-5c20-4ada-8fb9-38fa5df6676b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9bb87634-711d-45af-95d2-59f8ab4cc8da",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not array",
                            "    req.credential.id = [pm.variables.get(\"credentialId\")];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "03a162b4-2fef-4daa-8a25-6199a5e8f126"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ef90d9fd-e647-4692-b4ba-bcc884babcb6",
                    "name": "credentials_issue:credential.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cd461390-76d7-4f45-84be-1dbb8aa65687",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "02ebe82a-24c5-45bc-9b50-e3d07f6bbc43"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d7125e7e-d51b-4ee1-871d-5a824c9b0c71",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not boolean",
                            "    req.credential.id = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "11c5e334-1d7d-4311-8e86-1d4c35740ec1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "af785c56-76d8-43b5-844b-3a80fe7e4df5",
                    "name": "credentials_issue:credential.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f5362d01-6c5d-4149-bf5f-44e1acb46ef9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "35a5404b-b60f-4d2b-b028-73bd99c85fee"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "91b4ed87-096e-4640-8555-5b13c12d7c03",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not integer",
                            "    req.credential.id = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "89f49cd3-5276-419f-ab33-920dcb467cb8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7dbf735e-e6b1-4ade-8caf-8b52fe5e4bb4",
                    "name": "credentials_issue:credential.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1263d89e-daf7-4045-80bf-9d668dd77374",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e9137ca3-6538-45a2-97d9-bcfa74d3c7df"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a6dcfd5a-2841-4912-9196-18227d16b073",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not null",
                            "    req.credential.id = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "532e7bd9-7f85-416d-ba70-b5219efd62d2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b765ba30-c6ef-4e2f-b478-ae957de6b064",
                    "name": "credentials_issue:credential.id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "00da7337-3de2-43e7-9ad2-c80a7b41b221",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f70e6833-b75a-4b04-a7ee-4ed84dc81f32"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "295a83fa-98a3-433e-a72c-e1aff3894d6d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not object",
                            "    req.credential.id = {\"id\": pm.variables.get(\"credentialId\")};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "28de4847-1441-493e-a454-bdf1da6d5274"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5c46fdf0-be91-4d12-b7a9-2416b982e8cc",
                    "name": "credentials_issue:credential.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a328edd6-ade0-4ee4-b5d6-579d980415e4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e3b88e5f-08af-4a99-8b18-44605a2c0b76"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9dfa73d4-393c-4213-bbf1-25cacc3c49ec",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type is a required property",
                            "    delete req.credential.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "dd8627ae-5b59-4508-9c85-880ab75482bc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f2cf07de-c873-4c6c-91c7-aabb8b77b720",
                    "name": "credentials_issue:credential.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9f0303e2-f198-4fff-9107-54db5bf68e7f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "41e80186-c081-4405-9452-5c136aac710d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e6223d67-2aa6-4105-8eb4-276430ef7efd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not boolean",
                            "    req.credential.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "29755e33-29d8-4e1b-8f49-3b7f2cf57efa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b7d3549f-0430-4307-97fd-5c21ff88d0c8",
                    "name": "credentials_issue:credential.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3eb4dac6-c11a-41d7-bf7f-4199e47612f6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d14f936d-da16-4933-bc7c-3db918f1e2a0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "73bae35a-90b6-4b1e-aa5e-b20e3cfa311a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not integer",
                            "    req.credential.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "a4b2fdc4-135d-479f-91ae-4ec2c3ae30b9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f6750055-6107-43d8-aba3-a4e1b8925f55",
                    "name": "credentials_issue:credential.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e523f108-8238-4714-905f-fa8e1ebfade8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1d7b0070-c1bf-42e0-84a7-1f8a8e73558d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f6844e55-2ca1-46e6-8551-25cc55bbd0f2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not null",
                            "    req.credential.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "a18ef7c1-d4b6-4f0b-930d-c1e080b203e1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bf9bc36b-0414-4af9-8f7f-9ab61704c9a1",
                    "name": "credentials_issue:credential.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d19d053c-ba21-460a-84a7-3c78d47b0629",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f06f3b08-12e6-4d12-aa51-915ae6c4abf6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ff982928-2756-439b-8b39-64e168aa53ee",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not object",
                            "    req.credential.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "f2cdedfa-5168-4028-833e-bb64c51c13ba"
                        }
                      }
                    ]
                  },
                  {
                    "id": "04065bab-c4bc-4e0e-91d1-f7bd8430d915",
                    "name": "credentials_issue:credential.type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a4e7a545-7fef-4a49-9004-db4f089967db",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "796edf44-ad48-4a55-9129-a69023af6488"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "153ef420-acf4-48fc-9a60-49c510d35ee7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not string",
                            "    req.credential.type = \"VerifiableCredential\";",
                            "}));"
                          ],
                          "_lastExecutionId": "5bfa9f00-3b73-4909-bed7-03572983ad5d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f641e779-fe8f-4c9b-9280-02a5416bb464",
                    "name": "credentials_issue:credential.type.item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e2a7045b-c104-4fab-aac8-f7e90687e6ec",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "78fb0652-b738-456b-86ed-9f33c81435a9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2b304003-1135-4415-ab9d-48e4fcd64770",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must have at least one element",
                            "    req.credential.type = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "eca6b559-f891-417a-ab7f-9adb790eda69"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dd88d03a-67bb-43e5-ab24-4ffebda336e3",
                    "name": "credentials_issue:credential.type.item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "786c9319-ce05-479c-8f70-ea731af6e445",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d8019204-18c1-40ce-9c70-d0b1bb233653"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8cfa33b2-1a05-4e35-ab9c-863946e2a9be",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not array",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        [\"AnotherType\"],",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "c65d0114-08cc-4cae-a6de-c48c886f52c5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "168ca36b-cf77-4e10-8832-3fe9a301552a",
                    "name": "credentials_issue:credential.type.item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "53d662a3-0365-4f3d-8ba9-d5d949eb09ae",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6969caa9-e557-47da-a40b-a962cf11177b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4492a53a-7913-48c8-b590-d256e61dde62",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not boolean",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        false,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "f1b2c3d5-8cf4-4ff7-99db-1399632a69b1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "df5e0194-ec59-451a-bc05-a27ac555e5cf",
                    "name": "credentials_issue:credential.type.item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6b40c9bb-0b5b-410c-bab6-57bc140a3ec3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "15cfa4db-3f34-41ad-afa8-751a0b35fabb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d80f5957-a7ef-4651-a006-8a24997bb0d2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not integer",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        42,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "9ecbc7ff-9269-4b98-966d-67db59e3e05b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "da1b4069-c2bc-4fc9-b229-dc019e0ed9fa",
                    "name": "credentials_issue:credential.type.item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4e795b0f-de66-40b5-b26b-e3ec3f0b91d8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8a69321b-1841-4376-8c43-3f094814e7ec"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a4a5d004-a64c-447d-9462-c0bd3eca7efe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not null",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        null,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "5099612e-1547-46e8-a9dd-cb4206fe50d3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "155e4a5f-93e9-4c1e-b3ad-61747d556465",
                    "name": "credentials_issue:credential.type.item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cda0dc66-2088-4a2b-a7de-803865ab67c0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f292b1d1-7faa-4eee-b656-5e6a2bc65bc7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a6ab3d84-f458-4d84-acac-b9879307f694",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not object",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        {},",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "0d4e8c13-3230-45d5-91da-417587ff5315"
                        }
                      }
                    ]
                  },
                  {
                    "id": "154e13cd-6868-4fbb-91a9-3fd959334ae5",
                    "name": "credentials_issue:credential.issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d15d0a66-3845-4f8d-8151-7c4796a238b3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3730ad2c-33bb-4eb5-aa11-650c9054a898"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3bf6b81a-c3e8-4f0f-a220-299db98f48cc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer is a required property",
                            "    delete req.credential.issuer;",
                            "}));"
                          ],
                          "_lastExecutionId": "0d66bac0-c2d4-4b3e-b316-010b3fe94e49"
                        }
                      }
                    ]
                  },
                  {
                    "id": "256bd40e-eac7-47eb-950c-b9db3895ec51",
                    "name": "credentials_issue:credential.issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7d10e2b9-b3d0-43e4-8529-e6510a3a6492",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "baf71c62-eac7-451a-a870-7dbe9c99f5ab"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0e55e30f-37dc-4de0-a8df-b898e14c2865",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not array",
                            "    req.credential.issuer = [pm.variables.get(\"issuer\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "f1e74657-d9ba-4310-8179-7fa1eac83991"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ada2b68d-7819-44ba-91c5-52d05e8c864e",
                    "name": "credentials_issue:credential.issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "635dc6c1-5b19-417c-ab16-ec8a26bf36a6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2161c7ee-11a3-4513-9d1f-9c43132d6c52"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8472ce33-8507-4976-9553-fa6fbe39378d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not boolean",
                            "    req.credential.issuer = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "95aebd17-f53a-4afc-a685-79f8a1393e50"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2e78e3c8-f4fa-425a-aad6-6f5a65f62efa",
                    "name": "credentials_issue:credential.issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b581ba02-b9ef-44f1-825f-60f2a234f4ff",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f1e5c5d8-71d0-456d-860a-64e3e9eb4441"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3e724d32-1624-4e10-a638-4ece87e2aedc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not integer",
                            "    req.credential.issuer = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "8ead9223-0695-4a75-bbbb-f54bd747ca7a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b95169e1-5bd7-489f-b153-8ab79e6bcef9",
                    "name": "credentials_issue:credential.issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c62b016c-8df7-4d12-8ecb-245200e83065",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d5ef4dc9-b138-4c43-9c1f-c19eadbf6cec"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "41fe8cb2-ff2e-4fe5-88f9-a0a5b4005642",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not null",
                            "    req.credential.issuer = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "502fdaab-c4b2-4ab8-8c9d-90679b55dece"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dbc65bb2-4165-43f2-b90d-e63033d237a5",
                    "name": "credentials_issue.credential.issuer:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0c6aa38c-a47b-452d-9651-24e3b9bdc90f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "33e52b33-9ee4-4b0f-a759-f5a86b403858"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b56a682a-e04c-4ce0-a8d8-7280ad8d4c5a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be a valid URI",
                            "    req.credential.issuer = \"not.a.uri\"",
                            "}));"
                          ],
                          "_lastExecutionId": "cfe30158-5bd6-4097-a258-616e0754953a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "be96f5f6-df60-4b8b-9b87-2629b86f8d8f",
                    "name": "credentials_issue.credential.issuer:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ef2e72e1-10bc-4b36-9fca-5dccb4c06326",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "27f7278a-e825-47b9-9b14-e6f9a86dffef"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3bace9f4-8628-459b-919d-81789b3991ad",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be known to the endpoint.",
                            "    req.credential.issuer = \"urn:uuid:{{$randomUUID}}\";",
                            "}));"
                          ],
                          "_lastExecutionId": "843f87b6-b392-44d0-b0ba-0cbb87c94bd9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "97a470dd-f243-4968-9356-e2b808f7a45b",
                    "name": "credentials_issue:credential.issuer.id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "44b39e69-67eb-4398-91d6-bda5734f8f5b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4120f2a3-a0ad-49cc-af52-321e7045d037"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "86932228-0579-44cb-90b0-ad92f285e0ee",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id is required when issuer is in object format",
                            "    req.credential.issuer = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "03d8dc9b-8abe-4665-a054-79c9e087daaa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4b02926e-e73e-4b37-bb29-101a98a659f2",
                    "name": "credentials_issue:credential.issuer.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "aa37e090-c282-464a-b030-a39d10cb158a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0c17972b-0bee-4efa-bbf7-81575f4137ba"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e63767bb-55ca-478e-8f09-1aba5f5f4894",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not array",
                            "    req.credential.issuer = {\"id\": [pm.variables.get(\"issuer\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "903ecb88-b519-47a1-ba10-aba77826a19e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "766742b9-7902-4153-9773-4a156f8d8d17",
                    "name": "credentials_issue:credential.issuer.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7f09cc32-0857-42fe-9601-c22d825868b9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ca59b588-b809-4ddb-a443-f14829f51ed7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3624b459-cbcd-48c1-b8d4-43878ace8f38",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not boolean",
                            "    req.credential.issuer = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "f3261b26-6990-4b23-8bec-c65296a6dd66"
                        }
                      }
                    ]
                  },
                  {
                    "id": "341aef89-55ac-459e-9696-10faf09a24b9",
                    "name": "credentials_issue:credential.issuer.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6e9568ed-26c4-41f2-a064-7a25f84a4ce2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0e93c6cb-5389-4bf0-b3d5-148983c3c2a2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f93b6cf8-b808-4544-ab38-e17d50bba3b2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not integer",
                            "    req.credential.issuer = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "66335b4c-f62f-4795-adac-bcf10db53244"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f51c57c1-4079-4133-84b7-eb8513d87b32",
                    "name": "credentials_issue:credential.issuer.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cb44b5bb-6cbb-4331-b565-a54b9fb366f0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ed8e1292-560c-4921-854d-6bf6fea9224c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f58b433a-014d-4deb-baaf-934889c3965c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not null",
                            "    req.credential.issuer = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "f6296c43-9452-41e4-b742-782350d056d9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7c35aa00-cd7c-4324-bb00-f1b115e5e715",
                    "name": "credentials_issue.credential.issuer.id:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f54788ed-f06d-4947-b574-cac78bd593e4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dfc63e8c-bfc6-441e-890f-39b1ed57e083"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2221abd7-a1c1-4329-badf-7ea4316ddfeb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be a valid URI",
                            "    req.credential.issuer = {\"id\": \"not.a.uri\"}",
                            "}));"
                          ],
                          "_lastExecutionId": "b4755224-772c-4c99-b8a9-b8381c356fe1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "98327a64-23ed-4749-8c8d-95f94f608082",
                    "name": "credentials_issue.credential.issuer.id:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6772efed-287a-4947-a47c-1fcfb35f6473",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ca0984f7-2741-4e81-9e92-af89b311db38"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8ef36e7a-949e-4951-bda8-eac32adc3a7d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be known to the endpoint.",
                            "    req.credential.issuer = {\"id\": \"urn:uuid:{{$randomUUID}}\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "469d8b16-5005-4197-84db-2d1ea2d7f878"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3aed17e1-d56c-44c2-94e3-a7793995d356",
                    "name": "credentials_issue:credential.issuanceDate.missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "00f9236b-eae7-44e9-bf82-2541b7a4cb6d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "de405c64-e8ab-498a-b61f-d7cc76f28692"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d9335209-b1fb-457c-b2f8-edbe74daaba2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate is a required property",
                            "    delete req.credential.issuanceDate;",
                            "}));"
                          ],
                          "_lastExecutionId": "8ee171b7-91b0-4173-912d-28518f3aba70"
                        }
                      }
                    ]
                  },
                  {
                    "id": "86d00df9-e655-486d-aa05-badb162010e6",
                    "name": "credentials_issue:credential.issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b2f55ab6-5831-46c9-8863-f34613038f88",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d05debe0-f6da-432d-acc0-1f12fd796a47"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "39708044-b35e-4233-a2ec-f82266818a79",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not array",
                            "    req.credential.issuanceDate = [pm.variables.get(\"issuanceDate\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "aebda75d-c2ed-4f88-96fa-b18f225bba43"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a2403ec5-b926-4768-81dc-d2767fe8fc08",
                    "name": "credentials_issue:credential.issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2078af5e-923c-436e-bb57-d3e50b1e1c40",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7339728a-0672-41bc-890e-1ad36c22388d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3475d951-a641-4db0-8ad0-5e9cc8b3d9a3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not boolean",
                            "    req.credential.issuanceDate = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "7c7d321a-672b-4782-94aa-49bc8a30a825"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5c174617-f274-4387-8119-836fe81a1ca6",
                    "name": "credentials_issue:credential.issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1f00358b-fa98-422d-a335-25cd383275e1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "10d41cc8-ad3b-4a25-a97f-9c5f9bbd4bf9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "770a4528-c32f-4a45-a54f-3e544daee6c6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not integer",
                            "    req.credential.issuanceDate = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "921ca4d4-04b7-4e59-adb6-a43cae579514"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d869b4d5-f6f5-4557-83d0-ef5256b0b968",
                    "name": "credentials_issue:credential.issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1075be13-ffc4-4561-869f-ba08f9e681a3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6ba762bb-c08e-475c-90fe-9f14e8b2091e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8d7aa984-0f17-4338-9c7f-59338d0c3202",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not null",
                            "    req.credential.issuanceDate = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "7d86b6ec-e853-4fcf-8fdf-df340db1f61f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a9c6a7ef-441d-4700-8425-42903aab22dd",
                    "name": "credentials_issue:credential.issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3c0af628-646f-4520-9f95-d6db41fd9b57",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8d100fd4-c08f-4509-927f-11194301b426"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "89b8bb16-5722-45ef-83c0-d51d5c411b3e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not object",
                            "    req.credential.issuanceDate = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "0718ff86-bfc2-4002-81ac-9a9c9a382134"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9023d0dc-119c-4da7-9041-fdbd324be187",
                    "name": "credentials_issue:credential.issuanceDate:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5f3b217c-0136-4b51-97ec-74e1f2d0bd30",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3ae86ca1-364b-4e4f-a509-6c84998f5f46"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "53572bda-e08f-4d76-be66-7804b9d1e695",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be a valid XML date time string",
                            "    req.credential.issuanceDate = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "a4266d78-b0c5-41d0-a64c-9abf4662e42a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "211a11a1-1b0e-49d6-b67c-d36b682bc3ee",
                    "name": "credentials_issue:credential.credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "20bea226-91cd-496b-9dab-64cd98a30bec",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d3dd1497-33bd-4e15-9061-347e04158f06"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7fd79cb7-98f5-408b-9b81-8702d6395072",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject is a required property",
                            "    delete req.credential.credentialSubject;",
                            "}));"
                          ],
                          "_lastExecutionId": "3b4c0011-beac-4416-bf90-fec6c0624a89"
                        }
                      }
                    ]
                  },
                  {
                    "id": "633cccba-06fe-4077-8181-bab24eb8b0ea",
                    "name": "credentials_issue:credential.credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "029c391e-db25-41f0-99ae-eef734abf143",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2a79d4d8-aeac-42b0-a55f-e6ac10862204"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "44e86475-e436-46f2-a9de-b0699db82c3d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not array",
                            "    req.credential.credentialSubject = [pm.variables.get(\"credentialSubject\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "122b13ca-9515-4257-91e2-9195c5d11935"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c48b6acd-d414-4f33-bfd6-ec115ad7bd0e",
                    "name": "credentials_issue:credential.credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6d964fa2-475c-4437-85e7-e6bf3f658e1e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d22f7262-f0d9-4112-a12d-497832a6d315"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "54b2bf9a-46f8-4ac4-9440-e4a3190688ca",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not boolean",
                            "    req.credential.credentialSubject = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "e4f19ffa-201f-43d3-a2de-e2ba196793ec"
                        }
                      }
                    ]
                  },
                  {
                    "id": "671bee7d-39de-4d90-9506-e1d85b7e7a65",
                    "name": "credentials_issue:credential.credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6bbbf0d4-0251-4279-a20b-e7560e615828",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "10d9a69f-12da-4e1e-b4ce-578715320150"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "11189db6-75c3-46ca-b783-a35a9e78f33a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not integer",
                            "    req.credential.credentialSubject = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "a8e1c2ca-93f6-4c31-897b-decd49415e88"
                        }
                      }
                    ]
                  },
                  {
                    "id": "23621d5e-3431-41b6-9858-b0a83a3ad043",
                    "name": "credentials_issue:credential.credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8e24d98f-8705-440a-a725-ff438d4db5aa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fdf1221d-bbfb-4481-8aeb-77e7ebbdc905"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8ae5aefb-2282-4d12-8c81-29d943cdefd8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not null",
                            "    req.credential.credentialSubject = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "54205dd9-5238-4528-88d8-a65f7ef8085d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "879a428e-87df-4d7d-aaa6-331ebf3b4bd6",
                    "name": "credentials_issue:credential.credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "931c70a6-07f0-401f-905e-c73afaeaf337",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1038f80d-33ca-40ec-861f-8a1150e82734"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b0055788-e921-4e02-b83f-994e8fed28fe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not string.",
                            "    req.credential.credentialSubject = pm.variables.get(\"credentialSubject\");",
                            "}));"
                          ],
                          "_lastExecutionId": "ab2bc898-783f-45bc-8cef-4558a10c5c9a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4fc51a62-f4e7-4ab3-911b-762e4334ae41",
                    "name": "credentials_issue:credential.credentialSubject.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "55f00fd6-9a54-49f6-a2b6-01f553734504",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0f35b838-bf50-4866-8053-0784d9bbf7f6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7b1f0603-5c11-402d-8463-3517b037951f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not array",
                            "    req.credential.credentialSubject = {\"id\": [pm.variables.get(\"credentialSubject\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "fbe8fd4c-a6f3-42c5-b571-035b61d1ec55"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d202a22e-b2b2-4305-b489-0cb2387229ae",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dd33d4e4-cb03-47a9-8e94-751dc370c60a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "624f1cd3-d630-4000-b2e0-cf339adcea9e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6d6cb814-1a82-44e5-bb29-f8a1431bcf98",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not boolean",
                            "    req.credential.credentialSubject = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "f42870c6-6cb0-42ae-811f-91c409fa7185"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4020e393-c260-45a7-8f97-d80e201d438b",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 2",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9d094092-d4fc-4da3-9966-df9e159945bd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fccf8df7-9ebb-49da-b8a0-284dced43c50"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6f9bf0b0-7eaf-4e9c-ac19-a63cd9c38996",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not integer",
                            "    req.credential.credentialSubject = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "2bc21299-6aec-4296-9e80-ecff5f05f0ea"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ef2d25a9-8006-4b51-ae52-82b8d3226095",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 3",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fef2e6a3-62a6-44f1-8a8a-3932fd8bff09",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e0f80999-599b-45f4-b2ef-03b848275886"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4e54b66d-55a9-459a-bd4c-68512e701d00",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not null",
                            "    req.credential.credentialSubject = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "7ee64a95-8571-4a08-85f0-5aade6ca53c3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3ed95663-58bc-4db5-b3be-acfa89cad280",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 4",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d20197e0-6d86-474f-8fdb-87b9b340d6d3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9bc867cc-93f4-4bd6-bec4-a99efcf65439"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5c3f716b-3c90-4768-85af-53f23f059844",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not object",
                            "    req.credential.credentialSubject = {\"id\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "dbd6927d-1391-4288-a614-8658389c4ab6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "343861c2-1318-4fc7-8c6f-dd2662b1011a",
                    "name": "credentials_issue:options:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "22d7f87f-790b-4391-acf0-a577a150367c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "90608d14-852c-4794-85fa-5cf36fc80c90"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b33fffaa-27ce-4651-aa2b-898aa2b8cb39",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options is a required property",
                            "    delete req.options;",
                            "}));"
                          ],
                          "_lastExecutionId": "f1869577-7347-4443-bdbd-20c0f4edfdca"
                        }
                      }
                    ]
                  },
                  {
                    "id": "574c2e65-94a6-4fcf-9285-05ce0c72b801",
                    "name": "credentials_issue:options:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "66a07005-8948-4a31-8c67-1676a293a769",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "67ed9b32-a2f7-428e-8e2d-15c07a371b13"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "79a1d96a-9927-4448-afe6-19f4dc1f36b0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not array",
                            "    req.options = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "d0869705-12d0-4134-bed9-0505975653ea"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b14e199c-ace6-412c-9575-a4ceaf2d49bc",
                    "name": "credentials_issue:options:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b30a66ee-8d38-4c2c-a02f-3f6a42271459",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a56d4297-b6da-4598-bd62-cbfcbabc1dc4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c2137d24-0838-4eee-9e3b-305dc4e78d33",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not boolean",
                            "    req.options = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "f7861070-6d21-4774-b967-5bf6eecd2f57"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8b6f0c5d-e6c8-4d34-9c68-3964be037c42",
                    "name": "credentials_issue:options:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "04611963-ab98-41ba-b398-ce866a7ed0d0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "18718eda-8a62-4c11-a849-e5ea958cb040"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6feb06a3-4e8f-4be0-a205-c18fa0b383d8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not integer",
                            "    req.options = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "a874ed14-bd9d-40ad-ab17-a974e634819a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "52260ed1-e3ad-4c45-883c-bc18943ab0e9",
                    "name": "credentials_issue:options:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c5cf2493-76e2-492e-a355-0dc06cac394f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b4c6a21b-d51e-4c25-acef-ef8cd6b126ab"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "129b997f-609b-4e27-b13d-51bd164f00d2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not null",
                            "    req.options = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "8c84100b-8247-426e-b3e3-a713b827c9fe"
                        }
                      }
                    ]
                  },
                  {
                    "id": "de37c3c0-1335-4ef4-a885-565ddf1db0cc",
                    "name": "credentials_issue:options:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "61f155e5-2f15-4ee5-8930-a3d18bffa071",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fb69f1cb-5f23-4b57-a51f-90904c89e010"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "60ce0d8c-3d68-48f4-aa90-14f5b8445b97",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not string",
                            "    req.options = \"\";",
                            "}));"
                          ],
                          "_lastExecutionId": "1107a670-d1ab-4435-9cf7-65af92a76329"
                        }
                      }
                    ]
                  },
                  {
                    "id": "527a4231-afa7-46a6-819f-d323b4206872",
                    "name": "credentials_issue:options.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7b28c87b-77fe-4289-8521-1dd9e8a09b55",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cbda1d88-b6dd-4e3d-8059-9146b693ac9e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "81d3d1a6-221d-4adf-8f41-8909cf3b6dca",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type is a required property",
                            "    delete req.options.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "d492d26f-e262-4014-9704-df3262fdf0c1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "46b2253c-06f3-4181-9679-d413a046ec8e",
                    "name": "credentials_issue:options.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f8ca1776-cf5c-4950-b6a7-8ad57c4a26b4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1999106d-98d5-4a7d-9106-fea29372b1c5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9ec8a412-4383-42b0-a66a-da0d494d8739",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not array",
                            "    req.options.type = [\"Ed25519Signature2018\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "aec931a6-520f-42a6-94a4-95e81c6cae18"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1118da68-55a8-4e16-ba45-e9a2cc1d94d5",
                    "name": "credentials_issue:options.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2fc7094f-c982-465e-b9e0-064170931095",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "68732e62-3386-43bc-9db0-7c2b104b16c7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e6a24e70-7629-43ff-abca-3eef081e4d85",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not boolean",
                            "    req.options.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "b86825a8-6e8e-4295-94d9-56cd4dca2d7d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "597a0db9-abfe-449c-ad99-118c36386eb2",
                    "name": "credentials_issue:options.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6f9d9c2d-53bf-4457-abb1-e4be310393f9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2121211d-12dd-4918-b171-81c96aa535a1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e211c567-107e-49c8-a0a2-311ab6820206",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not integer",
                            "    req.options.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "043ef114-c6b3-4836-a6bc-8f88b3801479"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a0e13248-6cdd-4b18-92eb-6754bb3ced66",
                    "name": "credentials_issue:options.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "266b324e-aa41-4d26-9908-19fa86da5ffc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d986840e-999d-4814-afaf-881a431ab549"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "19336664-87df-46cc-8645-d37c2e6bd81b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not null",
                            "    req.options.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "c79804b3-8cd8-4e2a-8575-512218084f34"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8f494ca0-224d-4b79-b3f9-9715d0637376",
                    "name": "credentials_issue:options.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7a8f578a-f70c-45fa-9b63-9e0f4e8fe8b3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1fa45486-bffd-493a-a2a9-2ab31c75bcc6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0c9b7a6a-6cea-4ab4-af36-37de59bac8be",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not object",
                            "    req.options.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "547bcc0c-95f9-4483-9ed9-bd9672f54e34"
                        }
                      }
                    ]
                  },
                  {
                    "id": "485f4cad-1228-498b-ba50-0579eb3f42e9",
                    "name": "credentials_issue:options.type:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5cf8dce3-24c3-4b2a-95bf-a0bf67134f5a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6c3b1452-f0ff-4467-970a-d4107374cb5a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "29fc8ce2-a91a-4d99-b75c-1d9bc40cc72c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be one of the valid values",
                            "    req.options.type = \"invalid value\";",
                            "}));"
                          ],
                          "_lastExecutionId": "f0888735-1e75-4495-920a-36eb8485fab8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c880b2ab-5d96-4edf-a915-d66dc8b235f6",
                    "name": "credentials_issue:options.created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "294e2c3f-a2bd-4fe2-8276-636605fa001c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6a33e487-52bd-4f00-8c43-6cc074adfa05"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a0289bbb-9df1-442b-8ee6-a643afb73f0b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not array",
                            "    req.options.created = [pm.variables.get(\"created\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "d4421df9-b5a7-4c51-b2e2-e5ec00864c73"
                        }
                      }
                    ]
                  },
                  {
                    "id": "43516b2c-f968-4ab7-a78e-9766fa6fecc5",
                    "name": "credentials_issue:options.created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1745519f-0c7a-4fb2-a0dc-9b4cda56a7b7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2944a71d-f738-4e7b-8fad-aef2098f6b75"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c3c6d02c-88b3-49c4-b960-32c4dc0f3012",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not boolean",
                            "    req.options.created = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "8f2bdf4b-8d26-4e22-831f-eb8b45626314"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9f5953ea-caf6-4b36-85d4-5b45570c0ce7",
                    "name": "credentials_issue:options.created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1c666e27-3534-4858-9cbc-9f1b8c11081d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a24cee15-ed13-4e82-9a15-29549c300b80"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "71f2d433-8607-467a-8c35-62b992f869a9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not integer",
                            "    req.options.created = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "67fa3c24-ab4f-41cf-85a8-a349007163e7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "420a2647-756d-4c5e-b88b-5e5537060e02",
                    "name": "credentials_issue:options.created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a626c02f-a5ea-4c20-a987-70e5e47687a3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ec182a99-5cd8-4943-83f2-c4afd2508372"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "39d50eef-bd75-41fa-b69e-f0cff876e43a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not null",
                            "    req.options.created = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "ef017dc4-3a71-4d77-b549-1f132ccfbf38"
                        }
                      }
                    ]
                  },
                  {
                    "id": "af2ec29b-0ae7-4e31-a287-4aaac657dcc2",
                    "name": "credentials_issue:options.created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "392128fe-3e79-41c1-b8ff-716e8d5e3cc7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "610db66c-a95e-4cbe-8efd-20e3164fad09"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "13837c78-472f-4dbb-8aa7-8908cf2531cf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not object",
                            "    req.options.created = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "8a95cb14-57ff-4c24-91c9-b62cd87fb579"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c1d5e0ee-4f2a-4ad4-bbf5-250eddf6e77a",
                    "name": "credentials_issue:options.created:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "219ef8ba-f971-4f05-906d-02a22c5ff690",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0ef3f13a-1b4b-46fb-a466-5e95cd96029f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c6178f4e-239a-4547-b730-8fe1a6968fda",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be a valid XML date time string",
                            "    req.options.created = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "49cb95af-10c4-4b08-b04a-f0ddac06577e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "825890f0-e561-4224-81c2-846e3c881577",
                    "name": "credentials_issue:options.credentialStatus:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dec7b73d-8ae5-4281-8f00-ecc68f06f8ad",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "104a6195-4a90-4e57-b255-c9cfc70ce9a8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "83c846e9-ba40-482c-b9b8-7d9eaa26801b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not array",
                            "    req.options.credentialStatus = [\"StatusList2021Entry\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "31fe0054-2b47-43d5-b0e7-5ee46a0f1eba"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7ce772ac-28af-4d62-bc3a-a4edc0c3e0be",
                    "name": "credentials_issue:options.credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c824da18-9253-4c46-9506-2c4e45f86579",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5b13209d-0505-45d4-ac42-b72c5144998b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1818fba1-ffb2-4929-8b1a-8aed939068f6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not boolean",
                            "    req.options.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "ddbad1e1-fd92-4f8b-afca-a7cf650adc6c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ce444298-def0-4ebf-aed6-7d52e280ae00",
                    "name": "credentials_issue:options.credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6c156c29-aaf0-4018-acd3-797b9994cef4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6d6f8a80-84ec-456f-968d-7beeb697585f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d360b4f9-f904-4821-b6d7-06cfdc229e7e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not integer",
                            "    req.options.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "b545f4d6-fb42-43d7-afcb-7c5422759425"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e614f5f4-21c7-4d9e-bfc8-ae9ba5da5e8c",
                    "name": "credentials_issue:options.credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b7d37a51-2132-47dd-bceb-a5cfcd8f0e40",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f06232b2-f7ca-43f4-a72a-e48ea20dbc47"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9e84a06a-dee7-4cb9-bf36-c3a2edccf155",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not null",
                            "    req.options.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "b5dc5e30-b70d-4227-a881-b79d7326e424"
                        }
                      }
                    ]
                  },
                  {
                    "id": "08fac412-2a42-4d2a-ade5-33c75243f616",
                    "name": "credentials_issue:options.credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "58310cee-4050-437d-a74a-8fedebc712fa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0e282ce5-66f2-49b6-81c8-6e68f1f46357"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8c5319f0-5d0d-4d7c-a96a-14809257ec22",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not string",
                            "    req.options.credentialStatus = \"StatusList2021Entry\";",
                            "}));"
                          ],
                          "_lastExecutionId": "126c7137-3494-4385-93a5-543ee4b6b7f8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ab5e21a4-e2ec-4bac-8ec6-6a66fe65cfb6",
                    "name": "credentials_issue:options.credentialStatus.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ca339448-5558-4db2-91dd-ee6baa84e015",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "88d87173-8fc8-40a3-b5fb-ddc6c423840f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a402142b-5825-46c4-a946-6af428a9337c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must contain \"type\" when present    ",
                            "    req.options.credentialStatus = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "ad884cb7-feaf-4e46-bf00-631cf99ecaf6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "33ec9b6d-558c-40ee-a2ca-0dc665b8e69a",
                    "name": "credentials_issue:options.credentialStatus.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9370602b-0efa-43f9-8a8f-2650bd34442f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a3df33c7-7584-4055-b0ac-c2ba6cf39787"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7514037b-53ec-4ff0-8eb0-1203c97babcd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not array",
                            "    req.options.credentialStatus = {\"type\": [\"StatusList2021Entry\"]};",
                            "}));"
                          ],
                          "_lastExecutionId": "7742b036-f7e9-4566-81af-023889c1ba0f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "719140a7-f270-4dd8-9edb-a9f91e951c8d",
                    "name": "credentials_issue:options.credentialStatus.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "96b91c68-b08a-46be-b2b4-60a136d78109",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f137ee07-4d33-428b-8907-021b40a29a74"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e281157e-162c-44f8-a39c-81a184c9ee0e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not boolean",
                            "    req.options.credentialStatus = {\"type\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "2d73b76c-8b2d-41ad-95af-ea9c88c21efc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "85d1c604-e40d-4a51-8d4e-0d2f9a4e6412",
                    "name": "credentials_issue:options.credentialStatus.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5c4b67f6-f1a7-41c9-86c4-8b8896bfd505",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "542a1dfd-c3b8-46f5-afce-a7b6e14f859a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d996eb91-b3f5-4ebe-8be2-d905306c6387",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not integer",
                            "    req.options.credentialStatus = {\"type\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "8ea08d0c-0ade-4197-9e89-4aefb8b57b1f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4fd41c89-0d85-42dc-9488-e6b609cb195d",
                    "name": "credentials_issue:options.credentialStatus.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1fcc2c06-6a7c-4d63-a94d-c7634c99290b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e18cd8d7-a04c-4237-9666-861142143b2f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "405f3e38-cdf7-4aa0-8369-6ffd7a558e7e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not null",
                            "    req.options.credentialStatus = {\"type\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "36700c38-113f-4451-b717-784bf6e2f733"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f0392739-fd95-4f37-ba2a-c24a22799496",
                    "name": "credentials_issue:options.credentialStatus.type:null Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c48a4ae2-f02a-4e8f-8a6d-ca92a463d797",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "eb5c5650-f3e0-421d-b45e-05ff2794a5e7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "849d2dee-d6f1-4188-9974-dcff345f3877",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not object",
                            "    req.options.credentialStatus = {\"type\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "cb678b63-f9ca-459e-9260-e484ae56b802"
                        }
                      }
                    ]
                  },
                  {
                    "id": "02aa66e9-f7ce-44f4-a744-d1081dfdee57",
                    "name": "credentials_issue:options.credentialStatus.type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7c82d969-40b8-4cc0-b022-94c37b2d3ea1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "2b86b3d2-ac7c-4c63-98f1-41e979a90931"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5c1c9723-c69d-4904-8395-27e894db2bee",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be a valid value",
                            "    req.options.credentialStatus = {\"type\": \"invalid value\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "3ceec779-d79f-4bcb-acd3-61c90544a2ca"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "b71b513b-a351-40e1-896d-ac29098e30c8",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "e6acfe96-dd2f-49f3-8671-4bc163858781",
                    "name": "credentials_issue:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "946a6ec1-9bb5-4740-b918-4077425fae1e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "ed739773-1f82-450c-bf9a-71eb013babe6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5bba7b7e-9ff0-4f87-b148-d96f5276a2e6",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "e0625d21-71b4-4a42-9dd7-ed407ab4357d"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "7e02d393-7c5a-4919-b76b-1eff0ba4cf42",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "f52b09b5-38cf-48e6-aab6-31b4e1546d9e"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "10a97b09-ad2a-4e40-8ee3-f8da4eff5e27",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "c8f931e2-9d2e-4b22-b8a1-a92213fbc69a"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "b2d4190a-4ccf-4138-9396-717c680c0bb4",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "45b6c4f6-0d17-47d9-8017-4f2c817895a9"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "9789a2d8-2074-44af-a62e-8c9b576e77da",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "dad4b90e-3be5-4163-82c4-cc1433c2dfca"
                }
              }
            ]
          },
          {
            "id": "bf6f884f-7974-4ebd-8140-187189bdf18b",
            "name": "Positive Testing",
            "item": [
              {
                "id": "ebd37aec-373f-46cc-afa5-aeb63f38587e",
                "name": "Duplicate Keys",
                "item": [
                  {
                    "id": "546b9b07-13b0-44ee-90d4-da6dcfbc4fbf",
                    "name": "credentials_issue.credential.issuer:dup",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"credential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"issuer\": \"{{issuer}}-ignored\",\n        \"issuer\": \"{{issuer}}\",\n        \"issuanceDate\": \"{{issuanceDate}}\",\n        \"credentialSubject\": {\"foo\": \"bar\"}\n    },\n    \"options\": {\n        \"type\": \"Ed25519Signature2018\"\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "text"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f9c2a220-a7bc-409c-9757-4d3384841a00",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 201\", function () {",
                            " pm.response.to.have.status(201);",
                            "});",
                            "",
                            "pm.test(\"response issuer matches request credential.issuer\", function() {",
                            " const { issuer } = pm.response.json().verifiableCredential;",
                            " pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "b2bfd90a-6b19-4979-8cee-4f7fef4ccc3e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b9b6ba18-5b8d-4776-9a43-bb0a3d88865b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b15ad843-323a-41d4-a0c3-185b2f932317"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "16f09e1e-1d77-4cc9-8c47-0adc42f6e794",
                "name": "credentials_issue",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "e6acc63d-09b3-4b78-8c83-9b3ee53a465d",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        "});",
                        "",
                        "pm.test(\"response issuanceDate matches request credential.issuanceDate\", function() {",
                        " const { issuanceDate } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuanceDate).to.equal(pm.variables.get(\"issuanceDate\"))",
                        "});",
                        "",
                        "pm.test(\"response proof.created is close to 'now'\", function() {",
                        " const { proof } = pm.response.json().verifiableCredential;",
                        " const delta = Math.abs(Date.parse(proof.created) - Date.now());",
                        " const tenSecondsInMs = 10000;",
                        " pm.expect(delta).to.be.lessThan(tenSecondsInMs);",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "7064d279-5ad9-44e7-b9c1-e025354ed0e5"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "7370a126-0f1f-4a8f-bc11-ad7df7b5ca4c",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // noop",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "0fbf63a6-45ad-4451-8170-be8bec7cde16"
                    }
                  }
                ]
              },
              {
                "id": "9f75f74f-9145-4406-a5bd-59859953cbfa",
                "name": "credentials_issue:credential.opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "88c8eccc-7d25-483e-866e-6079cca380ae",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verifiableCredential.id matches request credential.id\", function() {",
                        " const { id } = pm.response.json().verifiableCredential.id;",
                        " pm.expect(id).to.equal(pm.variables.get(\"id\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "d52cf27c-cac5-407e-b68a-6708b32a099a"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "96bf20ec-fc4a-4fc9-a867-4e781b486c56",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.credential.id = pm.variables.get(\"credentialId\");",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "082680e5-1979-4a42-a510-28c6dfe566e9"
                    }
                  }
                ]
              },
              {
                "id": "16859504-ca7f-469d-85e8-f86a9a5621cf",
                "name": "credentials_issue:credential:alt.issuer.object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "ba74a3e4-df1f-41fb-b481-055b5fb1ba50",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer.id\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " // Implementations may reduce object with just \"id\" property to a bare string",
                        " if (typeof issuer === 'string') {",
                        "  pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        " } else {",
                        "  pm.expect(issuer.id).to.equal(pm.variables.get(\"issuer\"))",
                        " }",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "5b861720-869d-49ef-a253-1dda91bf230f"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "cb9af43b-f3d6-409b-b77c-7fb50c5e2de8",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.issuer can be an object with required 'id' element",
                        "    req.credential.issuer = {\"id\": pm.variables.get(\"issuer\") };",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "2586a049-3373-456b-bc19-8f7f0d1ac32b"
                    }
                  }
                ]
              },
              {
                "id": "83b05e22-90ab-4b8f-af16-719e806bc482",
                "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "4b0c42e0-a4af-43d8-990b-ac046037e282",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject.id matches request credential.credentialSubject.id\", function() {",
                        " const { credentialSubject } = pm.response.json().verifiableCredential;",
                        " pm.expect(credentialSubject.id).to.equal(pm.variables.get(\"credentialSubject\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "ca6b3cd1-95bc-40fe-a01b-b427421d3caf"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "e8ce790e-c5ef-4479-abdf-f5f437b34473",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.credentialSubject can be an object with optional 'id' element",
                        "    req.credential.credentialSubject = {\"id\": pm.variables.get(\"credentialSubject\") };",
                        "}));"
                      ],
                      "_lastExecutionId": "42d08950-3a3c-45d8-b902-66a13c53b36f"
                    }
                  }
                ]
              },
              {
                "id": "cd5ee524-becd-4ea9-b623-ef4fddb6503d",
                "name": "credentials_issue:options:opt.created",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "35339c8c-8c8b-42d2-99c4-3f11e32a4d57",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response proof.created matches request options.created\", function() {",
                        " const { created } = pm.response.json().verifiableCredential.proof;",
                        " pm.expect(created).to.equal(pm.variables.get(\"created\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "3d0a859b-44b4-45b1-b6f4-a9588c5c1141"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "58608d56-e71e-426f-a5ba-4569ca0ce8f0",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.options.created = pm.variables.get(\"created\");",
                        "}));"
                      ],
                      "_lastExecutionId": "b5f3e5f9-6719-4ccc-8cc7-98a9c3d24381"
                    }
                  }
                ]
              },
              {
                "id": "df3418d0-06a1-430f-9761-ed8678999a98",
                "name": "credentials_issue:options:opt.credentialStatus",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "2de3ad96-685b-4e61-9404-43c5b6ea863f",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "4f4f5e8e-fe99-4f09-9e49-dc2f4bbfd975"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "8acc5e69-0432-4d32-b35e-148120d61fac",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // options.credentialStatus can be an optional object",
                        "    req.options.credentialStatus = {\"type\": \"StatusList2021Entry\"};",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "1a7bfa8f-9d4f-4056-b2a9-74dbfb882dae"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "fcb22df3-158a-46e9-bec3-f1256059bed0",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "9ee9578d-119b-4871-846e-459276cdb696"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "b7c911f4-5fd5-4f4f-998e-8ecc7f3fdbed",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "0d0ea2bd-bfd8-4082-8b7c-25ae50364410"
                }
              }
            ]
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "c021529c-b32d-4ce4-872e-2f113ed55f46",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "pm.variables.set(\"credentialSubject\", \"did:example:123\")",
                "pm.variables.set(\"issuanceDate\", \"2006-01-02T15:04:05Z\");",
                "pm.variables.set(\"issuer\", pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "pm.variables.set(\"created\", \"2006-01-02T15:04:05Z\");",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credential\": {",
                "        \"@context\": [",
                "            \"https://www.w3.org/2018/credentials/v1\",",
                "            \"https://w3id.org/traceability/v1\"",
                "        ],",
                "        \"type\": [",
                "            \"VerifiableCredential\"",
                "        ],",
                "        \"issuer\": pm.variables.get(\"issuer\"),",
                "        \"issuanceDate\": pm.variables.get(\"issuanceDate\"),",
                "        \"credentialSubject\": {\"foo\": \"bar\"}",
                "    },",
                "    \"options\": {",
                "        \"type\": \"Ed25519Signature2018\"",
                "    }",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};",
                ""
              ],
              "_lastExecutionId": "b1b60cd3-b70d-4a69-84bb-60e07375c713"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "4f661679-357b-4df8-a7d8-95a9578acb65",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "53f14809-ad91-4d7f-9dba-422f8d7c561d"
            }
          }
        ]
      },
      {
        "id": "b65f7d71-99ec-488b-b0a3-f08841fe10b9",
        "name": "Credentials - Update Status",
        "item": [
          {
            "id": "3bb3bed0-5e28-4ab4-a9ab-77bd3753e68e",
            "name": "Negative Testing",
            "item": [
              {
                "id": "b1538db0-5fe3-40ff-9e56-7652c89aaef1",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "bc5b538f-a090-425a-894c-ea499fbefed0",
                    "name": "credentials_status:credentialId:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "283fa598-e3bd-4dec-913a-532a58dab5da",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "af3ee81c-58ac-4f9c-97ed-0529727af104"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e76a5051-acec-4cab-ad0f-be92aaace3a1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId is a required property",
                            "    delete req.credentialId;",
                            "}));"
                          ],
                          "_lastExecutionId": "0b3a3d0e-d9ee-4d0c-894e-8ae44d3b9636"
                        }
                      }
                    ]
                  },
                  {
                    "id": "21ecefbb-0feb-451c-9b15-98380f38a26a",
                    "name": "credentials_status:credentialId:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "48f64036-c843-4e42-87e5-fc0fde9e7b55",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "130847a4-b28e-49d3-8267-03d264798903"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "23125801-05bd-426f-884f-17f30f585029",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not array",
                            "    req.credentialId = [pm.variables.get(\"credentialId\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "0a982910-fc35-4c06-b774-80d3a7b3308b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "245d0e7b-9c75-4af2-9a9b-8e42d6e68edc",
                    "name": "credentials_status:credentialId:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4a496e5c-62f4-4e48-947d-26e8f18aef44",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "06346340-76b7-402f-9803-4f14a35d75b4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5c4b7376-33eb-4618-b1ea-349aef068e25",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not boolean",
                            "    req.credentialId = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "85509d45-295d-4fb0-b64d-13b9a1099e91"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7c722bfc-abf7-4888-b7a1-bdf4d40d8306",
                    "name": "credentials_status:credentialId:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "01320334-3568-43cb-90c1-a611d05fbfb9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6cca8f23-dd08-48a0-b657-e34c908b6bd5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3c960046-a157-4f05-b0be-c8a106d32045",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not integer",
                            "    req.credentialId = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "3db73acc-7526-4fb6-a0c7-599c3e3698db"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f20bc2e0-726e-4808-8f22-8c41a885dab9",
                    "name": "credentials_status:credentialId:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "86524e82-6256-4298-b6a1-9f2243ae4e71",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "77e15a58-ca4a-45e0-8076-df10f63ce46b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cb2a58ed-204c-4571-93dd-3fb0afdf746f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not null",
                            "    req.credentialId = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "b5f4265c-ec5b-4d0c-ad00-7cf8aa9f4f60"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8668a0ab-656d-40af-9c20-83b62406c5e5",
                    "name": "credentials_status:credentialId:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "00a6e250-bb7c-4b30-9d58-bf5381bf4722",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b49b04a6-6a04-43c2-8949-ac12c2c4b123"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4521cb7f-6583-4334-a97b-1742f8951541",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not object",
                            "    req.credentialId = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "cf64b1f3-31ab-4682-9562-f439ec30e55b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6f962305-16fc-4e66-a518-1a81f58a32c9",
                    "name": "credentials_status:credentialStatus:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "08b48493-d785-42a6-bd40-d3f914fcfe52",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1dc681b3-b42e-494d-9941-36fcaa978fdc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4f429a61-54ef-45d6-abf5-4ef2209b9f40",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus is a required property",
                            "    delete req.credentialStatus;",
                            "}));"
                          ],
                          "_lastExecutionId": "e595aaaa-4de6-48ed-8afe-961f0f34287b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ff564252-d0de-4182-9d45-8f16c6bf379b",
                    "name": "credentials_status:credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2e4362d9-881b-4581-b356-c0cbc0fe5906",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4f733430-712c-46ad-8307-4e9e837815c8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ecf4730d-5bbd-46fe-84c2-7b6c604a9b35",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not boolean",
                            "    req.credentialstatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "4b54eedd-9a89-489a-8cf2-ef456211d153"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ad486439-187c-4232-bdd0-4d41da502c3e",
                    "name": "credentials_status:credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "20930d3d-f620-42dc-9553-43614b393b5d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "96753432-df98-4167-9144-c3d88c027840"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c87de371-b4f3-4852-9cc1-91b9b9edccb0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not integer",
                            "    req.credentialstatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "6c3637bc-02bb-4c50-aadc-a9cec7da9609"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4377e717-70be-468b-a88b-164eb4e486fe",
                    "name": "credentials_status:credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6e8590b9-51e2-4237-8995-482746ff72de",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d5f1c260-5f63-4c5f-922b-048e0f987a4b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6d81938b-13e5-4c21-a396-a0f4519e6e59",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not null",
                            "    req.credentialstatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "c04b893d-0ab2-483a-9fb2-4388a778a7bb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "334d3351-72e9-43fa-b7e8-540a4ba758bc",
                    "name": "credentials_status:credentialStatus:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e05140e6-b7ef-4da1-9a51-0d0749c23d44",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f1d59a1e-010b-4ced-86f6-c1daaab198df"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "60a0919d-ac84-4531-ab1a-681c0797ce30",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not object",
                            "    req.credentialstatus = {",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"0\"",
                            "    };",
                            "}));"
                          ],
                          "_lastExecutionId": "71610c01-40ff-4a51-a7c7-674f86b32b47"
                        }
                      }
                    ]
                  },
                  {
                    "id": "225f4f47-b125-4a6f-aac3-bfaebda3afbc",
                    "name": "credentials_status:credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "82468b03-0f56-4089-b5f6-e12c97730cb6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1c4c6965-de13-40bc-8a3d-28e986e74564"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1f6d44b3-4d4b-4b26-bae6-b47ea247a78e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not string",
                            "    req.credentialstatus = \"RevocationList2020Status\";",
                            "}));"
                          ],
                          "_lastExecutionId": "8ede5326-bb47-4f51-8691-8e3446d004e3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "44314b82-59ce-492f-89c8-f553197e7a66",
                    "name": "credentials_status:credentialStatus:too_long",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "da9998b4-0a7b-4e1c-b042-75badbe20c65",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "767719d6-fe2b-4cf5-8f8d-2e5676852349"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5269aa73-a5d2-4a64-be94-94c2b99998f8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus can only have zero or one elements.",
                            "    req.credentialstatus = [",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"0\",",
                            "        },",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"1\",",
                            "        }",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "3b132ffa-600d-489b-a65f-fbac7ef83742"
                        }
                      }
                    ]
                  },
                  {
                    "id": "751ebdfd-7116-4685-b55d-afc9fc83afb8",
                    "name": "credentials_status:credentialStatus:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b2ace34d-6cb9-4499-ad96-10ed4c8444cb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "258137ae-7a53-408c-9e85-d93beeeebfea"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7b4a8dc9-0715-40a9-93ef-dec2606a9093",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not array",
                            "    req.credentialstatus = [[]];",
                            "}));"
                          ],
                          "_lastExecutionId": "f6be2337-72d6-4a5f-94b7-ad0240bb92c6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c9f08778-2d7f-42c5-8318-713944d335ac",
                    "name": "credentials_status:credentialStatus:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "404fca48-d697-487a-a43a-5907f4d17796",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "afda1352-7232-4b00-bd6d-3ba613f563ec"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ada0226c-9991-41fe-8abb-be0301704fc0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not boolean",
                            "    req.credentialstatus = [false];",
                            "}));"
                          ],
                          "_lastExecutionId": "45fdee21-1497-432f-b1e0-7f3c4d7f62ac"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f645e8d0-64df-45c7-9024-5ab3f8bdbd9c",
                    "name": "credentials_status:credentialStatus:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "50c02631-237d-4fbb-83aa-24c37416a6ef",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "88525be6-f07e-4bdf-85a8-656124ac4b22"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a71b6f1f-37fe-4b67-99d2-67a6f817ec6d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not integer",
                            "    req.credentialstatus = [42];",
                            "}));"
                          ],
                          "_lastExecutionId": "f2b49936-c3b5-44e2-8824-c7a4a747d1bd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "56be443c-f916-4795-8c8b-7c822123b76f",
                    "name": "credentials_status:credentialStatus:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "773a09d1-81a7-4cb1-9182-bf32b60f874c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "89853b31-6bf0-41b7-9e3c-52b2c43bb233"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3b601915-0308-4964-8d53-c0509ec0982d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not null",
                            "    req.credentialstatus = [null];",
                            "}));"
                          ],
                          "_lastExecutionId": "894f317d-dcef-489b-98a2-23aaa660b5fe"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a872c95c-f1e5-4a42-bd53-dd510c423bdd",
                    "name": "credentials_status:credentialStatus:item:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "45f5f794-7ac1-4ba0-be98-3b1a62af88dc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ebe66433-4f2c-4cc2-9fc0-d17c20ea816c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ca57594d-295a-4e15-af96-0504ccb1f1d9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not string",
                            "    req.credentialstatus = [\"RevocationList2020Status\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "f778c3e5-580c-4a7f-b3df-d3d5805869d0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d40304bf-3428-4de3-86b8-243bdc94f9f8",
                    "name": "credentials_status:credentialStatus:item:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4899008c-0169-4a5d-bd8a-0c84d6ce52a9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6ec731d3-e30a-42f9-abc6-0bd820e0160f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ce5dec65-b364-4310-84ce-23e35d1d47d6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type is a required property",
                            "    req.credentialstatus = [{",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "9ed04747-f3f0-4c23-9721-0dc08ecc26b7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fb4b4738-3b0a-4cb0-8703-d1d87383e83d",
                    "name": "credentials_status:credentialStatus:item:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e9951f42-f485-4d90-83ad-5c4fa5d43552",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "10455dd1-17f7-43a9-a715-4d6fb7916ed2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a8599870-30c3-4947-b5d1-0b2959faab20",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": [\"RevocationList2020Status\"],",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "7c91c007-01ad-4b61-971f-1d35fb1342ac"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0562b66a-1d7c-4914-bcea-2ded524ac93c",
                    "name": "credentials_status:credentialStatus:item:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "73ed69f8-79ad-42e0-9b7d-776e2d355a73",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "34199c16-b2b6-46cd-ba84-d1cf16e7d679"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8b70e567-7109-4f3d-86f2-f3519f26e30e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": false,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "1ca31602-9a87-46f5-898f-b03e9e6ba645"
                        }
                      }
                    ]
                  },
                  {
                    "id": "286608e5-43f1-407e-8398-253c202fb256",
                    "name": "credentials_status:credentialStatus:item:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b555e484-7271-455a-a37e-227412ed4208",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ea8f37fc-9a2a-40df-b85b-ec5e2df02dfb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "10db171a-e6ae-4376-8c43-8ea060345c5d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": 42,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "e22d65e5-07b8-4c32-9e53-ab69dccdf27a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "66193c1d-c7f5-41a5-a914-af3aae1a7694",
                    "name": "credentials_status:credentialStatus:item:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dc2fe74b-4e8c-4a26-a4f5-860837008e06",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bc65983d-599d-468d-a161-67825e296c8d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "49f2e25b-0a22-4087-8bd8-19ef7e8f264d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": null,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "2d97109a-2647-42bf-98b5-52f4f2b4978d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1f673255-a009-4ae3-8a1e-6a9856b3fdd6",
                    "name": "credentials_status:credentialStatus:item:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "78c11820-e50e-4ad8-9f0a-137a23f30fa0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e68287a3-ee92-4b3f-a2bb-e094fd4f5dcb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a6e858e3-b51a-4592-a4ee-a8c776c009e0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": {},",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "d2e3b554-bd28-431a-b58b-0c347c895d63"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1723f75d-ec81-4c98-af16-2683474bc8d9",
                    "name": "credentials_status:credentialStatus:item:type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "af6992e2-e8be-4808-b88d-7544a0209f0e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f1237331-6c6f-4d9a-805a-84cbc6d63b08"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fe7f0e3e-cb79-49bd-9f39-da0384cbd18a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"invalid value\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "d589936f-3405-4d05-9345-bbeac92add43"
                        }
                      }
                    ]
                  },
                  {
                    "id": "94bf4f37-a191-49c9-8b79-993ce95c57a7",
                    "name": "credentials_status:credentialStatus:item:status:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d2138994-1066-4507-99f7-ffa8654d283c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "58aa20d9-593a-4711-8a49-415a1c59d4e8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "13cac25e-9e0b-4615-ac87-1da00b5e5324",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "14ac56f6-f4d7-46a9-b2db-dcc45bf57cbb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a897f68e-b5fa-479c-b7a2-e848c84e4448",
                    "name": "credentials_status:credentialStatus:item:status:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cd305ef2-20d7-4830-b97f-5d3c75c2e7a6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "013b6151-62e6-48ee-ac47-5e91d10d0bbb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "efde6d76-6ff1-4aaa-aba1-6661909e7dd0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": [\"0\"],",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "b33ee205-7989-4a60-a1b4-fe963f98a749"
                        }
                      }
                    ]
                  },
                  {
                    "id": "331eec84-156d-4bee-9fad-cafa721f12c8",
                    "name": "credentials_status:credentialStatus:item:status:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6c6f8f7a-f1d0-4f7f-bcb3-c0eb2114f850",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9a2b725e-5ab5-4087-a2b1-e3cb3d3bc9f2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c771380b-3085-4182-9bec-69c8a4b8c60d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": false,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "9cac5c58-9431-4e2d-88e4-8cafeddeefbb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "20bd218e-8d09-4030-bb7e-ae359b0339a5",
                    "name": "credentials_status:credentialStatus:item:status:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "aa913093-a61c-4511-8d52-cc0a73841c47",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "508c5dea-d031-42d0-b88b-84700073e129"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cfe0232d-abf2-4659-9446-56675be22be3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": 1,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "28c820f4-4b69-4f56-88ad-f30a27a41efe"
                        }
                      }
                    ]
                  },
                  {
                    "id": "51213996-e3ee-4a6d-98c8-52208230e3fe",
                    "name": "credentials_status:credentialStatus:item:status:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6420a593-6538-44a1-9bcc-2b12a1012318",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4db670e8-85f7-46c7-8c73-446bd4c027c2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1d25312c-4f2f-4543-abdc-75d26dfe2a8d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": null,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "10d689cd-3b13-4e99-bd31-cb63da4269dd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "81f01725-16b1-4a2f-bf84-f4119acbe529",
                    "name": "credentials_status:credentialStatus:item:status:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "50edfb49-31c2-4473-ace9-f91f88c420d1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1267ffe4-f12c-4dc2-90f1-2a3366975ff4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7f50e75b-6102-45a4-97c9-db38dacb91a6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": {},",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "53301057-a86e-4d1e-8206-2053d1a29ff5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aa6bbc88-e7de-4d2d-9c11-de18ba322fee",
                    "name": "credentials_status:credentialStatus:item:status:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0e59144d-6c85-4cc1-ac3a-e2eeb3c715d9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "93f0da28-853e-4ccb-bd05-e4247c5d49fa"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7e912f21-37ed-440e-ba6a-2251d0a7eb74",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"invalid value\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "d46912af-2035-4751-aca1-fada0a0d65aa"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "858de4cf-b386-43a1-a66f-e4caa31110be",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "b47aa12e-f50c-44d6-91fa-693c57cf4204",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d8b008f0-4d16-4108-b5b3-b9afabfe73db",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "4ca45559-4def-4e4f-aceb-94af0b0c5cdd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "70a7e9c1-d8bf-4d5f-a0a5-2bb3439e9a0e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "fa511744-0144-49f2-b368-494bf4459b15"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "aa859ef9-d512-48e4-b405-dfd2d3a24602",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "ef3b5725-0e3d-46d0-99b7-87c4c6ac39a5"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "21b5b325-ae4f-4140-bb22-66d450c085f9",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "79ba8fe1-646f-4d3f-8f26-d08830430648"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "30096567-0a1a-49e6-8fac-0ca07b3c64ca",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credentialId\": pm.variables.get(\"credentialId\"),",
                "    \"credentialStatus\": [],",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "90351a4d-2a45-43be-9990-9215bcfa1a00"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "df1fb3e4-4450-4d1f-a21a-ca2a9f19d2b2",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "0760390f-28ff-44bf-9d1d-ba396e61fb00"
            }
          }
        ]
      },
      {
        "id": "353cb5df-52a4-4226-83da-9a1039fdd0c9",
        "name": "Credentials - Update Status (StatusList2021)",
        "item": [
          {
            "id": "098c0473-8f60-48c5-a16b-15cd2dde325c",
            "name": "Negative Testing",
            "item": [
              {
                "id": "abef7295-d639-42b2-b03d-8c84a75c64a6",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "990005b4-93b4-4d1d-86a2-adcbc157e791",
                    "name": "credentials_status:credentialId:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "734dc037-6fd1-489a-8d09-9ea0df283bfa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "945c04f9-c9fb-485a-8695-2a26acab7b81"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b1d8c2fb-4e87-4600-8084-dcfaaa24b556",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId is a required property",
                            "    delete req.credentialId;",
                            "}));"
                          ],
                          "_lastExecutionId": "e1e736e4-fa50-4a80-8f53-9d548c39ba82"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3dad84b3-ee70-47b8-9026-5457336d7a78",
                    "name": "credentials_status:credentialId:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6639e586-ee7c-42fd-af41-fe8ed390539b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7a3b2ac0-5562-4e9f-a17d-f0856d38f1ff"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "58e0d9de-64f9-444f-9616-8cc2dc1d6e83",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not array",
                            "    req.credentialId = [pm.variables.get(\"credentialId\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "2d9970ca-4abf-4ef6-8b18-cc566a8571d5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "50b8e16b-f843-448d-a21e-1ff0908fc382",
                    "name": "credentials_status:credentialId:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "930f54f0-6a8e-45fb-ae2c-734cf12f1208",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "53a5588e-d87c-415d-b659-30e0219562a3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f6ba23bd-477e-4d66-98fa-88820881bcdc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not boolean",
                            "    req.credentialId = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "e3094e59-f0e7-4383-8149-a85db4b2252a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3bfe3046-2c99-43c5-a879-81cc39d40c17",
                    "name": "credentials_status:credentialId:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fb39869a-991f-47bb-b40d-1ff003e1c0ca",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8c66976e-6fcd-4480-b12e-4bd7fed49dca"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "98d18906-6efb-4e67-9aea-8f2da4c5a475",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not integer",
                            "    req.credentialId = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "ced7dabf-53cf-423e-a129-29ead3b7dba2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "91ed10e9-2ef8-4699-9973-acd17ccfba30",
                    "name": "credentials_status:credentialId:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "36d978e5-ecd2-4845-a797-fe83e15073f7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7c472b22-b9f2-454b-a7c6-50e6f3300780"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5790dc68-2c45-4fc1-ba77-7317e5da39da",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not null",
                            "    req.credentialId = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "0d5a74ef-5be5-4268-994f-cce70f7ff78e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "180a6be6-1f6c-4ea9-acd9-e332046a7a16",
                    "name": "credentials_status:credentialId:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "523de2cf-e332-49f1-9a90-e25b22bd58c5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c5a42a1a-d606-449e-8567-a8af27ed53d4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "279f7c09-251f-46f5-a36f-ce132f90ae5c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not object",
                            "    req.credentialId = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "3e211dc6-c3be-46e1-84bf-37b193bad548"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bbd35a53-086d-4137-a67d-be641910f19a",
                    "name": "credentials_status:credentialStatus:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e9d958d1-8bef-4360-b45b-e7bf3a980164",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "aea76cea-c2ee-48ef-bef4-f0324f4fcc94"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "43aac91c-0e57-43da-bda6-b8751ff1c7bf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus is a required property",
                            "    delete req.credentialStatus;",
                            "}));"
                          ],
                          "_lastExecutionId": "4cbababd-5edc-42e4-8bb5-82d4405a3266"
                        }
                      }
                    ]
                  },
                  {
                    "id": "17227625-ffdf-4e59-9efd-811d4ef8c0ba",
                    "name": "credentials_status:credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9b3813a0-561c-4017-be98-495b9a3a049e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "99f977bd-a7c1-4cdb-976b-2ac10476a8d2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ab9d62c5-0079-4d41-ae55-e357e4e1104a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not boolean",
                            "    req.credentialstatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "4aafcc10-4b4a-4395-9280-9d2f183a6ff8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "62dcdd82-9a14-4ea3-8427-3e815d5d8e7a",
                    "name": "credentials_status:credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0b96b935-b76e-4876-b299-1f0dd5b69b4e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9593dba6-f71e-45e5-9613-6a079d315597"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "50c5f311-fc5d-4f0e-a728-c8a1b02de4c5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not integer",
                            "    req.credentialstatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "8852149d-d31c-42ba-baf5-5050daff6d09"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e0ede8e8-4b1d-4ba8-afa7-01691df9c639",
                    "name": "credentials_status:credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9df7c413-8326-4f81-9406-e3f673847cf1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "50b61a8e-2971-47f7-806b-d011772380b5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "84f8b109-026b-4dd5-9a9f-f66164c3193f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not null",
                            "    req.credentialstatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "b6466a0a-6e91-4db6-ad2b-223688bfc805"
                        }
                      }
                    ]
                  },
                  {
                    "id": "42050734-ecc9-41b5-8eda-649bd3e43a00",
                    "name": "credentials_status:credentialStatus:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "eae5d8c2-103a-4bbf-9cfd-3e77c89aaca0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "21e476a9-3223-4fe8-8e23-23cfb06dcd13"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "17d7ee88-b4f1-4c66-907c-60ac169b2c5f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not object",
                            "    req.credentialstatus = {",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"statusPurpose\": \"revocation\",",
                            "        \"status\": \"0\"",
                            "    };",
                            "}));"
                          ],
                          "_lastExecutionId": "bf44079f-0a62-456a-99e2-6bf436e72fdc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7f051501-88e6-4dca-92b5-4e1a9505642d",
                    "name": "credentials_status:credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a5fde4d9-bd82-4644-8b78-087728378f59",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a55c22ed-f525-480b-b76c-bf339b3cf2b1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a80435d6-0a42-4d44-82bc-21dd3db954ef",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not string",
                            "    req.credentialstatus = \"StatusList2021Entry\";",
                            "}));"
                          ],
                          "_lastExecutionId": "439260af-9cd0-49ff-93f4-a9c1fc38a41a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "30d45802-45a9-496c-b145-789850a7471e",
                    "name": "credentials_status:credentialStatus:too_long",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "67527390-09d6-4496-a6ef-ce149bb70839",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2afdbfd9-1c3e-4c18-8607-61575c4db658"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a26c232d-3ed4-4350-b3e0-f292a05f8971",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus can only have zero or one elements.",
                            "    req.credentialstatus = [",
                            "        {",
                            "            \"type\": \"StatusList2021Entry\",",
                            "            \"statusPurpose\": \"revocation\",",
                            "            \"status\": \"0\",",
                            "        },",
                            "        {",
                            "            \"type\": \"StatusList2021Entry\",",
                            "            \"statusPurpose\": \"revocation\",",
                            "            \"status\": \"1\",",
                            "        }",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "57343caf-55e4-470c-8081-4b4d6075e3f8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c7d3fef0-ab6c-4b6b-91b4-9a87106c6199",
                    "name": "credentials_status:credentialStatus:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e69cc3c9-de2f-4cec-9afd-bd66558205fe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f0b3d760-4076-433e-963d-d659106a657a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d1c6b620-2b8b-4934-b772-45bd670a9cdb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not array",
                            "    req.credentialstatus = [[]];",
                            "}));"
                          ],
                          "_lastExecutionId": "4fac0040-b800-4a34-be12-e5e3d0105821"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fd1ed922-94a3-46bf-b8a8-e3d0fe643484",
                    "name": "credentials_status:credentialStatus:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1a7c8e9d-812e-4d96-ba4a-f4d844e13ad2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "19e2d288-b99e-463d-9797-99f3b9c00f1e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "39588ac9-15bb-4adf-bc1e-36477ec90bf1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not boolean",
                            "    req.credentialstatus = [false];",
                            "}));"
                          ],
                          "_lastExecutionId": "264b1193-2959-4488-99c7-72785b944026"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f7858649-bbf2-4ebc-a540-0cc569e14a34",
                    "name": "credentials_status:credentialStatus:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e80c7e08-d354-4804-ac24-b93ea94e95da",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "97f97207-1852-4f9d-b9be-822996bf0615"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e9060f65-edc2-4dc0-9b70-490cf4ee8fca",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not integer",
                            "    req.credentialstatus = [42];",
                            "}));"
                          ],
                          "_lastExecutionId": "e2f6948f-99c5-4fab-a7f1-7eb2ae29fd60"
                        }
                      }
                    ]
                  },
                  {
                    "id": "898b2571-2481-4157-bc3a-3620c7c7aa9d",
                    "name": "credentials_status:credentialStatus:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4cf46ee7-5a0f-40e4-ab12-a422e7165453",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e04e48a0-a18c-4aec-9370-eab32f442510"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "21bc506e-97b8-43b1-a380-eac74e543968",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not null",
                            "    req.credentialstatus = [null];",
                            "}));"
                          ],
                          "_lastExecutionId": "cf71b74e-96ab-4c06-901b-357bb487e23a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bf1f1893-3798-4363-abdc-983dd8cde89e",
                    "name": "credentials_status:credentialStatus:item:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d4f800b5-dafe-494d-8d1b-fca4755e74c0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "94311a48-1c9c-4c17-a309-92a4dbec2d42"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e968625b-6499-43a7-ab4d-624b77b52dfc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not string",
                            "    req.credentialstatus = [\"StatusList2021Entry\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "c44c5ab6-4ba0-4ec7-9275-b5d7101a650e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d9dbc222-6827-45f5-ac2c-e7c524065256",
                    "name": "credentials_status:credentialStatus:item:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6da6f58e-ffc4-4a6d-a866-7f9f3c49de53",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bf27ff21-8cf7-4672-ac5c-bec01c31970c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f9089bb0-59a2-45f2-bcfc-014266859f3c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type is a required property",
                            "    req.credentialstatus = [{",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "16950712-03b5-4df2-a820-a2386dd10f35"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6bdc9a12-3dd9-4b14-9290-55d06b252d65",
                    "name": "credentials_status:credentialStatus:item:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e6214864-14ad-4fc5-955b-1cd3be219e44",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b563f056-e0bf-4a72-9a94-5cc6afe0aa76"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5c048499-0307-48e0-9213-e65cebde6725",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": [\"StatusList2021Entry\"],",
                            "        \"statusPurpose\": \"revocation\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "f39ae946-0974-4632-a1a2-c9db4f7dbb17"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ae7e5e84-5503-4920-915b-23491911b46d",
                    "name": "credentials_status:credentialStatus:item:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4b08681d-0bfb-4178-804e-b8626e6b0098",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bb2028b1-be0b-48e7-97a5-71551da0c7c4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ad9fec8f-1c22-4086-8e46-4bbb94d89dd7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": false,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "0a5dc1c9-e987-4bc4-9bcd-106f97aabe22"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4df0af4a-a06d-4575-a15e-039f673716fb",
                    "name": "credentials_status:credentialStatus:item:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "65c44961-4d74-4619-9069-e60dc9ce99f3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3f45f00e-0489-4a8e-838f-e716d6fa5b00"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4a52f90d-5edc-4fdd-b83a-39b0e6e1022a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": 42,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "86d7b76c-1361-49da-a408-56c007351253"
                        }
                      }
                    ]
                  },
                  {
                    "id": "429991ba-0002-4cfc-abc9-b03a8af53b5d",
                    "name": "credentials_status:credentialStatus:item:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4ae8d991-f189-4f1b-94db-24c487c2b35e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "26b1764b-9a3f-4532-b482-37c48a520f8b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7b78e464-1750-42d4-804e-e1d27647be90",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": null,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "e98e23a2-719a-4579-926e-37bae7372c33"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bb16b2ef-cef0-45c6-bdb9-725015006494",
                    "name": "credentials_status:credentialStatus:item:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a450ccad-1c1c-49b5-9338-1f4c709d7b00",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "08abb3a6-29e9-46e7-afcf-4a4ba6a7c7d3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8650119c-aa73-4ffc-8a3e-94198abbff9a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": {},",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "29f2c36a-72c0-4d6c-859c-d17dadaece5f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bf53f6f4-5a01-43bb-8199-4c3065e5a445",
                    "name": "credentials_status:credentialStatus:item:type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "df65c8c9-3ea5-49a7-85cc-d7e1a16bd1ee",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "05f996c9-9f6b-411f-920a-016557badcd7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b0e2e979-db5e-4298-9815-cc03a564b4b5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"invalid value\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "7d868c1d-cb71-4684-b93f-5bb5e30eb467"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b89078e1-a037-4bec-8fd3-767f50e959cb",
                    "name": "credentials_status:credentialStatus:item:status:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "265e2600-fe98-4516-a1ab-589ae2005c79",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "817859f9-4e84-45be-b027-9a600c595a18"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "942fa1fb-b6d2-4f82-9966-6131a9b2a65c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "3d4ad5ed-88c0-4133-9ddc-ba8bcd9302a1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d6ce7d89-9cd7-4c0f-b480-71f284554b7f",
                    "name": "credentials_status:credentialStatus:item:status:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "54ef983f-ef90-41ae-ad1e-b66b0eecc638",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f142323b-0611-441f-8150-f7d89fe631ee"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b5076331-ba8e-43cc-8f2c-2e6db23a651c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": [\"0\"],",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "9d74d650-1bc9-4605-915f-605f7718c8a4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3b24f0a9-e2a3-4416-9c98-1a71e25a3f9a",
                    "name": "credentials_status:credentialStatus:item:status:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fbf2f755-679c-45f1-91fc-e3ae33fb4a45",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d8b3f56e-3e98-4d92-86a1-75d378edd96b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4955a8c8-4165-457d-b3f8-3351e15f1e50",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": false,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "69a42210-28ea-4cea-8f48-110207651c9c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5ef9c83a-6d4e-46ad-8fb3-9dba8f1e72cf",
                    "name": "credentials_status:credentialStatus:item:status:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7be5e908-2535-4cfb-8c4b-67e95f622bcc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0ec0ff3b-0d09-43d5-8283-3b85ac84b072"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c1e05b28-06dc-48ab-9efe-7bec7227930c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": 1,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "03a92e4d-de26-4049-b165-f08d5810bf1d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "df27afe0-f8fe-43a5-bbb9-79abb1fe0b7f",
                    "name": "credentials_status:credentialStatus:item:status:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6d975b61-fe95-47ab-b97e-10532dd43546",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "530009a3-a0fd-4439-923b-ddbdbc65a3b2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1b9b3aae-1d9b-4041-a7e0-03b2d94f9a51",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": null,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "04edb9fc-ee45-49b1-be27-316b11ac0037"
                        }
                      }
                    ]
                  },
                  {
                    "id": "80330c71-a20c-4710-8fdd-e58a79bc9ef3",
                    "name": "credentials_status:credentialStatus:item:status:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1aeedae8-c574-4bb5-a3d2-3d49f3c593c3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9de0e9e5-a72d-4e88-bd3e-b61e6fca9095"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3f621d27-91be-4b7e-83a9-098877bc7ab3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": {},",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "ea588744-9879-4a24-8728-ebd013d6b5dd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7e711d6b-48ca-4ece-bf89-0aa80ec5c5a4",
                    "name": "credentials_status:credentialStatus:item:purpose:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f2ec36f8-57ff-4108-b29a-d658d8df5ae6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "560ad992-263a-4edb-a4ff-1bb93832f839"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "14ae9061-3f34-4a67-b96d-aa349e2231fa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "9099d634-facd-40a8-9b0c-6ff99173ed11"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9374f3d6-2a83-4801-ae72-51f393f77055",
                    "name": "credentials_status:credentialStatus:item:purpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "677cd594-a13f-487d-a024-e20b59bf3a66",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "523aeaed-a3c4-41d9-b36d-03eeb45056b6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0b0a0b39-6b10-4535-807d-d13122ae78fb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": [\"revocation\"],",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "e5bf3ca8-4768-46d5-8bba-919f46f7d6d1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "44cc2660-e0f6-4872-9518-5ce8d176e81a",
                    "name": "credentials_status:credentialStatus:item:purpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e1d6283d-9fc6-4881-82ef-5232a842b78a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f19d266b-3c07-44a9-8233-cc8e4544e11a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "43fb5eb5-b14a-4991-835e-141fb840ffea",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": false,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "be77f1b7-a1e3-4d55-9f6d-6a28e5832b24"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2de9c439-6cee-4475-a306-eb97d69e46a3",
                    "name": "credentials_status:credentialStatus:item:purpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c5ae791e-aba8-41ce-bc81-21c48a96aabf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fbbbeb61-a639-4b1b-b870-ebe7033eae78"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5df5662f-084b-4ea8-8b20-fca4acceca8c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": 42,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "6b933472-4e02-458e-90bb-474a6d76d9dd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6e208e07-a8fc-4250-bab9-0651776ebd89",
                    "name": "credentials_status:credentialStatus:item:purpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "396e60b2-283c-4966-9ceb-101233381d2e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "95d7d036-923a-41b1-bcc4-a739e1f4dbe8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "521ee8e6-3a61-429a-87be-bc45e936d609",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": null,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "6cf8f104-0ba9-4fac-9d61-5b50365bc8ad"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1251b2a0-1a06-4108-84c6-54f99ec0dec9",
                    "name": "credentials_status:credentialStatus:item:purpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2a09d874-8eac-4756-835e-ff626874d1e3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "38d27de4-2818-4ba6-9632-fcd3afce00f9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ab496458-428d-4339-80c1-1097af510c6a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": {},",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "f22d4b08-4571-4f81-a5e6-f6cace654daf"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "da9fd3f3-cd20-4802-9d84-fd30b32212bb",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "19d00f9b-335d-49e5-8684-25e87c15f9bf",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "deeae99a-1ee9-43dd-80ad-58e8745471dd",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "0a5524b6-eceb-490f-9f64-f6a5d41c667b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ccd90ea1-730c-45ef-951d-6431e1db29b1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "da81f2f0-c3e2-4ac8-bffe-598f076be643"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "32506ff8-6e18-4250-a984-d98dfbfb05b9",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "3dc441e4-ecb6-4b26-bcc4-30319957f086"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "53466a31-9d24-4c0b-86dd-7cdabe0c3755",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "031b4339-e70a-46d2-9e91-fb18d171a55a"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "b003fb87-7552-4670-aeba-eb455703183d",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credentialId\": pm.variables.get(\"credentialId\"),",
                "    \"credentialStatus\": [],",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "aa56ef19-b683-4170-a6e0-77805b240c57"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "a40efadc-e433-4566-a925-1d58ec9100b9",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "f23ee80b-138e-4fc0-8524-8e51fb0f7131"
            }
          }
        ]
      },
      {
        "id": "c69d22af-a769-4bcb-82d4-211256fbeabd",
        "name": "Credentials - Verify",
        "item": [
          {
            "id": "2735c6a9-2b78-4c3f-b9c7-21a9af4e7af5",
            "name": "Negative Testing",
            "item": [
              {
                "id": "41398895-25ff-48c3-9da7-a1e57aaa2088",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "732f9827-2791-4a79-879d-b851b5dcd6cc",
                    "name": "credentials_verify:vc:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9a2f9ee8-7360-408e-a7b0-566858bc4412",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1ada64bd-b442-45f4-bf03-6cf01e0c1657"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e0c3c86e-e287-4a6c-ad25-143072fb7165",
                    "name": "credentials_verify:vc:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": \"string\"\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5be397eb-1d87-4959-9a6e-3331f18adaac",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4f4e3991-3a7b-4d5a-9b1d-b16d0458585e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "33f3925f-4dae-4ac9-a85a-b6cb7934680e",
                    "name": "credentials_verify:vc:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": null\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d5c9b147-f98f-4871-80db-b1fcd798f080",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a664a044-2506-45ee-b6b8-88d10325b1a0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "19ba7805-1693-4558-bdc9-317af6854ae8",
                    "name": "credentials_verify:vc:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": 123\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bf5d854d-f4e9-49f2-ad41-0cc8ed9c4cce",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8954e69c-f477-410a-88a1-ab40384dc8fc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "95c028d2-934a-49c7-b3c0-d2758ea159bb",
                    "name": "credentials_verify:vc:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": true\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1f53ad24-9945-4b51-ac89-87cfc9ad1580",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "880fb0ea-f28a-4da1-9591-9d5eb7aed403"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6e1ffc51-567c-4031-8d16-d17760e4f835",
                    "name": "credentials_verify:vc:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": []\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4b02029c-dd97-471f-96ec-18934d6488eb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9aeb6a43-95fc-4ef8-80f8-8d6c80a6bb12"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a636ebd2-f4ed-4f0c-bbcf-883c56fa4a00",
                    "name": "credentials_verify:vc:@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..V5PnQzCWxrPiCYT-WAyKAnypebgwYeD7lX_hyIjFa_lbJje23pZAfFdgnlqBnXLd19Ksa8fZpCE9TN7kAjzxDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9ef6d809-f733-4178-9c6e-c95358733f2b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "eb4b930a-e381-4f15-a85e-f2af394a0f76"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "80ccd158-a11a-4239-b470-dfe95f908f3b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b735d530-dc19-4680-9aa5-8c16229186a2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ed4f4bc5-31ba-4a4a-828b-245f127f2e44",
                    "name": "credentials_verify:vc:@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1d9aa062-be9d-465e-967e-6e410947300b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "39d5bf61-8baf-4c50-b270-0fbcb043956d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "893cf532-c0a7-46e3-bf9d-64e91ea55640",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b536aada-b5b7-4317-b8c4-99a40684e665"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0528455c-808a-4a27-aa67-292abab82087",
                    "name": "credentials_verify:vc:@context:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6f9509f1-9ff4-49c6-b9e1-953922d37f27",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "fed3b697-b281-44e5-a0f8-6a3632848acc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b24346f9-ed51-425e-a51d-a7279b357dd2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "251956e9-244b-43af-b55f-289afa0a0ae3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b4831263-8f37-442d-beea-f19ae8ac30a5",
                    "name": "credentials_verify:vc:@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f851c42f-59ad-440d-a734-927bf08a8380",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "de839940-725c-401d-877a-36df25a14c81"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "37cc09ff-f4a9-4207-963f-09c76bd33e2d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "93487a12-4f30-42c2-8f6f-dce35440285a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "979caa03-3560-4233-acc6-19e1aa36d8d3",
                    "name": "credentials_verify:vc:@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": {\n            \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n        },\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..w4xJhf2l_4JzwE4kp8pD8dNJdWSaws5HiBgal8zFzB6i9p05tmPITdsrUttpUwopW5UAq9M_EZVqlz-kRfSFBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7673130f-79ef-401a-b17b-4a28b1dd957b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c8d7e02c-4d85-4c7c-a709-f87784d9d3c5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e952b03f-e5f0-4a6f-a465-6b5e5530e5c6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9afd4660-01a4-4191-b837-9f9ac08243ac"
                        }
                      }
                    ]
                  },
                  {
                    "id": "444c9c24-298d-4d65-8bda-6aff94d6537a",
                    "name": "credentials_verify:vc:@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": \"https://www.w3.org/2018/credentials/v1\",\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c2909546-9279-438e-b1ec-e6a59aa02e67",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4cc085ed-fff7-4c5b-8441-5fabeeadbe1f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "aacf62ab-dfa5-4e82-b08e-eb07e8c13359",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d663371c-e233-47b4-9391-eb51d3e0eeb3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "61e2be20-8e5e-459d-a4cc-1eb2d3fb03ef",
                    "name": "credentials_verify:vc:@context:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dbdae524-bfc2-496a-9362-244968d0ff71",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ccd57b79-b8ef-41d6-8b13-6acaa5b0f90b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a7fa8f4d-e6da-4ab7-8e4c-b008b91a69d2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3924c376-0185-49db-b4fa-b0ad0e4a3c35"
                        }
                      }
                    ]
                  },
                  {
                    "id": "05b234d6-e4f7-4560-951f-dddb991ab328",
                    "name": "credentials_verify:vc:@context:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5a39ae47-8e54-4bfd-a6da-b8b84037866f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d55447b9-b1f9-432b-bad7-00c17772d88f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d52ab360-33a8-4899-9dcd-9cc918459323",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "22ee2781-6a4f-46fb-ac77-56c392588a63"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4a1da7ee-47ab-4c68-b11c-a3f1671539f3",
                    "name": "credentials_verify:vc:@context:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3af174a0-3f91-43d2-bb75-6c187287d32c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "bb95759f-a843-40be-a206-b3a33828703f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "71e97ee9-6045-44f3-b5ab-c4a8f3f20fda",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "eb45a4f9-4cfa-4867-8831-652d16372dbe"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d1d218e1-ade3-4f5d-8c5a-3a779eef11b1",
                    "name": "credentials_verify:vc:@context:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d9dbe047-3152-4ad0-813d-6a20dcc8c931",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3d38376b-9028-406b-8943-0eddf16a7ede"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3dd1e957-99cc-41da-9084-5f89c78a6879",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "59cb2344-73f9-4ec5-bff0-3f19ff692653"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9fc33697-ec3c-4116-882f-18d7ca284d06",
                    "name": "credentials_verify:vc:@context:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            {\n                \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n            }\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "aa797c0f-472e-4207-823b-1ac0d5bd5bd7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b5dededc-072d-422a-8365-a95899344ab1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4ef42ae0-f723-4288-96c3-476d3dfd3ef0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "aec6d5b6-2375-499d-83e6-d138234b5ebb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "375fa264-d27c-4c7e-8b65-e2b157cbe2d6",
                    "name": "credentials_verify:vc:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": [\n            \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        ],\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..iom-sOLAz9-9FhadLRpqOYXXBhx4Rgwa3I3w1oh087xFQqIMhVTzcSpHCGdGWu2QT1KwrrgVAXPeTT2EthmxBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dbc85522-6c42-4f05-8667-b9cc233c62b7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4871e6fe-a4be-43b8-9ff5-e8fa9d97e725"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "79ad110a-bac8-4c15-b0e5-f0c44d8a0dfd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d45424d6-b3a0-47a7-8996-f9fb31dc88bb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2ad909cd-0752-4cd0-ad16-417d6aac0b29",
                    "name": "credentials_verify:vc:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": false,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..xftqB9cBFsSe226cWEZ4wr5sfxlAOJYYo6yjwPCVeHDdk6OoWGjZQGO7xXpSidrrr6e1imP18LiFK34xtRWADQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "381cd64b-325c-4719-b913-905c1b4f1ecd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b351f3e8-8941-4681-89f8-844432209f17"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8751351a-9c40-4aeb-9d1e-12ba8acab01b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1bacc56a-7643-41d5-bc8a-92835e32f1dd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "445017e5-7a69-40b6-90b7-f97f726acde9",
                    "name": "credentials_verify:vc:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": 123,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ZqV-qqLOh_Kb4vAdXKBfmFdNyv3FzXJAIYV9JltcYGDAefU3OUOnoaAU2WSEufkuYkvczxfRLhrMKgkoVoIRAA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a780f39b-6406-4977-b5f6-90234f4c57f8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ae240f5e-54fb-4fa6-99e2-1504b1960d8e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e7b0c54c-214b-43a7-a11f-1fb66800406f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a6fd0893-2cb8-43bb-8142-975ad2fca2ac"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4a564986-1e25-480e-b862-e977ce50fe76",
                    "name": "credentials_verify:vc:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": null,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e80a1cee-82a9-42f1-b746-57a75014fe41",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8a21ed2d-1aab-45e5-b7f9-34c2bf8cc69a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "320e0549-29d0-44b3-8eac-2c63c5750e2f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "262f16b4-3fc8-49bd-92c4-ea0d2787ea4f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "24bdacea-f345-4bfc-b1c7-6a10f8dba5dc",
                    "name": "credentials_verify:vc:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": {\n            \"key\": \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..0Nrj_srTLYyA-9ZVA_dkVGjUcKx6xELHjbbdppEMFPGEN5c2gPXgstNRjnrr8hhMMegSAbvGASKWseBXGR9uAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d9ec8179-e956-40dd-8470-3d48173f4140",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "efe61a34-5089-4dc0-b52a-323ec0184a06"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f49de305-2e81-47d8-81a8-c45c49cca568",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "129f500b-9578-4347-a80d-55fc32ab1cdb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a604930c-3c0e-4f97-bb93-3ce60b4967f3",
                    "name": "credentials_verify:vc:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Bx6sv21fSmT7fCCxU3fDaLhEOhfRK8llXSiFTgApd4PHot00nVjhaKQyhBW9FfFmJljstlOV_Zff164cxOKiCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a2c5ba66-16ea-46dc-9a91-49c969a5bf99",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c7e350be-80ba-47c5-8460-16f6f6b36172"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "60ba6278-9bc5-4ab2-80a7-73d37cf8cf59",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f231aa85-9d0c-4d68-ba3e-d749e6323e0f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2d6f0e52-6ce9-4460-884f-81de2df5a8a7",
                    "name": "credentials_verify:vc:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "45a1b327-f976-42f9-9315-480319bc9ad0",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "da31f8c1-8322-4d8d-824d-4a50f29cc9a6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "97236172-a3de-40cc-bb3e-4ee40f10f192",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c4df276d-6a78-4bc1-ad8f-ca1a03c76b8a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4e3c844e-9a3d-455f-95d8-9285ea1d2c18",
                    "name": "credentials_verify:vc:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "011d39eb-5bed-4963-a638-6f6a81542e9b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9673bab8-3da0-4eec-8243-db4ff0cddc4e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5f81ecb4-fbeb-4819-bf7a-2423ed681b07",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ab3f7590-6bd0-4a8a-bb1b-f15cf5b1cbcf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c31e2187-fa0b-4f4b-a0e0-5df212250798",
                    "name": "credentials_verify:vc:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ec02d901-26ac-48db-81eb-b046c8316c37",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a6466a99-81fc-416e-93c6-1ebf4440fb33"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5e3af538-d932-4027-8972-2b92ebbe7027",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d1aef6eb-4e11-4874-aeee-bc0925fe8222"
                        }
                      }
                    ]
                  },
                  {
                    "id": "95ba581f-e1d3-4061-9bb0-2e40581ddbf7",
                    "name": "credentials_verify:vc:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8b23e1ec-9ecf-4b74-98e6-fc760e95c136",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = {\"key\": \"VerifiableCredential\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "14b1da6f-9313-4005-89a4-661a3b889697"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c87caf60-fe9c-4a34-b7c6-7e4226337743",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "44c94cf5-9bbf-4d83-9e5c-001ec64a740e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9492d58f-5852-4366-92be-e154e87a2a24",
                    "name": "credentials_verify:vc:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": \"VerifiableCredential\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5e99587c-0c7d-4089-98a8-70795b1e3cad",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cf7a3165-bd80-487f-b4a1-e7fa436daf75"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3ffb71f1-1c19-4001-bda4-5252b5290848",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6fa4d8e0-3973-41ee-992c-f520698debb5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7f1146b8-10b0-4fb4-bf39-57f2badfb9c3",
                    "name": "credentials_verify:vc:type:item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2ac00005-c0f7-4900-b89f-67abfebffb10",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must have at least one element",
                            "rawBody.type = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4ac05e62-f198-4c53-9ea1-44a9e70f85a7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8f500114-5b44-4bfe-870a-05eea76d2886",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e9e0201b-e9cb-4a56-8ddc-ffd64be0e643"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b6b3eee8-ebb3-4d07-b6d5-f414407fbbed",
                    "name": "credentials_verify:vc:type:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e9d85f1b-9e55-4d44-8f96-355983e19bbe",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "33d575df-5442-4390-b486-2fd0ab510c41"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0eb81e0d-d079-4460-a3fe-f9d3b0382e1d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1eb5be3c-da4a-40c8-88f1-fb7e5b315548"
                        }
                      }
                    ]
                  },
                  {
                    "id": "383d3923-8463-4f42-bc88-c3f1c4145836",
                    "name": "credentials_verify:vc:type:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4bc4fb21-05d4-4350-a3d4-6097ec7b2fa3",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3971c8bd-cb1a-4511-b8d1-23d52769f799"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5dd88ca3-f9ab-468d-8081-0ce70b3ba3fe",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5c99013e-d2c5-405e-9377-4ce0eaff377b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4ba5dd65-2e4e-4b52-b592-71b8f08b10f4",
                    "name": "credentials_verify:vc:type:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e48d6690-b98d-4b2f-9559-16f79051f2bd",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2c7f5472-fcb2-41bc-9703-bc1d04dec387"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "65f16574-7000-481b-98f7-4c83332e0b6e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a42c5ab4-fac6-450a-bf06-217b8a6bc8b7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7fd8a40b-70f7-435b-962f-626b4af490bd",
                    "name": "credentials_verify:vc:type:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c9351839-89ee-4331-85b3-d1e382918d43",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "81026ea8-a1fa-49ad-8779-2ea38ee8229a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6410ed15-bee4-4191-b205-3b7cc66ec293",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5fa92fd4-6812-46da-a912-b683a6476858"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0aea63f9-fa76-4557-ae59-c18ee9785811",
                    "name": "credentials_verify:vc:type:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ec9fa9e5-6434-4d51-838b-3a7e66392619",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", {\"key\": \"VerifiableCredential\"}];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8386c826-d4a4-4c66-9c73-250f0ec978c5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d34c86a5-d663-41fb-b039-eb9fa019fc5e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fbf50a08-0d1a-4957-a56e-46bad8fb0721"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b4bb80bd-8f8a-4309-94e7-d6f6222dfeba",
                    "name": "credentials_verify:vc:issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8c20ad07-e04a-48b1-bb55-5bf2bdb00291",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "145c138b-4ce6-4b17-9831-576bf76b0b9f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "725c5300-ce45-4021-9d11-3918d464d65f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "eae2b8fd-7344-48a2-97e6-38a7f86ea0cb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "68245b73-7378-4e03-8907-37517d510432",
                    "name": "credentials_verify:vc:issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": [\n            \"did:example:123\"\n        ],\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Mdpb0nbZLuHLqh6IBr6ouahKZNFB-cIKJXn-b-O6Pt6HyJaECfc399qgMTWovf-l04XYEpuYDmfZeYVThBeMDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3d8c2949-36db-4097-b6c6-af11a38df654",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "be0a8480-31a6-4eeb-acf7-f6762bc931e0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "14aab3e4-d604-4cb5-9e70-b625a9bdb09b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d9258e29-257a-44fa-808c-9b5116002ae1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d595c1bc-d448-45f5-8082-5d54b7498a41",
                    "name": "credentials_verify:vc:issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": false,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ryGzH1cVI0oyA0eBPKjIBDGJ8FYapvVnUEcovWWepoAASL3SzOOUvcQ9XOnQlclFU8dYhkEN2L8TQAj2OHlcBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f6e3a96a-cfd7-4ab9-bb10-215120a83408",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "90bdbe3c-26e8-42cb-8e4c-2f56bb371108"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3f0f97fb-2bc8-48be-a91c-a79f0b0e7398",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "90c55e7d-87df-4332-814c-9f1ade645a96"
                        }
                      }
                    ]
                  },
                  {
                    "id": "532fd0ba-2ec9-470c-a3c6-7d9f69aa61a7",
                    "name": "credentials_verify:vc:issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": 123,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..kEE8wQKYgVQlcBvJeVeV151aR_iD6vPrlW2bgXPW8NvJx9AOuW5eGtL3j_I3xIGR_JWDA5jGy6KDVkqJNEDHAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2659d202-bbc6-4893-b01f-5845a315a905",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a87523ba-1bef-49cd-b5c4-0e77f95d42c9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1e5809ea-8fac-4a80-89cc-51c2a0cdda7f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2cd69f19-859b-452c-a84e-5873600044f9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "58ccd0e0-e1d2-4caa-a429-309183e851d5",
                    "name": "credentials_verify:vc:issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": null,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "05f5f38d-11d5-4e7b-b78f-405871e69387",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f580f012-5bee-4424-870c-cf633045bd1b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "81a735bd-c064-4935-926e-c2c1a9c4264d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e788e952-dccf-4a0a-966a-3b167c7eb4f1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d9c8f36a-6c28-4e7e-a345-eca275e00720",
                    "name": "credentials_verify:vc:issuer:id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {},\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9891d0fa-5add-4b3a-a699-47dd59c32cc4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2eac19b4-cef2-4155-8ab8-718ba9245a37"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7caec293-4d37-4cf5-b5bd-ae748b504079",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f6cfc4c0-3031-4ab1-80db-5e7f72d5cd87"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d9c0ac55-7581-4468-a0f5-5f655dd9a162",
                    "name": "credentials_verify:vc:issuer:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TsN_31UJYzTTx1xh5CB9PjhnehJza3N5gAEFoNO55HLtQvoqGiEd-SI_4Xy7cpuYMbHdYf5CKHwP0eooyzjrAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "776c5a44-fa9e-4cc4-9f07-dd7e0cf15db3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "57e93565-afc1-4f54-b57a-03ae8d6cfed3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cca588bc-3bac-4a50-b663-43db231a79db",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1dc2281f-ea63-4943-91a1-cae2a88a5cf8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d820646e-6584-44f8-83de-4d290044b70f",
                    "name": "credentials_verify:vc:issuer:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": false\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JOl3FF8mG94K8DDAtSYeirCtE5GRVHXYZcIbf3JRCquZ7obaBm1wh3rEzbG-t8kjdWMn7Zwy8q4zw7pMC2-gAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5880d249-f95f-4f8c-b2d1-09546ba2a224",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "10f589ed-fef5-4bd1-8e9a-2b02998ef6f4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6e1ee1bd-c2ca-4bb0-ba77-ab5f8297705d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c2bf2958-ba28-4593-91f3-4fa40fa40fd5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "11e236ea-546e-4ef3-8b7a-11fb699c4be2",
                    "name": "credentials_verify:vc:issuer:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": 123\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Ibp_FWO5FwzfTfd_PeTgedqAEcbS7dtCOoREanyZP0yAg63ZGay4hjjd-NwZfmWG8LRbMSqtjX2_Cu5BbBEoAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e163d827-71a6-4964-b902-3130caf46461",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4c2bab6f-bccb-4b67-b421-fe282548cd0d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3a347d42-87c3-4a78-8a27-4e9bb64fa8e9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fb4c8ef5-50f8-4df5-ae6d-8a7b2fc6485c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5de5245f-41c8-4108-8a02-d2060f336be3",
                    "name": "credentials_verify:vc:issuer:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": null\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a0176cca-a832-4768-9ea2-5fcf635468a7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "821a9a2f-2f0f-4ac3-b3c5-a97a67ee12d5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0bc9f7ae-b233-4271-adde-a32e333e1275",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d460e581-395a-4393-bf78-70624ed40065"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8e6638fe-ffeb-4e1a-9b4a-103ef99d0564",
                    "name": "credentials_verify:vc:issuer:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..n3pFfPx4jY7EjlOpLNJT4CAJYI1roVE6LoUgLQhJ1bMgS5xUKbsIhynp7xDW-vSGzIcu58w-Z8_d9--99NCDBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8704f1a5-dc5b-4245-bfe7-a2b05a0786bd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ffcd6360-03c1-4570-ae6f-d1ef060563a0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0708221e-be8e-4fc5-ae6f-e2bf60dbcce4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6a4018fa-2c19-43a7-b52a-b032f43ec895"
                        }
                      }
                    ]
                  },
                  {
                    "id": "278b7f94-791b-4107-b2c6-377cd6c9434c",
                    "name": "credentials_verify:vc:issuanceDate:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f970e20d-73a0-481d-8291-c555f0cacca6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "570712cb-0c9f-490b-860c-c9e3c029fb5e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "51a3bacd-440a-4047-9216-b30de935b6eb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "98d7cd96-9e65-4db2-b8cc-3d0d3565dcea"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8fd65fe9-76f7-4399-88cd-c1060f802855",
                    "name": "credentials_verify:vc:issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": [\n            \"2010-01-01T19:23:24Z\"\n        ],\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..eJGt2anEVhR3qXrd8726C2a8PNJ-S4SnhIUB2YpAUiLJhTQ4FcY_nONpl-U0MbpWgwlpJ7xa1_uk4EMrGmOUBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1ef87cd8-d304-45bc-8ae4-c48ccb8d68ac",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e9801b6e-c3f6-4958-9c0f-c291c09a89e6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a420f530-8fc1-40de-911d-3e173b7ea664",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a04cdf0f-10c5-4963-83fd-bbd706851192"
                        }
                      }
                    ]
                  },
                  {
                    "id": "74589143-c1be-485d-b83f-db2282628b65",
                    "name": "credentials_verify:vc:issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": false,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8Ax_d8Yp8MIszSaGQa1WkiT4xktUk0Ltg7EF3QQ-GGY8JaV_jR6-zRUlEF2iW0HcK6C8ZoAt0KrllUUDdJkdDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bfc105f3-acd9-41e5-b1f5-bc3ab8ce6bc0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5eaac786-f5a4-4752-b757-7a6681abb5e5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9f824c59-fc94-439c-a74c-12b0309eccd8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9632d202-52bd-4807-a5a7-f751ed1e56e4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4f8bb5b4-4436-4ebe-ad6f-fb32ef4f16dc",
                    "name": "credentials_verify:vc:issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": 123,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..x-sSX9vqc6977YPFhNbzjKdisDv4qD2mx-yBSH_EG-UQCpyH_ErCzoFWnpJzRJKIKbOLEvvZ5SO_fWbNWyNdCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5cba76e8-36d6-4223-8da1-c06621457b13",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c0e6ae06-8df3-42c5-990b-67eab5ae951b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "74da567c-de0b-40f0-9389-a42a89704e19",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b4279161-ce19-4a9d-a365-ae5191275135"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ef7784a1-b416-4f3e-8f41-8c86358a798a",
                    "name": "credentials_verify:vc:issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": null,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c468fce4-484d-4187-9741-32e3bc2fd1a7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "28f58b6d-0548-42f7-ab51-6c713b21438b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a6ee58ed-2b2e-4ad3-a8ad-d9f0113535cb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "df13b31b-9e61-4d16-a0dc-846e7be5c995"
                        }
                      }
                    ]
                  },
                  {
                    "id": "78c5e3dd-2b85-4f51-91b9-1d72a1784f34",
                    "name": "credentials_verify:vc:issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": {\n            \"key\": \"2010-01-01T19:23:24Z\"\n        },\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Z1GVMKiJuJeJMpR_Ag4Wpv6940N3WUreYSxEsPaZgU_J1C_EDUj8ycRJitlJNEBBuGhibJ0GWyK-WW9RO2WCDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e8ad3020-d190-43a8-a948-3d6ee4ff32d7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b4d54310-fa1c-41f0-84e3-82f18329aee7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c604d8d5-06f8-493d-a835-af7258a7bc38",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b1d1fbbf-d02c-40b2-843f-e22924b74166"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2fb254d3-4973-4392-936e-4380645575a7",
                    "name": "credentials_verify:vc:issuanceDate:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"not a valid XML Date Time string\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ebrsCszvH6TQHw1QhA8laajPRWL_zGvQ96Up8A4TiJrY7ueFm3V-Suk-KNd6JKckpOxLoF-Cb24KG_g73AqHAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "31fdc8cd-f57b-4986-9f0d-4a05c75a444a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a3cdb452-e23a-4ce9-a2d7-a59153c64855"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bdc0b391-a226-4451-9d3d-39cdb3da7265",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8edeeaee-92a2-44da-9878-ab5422093e28"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3b13388b-0716-4268-acda-24f08275bf0f",
                    "name": "credentials_verify:vc:credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "61918e42-77b7-4dcb-9c7d-a171b4caedb6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f28ff10a-0f88-41fc-8c2a-c8d38364a780"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fdb4d9cd-9f8a-4b4e-820c-65f804d1315f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "193651b7-36c4-4f4b-88fa-16d89f1b9d99"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b59d8ed2-c10b-4d2c-b999-e08f9bbf3833",
                    "name": "credentials_verify:vc:credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": [\n            \"did:example:123\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d4fab878-778f-4c81-a088-9a5d6afe3d60",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9475b553-1d0d-43be-8966-23cd8fbc3e41"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d07cbfda-e628-4910-b8a0-89f87c048797",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "78b1573e-55b5-41d3-8214-c6c390825655"
                        }
                      }
                    ]
                  },
                  {
                    "id": "02bfac7d-adc3-4c5e-9f4f-02a1202e160f",
                    "name": "credentials_verify:vc:credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": false,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..VK75R0RpQX9g4E_vGExhb_aDUNycy1UlQYvhCL1Ydl9bWiT1oUPeHEUgJMRGzmRRvyByyj13oHI2yB3cOLWXCA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "be042b7e-b5df-4ac5-8733-8ec4a3ac9263",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e9ae5679-3c87-4dd6-aa4b-12ef7b17f71f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "64c23dc2-babe-4d37-b89d-b0382b78b44c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c2c3a9e7-b6fa-4bcc-a0fd-e59e3b3d305b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0c4b27d0-7df6-4861-a76e-33decaebedb9",
                    "name": "credentials_verify:vc:credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": 123,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..dQnu8mT7YMECvDQPODQ1YUudQIO9Yx7WsZ07UWpHRqw0iV3ZvJOebbBoY0gFvsF9t6foFFEaaWcKi4vNgIdfCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e53dfc1e-2497-47f3-881f-257b57568fc7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1130f705-c860-4ef7-a4c4-da156f3db275"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "97903382-86ae-4347-9b0e-22c5b9dce272",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "56df62f6-8501-4589-a731-6b5bf3b51c9f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "68b60df9-f72e-40d7-8951-173e82e76492",
                    "name": "credentials_verify:vc:credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": null,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "42b387de-42c4-4192-92bc-23d72524c30a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "85b9062a-63de-4df3-b96a-feb7ecb925ab"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8b0cd2a6-b8d0-4271-97d1-b7ab25de2d5f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dc739fc4-9f9b-4991-b37a-dfb37322bde8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cd286448-b367-4cbd-af82-fcd8b6590076",
                    "name": "credentials_verify:vc:credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": \"did:example:123\",\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f751f6e6-07e8-4b68-b244-29b9a4f45aad",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "823f1069-44c2-4fba-b824-147b40bc99f9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b1192589-afdd-49a2-9be1-112ade4f3f6c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b9a6e7ac-9ba0-43e5-9274-e9d99c13ed7d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "816eb5fd-7960-4538-bd38-9c7b62d28f48",
                    "name": "credentials_verify:vc:credentialSubject:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8KJ136ciaI5X01UO8dPG0KMcsxmd7qzxvrahflTNqsrjjd-vF8bBKpjVDLOOj7bUolO277JWFCPX1xvvAVAvAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6b901564-1c53-4eb9-880e-5ba26013fc00",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ef1f6a23-cd6d-42cd-996a-59c2ea4c61a7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "58220ff3-a984-42f9-985c-dcc1d9c05ef4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1921a895-b893-4b9c-83fe-afdd90467ae8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "58d3b682-b246-42f0-9cca-34ac9c788496",
                    "name": "credentials_verify:vc:credentialSubject:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": false\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..1Tatn2a45JYHHvhGvCLNbO1VUDV_lkvRVosGzDXDF-DseqRorDTFmY7XSyYqrl5yc6B200ET0RBvgK2vyEC6BA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9a779707-8901-4258-8a1c-cbad879b432f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7b1c39dc-81b1-4519-9a20-6b6f3c03901a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "eaec4e06-3e5c-468e-bd5a-2b18113f2b61",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "29adc137-2ad2-40ac-8f22-d7d1fe9c8ee5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "86a8a88c-3ff2-454d-a646-a0d9cf363d99",
                    "name": "credentials_verify:vc:credentialSubject:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": 123\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..qPc7PrMuniibwI74A9ELPRd1YyUjNyeccnUFc4GCfj7I3oREDl0RT6PEt1pEY81mq7vlIsNG1myE86igC__qBA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "338bb566-da77-46af-b24d-065f3808d9e6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "46aa1799-7eb9-4def-8cf0-884f2b742b10"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f5f0b40d-442c-460a-a8c1-2d41a1846c39",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7cfbb882-3d34-4b47-8a72-56097c086575"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d9296509-953d-441e-bc62-9a190aa2bd7e",
                    "name": "credentials_verify:vc:credentialSubject:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": null\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..10vzNYPpxv6gZwVR-V23lgvIgseVOwxT6Tc1Zbn5T6pWGmUhrkur_O-OexNVjkVSf7Qu_6NDnIL1m0KcNKGBCg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c248fce9-4d3e-44ea-97a1-b58f4b862119",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e1c3a3cc-1f97-4916-bdfb-6f89802af6da"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d3cb3daf-67d8-4cca-8c70-398d2d34c1ae",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "46c4217b-505f-424d-8190-15c748833fad"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e69416e6-31fa-411a-9fc8-f92b6e08a09c",
                    "name": "credentials_verify:vc:credentialSubject:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..tQJMGZTsqt1RhpxKkq647EHc3pjQ183zd4KchfvD3dXWVfL9X1fUedMbj33l8eev6YWua2-6_4_sUTDr2MLEDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "97d1a929-9bb5-41a4-ae24-c91ae6bab1b8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "71d60b23-ff78-41b1-8f9d-40965b52befd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "80602192-7de4-4e83-9f0e-d5ffadd880b1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a8165402-f191-4820-a2ed-6093ed0495b9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c5b3c4b0-f30d-461f-964d-19b3739fc15d",
                    "name": "credentials_verify:proof:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7a082b65-b856-4d98-98a3-eaf03458a6d6",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required for embedded proof VCs",
                            "delete rawBody.proof",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3016b24d-7674-4b0d-9f8f-d9a70a64cf93"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1ee1f610-6e21-4b38-88cd-c000e4c94b5a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "718b88a3-583b-4d30-982f-58ead4d16574"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c5bfac21-80ff-4288-9e46-57b7a4c805c7",
                    "name": "credentials_verify:proof:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "32aa08f2-7f80-412d-bda8-fdbfc5b0c265",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "631ad496-0615-4f10-b9f4-af9cdb9b8c22"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "efcb4b1f-aeb3-4647-a379-f7161e10f0c6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0adc9ff6-6802-46b0-bf5b-07f875d7287c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1bd49578-90ad-4b81-acd7-551112b3dcd6",
                    "name": "credentials_verify:proof:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2b14175f-a835-4a63-af92-b8584338362d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c825e3aa-f877-47bb-b5cc-7ac15c6c0f94"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "af42bb68-d310-4a29-a010-d417198836e6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4b815c90-c47a-4c3b-9d17-4c255c85aa05"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2572512d-5ae1-4ff2-9269-eae841dee8fe",
                    "name": "credentials_verify:proof:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2b6a0adf-994a-44dc-8e89-a14a63ff3bdb",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = 10;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5a6bee36-44a1-437f-b9cd-f72ba8a4e013"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3007a858-999d-4e45-819e-4a2209047291",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "18e981a7-4873-4a77-b517-e12adbe00cd6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3815f250-c049-4cd3-9b76-2510966752a3",
                    "name": "credentials_verify:proof:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "48d8835b-2600-47a2-9943-f9438f7e55cd",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "57f472b9-c660-4a8d-a961-9458d9363407"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ee01ed5a-eb45-41a6-8774-233da169d28b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e104a23d-1f02-4b9c-a7ca-01e17151e37a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "08699145-5059-4782-947d-38d0b674ff57",
                    "name": "credentials_verify:proof:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cd9f858e-8fc1-482b-a5b2-a36b13f78de9",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = \"string\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2ba27a40-7340-4939-85ce-a2dc7e53e33d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1b85b33b-e25a-4186-8fd8-725c94148c82",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "db2a98f3-3f8a-485e-8bb8-8ac3d599fc5e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cc0d54c3-315c-42af-a04f-d07410878f0a",
                    "name": "credentials_verify:proof:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "27a2d6f6-ea28-4c8a-a58e-5dd143d63e04",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required for embedded proof VCs",
                            "delete rawBody.proof.type",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2d5b77dd-c858-4771-b79c-9174b01eed9e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "28879d8c-8823-4b4c-b867-45c8e78d45a8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8cb75bc3-6651-4d3e-a4fa-cbb1ce365780"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1d17b4c1-cc65-4671-837e-262ca1fcf8b6",
                    "name": "credentials_verify:proof:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b3f6e1fe-fb5d-44f5-8658-88f7c66cbb3a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = [\"Ed25519Signature2018\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "75240dbf-7368-42fb-a207-cb2113953561"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "22ad887c-0d63-436c-8f76-a38bee0c43b6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0b3d1314-3970-4405-8de4-ba4e1e3a094b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fbfc9f6e-ae67-4575-8bfe-6d0c07b1fd12",
                    "name": "credentials_verify:proof:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "595930b3-5fb3-4bba-8c20-a9e1de0e9e44",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "105ca9f1-5a3b-4117-baeb-07794fd97f11"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "21b2fc9e-eaf7-46d6-997c-1eba2ce103c7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b68a017a-bc1b-4850-bdf3-bb37aab36e68"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2b5c0ded-74a5-4383-b0be-443795b008cb",
                    "name": "credentials_verify:proof:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f148774b-14b6-46bf-870c-8d8de9f9e547",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "82c74ed4-ebc6-4d2f-b8f7-00624dc74409"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6dd5a9b2-4e7e-4f18-a2fb-cb417dcf744d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "95ddaf2a-9d88-4fe5-97aa-21f7a2c8855d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c7852810-0601-4638-ac53-ae226aed772a",
                    "name": "credentials_verify:proof:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7f368ebb-2f21-401d-bc9d-e929ad9dbb97",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6811b903-947c-4b3c-a68a-150a9645d252"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "100f66be-fd56-439f-b51f-39dcca095e3c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0cbce9ea-7f19-4768-82a4-e92c2ce4a379"
                        }
                      }
                    ]
                  },
                  {
                    "id": "85068d03-c05f-4da4-92a4-7ddcdb8d2f9a",
                    "name": "credentials_verify:proof:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "702da522-9a21-49a9-b108-8558b9cefc01",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = {\"key\": \"Ed25519Signature2018\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ad0d5c05-fb99-4f06-8b7d-af231510ea4d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "22c7c001-bd7e-48c2-896b-09125d8baa91",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "72438196-81cd-47aa-8a62-c2df9ac2af12"
                        }
                      }
                    ]
                  },
                  {
                    "id": "208cdcec-e74f-4915-8583-432e94255cf1",
                    "name": "credentials_verify:proof:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "db2c97ad-c835-4ac0-90e8-b9ea383a1f07",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = \"not one of the valid values\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "53723ffd-2b75-4c9e-abc7-7ec370633e49"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0f4b8671-0fb7-492d-b745-70128f1ff116",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fba4932f-9d56-4864-b570-23f5cd260d1e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6dc1253e-1e47-450b-a39c-f51393e7098e",
                    "name": "credentials_verify:proof:created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "db24a4b9-76a8-41e5-858e-3f571a1e3152",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = [\"2020-04-02T18:28:08Z\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "dd02b16c-f2be-4025-ac18-afe2445e164a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0a190688-1ba2-465e-ab8d-ca9592afd753",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1e45b0d7-301f-4c30-a9fb-b98826aba786"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5e9dbf96-6e65-4fbe-8cd2-b96d1fce8983",
                    "name": "credentials_verify:proof:created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "859bb847-8a73-40b9-ac18-b10c7ba99c49",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2b138833-187d-41cf-8f0c-e85a469f231d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "86780583-0b6f-4026-9221-1ca12d6cde63",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "45909280-9f12-4e17-8096-301c1a23e709"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9bfee6ea-ec02-49da-85fa-4a2b5a10c6cd",
                    "name": "credentials_verify:proof:created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ef162b37-0de9-45e6-a297-ad47c0119f76",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e61d2129-f51f-4e03-87bf-54e7326c0c9b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c3b51e41-cadf-488b-a35b-2c5b013e46d4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e074bdd0-1bbe-4a7b-8298-44e3abbf7378"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a6e1db84-e1f7-4605-b774-9bf3cdf6e7b1",
                    "name": "credentials_verify:proof:created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d98e6317-c10a-45be-bdfa-786cfb50358d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d0a61da3-206d-4bc9-bb74-4403209e8ee0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7ab4afc3-daf0-436d-b1b8-010b6c5d7a99",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ee3324fb-94c3-4acf-8368-3c99d8425dce"
                        }
                      }
                    ]
                  },
                  {
                    "id": "79864099-5434-4633-abb1-7f65ac55635c",
                    "name": "credentials_verify:proof:created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8788feae-116b-4d6d-a88e-01e6cc44a3c5",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = {\"key\": \"2020-04-02T18:28:08Z\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c6e1e9f2-c601-4690-997d-8975891dd438"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "60ba3c19-14ae-4132-9b43-9ce402419223",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f21a75c5-5a80-4920-9e3f-827fbed32a5e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "680808bb-2ea0-4b4f-97e9-3a0fe619d0f1",
                    "name": "credentials_verify:proof:verificationMethod:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a8fd590c-c464-4ac9-a0b2-a3c97ee3fd88",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = [\"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9ba02141-5314-488a-bf72-0eac40084942"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "574c1df8-f525-4850-9cf6-6c4160058de7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3b7c92e3-0464-4aed-9911-abcdc1dd7236"
                        }
                      }
                    ]
                  },
                  {
                    "id": "35e20eeb-64d7-414e-982a-f019aca72fcb",
                    "name": "credentials_verify:proof:verificationMethod:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "93da9c20-862b-4eaa-b646-71e5ac9b1d3b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "24f74f67-2811-4ac0-bb17-f65d404752e7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f47343d6-2475-466c-b0fa-91988092e3b5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6ad8b260-2559-4827-b90e-9a5222dd1992"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a9115c4f-8aca-413e-988e-1acd16a25c1b",
                    "name": "credentials_verify:proof:verificationMethod:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "60c68b42-ed4d-46f1-a489-4645c3bcc440",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7548da3c-268f-453d-83b2-e839dae5690d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7aedf3cc-c16f-42c1-a430-3b93b38cac2d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "11075f89-2a02-4309-a498-d54db1d91f15"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0eed52c2-f154-4d44-8316-af3272c86575",
                    "name": "credentials_verify:proof:verificationMethod:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fa3dc362-f59b-4b6e-bdb3-1b6ff272ed0d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a17349c1-5023-4eae-b039-72aecea804d8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "17ca62ad-5914-4f24-8613-8b9571cca831",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dd6102c4-d5c8-4ca7-abd2-86a2d6f77ada"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bd1b3231-973c-4d37-b7df-96bd1ef4b820",
                    "name": "credentials_verify:proof:verificationMethod:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "40c3dd06-52ce-4bbc-80a8-7651b6c70380",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = {\"key\": \"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2e4c263c-e651-486c-864d-7c868707c7c0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "74ecc494-eb81-49a8-bb1b-10697944576b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "43a5f918-b8fb-4051-9bda-fdf3be0a2fbf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0416bf50-8974-4c5c-9794-4baad07b90f0",
                    "name": "credentials_verify:proof:jws:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "126dfc3e-b011-4ee8-bacc-5eecc657629a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = [\"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "69b97bde-1a0c-451e-83f8-1022f49626dc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ae42d92a-aea2-4e46-b12d-df9925094c65",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5d50afd9-79ca-4d6a-b09a-5963022cbd68"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4b38544c-559c-4be8-bcc8-2d55da799ee1",
                    "name": "credentials_verify:proof:jws:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d91c0733-658e-4cb9-8b08-8dc4b3adb51d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4f90ea6a-72b5-453d-90a4-0743f2593918"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3402f294-c5cc-427f-8f56-43ace084058c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ad61c845-4808-4ba6-916d-4709ef30b206"
                        }
                      }
                    ]
                  },
                  {
                    "id": "344bf1c7-6aae-4626-8357-c23a598a0aee",
                    "name": "credentials_verify:proof:jws:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eff1ba5b-6f9e-4db0-bedd-731b627636c8",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "32c8ac45-ebaf-4476-b61b-164abc68e865"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0b00da43-ced4-4932-bff2-7f1706d41c4a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1b6da045-0b8c-4c34-80ca-9ce8d07351c8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3aa5fc57-62c5-4acc-a16c-a86911b4b46f",
                    "name": "credentials_verify:proof:jws:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1a301b75-9291-425b-8f5d-700c0c99ed9b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2b79d14e-14a2-4790-b992-fc55932cd975"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "48076e5c-f09b-4ec9-ab8f-2f107d601f45",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bc62a6a7-22d6-4bc8-aa8f-94c01eb7ae6a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7d920dd6-64b4-41ab-8ab8-d042672d62dc",
                    "name": "credentials_verify:proof:jws:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "df6f6ac1-3ee0-4ec2-96a9-99113e70ede0",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = {\"key\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "15f2290f-1197-44cf-ad00-b9f7e34416c4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1ede21ab-108b-460b-b6b3-18e62645bb1b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ac457704-6344-4618-96f2-5cbfc833e0fb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "143fd0a7-e4cf-403f-bbd7-4a003b92b198",
                    "name": "credentials_verify:proof:proofPurpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "113951b8-d127-4909-bec6-b20d4636c44a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = [\"assertionMethod\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "50249734-12fe-4a3c-b84d-f95ed3287326"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f436d47a-c0cb-4015-a728-949b43928ac2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c09d095f-7bbd-419d-b566-f2642ef85041"
                        }
                      }
                    ]
                  },
                  {
                    "id": "52cc97d7-4b68-4b72-9217-d0bcfe3f18b4",
                    "name": "credentials_verify:proof:proofPurpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fc638a55-4880-429e-8c56-d985c2f33192",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "bf193990-0c81-476d-abe9-e5709fe7ebf3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6682192f-ba8b-4f20-a71f-e3d394ba2da5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "aa27262c-ce12-46f1-8a7a-3d827346c8dd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d30bf09a-ecd0-413c-a89d-fdc2f41b51eb",
                    "name": "credentials_verify:proof:proofPurpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b7b10fb4-477e-458e-b6f0-7444d32606dc",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "69f4a574-a25e-4d40-aec3-a7456fab8ecf"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7d6aaa22-a9a5-45dc-a5f8-fa22bf8e4fb3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "57c1f3b5-5cf0-4d50-a2f9-7af5f3bddfc2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "483c44c4-0722-4ee1-be31-6844006722ae",
                    "name": "credentials_verify:proof:proofPurpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "18829aca-2643-438e-b257-9eb9c5f3fc6e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5a4bc9e8-28d1-450a-b43a-31fb62d8d377"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7f1b1094-069f-42d5-906a-1b3ef0a25bc9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9039d985-cf8b-4dbd-b6dc-adfe5e0feebc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0651cf5e-5dc2-4b0c-a81c-d9b3a8d7d967",
                    "name": "credentials_verify:proof:proofPurpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "25d1dfed-0a8a-4943-92ae-dd06e81c093e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = {\"key\": \"assertionMethod\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c3e90a47-f25e-4200-a830-0cc5095d110d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "202a2d9e-cc08-4eca-a487-0976b24adc8d",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d2246e83-9eb5-4959-80f7-6b90ad354c4e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "62db645b-b46f-4255-b205-c653c081084c",
                    "name": "credentials_verify:proof:proofPurpose:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e34817ea-c8dc-495f-be0c-0e69efe4ca58",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = \"not a valid value\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "03c42e90-6f6b-4562-8f67-eeee0f70e327"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7f64a902-785a-4683-8609-2460bc9b23ed",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e5636867-a32b-4239-9626-73af3d8ffcd6"
                        }
                      }
                    ]
                  }
                ],
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "446a9584-9d42-4e40-bca9-354356686551",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "a4e0b00f-3daf-4532-b2ad-4b9cb15cb45d"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "3ecff322-690a-45bb-b159-b8968b52f192",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 400\", function () {",
                        " pm.response.to.have.status(400);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "fbef0cd7-917a-4faa-82ea-58a02f80cd6a"
                    }
                  }
                ]
              },
              {
                "id": "95786166-5b2e-4ae3-bfdb-d56d496a066c",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "f5152ce2-eca7-4b28-885d-d57698b69ea4",
                    "name": "credentials_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "09bfd1e1-2216-43c9-a9fe-493cdf310b08",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"valid_vc\")));"
                          ],
                          "_lastExecutionId": "8a1a12f3-943c-45e0-b1f9-c94202fe9127"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6fe5d584-6678-41ce-9389-36dbcb8bcea0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "ff5b879b-2ba3-46c1-abee-fdef41e5c63a"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "b0c9e911-0c51-46c5-a646-68bdcc6da807",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "b4515676-d3dd-4a58-a3a6-6b403d4eeefe"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "19884539-854d-48a7-97fb-e878629a50b2",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "54eada4c-1063-4501-89c6-b932f4c0a41c"
                    }
                  }
                ]
              },
              {
                "id": "1abf1f90-de00-411b-b32b-2b971b87d0a3",
                "name": "Bad Signature",
                "item": [
                  {
                    "id": "52684ef5-7306-4dde-b265-09f71da8ecdf",
                    "name": "credentials_verify:bad_signature",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"id\": \"urn:uuid:e22ccc92-2c81-411f-a80f-e7f8334000a7\",\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..mvbcalofPOi7o7nxByyxXCuSOKXuGFM7_W9a8N62-EERarrH4p4T_0c2ZfGnGLiHOvY6Q-dyy38t9HPvXy-MBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "266f09ff-d633-4574-8774-9a757e35eaef",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 200\", function () {",
                            " pm.response.to.have.status(200);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            "pm.test(\"response verified is false\", function() {",
                            " const { verified } = pm.response.json();",
                            " pm.expect(verified).to.be.false;",
                            "});"
                          ],
                          "_lastExecutionId": "401c0134-bf59-4484-b231-02e8fa1c8ee0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5b70a3bc-3fe2-4db0-89c7-8eb097cc2d07",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2fe133b5-43fd-4429-9f9f-45f6c5fd2266"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "1a31d74e-21b9-46ec-a1a3-e2c92eeb3e18",
            "name": "Positive Testing",
            "item": [
              {
                "id": "87890eaa-5b7c-4514-9460-dc66258233fa",
                "name": "credentials_verify",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "6980c637-d1b7-4c4b-ba37-663dd9cc1b88",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "8ac7badb-4b57-48c5-a704-c195ca065364"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "f460eaca-31b6-437f-8704-1a08c2ae9468",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "a03cbe1e-3580-4907-b537-f792a761589b"
                    }
                  }
                ]
              },
              {
                "id": "d6146842-6b4f-4aac-a677-7b3e7d0795dc",
                "name": "credentials_verify:issuer:object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\"\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "a55902ad-1132-4b92-94a3-8bad8e87b23d",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "743461c1-04f6-4e80-b2f2-1e82757b6e43"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "47322a58-d099-46e0-8f7f-0587c1764e62",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "a62bde12-43f3-4b61-8dea-a823db838f02"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "41a7baf8-7557-492c-aac4-159ab5c8e42e",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Dummy VC issued for testing",
                "pm.variables.set(\"valid_vc\", {",
                "    \"@context\": [",
                "        \"https://www.w3.org/2018/credentials/v1\"",
                "    ],",
                "    \"credentialSubject\": {",
                "        \"id\": \"did:example:123\"",
                "    },",
                "    \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",",
                "    \"issuanceDate\": \"2006-01-02T15:04:05Z\",",
                "    \"issuer\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\",",
                "    \"proof\": {",
                "        \"created\": \"2020-04-02T18:48:36Z\",",
                "        \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..R618vVfGIF2jTe5dVkzMqQYIFKoIkyK_3_35z15tp_aFzew_4ruQt2DcaxdtkwsRff7bFsrVfigTl_XeE3tPDA\",",
                "        \"proofPurpose\": \"assertionMethod\",",
                "        \"type\": \"Ed25519Signature2018\",",
                "        \"verificationMethod\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV#z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\"",
                "    },",
                "    \"type\": \"VerifiableCredential\"",
                "});",
                ""
              ],
              "_lastExecutionId": "e324f84a-d836-4b9b-ac7c-3bd566f7a2cd"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "1324f438-f849-4f52-b068-05c9d007440c",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "237556e9-a5d8-4db2-a524-cdbd6abb680f"
            }
          }
        ]
      },
      {
        "id": "039fb5f1-6287-4830-b585-d253b2bc3cd1",
        "name": "Presentations - Present",
        "item": [
          {
            "id": "45c009fa-f9f0-4f26-91be-253562c2c097",
            "name": "Negative Testing",
            "item": [
              {
                "id": "9c86ddee-195d-48d3-b82b-3515c337022f",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "d1ff4c45-fb94-4b05-a32b-4a238b4ba508",
                    "name": "presentations:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "80540b21-6d4b-4fd8-8f6b-5853db89e9e6",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "88033e0e-a5f8-4443-9ef0-ec32281ebecf"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "113bac2b-621f-464d-aef8-7ba971d20462",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "7628d519-cc4a-4fc6-954c-6d79d38999a7"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "4b4e616c-cf40-4842-9b8f-a99365dcfd85",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "aa78b4b7-70e5-4b53-a09e-cece80f3caa9"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "a2a13289-c49a-426e-8812-7ed430340e86",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "38a5ef08-182a-4621-b536-ddf916e2f34a"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "a1acd4a1-4711-4cf6-8ac7-5be2b64553e6",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "6a7d7622-db02-4b1d-ab11-3edde1c7eac6"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "24838e57-699e-4eff-8cbc-ed2491adff2e",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "305e3022-5807-4c05-8254-267c36ba560e"
            }
          }
        ]
      },
      {
        "id": "b7bf3f38-0df8-4504-9d98-3a0f25b0899c",
        "name": "Presentations - Create",
        "item": [
          {
            "id": "6fc23946-5c9b-4e2e-ba8f-f61c92589148",
            "name": "Negative Testing",
            "item": [
              {
                "id": "944840b7-9381-46ef-80ec-9caca277454a",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "dbeedf57-d076-4d95-a77d-ccfeb2923c99",
                    "name": "presentations_prove:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6533d290-85b1-4142-9394-c70f78b6d801",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "02469f13-4b55-4996-aa45-fbd153a7cc15"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "efc3b61d-7645-43b8-83f5-92b8b571d24c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "91394140-c469-4fd3-ba3d-94cde86d0c89"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "31a213ce-19d2-4f51-8584-0e188c085e49",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "ff445170-bd72-42bd-9284-11ef60c9020f"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "72b07755-1255-46e5-8c68-3f7e01fea7cd",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "e74a8a05-c828-4f24-88cc-41fef85e276e"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "20bda653-8e2c-4c2e-ae21-ba309b8b188f",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "1031b902-aab0-4d11-915b-1d17c5dd98d9"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "031162d0-1991-45da-b62c-5c908526520a",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "90ab1566-cdb3-49f5-961b-69adfeb0fc9e"
            }
          }
        ]
      },
      {
        "id": "c9c7278a-bb00-4fe6-8d92-2af1d49bd15b",
        "name": "Presentations - Verify",
        "item": [
          {
            "id": "5f7f360d-6fdb-4f94-95c6-cc16fcf05568",
            "name": "Negative Testing",
            "item": [
              {
                "id": "d9cc45df-edd9-4163-9fc2-c6bf241245f4",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "91b05c74-b14b-4c73-926c-ff3570120d89",
                    "name": "presentations_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "67b1d2cc-b21a-496a-94e1-18bd8b7d29a1",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "b4fe02d1-733a-45ca-8c97-0ebd49182cc0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cbc0ccd0-31bd-43c7-b0e1-07c1994c9f01",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "d67604d5-0660-452b-bbc8-7824c0e53fad"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "6f370d8c-9a82-4167-b232-b8b52b39c3e5",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "dc0f883b-ee47-4e19-9366-245c46f012f1"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "c039eced-8b7a-4080-945c-3dad4a7cf981",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "ba669d47-5bd9-40b3-952c-501c5ddb3b9f"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "3e73e586-0883-44ff-8654-c3eef436f5e7",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "d40083b3-cd63-406c-a3b0-4e3fce029042"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "cca454be-d11e-42ee-a2f0-c50ad58c51de",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "51c3408b-0433-47bb-9e61-4ae957233dcc"
            }
          }
        ]
      },
      {
        "id": "4a842ac8-8111-4c32-b542-fe78039f12a5",
        "name": "Presentations - Notify",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "9cf0ee6c-a13e-4a30-a8b2-925e4082f8f4",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "1f22a2fb-341b-4887-863d-ac8006b5273a",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      },
      {
        "id": "9c8bded0-73b1-4213-8bac-979f36532af8",
        "name": "Presentations - Submit",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "91748516-4b3a-4624-8d3a-2503b4c3d925",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "72a06ac8-7c8b-4dd5-bfa5-a105b195c116",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      }
    ]
  },
  "run": {
    "stats": {
      "iterations": {
        "total": 1,
        "pending": 0,
        "failed": 0
      },
      "items": {
        "total": 283,
        "pending": 0,
        "failed": 0
      },
      "scripts": {
        "total": 2091,
        "pending": 0,
        "failed": 0
      },
      "prerequests": {
        "total": 283,
        "pending": 0,
        "failed": 0
      },
      "requests": {
        "total": 285,
        "pending": 0,
        "failed": 0
      },
      "tests": {
        "total": 283,
        "pending": 0,
        "failed": 0
      },
      "assertions": {
        "total": 573,
        "pending": 0,
        "failed": 69
      },
      "testScripts": {
        "total": 1050,
        "pending": 0,
        "failed": 0
      },
      "prerequestScripts": {
        "total": 1041,
        "pending": 0,
        "failed": 0
      }
    },
    "timings": {
      "responseAverage": 71.59649122807018,
      "responseMin": 6,
      "responseMax": 609,
      "responseSd": 78.37885045224156,
      "dnsAverage": 0,
      "dnsMin": 0,
      "dnsMax": 0,
      "dnsSd": 0,
      "firstByteAverage": 0,
      "firstByteMin": 0,
      "firstByteMax": 0,
      "firstByteSd": 0,
      "started": 1700267682451,
      "completed": 1700267712061
    },
    "executions": [
      {
        "id": "170e8465-9451-4311-b17d-cea1a7c81728",
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 283,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "e1824b9e-e786-45b4-a20e-9440da19695f",
          "httpRequestId": "3d7ad26d-5d84-46e4-8eaf-41984b3150cd"
        },
        "item": {
          "id": "170e8465-9451-4311-b17d-cea1a7c81728",
          "name": "Clear Token Cache"
        },
        "response": {
          "id": "68e3c5f1-2bc3-433f-a3d8-3b453751c6a9",
          "status": "OK",
          "code": 200,
          "responseTime": 66,
          "responseSize": 0
        }
      },
      {
        "id": "d81689f7-8f2b-46be-aa3a-a54381a38b12",
        "cursor": {
          "ref": "7c2fd8ec-e1dd-4d19-a173-63f56cde701b",
          "length": 283,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "1ad77336-5cb8-454f-94e7-7268f24703fa"
        },
        "item": {
          "id": "d81689f7-8f2b-46be-aa3a-a54381a38b12",
          "name": "Clear DID Web Cache"
        },
        "response": {
          "id": "8f68cc82-6a6d-4773-b713-6db907f40d8d",
          "status": "OK",
          "code": 200,
          "responseTime": 6,
          "responseSize": 0
        }
      },
      {
        "id": "c1686bb1-4645-4e65-a6bc-686ae16cef33",
        "cursor": {
          "ref": "1b170f70-85de-4565-97fd-50ff64c43069",
          "length": 283,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "4d2d9ad4-ba5b-4701-814d-83e14f3505d4"
        },
        "item": {
          "id": "c1686bb1-4645-4e65-a6bc-686ae16cef33",
          "name": "did_json"
        },
        "response": {
          "id": "133d12a2-c8d4-43e4-9c63-e227d8efb228",
          "status": "OK",
          "code": 200,
          "responseTime": 417,
          "responseSize": 1446
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2d0d25a6-7483-43c5-a8f9-93ba9233c297",
        "cursor": {
          "ref": "1cd7cb7e-48a1-40d0-890a-2ff363a5bada",
          "length": 283,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "061c8e1f-454d-463b-a231-b6f946298bec"
        },
        "item": {
          "id": "2d0d25a6-7483-43c5-a8f9-93ba9233c297",
          "name": "did:invalid"
        },
        "response": {
          "id": "7f6d215c-563e-4234-8389-f295606b5ea8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 114,
          "responseSize": 81
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2d0d25a6-7483-43c5-a8f9-93ba9233c297",
        "cursor": {
          "ref": "1cd7cb7e-48a1-40d0-890a-2ff363a5bada",
          "length": 283,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "061c8e1f-454d-463b-a231-b6f946298bec"
        },
        "item": {
          "id": "2d0d25a6-7483-43c5-a8f9-93ba9233c297",
          "name": "did:invalid"
        },
        "response": {
          "id": "7f6d215c-563e-4234-8389-f295606b5ea8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 114,
          "responseSize": 81
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f1fb0643-de7c-497e-a9f4-c702c36e30d5",
        "cursor": {
          "ref": "f9b9d856-815c-4314-a093-e95b4c0395a4",
          "length": 283,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "f873cb8d-6be7-42a6-acb1-c337e489cfc1"
        },
        "item": {
          "id": "f1fb0643-de7c-497e-a9f4-c702c36e30d5",
          "name": "did:not_found:did_web"
        },
        "response": {
          "id": "158f24bf-5e33-446a-b52a-bcdf55e68348",
          "status": "Not Found",
          "code": 404,
          "responseTime": 200,
          "responseSize": 53
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6df63ee0-b22f-4d04-a406-6dc1c77aa7cd",
        "cursor": {
          "ref": "63c82a8f-4d8e-4289-921a-470041cba37a",
          "length": 283,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "bf5bfb8a-26a7-40b1-92f3-ddea4ca8267a"
        },
        "item": {
          "id": "6df63ee0-b22f-4d04-a406-6dc1c77aa7cd",
          "name": "did:not_found:urn"
        },
        "response": {
          "id": "477a628f-1e6f-4df0-a613-42433884ce8f",
          "status": "Not Found",
          "code": 404,
          "responseTime": 48,
          "responseSize": 86
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bce19696-c15c-4339-a4e7-d41c1992352f",
        "cursor": {
          "ref": "edab8bef-357e-4189-9874-56bbe6aacd8e",
          "length": 283,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "881ceeed-d686-48d1-8e75-c4ba33a5b805"
        },
        "item": {
          "id": "bce19696-c15c-4339-a4e7-d41c1992352f",
          "name": "identifiers:missing_auth"
        },
        "response": {
          "id": "e67a21ff-d11e-43ea-813c-fb7552cb70d6",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 32,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d53766b8-a34a-4b10-8a66-aa9ef6247e45",
        "cursor": {
          "ref": "5b0c2721-bf63-4651-b76b-d896658db3e2",
          "length": 283,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "38b06b37-e2ee-4f18-9ed1-3fafc306ecfb"
        },
        "item": {
          "id": "d53766b8-a34a-4b10-8a66-aa9ef6247e45",
          "name": "identifiers"
        },
        "response": {
          "id": "a57a2bf3-479b-4e12-8aaf-c9d156bf22d6",
          "status": "OK",
          "code": 200,
          "responseTime": 82,
          "responseSize": 1462
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "30fd9081-06d9-4715-9bfc-dd4afde21c82",
        "cursor": {
          "ref": "b27b46e5-a3a9-40fa-b126-213ca2f19fb9",
          "length": 283,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "8afff930-c543-47a1-80aa-e77874121dac"
        },
        "item": {
          "id": "30fd9081-06d9-4715-9bfc-dd4afde21c82",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "778d0726-9157-45a7-bf10-c6bd6ab86697",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "512528af-bb27-4075-9d71-62e2c958af90",
        "cursor": {
          "ref": "02a03639-8545-4213-90e9-e12cd0c684bc",
          "length": 283,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "90c46ebb-f5d4-405e-8a04-5c658beec3b9"
        },
        "item": {
          "id": "512528af-bb27-4075-9d71-62e2c958af90",
          "name": "credentials_issue:credential.@context:missing"
        },
        "response": {
          "id": "70616996-730e-4217-9cb8-2ebf1a38e3b1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1e63d8d1-0ff7-41ab-aa8e-41d7e60b702d",
        "cursor": {
          "ref": "0ec40265-2146-4f1c-86bb-0905da0c3c20",
          "length": 283,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "a648e41c-e4df-41e0-9ac4-6a9e4635fe5d"
        },
        "item": {
          "id": "1e63d8d1-0ff7-41ab-aa8e-41d7e60b702d",
          "name": "credentials_issue:credential.@context:boolean"
        },
        "response": {
          "id": "12f36b45-a6d3-4b07-8cc0-90843faa7eb6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "afc0d99b-b093-48ee-8090-fd85ca18d459",
        "cursor": {
          "ref": "85828775-eab1-45b1-98fb-fb46d871fd03",
          "length": 283,
          "cycles": 1,
          "position": 11,
          "iteration": 0,
          "httpRequestId": "492b5e66-76f4-4839-ba03-07d284e3e51f"
        },
        "item": {
          "id": "afc0d99b-b093-48ee-8090-fd85ca18d459",
          "name": "credentials_issue:credential.@context:integer Copy"
        },
        "response": {
          "id": "374b723f-e0b0-4ede-9e22-2a36972cf147",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b2bda71e-9f4f-4df7-ae2c-ffb4dd8f3b4b",
        "cursor": {
          "ref": "c1009e44-5d63-4c70-8a66-77f56f4b0421",
          "length": 283,
          "cycles": 1,
          "position": 12,
          "iteration": 0,
          "httpRequestId": "4bfc9b43-350d-4ebe-80ba-aa1701d578e1"
        },
        "item": {
          "id": "b2bda71e-9f4f-4df7-ae2c-ffb4dd8f3b4b",
          "name": "credentials_issue:credential.@context:null"
        },
        "response": {
          "id": "67780597-1b4f-40a2-8e01-4ebe822044c0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "429248e8-9dd6-4efc-9345-11814a2953af",
        "cursor": {
          "ref": "81dd70d0-4de2-42a3-8dce-3fed8b155916",
          "length": 283,
          "cycles": 1,
          "position": 13,
          "iteration": 0,
          "httpRequestId": "4fe21852-e58f-40d0-b2f8-4fe6711e9085"
        },
        "item": {
          "id": "429248e8-9dd6-4efc-9345-11814a2953af",
          "name": "credentials_issue:credential.@context:object"
        },
        "response": {
          "id": "72732256-eca6-4429-80f6-62a9ea291593",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4c793e52-a7cb-49da-9439-95c2b039f7d1",
        "cursor": {
          "ref": "95c3b414-9147-41f2-a1ab-a446721965a5",
          "length": 283,
          "cycles": 1,
          "position": 14,
          "iteration": 0,
          "httpRequestId": "e76c1957-4376-4c62-9fb4-1a0d2324df1e"
        },
        "item": {
          "id": "4c793e52-a7cb-49da-9439-95c2b039f7d1",
          "name": "credentials_issue:credential.@context:string"
        },
        "response": {
          "id": "66999be1-6553-41ac-b5de-7f34f383127a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4ecb1564-90ef-48f2-a144-5aa855c30bfa",
        "cursor": {
          "ref": "1fe73f31-8801-49e7-b618-2c7db332b188",
          "length": 283,
          "cycles": 1,
          "position": 15,
          "iteration": 0,
          "httpRequestId": "d4e47f7c-0780-49b2-adab-bf58df06410a"
        },
        "item": {
          "id": "4ecb1564-90ef-48f2-a144-5aa855c30bfa",
          "name": "credentials_issue:credential.@context.item.array"
        },
        "response": {
          "id": "984ba058-3d9d-4c9f-9ee8-81c95e1b937e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b2092d64-0807-4c2c-8c4a-da722b9736ef",
        "cursor": {
          "ref": "992d2f28-624c-4501-933e-eacc83f3fbe4",
          "length": 283,
          "cycles": 1,
          "position": 16,
          "iteration": 0,
          "httpRequestId": "8ad0f208-932d-4d53-a1db-1842af4a5260"
        },
        "item": {
          "id": "b2092d64-0807-4c2c-8c4a-da722b9736ef",
          "name": "credentials_issue:credential.@context.item.boolean"
        },
        "response": {
          "id": "30538c6b-2e44-40a0-afd8-35fda51a33bd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9ee0d01a-dad6-498e-8035-c352113a0063",
        "cursor": {
          "ref": "64b57eab-f50e-4914-b4f0-a720031379af",
          "length": 283,
          "cycles": 1,
          "position": 17,
          "iteration": 0,
          "httpRequestId": "8758c4a2-cb12-4343-be07-beaf78c86dea"
        },
        "item": {
          "id": "9ee0d01a-dad6-498e-8035-c352113a0063",
          "name": "credentials_issue:credential.@context.item.integer"
        },
        "response": {
          "id": "ac19a377-ca11-4fc3-b550-7699b9d9dfee",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a9ff2494-3cf9-4338-b759-6c564089f7fd",
        "cursor": {
          "ref": "b98dd0f9-3490-4af9-9c64-06f4bfbfe5bc",
          "length": 283,
          "cycles": 1,
          "position": 18,
          "iteration": 0,
          "httpRequestId": "696dd393-e330-4498-8ac4-634b693bddcf"
        },
        "item": {
          "id": "a9ff2494-3cf9-4338-b759-6c564089f7fd",
          "name": "credentials_issue:credential.@context.item.null"
        },
        "response": {
          "id": "a9bcf548-c853-4411-a174-9ebfeb545a9f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "307f74e5-a24f-4efe-a756-0b3adee19a72",
        "cursor": {
          "ref": "75b474d5-dc10-40e8-a27f-167f01c000ac",
          "length": 283,
          "cycles": 1,
          "position": 19,
          "iteration": 0,
          "httpRequestId": "7f3658fb-4cb5-4a1a-b209-821576d9a7a6"
        },
        "item": {
          "id": "307f74e5-a24f-4efe-a756-0b3adee19a72",
          "name": "credentials_issue:credential.@context.item.object"
        },
        "response": {
          "id": "fcf2faaa-9266-4e6c-a2a4-010a6374677d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "abc7d1e9-1d23-4634-89bd-8d538ce201de",
        "cursor": {
          "ref": "e6d27925-b318-4b17-8095-f56fd5a1408c",
          "length": 283,
          "cycles": 1,
          "position": 20,
          "iteration": 0,
          "httpRequestId": "86935e03-b249-4678-9c0c-62398beed28d"
        },
        "item": {
          "id": "abc7d1e9-1d23-4634-89bd-8d538ce201de",
          "name": "credentials_issue:credential.id:array"
        },
        "response": {
          "id": "6001d73e-f163-437d-98f6-2993ae375a36",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ef90d9fd-e647-4692-b4ba-bcc884babcb6",
        "cursor": {
          "ref": "6c9cd024-4b71-47bd-baa4-f9bef62ac2ba",
          "length": 283,
          "cycles": 1,
          "position": 21,
          "iteration": 0,
          "httpRequestId": "520ace89-c053-411e-8dcb-6b47e6e76db1"
        },
        "item": {
          "id": "ef90d9fd-e647-4692-b4ba-bcc884babcb6",
          "name": "credentials_issue:credential.id:boolean"
        },
        "response": {
          "id": "98f6ac73-7bd3-4669-a241-95a1762e365c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "af785c56-76d8-43b5-844b-3a80fe7e4df5",
        "cursor": {
          "ref": "283d5460-d497-4f1f-bb39-a9a6abb4d109",
          "length": 283,
          "cycles": 1,
          "position": 22,
          "iteration": 0,
          "httpRequestId": "be62658c-db64-48a6-8b9c-ecb0bccc8c11"
        },
        "item": {
          "id": "af785c56-76d8-43b5-844b-3a80fe7e4df5",
          "name": "credentials_issue:credential.id:integer"
        },
        "response": {
          "id": "d7b3d8f9-8363-4b07-a5bb-2a3761ccdf95",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 54,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7dbf735e-e6b1-4ade-8caf-8b52fe5e4bb4",
        "cursor": {
          "ref": "5a972063-0e69-4dc4-bb21-24df41d3cb47",
          "length": 283,
          "cycles": 1,
          "position": 23,
          "iteration": 0,
          "httpRequestId": "f1a95273-7059-4ec6-961a-93133107e388"
        },
        "item": {
          "id": "7dbf735e-e6b1-4ade-8caf-8b52fe5e4bb4",
          "name": "credentials_issue:credential.id:null"
        },
        "response": {
          "id": "9fb003b3-2c8e-4522-a420-2e18c3c49b6b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b765ba30-c6ef-4e2f-b478-ae957de6b064",
        "cursor": {
          "ref": "3817b2a5-60a4-4009-be31-5577c0b09bf0",
          "length": 283,
          "cycles": 1,
          "position": 24,
          "iteration": 0,
          "httpRequestId": "14cba8c3-e909-41be-84c9-0bccdcfd8cbb"
        },
        "item": {
          "id": "b765ba30-c6ef-4e2f-b478-ae957de6b064",
          "name": "credentials_issue:credential.id:object"
        },
        "response": {
          "id": "83f6866c-9807-44f7-aa31-6ca15b11c17d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5c46fdf0-be91-4d12-b7a9-2416b982e8cc",
        "cursor": {
          "ref": "6595d8a3-f9fa-43e5-b239-eeedf4b962ca",
          "length": 283,
          "cycles": 1,
          "position": 25,
          "iteration": 0,
          "httpRequestId": "be62f7e8-0a85-4b8f-a530-bb4f8cd76775"
        },
        "item": {
          "id": "5c46fdf0-be91-4d12-b7a9-2416b982e8cc",
          "name": "credentials_issue:credential.type:missing"
        },
        "response": {
          "id": "e8df2c63-cf22-4d51-916b-48441ee9d929",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f2cf07de-c873-4c6c-91c7-aabb8b77b720",
        "cursor": {
          "ref": "4b49c221-bae9-4db4-b097-a489122c2514",
          "length": 283,
          "cycles": 1,
          "position": 26,
          "iteration": 0,
          "httpRequestId": "65d568e5-2caf-47a3-ab89-3096383b8c8a"
        },
        "item": {
          "id": "f2cf07de-c873-4c6c-91c7-aabb8b77b720",
          "name": "credentials_issue:credential.type:boolean"
        },
        "response": {
          "id": "5b49d556-4cd5-465c-9efd-2c0dc276de84",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b7d3549f-0430-4307-97fd-5c21ff88d0c8",
        "cursor": {
          "ref": "532c98d0-debd-45ea-b802-dcd25a838a87",
          "length": 283,
          "cycles": 1,
          "position": 27,
          "iteration": 0,
          "httpRequestId": "bfcd4e02-3fe8-41e0-9470-13ad0e5edd31"
        },
        "item": {
          "id": "b7d3549f-0430-4307-97fd-5c21ff88d0c8",
          "name": "credentials_issue:credential.type:integer"
        },
        "response": {
          "id": "a37bcae2-f0d0-4b2e-901d-228115b06d85",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f6750055-6107-43d8-aba3-a4e1b8925f55",
        "cursor": {
          "ref": "fe30c03b-047c-4683-a7d4-af10ba08bd11",
          "length": 283,
          "cycles": 1,
          "position": 28,
          "iteration": 0,
          "httpRequestId": "4792c16b-3f6b-4bf6-a324-4da70a1569df"
        },
        "item": {
          "id": "f6750055-6107-43d8-aba3-a4e1b8925f55",
          "name": "credentials_issue:credential.type:null"
        },
        "response": {
          "id": "e4734604-4ffe-47be-8d0d-62052f3fca05",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bf9bc36b-0414-4af9-8f7f-9ab61704c9a1",
        "cursor": {
          "ref": "e331747b-e70c-4b74-92ff-4ff3c140a926",
          "length": 283,
          "cycles": 1,
          "position": 29,
          "iteration": 0,
          "httpRequestId": "d1bc1132-c1e5-4eab-8bcb-2bb067e79532"
        },
        "item": {
          "id": "bf9bc36b-0414-4af9-8f7f-9ab61704c9a1",
          "name": "credentials_issue:credential.type:object"
        },
        "response": {
          "id": "6bc006eb-8efc-4457-83f1-622c99855f9d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "04065bab-c4bc-4e0e-91d1-f7bd8430d915",
        "cursor": {
          "ref": "38b61296-7346-4bf2-b379-34c596604c31",
          "length": 283,
          "cycles": 1,
          "position": 30,
          "iteration": 0,
          "httpRequestId": "c2205daa-ea05-434f-b6bd-c08fed8e20e0"
        },
        "item": {
          "id": "04065bab-c4bc-4e0e-91d1-f7bd8430d915",
          "name": "credentials_issue:credential.type:string"
        },
        "response": {
          "id": "cad473c3-061c-4002-9b7e-9721cafadb86",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 107
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f641e779-fe8f-4c9b-9280-02a5416bb464",
        "cursor": {
          "ref": "19081ca7-04a7-4b45-b443-d9d64fa11814",
          "length": 283,
          "cycles": 1,
          "position": 31,
          "iteration": 0,
          "httpRequestId": "c6cd643d-682f-4a93-9ff6-16be6d9ed136"
        },
        "item": {
          "id": "f641e779-fe8f-4c9b-9280-02a5416bb464",
          "name": "credentials_issue:credential.type.item:missing"
        },
        "response": {
          "id": "edf5f9a9-0fc2-4423-ab59-c7ae6edb61c1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 107
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dd88d03a-67bb-43e5-ab24-4ffebda336e3",
        "cursor": {
          "ref": "41d443d7-ee70-4b02-bbf6-83ea768ada9f",
          "length": 283,
          "cycles": 1,
          "position": 32,
          "iteration": 0,
          "httpRequestId": "db656a25-6c3d-4435-8874-b3a0384392b8"
        },
        "item": {
          "id": "dd88d03a-67bb-43e5-ab24-4ffebda336e3",
          "name": "credentials_issue:credential.type.item:array"
        },
        "response": {
          "id": "d2cc3791-4838-4a64-8b0b-681778772680",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "168ca36b-cf77-4e10-8832-3fe9a301552a",
        "cursor": {
          "ref": "ed83409b-16cc-4bfd-9a67-fb3b28484e86",
          "length": 283,
          "cycles": 1,
          "position": 33,
          "iteration": 0,
          "httpRequestId": "363b6ddc-9762-4fd1-93f0-f2cedbdcb4db"
        },
        "item": {
          "id": "168ca36b-cf77-4e10-8832-3fe9a301552a",
          "name": "credentials_issue:credential.type.item:boolean"
        },
        "response": {
          "id": "3c6e46b3-e49f-4bf8-abbb-39405133466a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "df5e0194-ec59-451a-bc05-a27ac555e5cf",
        "cursor": {
          "ref": "fa331fa4-cdd3-476f-a17a-895a6cf0f4a1",
          "length": 283,
          "cycles": 1,
          "position": 34,
          "iteration": 0,
          "httpRequestId": "a6409dba-2a11-4053-ac7c-c96a71aae00a"
        },
        "item": {
          "id": "df5e0194-ec59-451a-bc05-a27ac555e5cf",
          "name": "credentials_issue:credential.type.item:integer"
        },
        "response": {
          "id": "72a41044-45c0-415b-9974-14c4cf58a13b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "da1b4069-c2bc-4fc9-b229-dc019e0ed9fa",
        "cursor": {
          "ref": "82733414-075a-4dec-bfc8-d7245f64312c",
          "length": 283,
          "cycles": 1,
          "position": 35,
          "iteration": 0,
          "httpRequestId": "435496bc-8061-48a5-bef3-3207e9644e91"
        },
        "item": {
          "id": "da1b4069-c2bc-4fc9-b229-dc019e0ed9fa",
          "name": "credentials_issue:credential.type.item:null"
        },
        "response": {
          "id": "751d7751-8b46-47f7-b842-7f34178c8bfc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 55,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "155e4a5f-93e9-4c1e-b3ad-61747d556465",
        "cursor": {
          "ref": "02962d1e-f2b8-4252-b9b2-f8eec60ef210",
          "length": 283,
          "cycles": 1,
          "position": 36,
          "iteration": 0,
          "httpRequestId": "8b15e367-1f51-4a54-b015-854f53a22f76"
        },
        "item": {
          "id": "155e4a5f-93e9-4c1e-b3ad-61747d556465",
          "name": "credentials_issue:credential.type.item:object"
        },
        "response": {
          "id": "655bf48b-09b7-43c4-a2a0-fe3d62c5807b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "154e13cd-6868-4fbb-91a9-3fd959334ae5",
        "cursor": {
          "ref": "bbb24fbd-6882-4f10-b30d-3bfe16eac8a6",
          "length": 283,
          "cycles": 1,
          "position": 37,
          "iteration": 0,
          "httpRequestId": "ae95d7fc-5862-456a-b990-bd759a686163"
        },
        "item": {
          "id": "154e13cd-6868-4fbb-91a9-3fd959334ae5",
          "name": "credentials_issue:credential.issuer:missing"
        },
        "response": {
          "id": "92f434ff-49e0-4a27-a6bb-e524b769f11a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 96
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "256bd40e-eac7-47eb-950c-b9db3895ec51",
        "cursor": {
          "ref": "8f80964c-b631-4ed9-9efa-19db97fae619",
          "length": 283,
          "cycles": 1,
          "position": 38,
          "iteration": 0,
          "httpRequestId": "be7b9fa5-f6a1-401c-b05a-8ed566b8c738"
        },
        "item": {
          "id": "256bd40e-eac7-47eb-950c-b9db3895ec51",
          "name": "credentials_issue:credential.issuer:array"
        },
        "response": {
          "id": "364f41d7-f4bf-451e-85e3-1de3ba504417",
          "status": "Created",
          "code": 201,
          "responseTime": 609,
          "responseSize": 691
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:39)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:39)"
            }
          }
        ]
      },
      {
        "id": "ada2b68d-7819-44ba-91c5-52d05e8c864e",
        "cursor": {
          "ref": "0819dc7d-1aac-48bc-947f-1287848228d2",
          "length": 283,
          "cycles": 1,
          "position": 39,
          "iteration": 0,
          "httpRequestId": "951ffc90-10a7-427f-8815-0842a9895b50"
        },
        "item": {
          "id": "ada2b68d-7819-44ba-91c5-52d05e8c864e",
          "name": "credentials_issue:credential.issuer:boolean"
        },
        "response": {
          "id": "96c6411c-7c8d-4c10-b005-ceda0e8392be",
          "status": "Created",
          "code": 201,
          "responseTime": 250,
          "responseSize": 650
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:40)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:40)"
            }
          }
        ]
      },
      {
        "id": "2e78e3c8-f4fa-425a-aad6-6f5a65f62efa",
        "cursor": {
          "ref": "e10064b4-adb9-4ce3-a13b-51e66bb2e54d",
          "length": 283,
          "cycles": 1,
          "position": 40,
          "iteration": 0,
          "httpRequestId": "21625d38-0d89-4979-a1ae-329e9d899f3e"
        },
        "item": {
          "id": "2e78e3c8-f4fa-425a-aad6-6f5a65f62efa",
          "name": "credentials_issue:credential.issuer:integer"
        },
        "response": {
          "id": "5df63cdc-4be2-4341-bfce-1847ba831560",
          "status": "Created",
          "code": 201,
          "responseTime": 421,
          "responseSize": 647
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:41)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:41)"
            }
          }
        ]
      },
      {
        "id": "b95169e1-5bd7-489f-b153-8ab79e6bcef9",
        "cursor": {
          "ref": "15403764-b4f7-414e-b126-b3fa758e9d4a",
          "length": 283,
          "cycles": 1,
          "position": 41,
          "iteration": 0,
          "httpRequestId": "ecea5dae-6482-4f62-a418-b24459276872"
        },
        "item": {
          "id": "b95169e1-5bd7-489f-b153-8ab79e6bcef9",
          "name": "credentials_issue:credential.issuer:null"
        },
        "response": {
          "id": "c9a93980-3c28-4929-ba8e-87cfcc49c49e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 96
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dbc65bb2-4165-43f2-b90d-e63033d237a5",
        "cursor": {
          "ref": "36dac617-11df-4781-a90a-f69bc3cc0aee",
          "length": 283,
          "cycles": 1,
          "position": 42,
          "iteration": 0,
          "httpRequestId": "1723f165-2711-40e5-819c-da694eb12de0"
        },
        "item": {
          "id": "dbc65bb2-4165-43f2-b90d-e63033d237a5",
          "name": "credentials_issue.credential.issuer:invalid"
        },
        "response": {
          "id": "787be3d5-86c7-4249-b460-8742c93ff2ff",
          "status": "Created",
          "code": 201,
          "responseTime": 310,
          "responseSize": 656
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:43)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:43)"
            }
          }
        ]
      },
      {
        "id": "be96f5f6-df60-4b8b-9b87-2629b86f8d8f",
        "cursor": {
          "ref": "6aa74146-94cd-4847-b348-2743e58e4616",
          "length": 283,
          "cycles": 1,
          "position": 43,
          "iteration": 0,
          "httpRequestId": "09d89d42-fcf9-4b0a-a29b-aa19fedc5cad"
        },
        "item": {
          "id": "be96f5f6-df60-4b8b-9b87-2629b86f8d8f",
          "name": "credentials_issue.credential.issuer:unknown"
        },
        "response": {
          "id": "64f098f4-43e4-45b8-b161-99e734e06285",
          "status": "Created",
          "code": 201,
          "responseTime": 246,
          "responseSize": 692
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 201",
              "stack": "AssertionError: expected response to have status code 422 but got 201\n   at Object.eval sandbox-script.js:1:44)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:44)"
            }
          }
        ]
      },
      {
        "id": "97a470dd-f243-4968-9356-e2b808f7a45b",
        "cursor": {
          "ref": "5dc8d9ef-11cd-42bd-94b4-13829325bec2",
          "length": 283,
          "cycles": 1,
          "position": 44,
          "iteration": 0,
          "httpRequestId": "a313a9f6-7940-4899-bfff-c6a68de76752"
        },
        "item": {
          "id": "97a470dd-f243-4968-9356-e2b808f7a45b",
          "name": "credentials_issue:credential.issuer.id:missing"
        },
        "response": {
          "id": "20d48c69-2b3b-424d-8512-61f592e37747",
          "status": "Created",
          "code": 201,
          "responseTime": 251,
          "responseSize": 647
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:45)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:45)"
            }
          }
        ]
      },
      {
        "id": "4b02926e-e73e-4b37-bb29-101a98a659f2",
        "cursor": {
          "ref": "68d2f860-d70e-4f49-aa8a-26f2fc264c47",
          "length": 283,
          "cycles": 1,
          "position": 45,
          "iteration": 0,
          "httpRequestId": "26cb383d-ea3d-464d-92bc-eaa69d805029"
        },
        "item": {
          "id": "4b02926e-e73e-4b37-bb29-101a98a659f2",
          "name": "credentials_issue:credential.issuer.id:array"
        },
        "response": {
          "id": "e13f64be-e085-40bc-b134-e0bd41fa7cb1",
          "status": "Created",
          "code": 201,
          "responseTime": 225,
          "responseSize": 698
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:46)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:46)"
            }
          }
        ]
      },
      {
        "id": "766742b9-7902-4153-9773-4a156f8d8d17",
        "cursor": {
          "ref": "051bd3bf-8c8c-4f46-b2ec-1e3f1b39a67b",
          "length": 283,
          "cycles": 1,
          "position": 46,
          "iteration": 0,
          "httpRequestId": "ac76d325-1bb5-4313-ab27-e24316627396"
        },
        "item": {
          "id": "766742b9-7902-4153-9773-4a156f8d8d17",
          "name": "credentials_issue:credential.issuer.id:boolean"
        },
        "response": {
          "id": "694a4379-5733-413b-b275-f42e337cd5f6",
          "status": "Created",
          "code": 201,
          "responseTime": 264,
          "responseSize": 657
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:47)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:47)"
            }
          }
        ]
      },
      {
        "id": "341aef89-55ac-459e-9696-10faf09a24b9",
        "cursor": {
          "ref": "329408dc-70bc-4ef0-9b84-dc7b9fad4be3",
          "length": 283,
          "cycles": 1,
          "position": 47,
          "iteration": 0,
          "httpRequestId": "046e46dd-a2a4-4e7f-b9a9-3d62b3c72c7b"
        },
        "item": {
          "id": "341aef89-55ac-459e-9696-10faf09a24b9",
          "name": "credentials_issue:credential.issuer.id:integer"
        },
        "response": {
          "id": "2cc1cfcd-a38f-4541-b270-d30ec8e8ae79",
          "status": "Created",
          "code": 201,
          "responseTime": 242,
          "responseSize": 654
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:48)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:48)"
            }
          }
        ]
      },
      {
        "id": "f51c57c1-4079-4133-84b7-eb8513d87b32",
        "cursor": {
          "ref": "27e5174a-3987-432e-a6d1-89f448746ceb",
          "length": 283,
          "cycles": 1,
          "position": 48,
          "iteration": 0,
          "httpRequestId": "a81cdc9a-db64-4f8b-a8e3-3cab843eb083"
        },
        "item": {
          "id": "f51c57c1-4079-4133-84b7-eb8513d87b32",
          "name": "credentials_issue:credential.issuer.id:null"
        },
        "response": {
          "id": "1a9d595f-4896-481b-bd5b-cec08fce0274",
          "status": "Created",
          "code": 201,
          "responseTime": 309,
          "responseSize": 656
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:49)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:49)"
            }
          }
        ]
      },
      {
        "id": "7c35aa00-cd7c-4324-bb00-f1b115e5e715",
        "cursor": {
          "ref": "c49ad1e4-09dd-4789-a3e5-484b12df5db0",
          "length": 283,
          "cycles": 1,
          "position": 49,
          "iteration": 0,
          "httpRequestId": "6cbcd327-5874-4665-b818-88e37cafcd59"
        },
        "item": {
          "id": "7c35aa00-cd7c-4324-bb00-f1b115e5e715",
          "name": "credentials_issue.credential.issuer.id:invalid"
        },
        "response": {
          "id": "a1cc4b8e-3048-4e63-800d-f1458170ef44",
          "status": "Created",
          "code": 201,
          "responseTime": 237,
          "responseSize": 663
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:50)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:50)"
            }
          }
        ]
      },
      {
        "id": "98327a64-23ed-4749-8c8d-95f94f608082",
        "cursor": {
          "ref": "47dc582e-168f-449a-bbe5-ca244eaf2688",
          "length": 283,
          "cycles": 1,
          "position": 50,
          "iteration": 0,
          "httpRequestId": "e8e89989-25de-4d5f-8530-dc9c0d16268c"
        },
        "item": {
          "id": "98327a64-23ed-4749-8c8d-95f94f608082",
          "name": "credentials_issue.credential.issuer.id:unknown"
        },
        "response": {
          "id": "a2cfacd6-1bf0-4085-8db1-438dbd4df379",
          "status": "Created",
          "code": 201,
          "responseTime": 283,
          "responseSize": 699
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 201",
              "stack": "AssertionError: expected response to have status code 422 but got 201\n   at Object.eval sandbox-script.js:1:51)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:51)"
            }
          }
        ]
      },
      {
        "id": "3aed17e1-d56c-44c2-94e3-a7793995d356",
        "cursor": {
          "ref": "96ef5c86-a862-42c7-b036-fd04bb7a4a15",
          "length": 283,
          "cycles": 1,
          "position": 51,
          "iteration": 0,
          "httpRequestId": "ab30672f-9f89-466d-b3fe-a54a2b30476c"
        },
        "item": {
          "id": "3aed17e1-d56c-44c2-94e3-a7793995d356",
          "name": "credentials_issue:credential.issuanceDate.missing"
        },
        "response": {
          "id": "3e836394-e8d4-4b17-bdfb-224ed836cd0a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 54,
          "responseSize": 167
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "86d00df9-e655-486d-aa05-badb162010e6",
        "cursor": {
          "ref": "17708497-8e90-4115-adc1-1353fd2569c1",
          "length": 283,
          "cycles": 1,
          "position": 52,
          "iteration": 0,
          "httpRequestId": "aa2720ca-78b2-41b8-a735-c98c6bef43a1"
        },
        "item": {
          "id": "86d00df9-e655-486d-aa05-badb162010e6",
          "name": "credentials_issue:credential.issuanceDate:array"
        },
        "response": {
          "id": "af169fda-2aa4-41cf-97d4-9852d6ed7821",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a2403ec5-b926-4768-81dc-d2767fe8fc08",
        "cursor": {
          "ref": "5c9bcbc0-a32f-43d8-a5fc-35d356a91512",
          "length": 283,
          "cycles": 1,
          "position": 53,
          "iteration": 0,
          "httpRequestId": "dc7f3dbc-0b9d-4522-bc51-40e260d5fade"
        },
        "item": {
          "id": "a2403ec5-b926-4768-81dc-d2767fe8fc08",
          "name": "credentials_issue:credential.issuanceDate:boolean"
        },
        "response": {
          "id": "325ca1f3-87e0-46c9-91ec-583afb7232fd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5c174617-f274-4387-8119-836fe81a1ca6",
        "cursor": {
          "ref": "fb2f97ab-9661-4b7c-a131-822c4bb2ab0c",
          "length": 283,
          "cycles": 1,
          "position": 54,
          "iteration": 0,
          "httpRequestId": "863dfab1-9312-4750-9ca2-dadb2fae2619"
        },
        "item": {
          "id": "5c174617-f274-4387-8119-836fe81a1ca6",
          "name": "credentials_issue:credential.issuanceDate:integer"
        },
        "response": {
          "id": "51a9c4fb-4f44-4f60-980b-50e4aef26f0f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d869b4d5-f6f5-4557-83d0-ef5256b0b968",
        "cursor": {
          "ref": "69c38f69-8b1c-48aa-8537-6fc9d0fde00a",
          "length": 283,
          "cycles": 1,
          "position": 55,
          "iteration": 0,
          "httpRequestId": "2074cb97-7a91-4143-a0c2-d8ac9f812205"
        },
        "item": {
          "id": "d869b4d5-f6f5-4557-83d0-ef5256b0b968",
          "name": "credentials_issue:credential.issuanceDate:null"
        },
        "response": {
          "id": "2070e3a2-c61f-43f1-9562-1a4ed4f58104",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 167
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a9c6a7ef-441d-4700-8425-42903aab22dd",
        "cursor": {
          "ref": "85bb8040-df40-41c7-8cc2-943318438a90",
          "length": 283,
          "cycles": 1,
          "position": 56,
          "iteration": 0,
          "httpRequestId": "21dbf11c-4c36-4117-8596-505e8dac3cb7"
        },
        "item": {
          "id": "a9c6a7ef-441d-4700-8425-42903aab22dd",
          "name": "credentials_issue:credential.issuanceDate:object"
        },
        "response": {
          "id": "3947c10b-8f06-4329-929a-d03b2dcb6a8c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 55,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9023d0dc-119c-4da7-9041-fdbd324be187",
        "cursor": {
          "ref": "11d1d68c-1960-46f4-b279-3c68c053711d",
          "length": 283,
          "cycles": 1,
          "position": 57,
          "iteration": 0,
          "httpRequestId": "3b982d4b-83eb-4699-ab26-95a4a4158358"
        },
        "item": {
          "id": "9023d0dc-119c-4da7-9041-fdbd324be187",
          "name": "credentials_issue:credential.issuanceDate:invalid_value"
        },
        "response": {
          "id": "dec18f85-7d94-4868-82b4-814a8e54539a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "211a11a1-1b0e-49d6-b67c-d36b682bc3ee",
        "cursor": {
          "ref": "125ba4e8-7af9-48c9-ab9e-632cec6e184f",
          "length": 283,
          "cycles": 1,
          "position": 58,
          "iteration": 0,
          "httpRequestId": "375680e7-60ad-4183-a990-8eee4da7b208"
        },
        "item": {
          "id": "211a11a1-1b0e-49d6-b67c-d36b682bc3ee",
          "name": "credentials_issue:credential.credentialSubject:missing"
        },
        "response": {
          "id": "32cd5b96-2e0c-4b4c-a5e0-5a272c121d4e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "633cccba-06fe-4077-8181-bab24eb8b0ea",
        "cursor": {
          "ref": "3dc7ea5d-3cd7-4970-8b2c-7f27b0001652",
          "length": 283,
          "cycles": 1,
          "position": 59,
          "iteration": 0,
          "httpRequestId": "18ca8a1b-95d5-4fa1-a8a0-1fe32805f81b"
        },
        "item": {
          "id": "633cccba-06fe-4077-8181-bab24eb8b0ea",
          "name": "credentials_issue:credential.credentialSubject:array"
        },
        "response": {
          "id": "4be4ef15-c71d-4552-80d6-8f93828de037",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 203
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c48b6acd-d414-4f33-bfd6-ec115ad7bd0e",
        "cursor": {
          "ref": "23c4cda7-83ed-4b0b-a8a2-ea96782dea71",
          "length": 283,
          "cycles": 1,
          "position": 60,
          "iteration": 0,
          "httpRequestId": "949116f4-45c2-4c56-9489-ed16b5ef1e75"
        },
        "item": {
          "id": "c48b6acd-d414-4f33-bfd6-ec115ad7bd0e",
          "name": "credentials_issue:credential.credentialSubject:boolean"
        },
        "response": {
          "id": "83e1b1d4-91a2-4eb0-9386-082879ff4e34",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 185
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "671bee7d-39de-4d90-9506-e1d85b7e7a65",
        "cursor": {
          "ref": "235b1ef7-65c7-4659-9187-f163f02724ec",
          "length": 283,
          "cycles": 1,
          "position": 61,
          "iteration": 0,
          "httpRequestId": "1163bb4c-6caf-4d45-9822-e339c0cdecbe"
        },
        "item": {
          "id": "671bee7d-39de-4d90-9506-e1d85b7e7a65",
          "name": "credentials_issue:credential.credentialSubject:integer"
        },
        "response": {
          "id": "71d40d33-294c-4b95-ac08-1c0486395fcb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 185
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "23621d5e-3431-41b6-9858-b0a83a3ad043",
        "cursor": {
          "ref": "02792956-8bbd-4480-8532-437a4471528c",
          "length": 283,
          "cycles": 1,
          "position": 62,
          "iteration": 0,
          "httpRequestId": "d9cba8f7-63db-46f4-a332-37c4aa6820f6"
        },
        "item": {
          "id": "23621d5e-3431-41b6-9858-b0a83a3ad043",
          "name": "credentials_issue:credential.credentialSubject:null"
        },
        "response": {
          "id": "da612fd8-d537-45c2-a644-807962089cf4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 54,
          "responseSize": 238
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "879a428e-87df-4d7d-aaa6-331ebf3b4bd6",
        "cursor": {
          "ref": "c28d360b-ba7c-437d-9075-382a46cb4e59",
          "length": 283,
          "cycles": 1,
          "position": 63,
          "iteration": 0,
          "httpRequestId": "c837ed4a-0ec1-4a41-a22b-f953f39e4dbd"
        },
        "item": {
          "id": "879a428e-87df-4d7d-aaa6-331ebf3b4bd6",
          "name": "credentials_issue:credential.credentialSubject:string"
        },
        "response": {
          "id": "8827a21e-1ce5-4d67-a57a-e9814881c93d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 185
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4fc51a62-f4e7-4ab3-911b-762e4334ae41",
        "cursor": {
          "ref": "5740d5cc-bfbe-407a-ae79-51ed026d8ad8",
          "length": 283,
          "cycles": 1,
          "position": 64,
          "iteration": 0,
          "httpRequestId": "00f7a909-9cf7-4284-9201-b84a3f82d41e"
        },
        "item": {
          "id": "4fc51a62-f4e7-4ab3-911b-762e4334ae41",
          "name": "credentials_issue:credential.credentialSubject.id:array"
        },
        "response": {
          "id": "d41db680-c72e-45a1-af60-1054ed281af6",
          "status": "Created",
          "code": 201,
          "responseTime": 266,
          "responseSize": 702
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:65)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:65)"
            }
          }
        ]
      },
      {
        "id": "d202a22e-b2b2-4305-b489-0cb2387229ae",
        "cursor": {
          "ref": "f0d1b7c3-9094-4cf3-a085-3049153bc08a",
          "length": 283,
          "cycles": 1,
          "position": 65,
          "iteration": 0,
          "httpRequestId": "0400499b-355f-4db9-9368-46d4abea04ab"
        },
        "item": {
          "id": "d202a22e-b2b2-4305-b489-0cb2387229ae",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy"
        },
        "response": {
          "id": "04ed5395-b629-4443-abcc-4ca29b606ed8",
          "status": "Created",
          "code": 201,
          "responseTime": 259,
          "responseSize": 688
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:66)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:66)"
            }
          }
        ]
      },
      {
        "id": "4020e393-c260-45a7-8f97-d80e201d438b",
        "cursor": {
          "ref": "fe915786-26c8-4d8b-b413-b8549273b1a4",
          "length": 283,
          "cycles": 1,
          "position": 66,
          "iteration": 0,
          "httpRequestId": "ef62c191-db82-435b-9478-a706dbabb882"
        },
        "item": {
          "id": "4020e393-c260-45a7-8f97-d80e201d438b",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 2"
        },
        "response": {
          "id": "cf5bebbf-dd2a-485b-ba90-03ab5fb79692",
          "status": "Created",
          "code": 201,
          "responseTime": 489,
          "responseSize": 685
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:67)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:67)"
            }
          }
        ]
      },
      {
        "id": "ef2d25a9-8006-4b51-ae52-82b8d3226095",
        "cursor": {
          "ref": "ef2206da-f7fc-4336-9ad4-c1ac5112b5c7",
          "length": 283,
          "cycles": 1,
          "position": 67,
          "iteration": 0,
          "httpRequestId": "db8f4dec-8bbf-48b6-a042-e476a275ce75"
        },
        "item": {
          "id": "ef2d25a9-8006-4b51-ae52-82b8d3226095",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 3"
        },
        "response": {
          "id": "29cc4446-9ac5-478c-a511-efa5d2f40565",
          "status": "Created",
          "code": 201,
          "responseTime": 269,
          "responseSize": 687
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:68)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:68)"
            }
          }
        ]
      },
      {
        "id": "3ed95663-58bc-4db5-b3be-acfa89cad280",
        "cursor": {
          "ref": "54f026b7-79e0-4637-87ea-b5c17202dcf3",
          "length": 283,
          "cycles": 1,
          "position": 68,
          "iteration": 0,
          "httpRequestId": "839fdd32-e5b0-4ff3-99c6-b72b68e73459"
        },
        "item": {
          "id": "3ed95663-58bc-4db5-b3be-acfa89cad280",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 4"
        },
        "response": {
          "id": "cee0c67e-c624-4607-aaeb-57cebc37a72b",
          "status": "Created",
          "code": 201,
          "responseTime": 252,
          "responseSize": 685
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:69)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:69)"
            }
          }
        ]
      },
      {
        "id": "343861c2-1318-4fc7-8c6f-dd2662b1011a",
        "cursor": {
          "ref": "ed04a678-c14a-4129-9707-0c5f3a0b7bc9",
          "length": 283,
          "cycles": 1,
          "position": 69,
          "iteration": 0,
          "httpRequestId": "01afaf39-4569-4380-a23e-1544e28a2b56"
        },
        "item": {
          "id": "343861c2-1318-4fc7-8c6f-dd2662b1011a",
          "name": "credentials_issue:options:missing"
        },
        "response": {
          "id": "fdf465c0-ac5f-4e2b-999e-3d6deca50bf2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 116
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "574c2e65-94a6-4fcf-9285-05ce0c72b801",
        "cursor": {
          "ref": "2144316e-4ec7-420f-be68-cecccf2ebccf",
          "length": 283,
          "cycles": 1,
          "position": 70,
          "iteration": 0,
          "httpRequestId": "75c948e5-fa3e-42a7-8de9-5f1c387734cc"
        },
        "item": {
          "id": "574c2e65-94a6-4fcf-9285-05ce0c72b801",
          "name": "credentials_issue:options:array"
        },
        "response": {
          "id": "eaa4f521-b69d-4930-b7d6-a08abd97c2f0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b14e199c-ace6-412c-9575-a4ceaf2d49bc",
        "cursor": {
          "ref": "f6d0460c-5bc8-43bc-8858-9e2e34539c19",
          "length": 283,
          "cycles": 1,
          "position": 71,
          "iteration": 0,
          "httpRequestId": "17699916-00c7-45d8-9cdd-7810d3cf9481"
        },
        "item": {
          "id": "b14e199c-ace6-412c-9575-a4ceaf2d49bc",
          "name": "credentials_issue:options:boolean"
        },
        "response": {
          "id": "80c7e2c2-c33b-41e2-965d-97b83b029331",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 157
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8b6f0c5d-e6c8-4d34-9c68-3964be037c42",
        "cursor": {
          "ref": "646d9b18-7268-4513-985a-6076f0f70a6d",
          "length": 283,
          "cycles": 1,
          "position": 72,
          "iteration": 0,
          "httpRequestId": "a93eca73-4a13-4b68-adc0-ab28d403ccc5"
        },
        "item": {
          "id": "8b6f0c5d-e6c8-4d34-9c68-3964be037c42",
          "name": "credentials_issue:options:integer"
        },
        "response": {
          "id": "3f46254d-58c4-4186-9be9-70aef33b0fdf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 157
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "52260ed1-e3ad-4c45-883c-bc18943ab0e9",
        "cursor": {
          "ref": "29503196-d700-4c0d-99fa-208290cb0e7d",
          "length": 283,
          "cycles": 1,
          "position": 73,
          "iteration": 0,
          "httpRequestId": "ca9274ab-b08a-4330-b807-b15efc377a4d"
        },
        "item": {
          "id": "52260ed1-e3ad-4c45-883c-bc18943ab0e9",
          "name": "credentials_issue:options:null"
        },
        "response": {
          "id": "b520a221-8541-4b6a-9ee6-515069cd7cf8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 189
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "de37c3c0-1335-4ef4-a885-565ddf1db0cc",
        "cursor": {
          "ref": "45cd1765-068e-41d6-bb83-bbaf04d8d58d",
          "length": 283,
          "cycles": 1,
          "position": 74,
          "iteration": 0,
          "httpRequestId": "a0b63b63-fd9a-4aa4-a9d3-d77e9a730861"
        },
        "item": {
          "id": "de37c3c0-1335-4ef4-a885-565ddf1db0cc",
          "name": "credentials_issue:options:string"
        },
        "response": {
          "id": "c6512d36-d41e-473a-91eb-713cef05d65b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 189
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "527a4231-afa7-46a6-819f-d323b4206872",
        "cursor": {
          "ref": "8e2ce387-9170-474c-bc12-c924f8ef9f32",
          "length": 283,
          "cycles": 1,
          "position": 75,
          "iteration": 0,
          "httpRequestId": "38f1ad2b-c4a0-4027-91fd-1096d849cb98"
        },
        "item": {
          "id": "527a4231-afa7-46a6-819f-d323b4206872",
          "name": "credentials_issue:options.type:missing"
        },
        "response": {
          "id": "a9accd6f-fea1-4d76-a56d-d87d828975be",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 278
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "46b2253c-06f3-4181-9679-d413a046ec8e",
        "cursor": {
          "ref": "0d344860-f006-426c-9973-4b2ffb09fabd",
          "length": 283,
          "cycles": 1,
          "position": 76,
          "iteration": 0,
          "httpRequestId": "10ef7002-ef9c-411b-8079-58c3716f39aa"
        },
        "item": {
          "id": "46b2253c-06f3-4181-9679-d413a046ec8e",
          "name": "credentials_issue:options.type:array"
        },
        "response": {
          "id": "c0832498-4360-4b46-a5f0-0c49cf18e285",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1118da68-55a8-4e16-ba45-e9a2cc1d94d5",
        "cursor": {
          "ref": "e9f4c8ea-d592-441f-9fce-fd1d7d562d2c",
          "length": 283,
          "cycles": 1,
          "position": 77,
          "iteration": 0,
          "httpRequestId": "b9fe9058-8174-44df-8835-25777453b3a8"
        },
        "item": {
          "id": "1118da68-55a8-4e16-ba45-e9a2cc1d94d5",
          "name": "credentials_issue:options.type:boolean"
        },
        "response": {
          "id": "cad86646-a8b0-4f55-b94d-41997a910609",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "597a0db9-abfe-449c-ad99-118c36386eb2",
        "cursor": {
          "ref": "3318e92a-a261-4170-a759-16f1ac6cdc3d",
          "length": 283,
          "cycles": 1,
          "position": 78,
          "iteration": 0,
          "httpRequestId": "4eecb97f-730e-4b97-99a1-e60dc20894fc"
        },
        "item": {
          "id": "597a0db9-abfe-449c-ad99-118c36386eb2",
          "name": "credentials_issue:options.type:integer"
        },
        "response": {
          "id": "e231e4cb-0f6b-4365-88b9-9bc0ffbf5d46",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a0e13248-6cdd-4b18-92eb-6754bb3ced66",
        "cursor": {
          "ref": "8c4cdaf0-9436-49db-8133-bc6e1259fbd8",
          "length": 283,
          "cycles": 1,
          "position": 79,
          "iteration": 0,
          "httpRequestId": "91905df0-8989-4a29-8d87-1a0aadfaae72"
        },
        "item": {
          "id": "a0e13248-6cdd-4b18-92eb-6754bb3ced66",
          "name": "credentials_issue:options.type:null"
        },
        "response": {
          "id": "8263c8a1-2edf-449d-8bd6-6c2db71e696c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 278
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8f494ca0-224d-4b79-b3f9-9715d0637376",
        "cursor": {
          "ref": "18192513-8b44-4381-858a-4b52a4058517",
          "length": 283,
          "cycles": 1,
          "position": 80,
          "iteration": 0,
          "httpRequestId": "3a572f18-61c8-42a9-b57c-1209607062cd"
        },
        "item": {
          "id": "8f494ca0-224d-4b79-b3f9-9715d0637376",
          "name": "credentials_issue:options.type:object"
        },
        "response": {
          "id": "5ed82f5c-0d61-4350-a85f-cd8ee6d9d289",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "485f4cad-1228-498b-ba50-0579eb3f42e9",
        "cursor": {
          "ref": "1c8f2b57-4902-4b3a-8aa7-8a55b9ab0782",
          "length": 283,
          "cycles": 1,
          "position": 81,
          "iteration": 0,
          "httpRequestId": "94e8483b-39e6-42db-b8d0-87770f3f9e8d"
        },
        "item": {
          "id": "485f4cad-1228-498b-ba50-0579eb3f42e9",
          "name": "credentials_issue:options.type:invalid_value"
        },
        "response": {
          "id": "16cc58dc-9701-4039-92f7-50d915d8fec5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 207
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c880b2ab-5d96-4edf-a915-d66dc8b235f6",
        "cursor": {
          "ref": "7c4f068d-b644-4dd7-a596-0565e16afa39",
          "length": 283,
          "cycles": 1,
          "position": 82,
          "iteration": 0,
          "httpRequestId": "b427b4a8-c9a9-4e10-98e2-798b68bf1acc"
        },
        "item": {
          "id": "c880b2ab-5d96-4edf-a915-d66dc8b235f6",
          "name": "credentials_issue:options.created:array"
        },
        "response": {
          "id": "1a853c20-ba4a-460d-af93-fd536b150afd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "43516b2c-f968-4ab7-a78e-9766fa6fecc5",
        "cursor": {
          "ref": "704f9680-7a9b-4eb7-b7f0-e77408d4204d",
          "length": 283,
          "cycles": 1,
          "position": 83,
          "iteration": 0,
          "httpRequestId": "084990ad-7ded-4f85-8685-671c1037b92d"
        },
        "item": {
          "id": "43516b2c-f968-4ab7-a78e-9766fa6fecc5",
          "name": "credentials_issue:options.created:boolean"
        },
        "response": {
          "id": "a83a0454-630d-46c9-a5c0-c237ea6da610",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9f5953ea-caf6-4b36-85d4-5b45570c0ce7",
        "cursor": {
          "ref": "07d15381-5f5c-4777-8a0c-39a1d14c5ced",
          "length": 283,
          "cycles": 1,
          "position": 84,
          "iteration": 0,
          "httpRequestId": "59c1b107-2276-4e6b-8064-57a7e312186c"
        },
        "item": {
          "id": "9f5953ea-caf6-4b36-85d4-5b45570c0ce7",
          "name": "credentials_issue:options.created:integer"
        },
        "response": {
          "id": "306888d1-5d8c-4f86-a48d-534d7ac4aa74",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "420a2647-756d-4c5e-b88b-5e5537060e02",
        "cursor": {
          "ref": "49584873-4b05-48e6-9f12-ff4c11bdfd69",
          "length": 283,
          "cycles": 1,
          "position": 85,
          "iteration": 0,
          "httpRequestId": "1f51dca1-2d8b-4eaa-8a3a-09ebfe2a17e5"
        },
        "item": {
          "id": "420a2647-756d-4c5e-b88b-5e5537060e02",
          "name": "credentials_issue:options.created:null"
        },
        "response": {
          "id": "b6e4a837-c602-45d5-b167-0bd39a547b41",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "af2ec29b-0ae7-4e31-a287-4aaac657dcc2",
        "cursor": {
          "ref": "e1270f6d-9f21-4419-8cd4-9ca4fe32e325",
          "length": 283,
          "cycles": 1,
          "position": 86,
          "iteration": 0,
          "httpRequestId": "f4d291c3-a3bf-4e1c-aef1-41472d8d1fd5"
        },
        "item": {
          "id": "af2ec29b-0ae7-4e31-a287-4aaac657dcc2",
          "name": "credentials_issue:options.created:object"
        },
        "response": {
          "id": "a861bbae-189e-4338-aee7-e210e4274738",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c1d5e0ee-4f2a-4ad4-bbf5-250eddf6e77a",
        "cursor": {
          "ref": "02594781-0231-42b2-aadf-9ecba4cda61c",
          "length": 283,
          "cycles": 1,
          "position": 87,
          "iteration": 0,
          "httpRequestId": "2d6940f2-22fe-43c4-a7bf-30b0681f1aa2"
        },
        "item": {
          "id": "c1d5e0ee-4f2a-4ad4-bbf5-250eddf6e77a",
          "name": "credentials_issue:options.created:invalid"
        },
        "response": {
          "id": "81b6f1ee-33e7-412b-ac3f-054ee83d049f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "825890f0-e561-4224-81c2-846e3c881577",
        "cursor": {
          "ref": "9219ec12-ec5f-49aa-8f3a-3ae25cfc22ac",
          "length": 283,
          "cycles": 1,
          "position": 88,
          "iteration": 0,
          "httpRequestId": "eaa00386-7de4-4783-bb8b-751dbca91804"
        },
        "item": {
          "id": "825890f0-e561-4224-81c2-846e3c881577",
          "name": "credentials_issue:options.credentialStatus:array"
        },
        "response": {
          "id": "283ab82a-1ede-4a5d-9a6e-d45e4c68146f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7ce772ac-28af-4d62-bc3a-a4edc0c3e0be",
        "cursor": {
          "ref": "386f2e55-5453-490c-a384-58b1958d4d7f",
          "length": 283,
          "cycles": 1,
          "position": 89,
          "iteration": 0,
          "httpRequestId": "135ad44e-4f66-437a-8ed1-a3075759a537"
        },
        "item": {
          "id": "7ce772ac-28af-4d62-bc3a-a4edc0c3e0be",
          "name": "credentials_issue:options.credentialStatus:boolean"
        },
        "response": {
          "id": "24e5749c-46ad-4669-8699-787186381022",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ce444298-def0-4ebf-aed6-7d52e280ae00",
        "cursor": {
          "ref": "4435d163-daab-4572-9c83-9ad6b9441aa9",
          "length": 283,
          "cycles": 1,
          "position": 90,
          "iteration": 0,
          "httpRequestId": "6743627a-7b4a-494e-a01e-fb2acbd292ff"
        },
        "item": {
          "id": "ce444298-def0-4ebf-aed6-7d52e280ae00",
          "name": "credentials_issue:options.credentialStatus:integer"
        },
        "response": {
          "id": "fe394e60-3afb-41c2-a841-4993ef26ff36",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e614f5f4-21c7-4d9e-bfc8-ae9ba5da5e8c",
        "cursor": {
          "ref": "0fc0d15b-e994-44bc-a30a-c87d80dd118a",
          "length": 283,
          "cycles": 1,
          "position": 91,
          "iteration": 0,
          "httpRequestId": "ddf5703e-e7e2-4a4b-9e49-fdcd83ac595f"
        },
        "item": {
          "id": "e614f5f4-21c7-4d9e-bfc8-ae9ba5da5e8c",
          "name": "credentials_issue:options.credentialStatus:null"
        },
        "response": {
          "id": "1635e190-4ced-4d73-856b-d30bf6236ed5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "08fac412-2a42-4d2a-ade5-33c75243f616",
        "cursor": {
          "ref": "ae2adc8e-cb7a-4bc9-8e32-94b654137157",
          "length": 283,
          "cycles": 1,
          "position": 92,
          "iteration": 0,
          "httpRequestId": "2a896f5a-a929-47da-9319-6843b8a01cfb"
        },
        "item": {
          "id": "08fac412-2a42-4d2a-ade5-33c75243f616",
          "name": "credentials_issue:options.credentialStatus:string"
        },
        "response": {
          "id": "242d3b0b-f900-4274-8a3f-6d5df1fb1bb4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ab5e21a4-e2ec-4bac-8ec6-6a66fe65cfb6",
        "cursor": {
          "ref": "0a340a02-fa35-4eda-b82a-7f054223d99a",
          "length": 283,
          "cycles": 1,
          "position": 93,
          "iteration": 0,
          "httpRequestId": "50de241d-1418-49f7-aece-3ad7f202111a"
        },
        "item": {
          "id": "ab5e21a4-e2ec-4bac-8ec6-6a66fe65cfb6",
          "name": "credentials_issue:options.credentialStatus.type:missing"
        },
        "response": {
          "id": "0694ec67-14fc-4213-ac95-365c966a3315",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "33ec9b6d-558c-40ee-a2ca-0dc665b8e69a",
        "cursor": {
          "ref": "947e5d74-1731-47a6-a5e6-d751d7d6801b",
          "length": 283,
          "cycles": 1,
          "position": 94,
          "iteration": 0,
          "httpRequestId": "e4eeb820-b257-4361-a51f-c7874b3ac13f"
        },
        "item": {
          "id": "33ec9b6d-558c-40ee-a2ca-0dc665b8e69a",
          "name": "credentials_issue:options.credentialStatus.type:array"
        },
        "response": {
          "id": "e9eb35f4-cf65-4777-8330-201779d6f96d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "719140a7-f270-4dd8-9edb-a9f91e951c8d",
        "cursor": {
          "ref": "ad96dd8c-6d08-4e4c-a421-303ec1bd0d64",
          "length": 283,
          "cycles": 1,
          "position": 95,
          "iteration": 0,
          "httpRequestId": "d1669953-09d5-487f-b241-780f9d8606c7"
        },
        "item": {
          "id": "719140a7-f270-4dd8-9edb-a9f91e951c8d",
          "name": "credentials_issue:options.credentialStatus.type:boolean"
        },
        "response": {
          "id": "a3ff3bf7-a538-40ec-af8a-60bc0138b517",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "85d1c604-e40d-4a51-8d4e-0d2f9a4e6412",
        "cursor": {
          "ref": "88103420-f4a6-43f5-8987-31499eb41b16",
          "length": 283,
          "cycles": 1,
          "position": 96,
          "iteration": 0,
          "httpRequestId": "f78dd0b4-af5b-419c-a3cb-9c4d6efef677"
        },
        "item": {
          "id": "85d1c604-e40d-4a51-8d4e-0d2f9a4e6412",
          "name": "credentials_issue:options.credentialStatus.type:integer"
        },
        "response": {
          "id": "208f6f8a-0d1c-43a8-934f-86fd70c42267",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4fd41c89-0d85-42dc-9488-e6b609cb195d",
        "cursor": {
          "ref": "19048967-34a6-4ea1-ae16-3a7eeb125315",
          "length": 283,
          "cycles": 1,
          "position": 97,
          "iteration": 0,
          "httpRequestId": "fb41a82f-127c-412c-8751-02e345fb782f"
        },
        "item": {
          "id": "4fd41c89-0d85-42dc-9488-e6b609cb195d",
          "name": "credentials_issue:options.credentialStatus.type:null"
        },
        "response": {
          "id": "f1e8885e-c9a4-4793-b2f2-04779e248079",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f0392739-fd95-4f37-ba2a-c24a22799496",
        "cursor": {
          "ref": "3a05c409-ecfb-409a-bbb8-7ab655783237",
          "length": 283,
          "cycles": 1,
          "position": 98,
          "iteration": 0,
          "httpRequestId": "6c8d317a-515d-4a9e-951b-bbff207a04da"
        },
        "item": {
          "id": "f0392739-fd95-4f37-ba2a-c24a22799496",
          "name": "credentials_issue:options.credentialStatus.type:null Copy"
        },
        "response": {
          "id": "f5f20964-f6b4-4fac-b992-c95096aa45e4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "02aa66e9-f7ce-44f4-a744-d1081dfdee57",
        "cursor": {
          "ref": "7a79dbda-3fc8-489e-96ca-0787573d370d",
          "length": 283,
          "cycles": 1,
          "position": 99,
          "iteration": 0,
          "httpRequestId": "72fb834c-24ab-4196-9a26-f35ca5a1cc07"
        },
        "item": {
          "id": "02aa66e9-f7ce-44f4-a744-d1081dfdee57",
          "name": "credentials_issue:options.credentialStatus.type:invalid"
        },
        "response": {
          "id": "1b1c5993-0d44-44b6-bc7c-37c584f464b1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 54,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e6acfe96-dd2f-49f3-8671-4bc163858781",
        "cursor": {
          "ref": "b927b672-4095-4c5d-8bd6-e53ed1ea0b37",
          "length": 283,
          "cycles": 1,
          "position": 100,
          "iteration": 0,
          "httpRequestId": "0fb83c3e-16ff-46f0-9f10-c7269f1a2170"
        },
        "item": {
          "id": "e6acfe96-dd2f-49f3-8671-4bc163858781",
          "name": "credentials_issue:missing_auth"
        },
        "response": {
          "id": "201a90b4-8bd7-4a43-ba29-1b4e64ef8a86",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 26,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "546b9b07-13b0-44ee-90d4-da6dcfbc4fbf",
        "cursor": {
          "ref": "7ab2095b-499f-4388-857e-b2bb7ac2a296",
          "length": 283,
          "cycles": 1,
          "position": 101,
          "iteration": 0,
          "httpRequestId": "d0f7dc61-69df-4ea7-ae3c-7d2be7f75dec"
        },
        "item": {
          "id": "546b9b07-13b0-44ee-90d4-da6dcfbc4fbf",
          "name": "credentials_issue.credential.issuer:dup"
        },
        "response": {
          "id": "50b20bd8-f3e9-4516-803f-8ba50b43e1bb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 400",
              "stack": "AssertionError: expected response to have status code 201 but got 400\n   at Object.eval sandbox-script.js:1:102)"
            }
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 1,
              "test": "response issuer matches request credential.issuer",
              "message": "Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.",
              "stack": "TypeError: Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.\n   at Object.eval sandbox-script.js:2:102)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:3:102)"
            }
          }
        ]
      },
      {
        "id": "16f09e1e-1d77-4cc9-8c47-0adc42f6e794",
        "cursor": {
          "ref": "614ebf9c-f952-42c4-b95e-d68ba8aa61f2",
          "length": 283,
          "cycles": 1,
          "position": 102,
          "iteration": 0,
          "httpRequestId": "760aed69-24df-47cb-a357-53b1b25cbc96"
        },
        "item": {
          "id": "16f09e1e-1d77-4cc9-8c47-0adc42f6e794",
          "name": "credentials_issue"
        },
        "response": {
          "id": "e6b78fe4-027d-4050-9c0b-5b7b9d5d4715",
          "status": "Created",
          "code": 201,
          "responseTime": 256,
          "responseSize": 689
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false
          },
          {
            "assertion": "response issuanceDate matches request credential.issuanceDate",
            "skipped": false
          },
          {
            "assertion": "response proof.created is close to 'now'",
            "skipped": false
          }
        ]
      },
      {
        "id": "9f75f74f-9145-4406-a5bd-59859953cbfa",
        "cursor": {
          "ref": "713dd7d7-b3d3-4260-8868-d7e32920e3b0",
          "length": 283,
          "cycles": 1,
          "position": 103,
          "iteration": 0,
          "httpRequestId": "3ae0cf8d-c3fb-4d8a-a938-b2bd43e6af9d"
        },
        "item": {
          "id": "9f75f74f-9145-4406-a5bd-59859953cbfa",
          "name": "credentials_issue:credential.opt.id"
        },
        "response": {
          "id": "80c2092b-9b39-4749-8f59-e693a1e5ee57",
          "status": "Created",
          "code": 201,
          "responseTime": 250,
          "responseSize": 643
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verifiableCredential.id matches request credential.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "16859504-ca7f-469d-85e8-f86a9a5621cf",
        "cursor": {
          "ref": "7076edd7-7808-49d5-a51d-d4cbe046ad96",
          "length": 283,
          "cycles": 1,
          "position": 104,
          "iteration": 0,
          "httpRequestId": "48518293-7374-4310-b112-46ff93435ea1"
        },
        "item": {
          "id": "16859504-ca7f-469d-85e8-f86a9a5621cf",
          "name": "credentials_issue:credential:alt.issuer.object"
        },
        "response": {
          "id": "d7cc8bae-b47f-4004-90aa-b20968251c5f",
          "status": "Created",
          "code": 201,
          "responseTime": 273,
          "responseSize": 696
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "83b05e22-90ab-4b8f-af16-719e806bc482",
        "cursor": {
          "ref": "be0be6ec-6c82-461c-badf-02e1c82b7a40",
          "length": 283,
          "cycles": 1,
          "position": 105,
          "iteration": 0,
          "httpRequestId": "c37aa0eb-95f1-4137-8636-478d8e0ee93b"
        },
        "item": {
          "id": "83b05e22-90ab-4b8f-af16-719e806bc482",
          "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id"
        },
        "response": {
          "id": "4667bc54-0ca1-4632-9d98-bc6918b55ba2",
          "status": "Created",
          "code": 201,
          "responseTime": 347,
          "responseSize": 700
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response credentialSubject.id matches request credential.credentialSubject.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "cd5ee524-becd-4ea9-b623-ef4fddb6503d",
        "cursor": {
          "ref": "df1be898-85e6-40ea-8e80-3745afcad0d9",
          "length": 283,
          "cycles": 1,
          "position": 106,
          "iteration": 0,
          "httpRequestId": "b0ff9aab-574a-4a9a-a512-705f980bc75e"
        },
        "item": {
          "id": "cd5ee524-becd-4ea9-b623-ef4fddb6503d",
          "name": "credentials_issue:options:opt.created"
        },
        "response": {
          "id": "54e6b1b2-42ac-49df-9ab1-06ec20a2821f",
          "status": "Created",
          "code": 201,
          "responseTime": 261,
          "responseSize": 689
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response proof.created matches request options.created",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response proof.created matches request options.created",
              "message": "expected '2023-11-18T00:34:57.404Z' to equal '2006-01-02T15:04:05Z'",
              "stack": "AssertionError: expected '2023-11-18T00:34:57.404Z' to equal '2006-01-02T15:04:05Z'\n   at Object.eval sandbox-script.js:3:107)"
            }
          }
        ]
      },
      {
        "id": "df3418d0-06a1-430f-9761-ed8678999a98",
        "cursor": {
          "ref": "f31341b3-c281-4bbf-a2c6-60de2058b964",
          "length": 283,
          "cycles": 1,
          "position": 107,
          "iteration": 0,
          "httpRequestId": "cb478553-e0e5-4652-b3c2-c427ce9bae18"
        },
        "item": {
          "id": "df3418d0-06a1-430f-9761-ed8678999a98",
          "name": "credentials_issue:options:opt.credentialStatus"
        },
        "response": {
          "id": "c54af0aa-a7c7-482d-ab8a-40f08559c076",
          "status": "Created",
          "code": 201,
          "responseTime": 271,
          "responseSize": 689
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bc5b538f-a090-425a-894c-ea499fbefed0",
        "cursor": {
          "ref": "09012166-2cd7-4484-b67a-d1710d4ed859",
          "length": 283,
          "cycles": 1,
          "position": 108,
          "iteration": 0,
          "httpRequestId": "69f3f378-4747-41ed-b633-c50ec4730a6a"
        },
        "item": {
          "id": "bc5b538f-a090-425a-894c-ea499fbefed0",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "0b991154-8f1b-41d3-971b-81894158b184",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "21ecefbb-0feb-451c-9b15-98380f38a26a",
        "cursor": {
          "ref": "c5cef90c-0e59-4aba-8371-ba382df98b3f",
          "length": 283,
          "cycles": 1,
          "position": 109,
          "iteration": 0,
          "httpRequestId": "463093d9-2d27-46f7-bd52-ddb53f422e24"
        },
        "item": {
          "id": "21ecefbb-0feb-451c-9b15-98380f38a26a",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "d4f81c4c-794b-4685-a60b-3288afe88908",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "245d0e7b-9c75-4af2-9a9b-8e42d6e68edc",
        "cursor": {
          "ref": "9bf1b5ae-3641-43cc-b154-df78e720d4ea",
          "length": 283,
          "cycles": 1,
          "position": 110,
          "iteration": 0,
          "httpRequestId": "b01e3e68-d2d0-4988-993f-7e8881f5c911"
        },
        "item": {
          "id": "245d0e7b-9c75-4af2-9a9b-8e42d6e68edc",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "0ea1909c-78bb-4867-9772-5eaa43c18d3b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 56,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7c722bfc-abf7-4888-b7a1-bdf4d40d8306",
        "cursor": {
          "ref": "79394df6-38e9-45e9-b759-39fc119f0922",
          "length": 283,
          "cycles": 1,
          "position": 111,
          "iteration": 0,
          "httpRequestId": "4856ef7a-7749-4c1c-b75c-b9d99674a7e2"
        },
        "item": {
          "id": "7c722bfc-abf7-4888-b7a1-bdf4d40d8306",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "4af48824-da27-4d6a-8b54-e9c01ccbc80b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f20bc2e0-726e-4808-8f22-8c41a885dab9",
        "cursor": {
          "ref": "aea30cf7-3265-40a6-913d-b105699c41d2",
          "length": 283,
          "cycles": 1,
          "position": 112,
          "iteration": 0,
          "httpRequestId": "0836234d-6b3b-4f0a-9e9d-be64d8bdb5fc"
        },
        "item": {
          "id": "f20bc2e0-726e-4808-8f22-8c41a885dab9",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "c1b5d4d5-24c1-41d3-adb7-cc4b275f2479",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8668a0ab-656d-40af-9c20-83b62406c5e5",
        "cursor": {
          "ref": "9cccb261-6d37-4b0a-a0e5-8d34d7ab566b",
          "length": 283,
          "cycles": 1,
          "position": 113,
          "iteration": 0,
          "httpRequestId": "c4ac3cc8-d445-47c0-8023-6e9045b8bce0"
        },
        "item": {
          "id": "8668a0ab-656d-40af-9c20-83b62406c5e5",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "6487c56e-1f16-489d-b314-839ae1c9ea6d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6f962305-16fc-4e66-a518-1a81f58a32c9",
        "cursor": {
          "ref": "9dd002ec-4d54-4e34-a361-2039bbf7804f",
          "length": 283,
          "cycles": 1,
          "position": 114,
          "iteration": 0,
          "httpRequestId": "9fe21403-ffa6-4803-b98d-21d4868bae8f"
        },
        "item": {
          "id": "6f962305-16fc-4e66-a518-1a81f58a32c9",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "6f66e1fc-0e77-4fdf-99ee-fabb82e7303f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 146
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ff564252-d0de-4182-9d45-8f16c6bf379b",
        "cursor": {
          "ref": "3e71c28d-fc69-469e-a7ec-aa63d1a6658f",
          "length": 283,
          "cycles": 1,
          "position": 115,
          "iteration": 0,
          "httpRequestId": "bbcc9a52-7254-495a-a815-ecd798c78830"
        },
        "item": {
          "id": "ff564252-d0de-4182-9d45-8f16c6bf379b",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "c946062b-77be-4457-bc33-3bb6323e0583",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ad486439-187c-4232-bdd0-4d41da502c3e",
        "cursor": {
          "ref": "9cd0f836-7889-498d-85a5-eca7a17a693d",
          "length": 283,
          "cycles": 1,
          "position": 116,
          "iteration": 0,
          "httpRequestId": "9858cbc4-8588-4c6b-8d70-2248c4e915f6"
        },
        "item": {
          "id": "ad486439-187c-4232-bdd0-4d41da502c3e",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "275e40a7-9676-494a-83fe-cbd3f3c1de43",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4377e717-70be-468b-a88b-164eb4e486fe",
        "cursor": {
          "ref": "31d66f98-30b5-4e72-af00-64f30cf768ae",
          "length": 283,
          "cycles": 1,
          "position": 117,
          "iteration": 0,
          "httpRequestId": "4438d6cd-9b4a-4022-91dd-ac76596cb9e4"
        },
        "item": {
          "id": "4377e717-70be-468b-a88b-164eb4e486fe",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "e223b558-c461-475f-8423-ad8235f5eb71",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "334d3351-72e9-43fa-b7e8-540a4ba758bc",
        "cursor": {
          "ref": "e1b838c4-1753-4d46-938e-4ca877d4c11b",
          "length": 283,
          "cycles": 1,
          "position": 118,
          "iteration": 0,
          "httpRequestId": "e4d0a46b-c932-49bc-84ff-e360907cafae"
        },
        "item": {
          "id": "334d3351-72e9-43fa-b7e8-540a4ba758bc",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "97540466-2091-4f94-8c28-9b2eb8005642",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "225f4f47-b125-4a6f-aac3-bfaebda3afbc",
        "cursor": {
          "ref": "41e2765e-9872-4753-9191-fba5a8a3e128",
          "length": 283,
          "cycles": 1,
          "position": 119,
          "iteration": 0,
          "httpRequestId": "dc008196-61fe-4806-89cd-5f294ec3ddab"
        },
        "item": {
          "id": "225f4f47-b125-4a6f-aac3-bfaebda3afbc",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "ce07924b-4edd-4cd9-b544-4422854675ed",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "44314b82-59ce-492f-89c8-f553197e7a66",
        "cursor": {
          "ref": "5ab6021b-37cc-4ca6-bfe7-aeae197edab4",
          "length": 283,
          "cycles": 1,
          "position": 120,
          "iteration": 0,
          "httpRequestId": "79b54249-ee9f-42d7-a3bd-269b238eb7fe"
        },
        "item": {
          "id": "44314b82-59ce-492f-89c8-f553197e7a66",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "488c833a-9216-4cc9-905e-05ae62d21ace",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "751ebdfd-7116-4685-b55d-afc9fc83afb8",
        "cursor": {
          "ref": "149400f5-d405-4948-9e0f-95fbd18f01aa",
          "length": 283,
          "cycles": 1,
          "position": 121,
          "iteration": 0,
          "httpRequestId": "bb778e8e-e226-47fc-b78a-665b40434a18"
        },
        "item": {
          "id": "751ebdfd-7116-4685-b55d-afc9fc83afb8",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "8bc0bfba-3ac8-4f80-b2eb-9e30ff76a455",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c9f08778-2d7f-42c5-8318-713944d335ac",
        "cursor": {
          "ref": "6117f26d-408e-4d19-aedd-f3f98abc665b",
          "length": 283,
          "cycles": 1,
          "position": 122,
          "iteration": 0,
          "httpRequestId": "acb21fa4-45cc-496e-9496-da1515d5069d"
        },
        "item": {
          "id": "c9f08778-2d7f-42c5-8318-713944d335ac",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "f45debc2-bba8-4c59-b137-e6c2a7cfac9c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f645e8d0-64df-45c7-9024-5ab3f8bdbd9c",
        "cursor": {
          "ref": "84098b61-37b4-417a-8fcc-ace33734661a",
          "length": 283,
          "cycles": 1,
          "position": 123,
          "iteration": 0,
          "httpRequestId": "6996b39e-4f36-46dd-b542-a363dac1efd4"
        },
        "item": {
          "id": "f645e8d0-64df-45c7-9024-5ab3f8bdbd9c",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "7ed33f94-bea5-4b88-85b1-d37b5fda5c5b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "56be443c-f916-4795-8c8b-7c822123b76f",
        "cursor": {
          "ref": "326edfcb-a77b-4d05-8218-435474bc5a31",
          "length": 283,
          "cycles": 1,
          "position": 124,
          "iteration": 0,
          "httpRequestId": "7245ac74-ac57-492a-be4d-9fbcf33c0781"
        },
        "item": {
          "id": "56be443c-f916-4795-8c8b-7c822123b76f",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "164413ac-079c-4896-bc02-dae7a669711a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a872c95c-f1e5-4a42-bd53-dd510c423bdd",
        "cursor": {
          "ref": "cf24c814-1a2a-484f-955c-8dd96858df5d",
          "length": 283,
          "cycles": 1,
          "position": 125,
          "iteration": 0,
          "httpRequestId": "ba093c50-01d6-4344-88fa-1e37bf2a7b81"
        },
        "item": {
          "id": "a872c95c-f1e5-4a42-bd53-dd510c423bdd",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "ef253875-1f0b-466f-afc7-51fcf2646668",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d40304bf-3428-4de3-86b8-243bdc94f9f8",
        "cursor": {
          "ref": "ab8c1dc9-fd77-47ae-9a11-f090b20d5ca0",
          "length": 283,
          "cycles": 1,
          "position": 126,
          "iteration": 0,
          "httpRequestId": "85631f85-c4dc-4f9b-b594-541cc3217fa5"
        },
        "item": {
          "id": "d40304bf-3428-4de3-86b8-243bdc94f9f8",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "3a23dd0a-5f81-4b51-b3a2-5b974dbcd4e6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fb4b4738-3b0a-4cb0-8703-d1d87383e83d",
        "cursor": {
          "ref": "bc9db08f-999d-43f0-ab15-cb534d384975",
          "length": 283,
          "cycles": 1,
          "position": 127,
          "iteration": 0,
          "httpRequestId": "2226f5b9-d57a-44c5-906b-1956b3b16bed"
        },
        "item": {
          "id": "fb4b4738-3b0a-4cb0-8703-d1d87383e83d",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "3fcc2f61-7be3-4718-9401-f6af9a07f920",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0562b66a-1d7c-4914-bcea-2ded524ac93c",
        "cursor": {
          "ref": "dad42725-0d91-4951-a3c4-674c3743e193",
          "length": 283,
          "cycles": 1,
          "position": 128,
          "iteration": 0,
          "httpRequestId": "afea3ad8-952e-4c25-ba2c-c0233b1c775b"
        },
        "item": {
          "id": "0562b66a-1d7c-4914-bcea-2ded524ac93c",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "80f360f5-593a-48c6-8a43-77c0ab599c62",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "286608e5-43f1-407e-8398-253c202fb256",
        "cursor": {
          "ref": "6c935952-4495-4976-9d2d-a66480d0f54e",
          "length": 283,
          "cycles": 1,
          "position": 129,
          "iteration": 0,
          "httpRequestId": "cb6a0629-27f7-4a13-9508-435f96cc87da"
        },
        "item": {
          "id": "286608e5-43f1-407e-8398-253c202fb256",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "6883ed7c-f60d-4e6c-892a-24e35178be94",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "66193c1d-c7f5-41a5-a914-af3aae1a7694",
        "cursor": {
          "ref": "a5f1154e-5da2-4ddb-8720-75634d8db060",
          "length": 283,
          "cycles": 1,
          "position": 130,
          "iteration": 0,
          "httpRequestId": "c3cbc1b5-26da-46e2-8eb4-3a8e1e3aa2e6"
        },
        "item": {
          "id": "66193c1d-c7f5-41a5-a914-af3aae1a7694",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "56c91f58-a440-4696-8a94-decc97a93ac3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1f673255-a009-4ae3-8a1e-6a9856b3fdd6",
        "cursor": {
          "ref": "1bb0faa1-c7ef-41bb-bcd2-5980a3342184",
          "length": 283,
          "cycles": 1,
          "position": 131,
          "iteration": 0,
          "httpRequestId": "a4864cde-d8e6-49f1-9089-ec45d42320a1"
        },
        "item": {
          "id": "1f673255-a009-4ae3-8a1e-6a9856b3fdd6",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "e4698090-eb81-4f9b-a949-2f75316d6485",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1723f75d-ec81-4c98-af16-2683474bc8d9",
        "cursor": {
          "ref": "ff93d631-08a1-42cd-8f04-70ca192a16d8",
          "length": 283,
          "cycles": 1,
          "position": 132,
          "iteration": 0,
          "httpRequestId": "2a05f2d1-4b38-4856-b1b2-7f0a39cebd0c"
        },
        "item": {
          "id": "1723f75d-ec81-4c98-af16-2683474bc8d9",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "d0f25e63-cb52-40f5-837f-c572a1900ce1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "94bf4f37-a191-49c9-8b79-993ce95c57a7",
        "cursor": {
          "ref": "fe278212-b8b0-45c4-83df-9c2f07296c80",
          "length": 283,
          "cycles": 1,
          "position": 133,
          "iteration": 0,
          "httpRequestId": "b7832e73-f00b-4ea6-831d-fc2617c7748a"
        },
        "item": {
          "id": "94bf4f37-a191-49c9-8b79-993ce95c57a7",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "4b387002-e264-4c90-b05f-d287bc75c66a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a897f68e-b5fa-479c-b7a2-e848c84e4448",
        "cursor": {
          "ref": "307f54b1-4595-4ea2-aa42-0a9c754ef518",
          "length": 283,
          "cycles": 1,
          "position": 134,
          "iteration": 0,
          "httpRequestId": "6db739eb-78dd-41bb-8572-bcabcfe6db1b"
        },
        "item": {
          "id": "a897f68e-b5fa-479c-b7a2-e848c84e4448",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "8518856e-0d1e-4e7e-b1b7-806f9ed75e20",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "331eec84-156d-4bee-9fad-cafa721f12c8",
        "cursor": {
          "ref": "f8383d71-c916-4f48-8ad8-3454d809ac60",
          "length": 283,
          "cycles": 1,
          "position": 135,
          "iteration": 0,
          "httpRequestId": "d46b4dbd-061a-496a-bfa5-9e0ce560aac3"
        },
        "item": {
          "id": "331eec84-156d-4bee-9fad-cafa721f12c8",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "00b03e65-a58d-4830-9473-9f25b570be6d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "20bd218e-8d09-4030-bb7e-ae359b0339a5",
        "cursor": {
          "ref": "62b18c04-6b4c-45e3-9ad0-02314a24745e",
          "length": 283,
          "cycles": 1,
          "position": 136,
          "iteration": 0,
          "httpRequestId": "6a7be68f-4683-4895-bb0f-e993b01b4f7c"
        },
        "item": {
          "id": "20bd218e-8d09-4030-bb7e-ae359b0339a5",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "b81fee1b-fea7-4441-bf51-0349580fd2dd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "51213996-e3ee-4a6d-98c8-52208230e3fe",
        "cursor": {
          "ref": "18bea97e-0b4c-41e6-b4cc-34e6a9391417",
          "length": 283,
          "cycles": 1,
          "position": 137,
          "iteration": 0,
          "httpRequestId": "e81ac585-defb-4c47-ae88-e850d26e8ed6"
        },
        "item": {
          "id": "51213996-e3ee-4a6d-98c8-52208230e3fe",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "aae748f8-2c90-4f6f-b64c-382d1a46ce33",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "81f01725-16b1-4a2f-bf84-f4119acbe529",
        "cursor": {
          "ref": "75e2eaaa-c382-490c-9ed7-0289dfe560fe",
          "length": 283,
          "cycles": 1,
          "position": 138,
          "iteration": 0,
          "httpRequestId": "0a6cae23-9e91-4eb4-a620-4670c9ac48b8"
        },
        "item": {
          "id": "81f01725-16b1-4a2f-bf84-f4119acbe529",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "cf56fb0c-1dda-47fc-a57b-db6bd560e8b3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "aa6bbc88-e7de-4d2d-9c11-de18ba322fee",
        "cursor": {
          "ref": "6f78aaec-2d01-4a72-b47e-33c4dce6036e",
          "length": 283,
          "cycles": 1,
          "position": 139,
          "iteration": 0,
          "httpRequestId": "447a0957-6fd1-44c0-b4fc-29eced69f7b7"
        },
        "item": {
          "id": "aa6bbc88-e7de-4d2d-9c11-de18ba322fee",
          "name": "credentials_status:credentialStatus:item:status:invalid"
        },
        "response": {
          "id": "cc8c38cb-16e7-495d-bd70-b377c3988e77",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b47aa12e-f50c-44d6-91fa-693c57cf4204",
        "cursor": {
          "ref": "6819d242-405b-4885-873d-1cc4a1b20218",
          "length": 283,
          "cycles": 1,
          "position": 140,
          "iteration": 0,
          "httpRequestId": "dcb0c0a7-4055-4b0c-91c0-1c97f3276638"
        },
        "item": {
          "id": "b47aa12e-f50c-44d6-91fa-693c57cf4204",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "2a94ffb8-77ed-4df0-8893-22847f42827e",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 25,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "990005b4-93b4-4d1d-86a2-adcbc157e791",
        "cursor": {
          "ref": "477c1ec8-58b6-4498-997f-853f8999b4af",
          "length": 283,
          "cycles": 1,
          "position": 141,
          "iteration": 0,
          "httpRequestId": "fecb5a41-b3ef-4d39-8995-70cd4d9afc7c"
        },
        "item": {
          "id": "990005b4-93b4-4d1d-86a2-adcbc157e791",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "3e985461-f037-459d-b7da-4ce68111cf93",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3dad84b3-ee70-47b8-9026-5457336d7a78",
        "cursor": {
          "ref": "72c5350b-8b75-40e3-81bb-b353f5dbf7d3",
          "length": 283,
          "cycles": 1,
          "position": 142,
          "iteration": 0,
          "httpRequestId": "95d36324-855e-49dc-b586-8bba0c6f128c"
        },
        "item": {
          "id": "3dad84b3-ee70-47b8-9026-5457336d7a78",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "41b738ee-61bd-4352-8be1-5b3ed7c69dbf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "50b8e16b-f843-448d-a21e-1ff0908fc382",
        "cursor": {
          "ref": "91723969-bf2c-4a42-8a8d-88fd0ed4758e",
          "length": 283,
          "cycles": 1,
          "position": 143,
          "iteration": 0,
          "httpRequestId": "6e507cac-6614-441e-bd97-248d1166ce75"
        },
        "item": {
          "id": "50b8e16b-f843-448d-a21e-1ff0908fc382",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "45fe2bba-de3c-41ec-b4c8-0fa866e1fffd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3bfe3046-2c99-43c5-a879-81cc39d40c17",
        "cursor": {
          "ref": "a29da745-e7c9-4a26-a6b3-ce2d7059ef4d",
          "length": 283,
          "cycles": 1,
          "position": 144,
          "iteration": 0,
          "httpRequestId": "53b2bf7d-b792-436b-aebb-53a3c7cebcc4"
        },
        "item": {
          "id": "3bfe3046-2c99-43c5-a879-81cc39d40c17",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "1d4037ac-6351-47b2-a052-bb691b5d370e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "91ed10e9-2ef8-4699-9973-acd17ccfba30",
        "cursor": {
          "ref": "12380c91-27f4-464e-911f-3111626d1974",
          "length": 283,
          "cycles": 1,
          "position": 145,
          "iteration": 0,
          "httpRequestId": "b02f1e94-c8cd-449b-8143-ce9403179454"
        },
        "item": {
          "id": "91ed10e9-2ef8-4699-9973-acd17ccfba30",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "80b53bd0-31a7-41b1-8835-4968ec1db10b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 55,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "180a6be6-1f6c-4ea9-acd9-e332046a7a16",
        "cursor": {
          "ref": "9ebb4a49-d328-4c6d-946b-c5b29325fde2",
          "length": 283,
          "cycles": 1,
          "position": 146,
          "iteration": 0,
          "httpRequestId": "7328a5db-a477-4cce-8194-9a2cff43db63"
        },
        "item": {
          "id": "180a6be6-1f6c-4ea9-acd9-e332046a7a16",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "d4e12911-7fb1-4e2a-b617-d4d2588f2b97",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bbd35a53-086d-4137-a67d-be641910f19a",
        "cursor": {
          "ref": "59c989ee-eb18-4322-a274-3ce19d18bc2a",
          "length": 283,
          "cycles": 1,
          "position": 147,
          "iteration": 0,
          "httpRequestId": "93fce27d-40d1-4829-96df-e61cd431cb5f"
        },
        "item": {
          "id": "bbd35a53-086d-4137-a67d-be641910f19a",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "9f85ce2f-a4dc-4095-afbc-ed1a1b82831c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 146
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "17227625-ffdf-4e59-9efd-811d4ef8c0ba",
        "cursor": {
          "ref": "08a36381-645d-496a-a16e-47880868b6da",
          "length": 283,
          "cycles": 1,
          "position": 148,
          "iteration": 0,
          "httpRequestId": "8c0886b8-8ba2-4fb5-917b-739815fbeae3"
        },
        "item": {
          "id": "17227625-ffdf-4e59-9efd-811d4ef8c0ba",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "d3701f60-ccd4-402d-a6de-2ba3e92f8476",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "62dcdd82-9a14-4ea3-8427-3e815d5d8e7a",
        "cursor": {
          "ref": "9e035fad-eafe-4ccb-8d97-af34b4154603",
          "length": 283,
          "cycles": 1,
          "position": 149,
          "iteration": 0,
          "httpRequestId": "4256447f-ad2a-4c8d-8699-56b1cbc37cff"
        },
        "item": {
          "id": "62dcdd82-9a14-4ea3-8427-3e815d5d8e7a",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "4f3a803c-cee8-454b-a3d5-407088a5f476",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e0ede8e8-4b1d-4ba8-afa7-01691df9c639",
        "cursor": {
          "ref": "2b88c8c3-d742-43c1-96fb-e71bce1502d5",
          "length": 283,
          "cycles": 1,
          "position": 150,
          "iteration": 0,
          "httpRequestId": "e6b19e6e-e8a3-490e-a2aa-35539274f99e"
        },
        "item": {
          "id": "e0ede8e8-4b1d-4ba8-afa7-01691df9c639",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "f20f88fc-d23b-4df6-b651-4c8c22238e63",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "42050734-ecc9-41b5-8eda-649bd3e43a00",
        "cursor": {
          "ref": "89d7a071-a10d-4aea-9efe-e7ff49be5b60",
          "length": 283,
          "cycles": 1,
          "position": 151,
          "iteration": 0,
          "httpRequestId": "85a0750d-17a3-4a4a-bd12-27e43155c799"
        },
        "item": {
          "id": "42050734-ecc9-41b5-8eda-649bd3e43a00",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "8aa20ac1-d45a-4fb5-a97a-0b73880945cd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7f051501-88e6-4dca-92b5-4e1a9505642d",
        "cursor": {
          "ref": "9cc6cc53-a3d5-43a1-82ed-a0d97e967ff9",
          "length": 283,
          "cycles": 1,
          "position": 152,
          "iteration": 0,
          "httpRequestId": "7dbd1d8e-1423-4d0a-9853-6b4f78237115"
        },
        "item": {
          "id": "7f051501-88e6-4dca-92b5-4e1a9505642d",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "04ba5e6c-5d44-4840-9940-d8a71ee21ac9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "30d45802-45a9-496c-b145-789850a7471e",
        "cursor": {
          "ref": "9ac9d632-e0f4-40fa-b3dc-744d0f9cc8e5",
          "length": 283,
          "cycles": 1,
          "position": 153,
          "iteration": 0,
          "httpRequestId": "bd3469e2-37a6-4a67-8228-8194be8f2def"
        },
        "item": {
          "id": "30d45802-45a9-496c-b145-789850a7471e",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "f39bef32-8785-4235-9dff-80eb326e406a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c7d3fef0-ab6c-4b6b-91b4-9a87106c6199",
        "cursor": {
          "ref": "0933a57b-ad52-417d-b493-60d73003bcea",
          "length": 283,
          "cycles": 1,
          "position": 154,
          "iteration": 0,
          "httpRequestId": "32c1b1c6-8c9d-4a07-ba48-1e051caed7a9"
        },
        "item": {
          "id": "c7d3fef0-ab6c-4b6b-91b4-9a87106c6199",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "7faf7111-6c80-4061-9a19-8b696d3b7d2c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fd1ed922-94a3-46bf-b8a8-e3d0fe643484",
        "cursor": {
          "ref": "f6eb811f-89d9-43c4-a101-19a8182c9ea8",
          "length": 283,
          "cycles": 1,
          "position": 155,
          "iteration": 0,
          "httpRequestId": "b25c62ea-dd71-409f-b3b0-b091c2c6a52d"
        },
        "item": {
          "id": "fd1ed922-94a3-46bf-b8a8-e3d0fe643484",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "f1ac22c0-fa39-4a44-90fe-129dcaed3bb8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f7858649-bbf2-4ebc-a540-0cc569e14a34",
        "cursor": {
          "ref": "9572cfae-ea8c-49e7-9bac-20b03883e2cc",
          "length": 283,
          "cycles": 1,
          "position": 156,
          "iteration": 0,
          "httpRequestId": "52a047f3-d480-490e-a594-191dede0811b"
        },
        "item": {
          "id": "f7858649-bbf2-4ebc-a540-0cc569e14a34",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "190f9d03-145d-4b89-99ed-3269313f5e38",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "898b2571-2481-4157-bc3a-3620c7c7aa9d",
        "cursor": {
          "ref": "94e57908-b6c3-433e-9655-a349b608ec48",
          "length": 283,
          "cycles": 1,
          "position": 157,
          "iteration": 0,
          "httpRequestId": "577c6f6a-34b2-40d5-92a4-e0d2f111f2f4"
        },
        "item": {
          "id": "898b2571-2481-4157-bc3a-3620c7c7aa9d",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "db551ca5-c445-4856-8efa-4d6c038a2126",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bf1f1893-3798-4363-abdc-983dd8cde89e",
        "cursor": {
          "ref": "99a86fef-4e48-48db-9adb-7cca8d62704b",
          "length": 283,
          "cycles": 1,
          "position": 158,
          "iteration": 0,
          "httpRequestId": "cad6069f-f13c-410a-be5c-09c667c2d621"
        },
        "item": {
          "id": "bf1f1893-3798-4363-abdc-983dd8cde89e",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "ba5d6a73-a012-44e8-b9e2-d91afebc7311",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d9dbc222-6827-45f5-ac2c-e7c524065256",
        "cursor": {
          "ref": "a73b6676-8495-4f59-8ebe-8ae65a994542",
          "length": 283,
          "cycles": 1,
          "position": 159,
          "iteration": 0,
          "httpRequestId": "ca7eea99-0816-4ae1-8a3f-095d05ca2f89"
        },
        "item": {
          "id": "d9dbc222-6827-45f5-ac2c-e7c524065256",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "72cc7ca8-41c0-4266-b777-946ae9761f9d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6bdc9a12-3dd9-4b14-9290-55d06b252d65",
        "cursor": {
          "ref": "ee7a1df4-9b7a-445b-bc5b-fd50d250e3cb",
          "length": 283,
          "cycles": 1,
          "position": 160,
          "iteration": 0,
          "httpRequestId": "b859fd65-9034-448a-9452-3857b2b239bb"
        },
        "item": {
          "id": "6bdc9a12-3dd9-4b14-9290-55d06b252d65",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "0cbeb3bb-3f51-4d95-a689-da2ce2ea3dc4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ae7e5e84-5503-4920-915b-23491911b46d",
        "cursor": {
          "ref": "4c370d5a-a28b-440a-b42a-de50b0bf836f",
          "length": 283,
          "cycles": 1,
          "position": 161,
          "iteration": 0,
          "httpRequestId": "5950b1ca-0b8a-4a3f-b9fe-d448f711f077"
        },
        "item": {
          "id": "ae7e5e84-5503-4920-915b-23491911b46d",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "04e4e75a-627b-4418-a2fc-abc5866316de",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4df0af4a-a06d-4575-a15e-039f673716fb",
        "cursor": {
          "ref": "4f8cf316-c314-4cef-90dc-d17090495e45",
          "length": 283,
          "cycles": 1,
          "position": 162,
          "iteration": 0,
          "httpRequestId": "5113d240-e17c-406b-8cb4-1d2999082c30"
        },
        "item": {
          "id": "4df0af4a-a06d-4575-a15e-039f673716fb",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "031311cf-71c4-475d-92ab-fa9f72367c91",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "429991ba-0002-4cfc-abc9-b03a8af53b5d",
        "cursor": {
          "ref": "38744ac9-099e-47f5-9a5b-7493a35347b7",
          "length": 283,
          "cycles": 1,
          "position": 163,
          "iteration": 0,
          "httpRequestId": "9c8c930f-7092-48ed-9f25-52f03ce28915"
        },
        "item": {
          "id": "429991ba-0002-4cfc-abc9-b03a8af53b5d",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "438e6f05-d7db-4cc5-8559-41b1863a2096",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bb16b2ef-cef0-45c6-bdb9-725015006494",
        "cursor": {
          "ref": "9fc8ebfd-3de1-4eeb-bd90-e6524fbf5751",
          "length": 283,
          "cycles": 1,
          "position": 164,
          "iteration": 0,
          "httpRequestId": "0811adff-50c2-4d02-aebe-bdba8e7c06c7"
        },
        "item": {
          "id": "bb16b2ef-cef0-45c6-bdb9-725015006494",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "d74c50fd-70de-45fc-bf3f-ff34e97abef2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bf53f6f4-5a01-43bb-8199-4c3065e5a445",
        "cursor": {
          "ref": "dbb81cb0-7373-4bd0-a155-502520fd2ca5",
          "length": 283,
          "cycles": 1,
          "position": 165,
          "iteration": 0,
          "httpRequestId": "57b18b62-b98e-4535-989a-e25b46922956"
        },
        "item": {
          "id": "bf53f6f4-5a01-43bb-8199-4c3065e5a445",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "0ef3b6dc-06f3-4aa7-b2fa-6581f96c6b71",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b89078e1-a037-4bec-8fd3-767f50e959cb",
        "cursor": {
          "ref": "05990357-3154-4ed5-88cb-82e63578f386",
          "length": 283,
          "cycles": 1,
          "position": 166,
          "iteration": 0,
          "httpRequestId": "ac94953f-0b3a-496f-ac3b-19c613b79264"
        },
        "item": {
          "id": "b89078e1-a037-4bec-8fd3-767f50e959cb",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "be97428c-a98c-4abd-9443-6201c911d8ac",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d6ce7d89-9cd7-4c0f-b480-71f284554b7f",
        "cursor": {
          "ref": "16d52669-66b9-4584-b55e-6ac3d937740a",
          "length": 283,
          "cycles": 1,
          "position": 167,
          "iteration": 0,
          "httpRequestId": "8c3c4c27-b1f0-44e2-a532-f5cbf8f6e3fb"
        },
        "item": {
          "id": "d6ce7d89-9cd7-4c0f-b480-71f284554b7f",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "2b8590c9-6b76-422b-8f04-06cfebd3dd38",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3b24f0a9-e2a3-4416-9c98-1a71e25a3f9a",
        "cursor": {
          "ref": "b7c1f02f-8cc1-4ef8-be53-1fe4443991f1",
          "length": 283,
          "cycles": 1,
          "position": 168,
          "iteration": 0,
          "httpRequestId": "8411b709-c068-4e02-8761-2c0670cc066e"
        },
        "item": {
          "id": "3b24f0a9-e2a3-4416-9c98-1a71e25a3f9a",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "f9a296f3-cca1-411a-8a85-5488efd1c53a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5ef9c83a-6d4e-46ad-8fb3-9dba8f1e72cf",
        "cursor": {
          "ref": "a6dae39d-f78f-4ea9-aa38-69a862310d81",
          "length": 283,
          "cycles": 1,
          "position": 169,
          "iteration": 0,
          "httpRequestId": "06b3d813-f480-4889-a2a4-88e66bb2d867"
        },
        "item": {
          "id": "5ef9c83a-6d4e-46ad-8fb3-9dba8f1e72cf",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "31f166ee-64d5-49fa-92cb-d7e1604dc017",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "df27afe0-f8fe-43a5-bbb9-79abb1fe0b7f",
        "cursor": {
          "ref": "45421d5d-e8be-4b1f-ad4c-03287b91f5d9",
          "length": 283,
          "cycles": 1,
          "position": 170,
          "iteration": 0,
          "httpRequestId": "274dd9d9-ca46-4610-8f6a-337afabaa8c9"
        },
        "item": {
          "id": "df27afe0-f8fe-43a5-bbb9-79abb1fe0b7f",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "dcba30db-bb2f-482a-9772-a090df541932",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "80330c71-a20c-4710-8fdd-e58a79bc9ef3",
        "cursor": {
          "ref": "09ebad36-9016-4f77-822e-623c7b31f6ba",
          "length": 283,
          "cycles": 1,
          "position": 171,
          "iteration": 0,
          "httpRequestId": "0bc8713e-4537-4180-ada2-23735f8ebdf3"
        },
        "item": {
          "id": "80330c71-a20c-4710-8fdd-e58a79bc9ef3",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "c5a7effb-bdcd-4b62-9e17-59ac99b37335",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7e711d6b-48ca-4ece-bf89-0aa80ec5c5a4",
        "cursor": {
          "ref": "53560d14-488e-4e06-a3f0-da4921a72514",
          "length": 283,
          "cycles": 1,
          "position": 172,
          "iteration": 0,
          "httpRequestId": "6094d1de-ae8a-43cf-80ea-26e79de14123"
        },
        "item": {
          "id": "7e711d6b-48ca-4ece-bf89-0aa80ec5c5a4",
          "name": "credentials_status:credentialStatus:item:purpose:missing"
        },
        "response": {
          "id": "45fcf128-95f7-4d14-8167-bf9cb9200f1e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9374f3d6-2a83-4801-ae72-51f393f77055",
        "cursor": {
          "ref": "04a3beb6-ca5f-4e02-ad0d-c1e97f88dedc",
          "length": 283,
          "cycles": 1,
          "position": 173,
          "iteration": 0,
          "httpRequestId": "5629f9c7-0215-40d5-8ea9-30df959c33f4"
        },
        "item": {
          "id": "9374f3d6-2a83-4801-ae72-51f393f77055",
          "name": "credentials_status:credentialStatus:item:purpose:array"
        },
        "response": {
          "id": "5ad2c82c-5f6a-452e-a54d-f5910992e729",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "44cc2660-e0f6-4872-9518-5ce8d176e81a",
        "cursor": {
          "ref": "6807b3a0-64ff-4928-a1d1-d24cfcf8a36d",
          "length": 283,
          "cycles": 1,
          "position": 174,
          "iteration": 0,
          "httpRequestId": "e8103711-c028-4ba7-8cf0-44c3d00b356f"
        },
        "item": {
          "id": "44cc2660-e0f6-4872-9518-5ce8d176e81a",
          "name": "credentials_status:credentialStatus:item:purpose:boolean"
        },
        "response": {
          "id": "b7caa1f4-7e5c-440d-8770-c8ee1fe0457e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2de9c439-6cee-4475-a306-eb97d69e46a3",
        "cursor": {
          "ref": "847ac618-3bac-48f5-afdf-579e40dfb2a1",
          "length": 283,
          "cycles": 1,
          "position": 175,
          "iteration": 0,
          "httpRequestId": "438c5868-84f4-4132-af8c-88c323f772f4"
        },
        "item": {
          "id": "2de9c439-6cee-4475-a306-eb97d69e46a3",
          "name": "credentials_status:credentialStatus:item:purpose:integer"
        },
        "response": {
          "id": "f771b36b-812d-432c-bab6-cabbcc0e26fc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6e208e07-a8fc-4250-bab9-0651776ebd89",
        "cursor": {
          "ref": "da84ab82-a086-435b-a288-a4f197e5a4a2",
          "length": 283,
          "cycles": 1,
          "position": 176,
          "iteration": 0,
          "httpRequestId": "f9aff14e-ff28-4337-b571-a46efb39ed0f"
        },
        "item": {
          "id": "6e208e07-a8fc-4250-bab9-0651776ebd89",
          "name": "credentials_status:credentialStatus:item:purpose:null"
        },
        "response": {
          "id": "a3d3ff72-0ec9-4813-b515-638c5bd4b658",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1251b2a0-1a06-4108-84c6-54f99ec0dec9",
        "cursor": {
          "ref": "13b344ef-23b0-4b3a-8772-9d41d0b23b3f",
          "length": 283,
          "cycles": 1,
          "position": 177,
          "iteration": 0,
          "httpRequestId": "e3845bc2-09c7-4c45-bd50-b9751bf61a30"
        },
        "item": {
          "id": "1251b2a0-1a06-4108-84c6-54f99ec0dec9",
          "name": "credentials_status:credentialStatus:item:purpose:object"
        },
        "response": {
          "id": "7dbfb22f-d889-4e6f-b1c8-9b276e21ea3a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "19d00f9b-335d-49e5-8684-25e87c15f9bf",
        "cursor": {
          "ref": "6cb5f45d-24a7-4e5e-b253-5d2d5f6aa924",
          "length": 283,
          "cycles": 1,
          "position": 178,
          "iteration": 0,
          "httpRequestId": "97912749-be71-4817-972a-b4ef1b849bd7"
        },
        "item": {
          "id": "19d00f9b-335d-49e5-8684-25e87c15f9bf",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "d12a695e-b85c-4b59-a91e-63a62ec15b7d",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 25,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "732f9827-2791-4a79-879d-b851b5dcd6cc",
        "cursor": {
          "ref": "14105930-423d-450e-8d26-26d677982ed7",
          "length": 283,
          "cycles": 1,
          "position": 179,
          "iteration": 0,
          "httpRequestId": "84799069-5832-488b-ad0a-daf6b6b863dd"
        },
        "item": {
          "id": "732f9827-2791-4a79-879d-b851b5dcd6cc",
          "name": "credentials_verify:vc:missing"
        },
        "response": {
          "id": "97ffb3dd-33f1-455f-9a3f-c18a55222e9a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e0c3c86e-e287-4a6c-ad25-143072fb7165",
        "cursor": {
          "ref": "67270d44-b940-4f9a-8490-db4be105cd12",
          "length": 283,
          "cycles": 1,
          "position": 180,
          "iteration": 0,
          "httpRequestId": "31e6d11c-09e7-47a3-90ff-fdbc143addc2"
        },
        "item": {
          "id": "e0c3c86e-e287-4a6c-ad25-143072fb7165",
          "name": "credentials_verify:vc:string"
        },
        "response": {
          "id": "1f648295-ba3c-4758-9679-7aa1a5f5ddcb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "33f3925f-4dae-4ac9-a85a-b6cb7934680e",
        "cursor": {
          "ref": "186ea580-9a83-4f31-8a02-55ef58b3058d",
          "length": 283,
          "cycles": 1,
          "position": 181,
          "iteration": 0,
          "httpRequestId": "3678cb68-dcb1-408c-bfb5-e63324dd8850"
        },
        "item": {
          "id": "33f3925f-4dae-4ac9-a85a-b6cb7934680e",
          "name": "credentials_verify:vc:null"
        },
        "response": {
          "id": "302e0427-7db7-4d1f-a9b4-c2755ef5fed6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 171
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "19ba7805-1693-4558-bdc9-317af6854ae8",
        "cursor": {
          "ref": "7dcb971b-9d63-4525-b291-8075ffd80e7d",
          "length": 283,
          "cycles": 1,
          "position": 182,
          "iteration": 0,
          "httpRequestId": "fe24a1e7-587e-4d2f-aedf-b9766240a0f9"
        },
        "item": {
          "id": "19ba7805-1693-4558-bdc9-317af6854ae8",
          "name": "credentials_verify:vc:integer"
        },
        "response": {
          "id": "bc8677b5-3f8c-4423-bb16-8e01d64fe499",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "95c028d2-934a-49c7-b3c0-d2758ea159bb",
        "cursor": {
          "ref": "56fcb314-83c4-4628-80e1-d02b9fe2d5bf",
          "length": 283,
          "cycles": 1,
          "position": 183,
          "iteration": 0,
          "httpRequestId": "fc11a08d-dc23-4de7-861d-5af7f14df9d7"
        },
        "item": {
          "id": "95c028d2-934a-49c7-b3c0-d2758ea159bb",
          "name": "credentials_verify:vc:boolean"
        },
        "response": {
          "id": "dde46a0d-2093-428e-8dcb-100b47d1e61d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6e1ffc51-567c-4031-8d16-d17760e4f835",
        "cursor": {
          "ref": "4c870809-6638-4729-9d4d-2f0cb3b78471",
          "length": 283,
          "cycles": 1,
          "position": 184,
          "iteration": 0,
          "httpRequestId": "96951ad8-09cd-4f98-a588-3460ea412869"
        },
        "item": {
          "id": "6e1ffc51-567c-4031-8d16-d17760e4f835",
          "name": "credentials_verify:vc:array"
        },
        "response": {
          "id": "df2db5e3-ae8a-427a-8869-46cf2b637c6f",
          "status": "OK",
          "code": 200,
          "responseTime": 97,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:185)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:185)"
            }
          }
        ]
      },
      {
        "id": "a636ebd2-f4ed-4f0c-bbcf-883c56fa4a00",
        "cursor": {
          "ref": "8092ddde-75fe-4513-a7ac-e23767624a67",
          "length": 283,
          "cycles": 1,
          "position": 185,
          "iteration": 0,
          "httpRequestId": "dfd73c38-0a57-48ee-82f1-b11f5498f919"
        },
        "item": {
          "id": "a636ebd2-f4ed-4f0c-bbcf-883c56fa4a00",
          "name": "credentials_verify:vc:@context:missing"
        },
        "response": {
          "id": "d3840ce5-dff4-48f9-8a1a-89d60a4a98c8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 242
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ed4f4bc5-31ba-4a4a-828b-245f127f2e44",
        "cursor": {
          "ref": "b8748c07-19b3-4737-b94a-da475f24f6ac",
          "length": 283,
          "cycles": 1,
          "position": 186,
          "iteration": 0,
          "httpRequestId": "233e8687-5e1a-468f-833a-a33a6135d66f"
        },
        "item": {
          "id": "ed4f4bc5-31ba-4a4a-828b-245f127f2e44",
          "name": "credentials_verify:vc:@context:boolean"
        },
        "response": {
          "id": "61aa36df-8169-46af-9af7-4c7b514a6a5d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 305
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0528455c-808a-4a27-aa67-292abab82087",
        "cursor": {
          "ref": "c461cadb-9b8d-454f-becd-b5e689735e14",
          "length": 283,
          "cycles": 1,
          "position": 187,
          "iteration": 0,
          "httpRequestId": "43747647-916a-449a-ab00-97bcff1be795"
        },
        "item": {
          "id": "0528455c-808a-4a27-aa67-292abab82087",
          "name": "credentials_verify:vc:@context:integer"
        },
        "response": {
          "id": "9fc4c1ae-82cd-41f9-91cb-330252a97b32",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 305
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b4831263-8f37-442d-beea-f19ae8ac30a5",
        "cursor": {
          "ref": "75e2c593-4da1-4b30-8a39-4aa6eb07ed66",
          "length": 283,
          "cycles": 1,
          "position": 188,
          "iteration": 0,
          "httpRequestId": "1b7459d2-e7e0-46ac-985c-d0a7b94f3adf"
        },
        "item": {
          "id": "b4831263-8f37-442d-beea-f19ae8ac30a5",
          "name": "credentials_verify:vc:@context:null"
        },
        "response": {
          "id": "7ca2ed45-2e4f-4b80-b260-566f6e72903c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 305
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "979caa03-3560-4233-acc6-19e1aa36d8d3",
        "cursor": {
          "ref": "83681f69-2ba4-4f0d-ae36-93a9baf40c07",
          "length": 283,
          "cycles": 1,
          "position": 189,
          "iteration": 0,
          "httpRequestId": "cad01879-ae86-4f00-b0c3-17a33a3cb04a"
        },
        "item": {
          "id": "979caa03-3560-4233-acc6-19e1aa36d8d3",
          "name": "credentials_verify:vc:@context:object"
        },
        "response": {
          "id": "48999851-140f-4a93-9296-00a640cd7f45",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 242
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "444c9c24-298d-4d65-8bda-6aff94d6537a",
        "cursor": {
          "ref": "d600d5e5-19e6-4794-9d68-6f26f8e4b887",
          "length": 283,
          "cycles": 1,
          "position": 190,
          "iteration": 0,
          "httpRequestId": "70aed0ef-f340-461e-8bc6-ae34ad3aef4c"
        },
        "item": {
          "id": "444c9c24-298d-4d65-8bda-6aff94d6537a",
          "name": "credentials_verify:vc:@context:string"
        },
        "response": {
          "id": "75332dff-7921-4cf7-aaca-080e4add2e30",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 172
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "61e2be20-8e5e-459d-a4cc-1eb2d3fb03ef",
        "cursor": {
          "ref": "e3fc2487-830c-4926-a303-9777b5efb7dd",
          "length": 283,
          "cycles": 1,
          "position": 191,
          "iteration": 0,
          "httpRequestId": "7e37c539-d045-4405-ab8c-973385b63edd"
        },
        "item": {
          "id": "61e2be20-8e5e-459d-a4cc-1eb2d3fb03ef",
          "name": "credentials_verify:vc:@context:item:array"
        },
        "response": {
          "id": "2160baba-acaf-4f95-aaf7-f34a3d762c44",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "05b234d6-e4f7-4560-951f-dddb991ab328",
        "cursor": {
          "ref": "b950d93b-1de5-477d-8215-06c9d0c8d983",
          "length": 283,
          "cycles": 1,
          "position": 192,
          "iteration": 0,
          "httpRequestId": "6c3a754c-0af1-4c4d-be8a-c139402391e2"
        },
        "item": {
          "id": "05b234d6-e4f7-4560-951f-dddb991ab328",
          "name": "credentials_verify:vc:@context:item:boolean"
        },
        "response": {
          "id": "717d5c51-7e52-49a6-884d-98d8ff46f6c0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4a1da7ee-47ab-4c68-b11c-a3f1671539f3",
        "cursor": {
          "ref": "37e7aa53-61ec-46f6-b98c-d0a7547b2d0f",
          "length": 283,
          "cycles": 1,
          "position": 193,
          "iteration": 0,
          "httpRequestId": "6733ce3f-5f95-4ab8-bbcf-d7a23388392b"
        },
        "item": {
          "id": "4a1da7ee-47ab-4c68-b11c-a3f1671539f3",
          "name": "credentials_verify:vc:@context:item:integer"
        },
        "response": {
          "id": "0f38b913-19ba-4394-b5d7-a0117d0b785c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d1d218e1-ade3-4f5d-8c5a-3a779eef11b1",
        "cursor": {
          "ref": "840c4a8a-1bfa-4408-ab68-472674ef9598",
          "length": 283,
          "cycles": 1,
          "position": 194,
          "iteration": 0,
          "httpRequestId": "1a80ef09-604a-44a4-b123-52481c172558"
        },
        "item": {
          "id": "d1d218e1-ade3-4f5d-8c5a-3a779eef11b1",
          "name": "credentials_verify:vc:@context:item:null"
        },
        "response": {
          "id": "0d88329f-9d05-4f82-b79c-f3b3ec18065c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9fc33697-ec3c-4116-882f-18d7ca284d06",
        "cursor": {
          "ref": "7e7b95ec-8e84-4af1-9b4a-4f0e14f9d737",
          "length": 283,
          "cycles": 1,
          "position": 195,
          "iteration": 0,
          "httpRequestId": "20fe754a-34ad-4bd4-9e5a-670d16fb13b3"
        },
        "item": {
          "id": "9fc33697-ec3c-4116-882f-18d7ca284d06",
          "name": "credentials_verify:vc:@context:item:object"
        },
        "response": {
          "id": "761a342f-d3cf-4002-8f63-276c964822dc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "375fa264-d27c-4c7e-8b65-e2b157cbe2d6",
        "cursor": {
          "ref": "eaade5d9-28dc-4416-ae5d-a0c0d55ba3c3",
          "length": 283,
          "cycles": 1,
          "position": 196,
          "iteration": 0,
          "httpRequestId": "8ac20f58-a095-4b0c-aed7-db740f4f32af"
        },
        "item": {
          "id": "375fa264-d27c-4c7e-8b65-e2b157cbe2d6",
          "name": "credentials_verify:vc:id:array"
        },
        "response": {
          "id": "8c816c3b-6395-4093-8f9c-e1cfed8755fc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2ad909cd-0752-4cd0-ad16-417d6aac0b29",
        "cursor": {
          "ref": "a82303c0-5717-4d2d-aafc-fd6fe5aa6fd0",
          "length": 283,
          "cycles": 1,
          "position": 197,
          "iteration": 0,
          "httpRequestId": "b9785a44-3e2e-462e-a766-99686e14d5a9"
        },
        "item": {
          "id": "2ad909cd-0752-4cd0-ad16-417d6aac0b29",
          "name": "credentials_verify:vc:id:boolean"
        },
        "response": {
          "id": "c516260b-161d-4e33-b327-e61f2c08f1b0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "445017e5-7a69-40b6-90b7-f97f726acde9",
        "cursor": {
          "ref": "0eddb15f-fad6-4698-86e5-b7b8995fb28d",
          "length": 283,
          "cycles": 1,
          "position": 198,
          "iteration": 0,
          "httpRequestId": "308c99ec-b568-4e4f-8d09-baeabdc7dfe0"
        },
        "item": {
          "id": "445017e5-7a69-40b6-90b7-f97f726acde9",
          "name": "credentials_verify:vc:id:integer"
        },
        "response": {
          "id": "59692325-fbe9-4112-82dc-c54f5df7b732",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4a564986-1e25-480e-b862-e977ce50fe76",
        "cursor": {
          "ref": "a9e0bb2d-8133-41ad-a141-f9e51e063e89",
          "length": 283,
          "cycles": 1,
          "position": 199,
          "iteration": 0,
          "httpRequestId": "6dd25483-5486-4fcf-a2ba-0a6772bf9adb"
        },
        "item": {
          "id": "4a564986-1e25-480e-b862-e977ce50fe76",
          "name": "credentials_verify:vc:id:null"
        },
        "response": {
          "id": "f28363e0-04b4-4293-bfb2-f0708fe91828",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "24bdacea-f345-4bfc-b1c7-6a10f8dba5dc",
        "cursor": {
          "ref": "85936e34-83aa-4638-aa22-317eb482c15a",
          "length": 283,
          "cycles": 1,
          "position": 200,
          "iteration": 0,
          "httpRequestId": "a9b9fc60-908b-4c26-9b6e-7cea5482ff17"
        },
        "item": {
          "id": "24bdacea-f345-4bfc-b1c7-6a10f8dba5dc",
          "name": "credentials_verify:vc:id:object"
        },
        "response": {
          "id": "56a01618-2fdf-4e71-8a92-587dc0bde3f3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a604930c-3c0e-4f97-bb93-3ce60b4967f3",
        "cursor": {
          "ref": "8a8a37ea-3afb-410c-bd11-af4dc1521f27",
          "length": 283,
          "cycles": 1,
          "position": 201,
          "iteration": 0,
          "httpRequestId": "f6c1a4bf-142f-4e6b-a575-7d95dd541306"
        },
        "item": {
          "id": "a604930c-3c0e-4f97-bb93-3ce60b4967f3",
          "name": "credentials_verify:vc:type:missing"
        },
        "response": {
          "id": "4950ff5a-07be-4afb-a6a6-b2a1f0aea138",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2d6f0e52-6ce9-4460-884f-81de2df5a8a7",
        "cursor": {
          "ref": "8bee6557-b4cb-4105-9309-03689e5f95fa",
          "length": 283,
          "cycles": 1,
          "position": 202,
          "iteration": 0,
          "httpRequestId": "c744b82b-773b-48a5-a829-bab3aebdc422"
        },
        "item": {
          "id": "2d6f0e52-6ce9-4460-884f-81de2df5a8a7",
          "name": "credentials_verify:vc:type:boolean"
        },
        "response": {
          "id": "b9fe602d-5661-4e04-9306-f76026c69e98",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4e3c844e-9a3d-455f-95d8-9285ea1d2c18",
        "cursor": {
          "ref": "ce6fd590-2254-42c3-8dc3-9fc164c0713c",
          "length": 283,
          "cycles": 1,
          "position": 203,
          "iteration": 0,
          "httpRequestId": "00b51657-36f0-4582-8dab-ce58c07b752a"
        },
        "item": {
          "id": "4e3c844e-9a3d-455f-95d8-9285ea1d2c18",
          "name": "credentials_verify:vc:type:integer"
        },
        "response": {
          "id": "adaaa95a-e34d-4d8c-80f1-78e8cd8e577d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 72,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c31e2187-fa0b-4f4b-a0e0-5df212250798",
        "cursor": {
          "ref": "d4eddb95-d3a6-437e-b9ae-6a79abfe1dc1",
          "length": 283,
          "cycles": 1,
          "position": 204,
          "iteration": 0,
          "httpRequestId": "2b50a2f7-a28b-448e-9235-51cdc689b963"
        },
        "item": {
          "id": "c31e2187-fa0b-4f4b-a0e0-5df212250798",
          "name": "credentials_verify:vc:type:null"
        },
        "response": {
          "id": "5973f4fd-7cd5-429b-b171-436ad4e9e875",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 58,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "95ba581f-e1d3-4061-9bb0-2e40581ddbf7",
        "cursor": {
          "ref": "9d5fbf4e-a8fa-4859-aaa0-a4af831b2c05",
          "length": 283,
          "cycles": 1,
          "position": 205,
          "iteration": 0,
          "httpRequestId": "fb0655d1-9c93-494a-b32e-0dceb975cf98"
        },
        "item": {
          "id": "95ba581f-e1d3-4061-9bb0-2e40581ddbf7",
          "name": "credentials_verify:vc:type:object"
        },
        "response": {
          "id": "376dfcce-4fe8-4c18-bb20-f8daceb18e2e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9492d58f-5852-4366-92be-e154e87a2a24",
        "cursor": {
          "ref": "86c9e12d-da8d-4822-b392-a04e790433b7",
          "length": 283,
          "cycles": 1,
          "position": 206,
          "iteration": 0,
          "httpRequestId": "05bb1aed-aeea-4557-ae6a-386c015452ef"
        },
        "item": {
          "id": "9492d58f-5852-4366-92be-e154e87a2a24",
          "name": "credentials_verify:vc:type:string"
        },
        "response": {
          "id": "bc07dd3f-af5a-40b2-b460-c22a54b980c7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7f1146b8-10b0-4fb4-bf39-57f2badfb9c3",
        "cursor": {
          "ref": "33baf1d9-b04e-4b62-9f7d-52dd562667b3",
          "length": 283,
          "cycles": 1,
          "position": 207,
          "iteration": 0,
          "httpRequestId": "6b3919cc-9760-49d9-960a-afdf9473da8f"
        },
        "item": {
          "id": "7f1146b8-10b0-4fb4-bf39-57f2badfb9c3",
          "name": "credentials_verify:vc:type:item:missing"
        },
        "response": {
          "id": "d47b6880-9250-416a-9ccb-6947d2b180ff",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b6b3eee8-ebb3-4d07-b6d5-f414407fbbed",
        "cursor": {
          "ref": "d92df6e8-ca8e-4453-a3c5-251a97e77a49",
          "length": 283,
          "cycles": 1,
          "position": 208,
          "iteration": 0,
          "httpRequestId": "224718b2-6981-4fff-8dad-57264d83b3a0"
        },
        "item": {
          "id": "b6b3eee8-ebb3-4d07-b6d5-f414407fbbed",
          "name": "credentials_verify:vc:type:item:array"
        },
        "response": {
          "id": "dc133eda-d11c-4b68-8ef0-ddfcac02baf1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "383d3923-8463-4f42-bc88-c3f1c4145836",
        "cursor": {
          "ref": "3860b59b-0dc8-423d-844b-9550255310d6",
          "length": 283,
          "cycles": 1,
          "position": 209,
          "iteration": 0,
          "httpRequestId": "aeeccca8-3564-4a2b-be4f-6afe9c3ba3c6"
        },
        "item": {
          "id": "383d3923-8463-4f42-bc88-c3f1c4145836",
          "name": "credentials_verify:vc:type:item:boolean"
        },
        "response": {
          "id": "d8dcee05-c152-4fd2-97ae-477b7f964af1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4ba5dd65-2e4e-4b52-b592-71b8f08b10f4",
        "cursor": {
          "ref": "7fd75088-e15b-475b-83bd-8669d96c3fc6",
          "length": 283,
          "cycles": 1,
          "position": 210,
          "iteration": 0,
          "httpRequestId": "185a5cc9-3497-4206-8e25-78b8752705df"
        },
        "item": {
          "id": "4ba5dd65-2e4e-4b52-b592-71b8f08b10f4",
          "name": "credentials_verify:vc:type:item:integer"
        },
        "response": {
          "id": "be46b0e9-56ae-44c7-adf1-f96f1850bdbe",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7fd8a40b-70f7-435b-962f-626b4af490bd",
        "cursor": {
          "ref": "7fa96659-1b1c-4bf1-979b-97746a8aa7ea",
          "length": 283,
          "cycles": 1,
          "position": 211,
          "iteration": 0,
          "httpRequestId": "0703a30b-29a9-4b49-a284-bf1b89b50855"
        },
        "item": {
          "id": "7fd8a40b-70f7-435b-962f-626b4af490bd",
          "name": "credentials_verify:vc:type:item:null"
        },
        "response": {
          "id": "3fc3705d-2159-495f-8d81-2b4abb943589",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0aea63f9-fa76-4557-ae59-c18ee9785811",
        "cursor": {
          "ref": "c4d583fd-232f-4bf4-a967-b8572ffec484",
          "length": 283,
          "cycles": 1,
          "position": 212,
          "iteration": 0,
          "httpRequestId": "83a5aba5-f137-4e51-b5e5-91105f9ce16b"
        },
        "item": {
          "id": "0aea63f9-fa76-4557-ae59-c18ee9785811",
          "name": "credentials_verify:vc:type:item:object"
        },
        "response": {
          "id": "c733933a-9ac6-479f-91b2-cdc0a1bbbdd8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b4bb80bd-8f8a-4309-94e7-d6f6222dfeba",
        "cursor": {
          "ref": "9b7f16eb-df8c-412e-a253-a64c8c8c14cd",
          "length": 283,
          "cycles": 1,
          "position": 213,
          "iteration": 0,
          "httpRequestId": "8e85dff3-f4e7-4015-b95b-a6fd11f5cbaa"
        },
        "item": {
          "id": "b4bb80bd-8f8a-4309-94e7-d6f6222dfeba",
          "name": "credentials_verify:vc:issuer:missing"
        },
        "response": {
          "id": "a8bcb4ae-43e3-4772-bbd4-596dda944603",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 106
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "68245b73-7378-4e03-8907-37517d510432",
        "cursor": {
          "ref": "d0eca9dc-4366-4eb8-a9bf-e6b7204da164",
          "length": 283,
          "cycles": 1,
          "position": 214,
          "iteration": 0,
          "httpRequestId": "413fcdd5-e077-4cea-9c53-ccd1fdbad31c"
        },
        "item": {
          "id": "68245b73-7378-4e03-8907-37517d510432",
          "name": "credentials_verify:vc:issuer:array"
        },
        "response": {
          "id": "7c8a645b-a72e-4d44-9752-24f31ee85890",
          "status": "OK",
          "code": 200,
          "responseTime": 299,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:215)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:215)"
            }
          }
        ]
      },
      {
        "id": "d595c1bc-d448-45f5-8082-5d54b7498a41",
        "cursor": {
          "ref": "4908f8a6-26ff-4768-b752-3d17e08cc8c3",
          "length": 283,
          "cycles": 1,
          "position": 215,
          "iteration": 0,
          "httpRequestId": "090f9e04-9fed-4e48-a858-248b37ccda78"
        },
        "item": {
          "id": "d595c1bc-d448-45f5-8082-5d54b7498a41",
          "name": "credentials_verify:vc:issuer:boolean"
        },
        "response": {
          "id": "3d0e10d9-c1c0-4893-9132-7e2a1d073b5e",
          "status": "OK",
          "code": 200,
          "responseTime": 98,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:216)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:216)"
            }
          }
        ]
      },
      {
        "id": "532fd0ba-2ec9-470c-a3c6-7d9f69aa61a7",
        "cursor": {
          "ref": "a8cfa334-e401-4198-91f9-4ee265b7c4a0",
          "length": 283,
          "cycles": 1,
          "position": 216,
          "iteration": 0,
          "httpRequestId": "5c902b74-08ce-4d05-9fd2-605a56ea1ae5"
        },
        "item": {
          "id": "532fd0ba-2ec9-470c-a3c6-7d9f69aa61a7",
          "name": "credentials_verify:vc:issuer:integer"
        },
        "response": {
          "id": "59de4b24-7dc5-4436-874a-7a0d18221eb9",
          "status": "OK",
          "code": 200,
          "responseTime": 89,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:217)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:217)"
            }
          }
        ]
      },
      {
        "id": "58ccd0e0-e1d2-4caa-a429-309183e851d5",
        "cursor": {
          "ref": "4692f0b8-2e3f-4cc2-9593-b50e31388ec7",
          "length": 283,
          "cycles": 1,
          "position": 217,
          "iteration": 0,
          "httpRequestId": "a0121f7f-bdf4-4661-8c71-a43e1f81460b"
        },
        "item": {
          "id": "58ccd0e0-e1d2-4caa-a429-309183e851d5",
          "name": "credentials_verify:vc:issuer:null"
        },
        "response": {
          "id": "a2bead88-9eeb-4a93-a470-6a5eae9e3769",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 106
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d9c8f36a-6c28-4e7e-a345-eca275e00720",
        "cursor": {
          "ref": "a7d79493-1536-499c-b174-b7569551cecc",
          "length": 283,
          "cycles": 1,
          "position": 218,
          "iteration": 0,
          "httpRequestId": "62ffb5de-d688-4467-b6bd-b38c3a3c67ad"
        },
        "item": {
          "id": "d9c8f36a-6c28-4e7e-a345-eca275e00720",
          "name": "credentials_verify:vc:issuer:id:missing"
        },
        "response": {
          "id": "a079bb05-c36a-4391-aee6-c92cbb507981",
          "status": "OK",
          "code": 200,
          "responseTime": 101,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:219)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:219)"
            }
          }
        ]
      },
      {
        "id": "d9c0ac55-7581-4468-a0f5-5f655dd9a162",
        "cursor": {
          "ref": "b91050ab-0141-450b-b46a-7cac8b2a0b98",
          "length": 283,
          "cycles": 1,
          "position": 219,
          "iteration": 0,
          "httpRequestId": "3fbd12a4-047a-4f49-8999-f20427f1413d"
        },
        "item": {
          "id": "d9c0ac55-7581-4468-a0f5-5f655dd9a162",
          "name": "credentials_verify:vc:issuer:id:array"
        },
        "response": {
          "id": "a1c516fb-363a-43d7-8a3f-1c96e584a6c9",
          "status": "OK",
          "code": 200,
          "responseTime": 95,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:220)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:220)"
            }
          }
        ]
      },
      {
        "id": "d820646e-6584-44f8-83de-4d290044b70f",
        "cursor": {
          "ref": "545cb26d-3953-4ed0-b804-76a9aa8c1e3f",
          "length": 283,
          "cycles": 1,
          "position": 220,
          "iteration": 0,
          "httpRequestId": "8fbd4b57-5343-472c-9b90-4a9b7114813a"
        },
        "item": {
          "id": "d820646e-6584-44f8-83de-4d290044b70f",
          "name": "credentials_verify:vc:issuer:id:boolean"
        },
        "response": {
          "id": "97a27cfa-7598-44f9-9e5f-a63cbddcc199",
          "status": "OK",
          "code": 200,
          "responseTime": 90,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:221)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:221)"
            }
          }
        ]
      },
      {
        "id": "11e236ea-546e-4ef3-8b7a-11fb699c4be2",
        "cursor": {
          "ref": "0b71ff84-5642-4ac9-a8d1-43d01f64697a",
          "length": 283,
          "cycles": 1,
          "position": 221,
          "iteration": 0,
          "httpRequestId": "a5d4aa8e-c4c9-45b0-819a-0dcc5d073c7a"
        },
        "item": {
          "id": "11e236ea-546e-4ef3-8b7a-11fb699c4be2",
          "name": "credentials_verify:vc:issuer:id:integer"
        },
        "response": {
          "id": "3a5c2df7-5f5e-4e8a-a2a1-c5daca8bbeaa",
          "status": "OK",
          "code": 200,
          "responseTime": 92,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:222)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:222)"
            }
          }
        ]
      },
      {
        "id": "5de5245f-41c8-4108-8a02-d2060f336be3",
        "cursor": {
          "ref": "a7b71e32-41b1-4e66-9c53-366823f1cd7f",
          "length": 283,
          "cycles": 1,
          "position": 222,
          "iteration": 0,
          "httpRequestId": "903a5d69-d23e-4fac-bb70-09e00663e276"
        },
        "item": {
          "id": "5de5245f-41c8-4108-8a02-d2060f336be3",
          "name": "credentials_verify:vc:issuer:id:null"
        },
        "response": {
          "id": "aa347c62-2f57-43f9-914c-044eef3a93da",
          "status": "OK",
          "code": 200,
          "responseTime": 88,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:223)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:223)"
            }
          }
        ]
      },
      {
        "id": "8e6638fe-ffeb-4e1a-9b4a-103ef99d0564",
        "cursor": {
          "ref": "faaa2454-4eeb-4e02-9a90-b800885cf10c",
          "length": 283,
          "cycles": 1,
          "position": 223,
          "iteration": 0,
          "httpRequestId": "28db9482-3e1f-4062-b1a2-d55993960872"
        },
        "item": {
          "id": "8e6638fe-ffeb-4e1a-9b4a-103ef99d0564",
          "name": "credentials_verify:vc:issuer:id:object"
        },
        "response": {
          "id": "d4d16ef2-8d5a-44c9-b487-5ac5f6e5ed35",
          "status": "OK",
          "code": 200,
          "responseTime": 96,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:224)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:224)"
            }
          }
        ]
      },
      {
        "id": "278b7f94-791b-4107-b2c6-377cd6c9434c",
        "cursor": {
          "ref": "2d999003-dea0-4821-8ac9-c93ccfb9b669",
          "length": 283,
          "cycles": 1,
          "position": 224,
          "iteration": 0,
          "httpRequestId": "ed4def3f-b9ef-49d7-980d-dfbaa61b65a3"
        },
        "item": {
          "id": "278b7f94-791b-4107-b2c6-377cd6c9434c",
          "name": "credentials_verify:vc:issuanceDate:missing"
        },
        "response": {
          "id": "1ae0bcdf-0012-4a09-90d8-4af88681a756",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8fd65fe9-76f7-4399-88cd-c1060f802855",
        "cursor": {
          "ref": "c2c22c59-3ee7-41ec-b0d1-61c34f07eb19",
          "length": 283,
          "cycles": 1,
          "position": 225,
          "iteration": 0,
          "httpRequestId": "c767b097-af99-401c-9a80-8dc833786e6e"
        },
        "item": {
          "id": "8fd65fe9-76f7-4399-88cd-c1060f802855",
          "name": "credentials_verify:vc:issuanceDate:array"
        },
        "response": {
          "id": "601dd163-3d63-4dbf-a805-b2c9c0a94c47",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "74589143-c1be-485d-b83f-db2282628b65",
        "cursor": {
          "ref": "41aedb0c-38c2-4f30-99d0-1886c808b18f",
          "length": 283,
          "cycles": 1,
          "position": 226,
          "iteration": 0,
          "httpRequestId": "b96989bf-3c9e-4c8e-aa45-7d3b0e70e9fa"
        },
        "item": {
          "id": "74589143-c1be-485d-b83f-db2282628b65",
          "name": "credentials_verify:vc:issuanceDate:boolean"
        },
        "response": {
          "id": "d9062d9f-28b3-4f9f-8265-ebea90baeb30",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4f8bb5b4-4436-4ebe-ad6f-fb32ef4f16dc",
        "cursor": {
          "ref": "4748c2fc-56dd-4bef-8bad-dc6af970e44f",
          "length": 283,
          "cycles": 1,
          "position": 227,
          "iteration": 0,
          "httpRequestId": "3537ab4a-613b-4140-889c-41d9df26b4af"
        },
        "item": {
          "id": "4f8bb5b4-4436-4ebe-ad6f-fb32ef4f16dc",
          "name": "credentials_verify:vc:issuanceDate:integer"
        },
        "response": {
          "id": "6d376615-9f69-47f4-a498-74d7913d1c85",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ef7784a1-b416-4f3e-8f41-8c86358a798a",
        "cursor": {
          "ref": "c38dfeb0-8011-4b16-a7f7-d43c0010ec08",
          "length": 283,
          "cycles": 1,
          "position": 228,
          "iteration": 0,
          "httpRequestId": "e798ed67-0d36-40af-ab0f-a4c403be349a"
        },
        "item": {
          "id": "ef7784a1-b416-4f3e-8f41-8c86358a798a",
          "name": "credentials_verify:vc:issuanceDate:null"
        },
        "response": {
          "id": "7927f49d-6db7-4e3d-b0ea-18ddb0900fea",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "78c5e3dd-2b85-4f51-91b9-1d72a1784f34",
        "cursor": {
          "ref": "d6488d2b-a21c-446c-93a3-6b9ee2016988",
          "length": 283,
          "cycles": 1,
          "position": 229,
          "iteration": 0,
          "httpRequestId": "eb482cbd-eb23-4781-ae2e-8c666b194e8d"
        },
        "item": {
          "id": "78c5e3dd-2b85-4f51-91b9-1d72a1784f34",
          "name": "credentials_verify:vc:issuanceDate:object"
        },
        "response": {
          "id": "d586c8ce-1c01-495a-9189-5431af456e94",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2fb254d3-4973-4392-936e-4380645575a7",
        "cursor": {
          "ref": "77914c68-1d8f-490f-92de-cac37ba3a15d",
          "length": 283,
          "cycles": 1,
          "position": 230,
          "iteration": 0,
          "httpRequestId": "1e05d9ca-08bb-4d9c-bae5-c2fb025057da"
        },
        "item": {
          "id": "2fb254d3-4973-4392-936e-4380645575a7",
          "name": "credentials_verify:vc:issuanceDate:string"
        },
        "response": {
          "id": "2b17f981-5eb5-44a5-8c96-f8ab6a8d34bf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3b13388b-0716-4268-acda-24f08275bf0f",
        "cursor": {
          "ref": "9c914dfc-4116-4b5a-b752-e6318a3a4894",
          "length": 283,
          "cycles": 1,
          "position": 231,
          "iteration": 0,
          "httpRequestId": "acd2703a-dcf0-4f44-a67e-b695ebf72e93"
        },
        "item": {
          "id": "3b13388b-0716-4268-acda-24f08275bf0f",
          "name": "credentials_verify:vc:credentialSubject:missing"
        },
        "response": {
          "id": "dc9afa2e-78a3-4c83-bec1-a838da1f4903",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b59d8ed2-c10b-4d2c-b999-e08f9bbf3833",
        "cursor": {
          "ref": "1e271865-a6e1-479d-b6df-08aa0d3c0b80",
          "length": 283,
          "cycles": 1,
          "position": 232,
          "iteration": 0,
          "httpRequestId": "aa2f45e9-96e2-4060-8f04-986589ea241d"
        },
        "item": {
          "id": "b59d8ed2-c10b-4d2c-b999-e08f9bbf3833",
          "name": "credentials_verify:vc:credentialSubject:array"
        },
        "response": {
          "id": "e2beb6cb-5696-4353-8991-c33cc41e20b2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 223
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "02bfac7d-adc3-4c5e-9f4f-02a1202e160f",
        "cursor": {
          "ref": "bfa0507c-0930-4400-aa61-dfa207926506",
          "length": 283,
          "cycles": 1,
          "position": 233,
          "iteration": 0,
          "httpRequestId": "65dae5c7-5b03-445a-bd43-d7b3f8d8a55e"
        },
        "item": {
          "id": "02bfac7d-adc3-4c5e-9f4f-02a1202e160f",
          "name": "credentials_verify:vc:credentialSubject:boolean"
        },
        "response": {
          "id": "1d9af00a-6a32-43cb-82a3-32eceb10baf7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 205
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0c4b27d0-7df6-4861-a76e-33decaebedb9",
        "cursor": {
          "ref": "2ed81e21-f261-4ea1-b8df-5fcee682e195",
          "length": 283,
          "cycles": 1,
          "position": 234,
          "iteration": 0,
          "httpRequestId": "e03f6785-6d9f-4534-b9d4-c19b663afaef"
        },
        "item": {
          "id": "0c4b27d0-7df6-4861-a76e-33decaebedb9",
          "name": "credentials_verify:vc:credentialSubject:integer"
        },
        "response": {
          "id": "8e1c544a-cda8-4c3d-8202-6bbd3b0668f0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 205
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "68b60df9-f72e-40d7-8951-173e82e76492",
        "cursor": {
          "ref": "a46cf737-75ca-4cff-8b2e-bee98ae340f8",
          "length": 283,
          "cycles": 1,
          "position": 235,
          "iteration": 0,
          "httpRequestId": "b91ff440-59a3-4626-8b0d-eabb2fd5ea19"
        },
        "item": {
          "id": "68b60df9-f72e-40d7-8951-173e82e76492",
          "name": "credentials_verify:vc:credentialSubject:null"
        },
        "response": {
          "id": "f687c423-8d69-49d1-a72a-41f9d25a5784",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 268
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cd286448-b367-4cbd-af82-fcd8b6590076",
        "cursor": {
          "ref": "8a623ebb-5211-47d5-879a-43e305f3fdd6",
          "length": 283,
          "cycles": 1,
          "position": 236,
          "iteration": 0,
          "httpRequestId": "4f131fe8-55dd-4efd-8732-4e0b1793e774"
        },
        "item": {
          "id": "cd286448-b367-4cbd-af82-fcd8b6590076",
          "name": "credentials_verify:vc:credentialSubject:string"
        },
        "response": {
          "id": "eae6814a-6c4c-42be-9d5f-82879067bab4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 205
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "816eb5fd-7960-4538-bd38-9c7b62d28f48",
        "cursor": {
          "ref": "cacec4a3-16fa-4d9f-8a61-4ce1180ca11f",
          "length": 283,
          "cycles": 1,
          "position": 237,
          "iteration": 0,
          "httpRequestId": "ff9279f5-461d-4aec-ad06-64a5a739968a"
        },
        "item": {
          "id": "816eb5fd-7960-4538-bd38-9c7b62d28f48",
          "name": "credentials_verify:vc:credentialSubject:id:array"
        },
        "response": {
          "id": "86607fa2-85a4-4fe2-a513-46fd7be69f9e",
          "status": "OK",
          "code": 200,
          "responseTime": 85,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:238)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:238)"
            }
          }
        ]
      },
      {
        "id": "58d3b682-b246-42f0-9cca-34ac9c788496",
        "cursor": {
          "ref": "1503bd57-72d3-4204-b6a8-915bbac7787a",
          "length": 283,
          "cycles": 1,
          "position": 238,
          "iteration": 0,
          "httpRequestId": "77041285-e5e9-4ba5-bae1-2a3f468e57f0"
        },
        "item": {
          "id": "58d3b682-b246-42f0-9cca-34ac9c788496",
          "name": "credentials_verify:vc:credentialSubject:id:boolean"
        },
        "response": {
          "id": "ffd004c8-5042-4320-99fd-12dbf5d7f82d",
          "status": "OK",
          "code": 200,
          "responseTime": 92,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:239)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:239)"
            }
          }
        ]
      },
      {
        "id": "86a8a88c-3ff2-454d-a646-a0d9cf363d99",
        "cursor": {
          "ref": "527f5285-09e0-42a3-9f4b-73aa66994c6c",
          "length": 283,
          "cycles": 1,
          "position": 239,
          "iteration": 0,
          "httpRequestId": "a4ce7bb6-7d81-4548-a3ed-aa6a7279e788"
        },
        "item": {
          "id": "86a8a88c-3ff2-454d-a646-a0d9cf363d99",
          "name": "credentials_verify:vc:credentialSubject:id:integer"
        },
        "response": {
          "id": "7a1c8f19-9da9-42e8-9bf2-32c763ce3b39",
          "status": "OK",
          "code": 200,
          "responseTime": 96,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:240)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:240)"
            }
          }
        ]
      },
      {
        "id": "d9296509-953d-441e-bc62-9a190aa2bd7e",
        "cursor": {
          "ref": "4a118e72-0053-4443-a4bb-003781e6144d",
          "length": 283,
          "cycles": 1,
          "position": 240,
          "iteration": 0,
          "httpRequestId": "6bd72658-b049-435a-8cc7-84b17e87520f"
        },
        "item": {
          "id": "d9296509-953d-441e-bc62-9a190aa2bd7e",
          "name": "credentials_verify:vc:credentialSubject:id:null"
        },
        "response": {
          "id": "878cf75e-7fc8-445c-8256-78b225074f9a",
          "status": "OK",
          "code": 200,
          "responseTime": 85,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:241)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:241)"
            }
          }
        ]
      },
      {
        "id": "e69416e6-31fa-411a-9fc8-f92b6e08a09c",
        "cursor": {
          "ref": "212331f1-5751-41ac-91fa-7f73456a3dcc",
          "length": 283,
          "cycles": 1,
          "position": 241,
          "iteration": 0,
          "httpRequestId": "010de254-bd9e-4365-8a06-5e615966d6ed"
        },
        "item": {
          "id": "e69416e6-31fa-411a-9fc8-f92b6e08a09c",
          "name": "credentials_verify:vc:credentialSubject:id:object"
        },
        "response": {
          "id": "6c7dbe37-3b75-4c68-8164-82f1ce438739",
          "status": "OK",
          "code": 200,
          "responseTime": 91,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:242)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:242)"
            }
          }
        ]
      },
      {
        "id": "c5b3c4b0-f30d-461f-964d-19b3739fc15d",
        "cursor": {
          "ref": "f4fe0595-92c8-4c5e-bc30-bd682c951e48",
          "length": 283,
          "cycles": 1,
          "position": 242,
          "iteration": 0,
          "httpRequestId": "3dda2dc9-9802-49f6-9ad8-bbaf1eafa121"
        },
        "item": {
          "id": "c5b3c4b0-f30d-461f-964d-19b3739fc15d",
          "name": "credentials_verify:proof:missing"
        },
        "response": {
          "id": "61074664-e955-4bf2-ad8f-d332cb48ae43",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 217
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c5bfac21-80ff-4288-9e46-57b7a4c805c7",
        "cursor": {
          "ref": "e9a1dcb6-40d2-41a9-99c7-bf9d64204204",
          "length": 283,
          "cycles": 1,
          "position": 243,
          "iteration": 0,
          "httpRequestId": "36d67f8e-e163-45ed-a5c1-7feda802a64e"
        },
        "item": {
          "id": "c5bfac21-80ff-4288-9e46-57b7a4c805c7",
          "name": "credentials_verify:proof:array"
        },
        "response": {
          "id": "ca48a67b-922a-4a84-886a-db97850ea882",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 166
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1bd49578-90ad-4b81-acd7-551112b3dcd6",
        "cursor": {
          "ref": "c8ba7ecc-0f96-4f36-9dae-27a924faf7ba",
          "length": 283,
          "cycles": 1,
          "position": 244,
          "iteration": 0,
          "httpRequestId": "f61ac3f5-626b-49c6-ba5c-bbb8da3d2549"
        },
        "item": {
          "id": "1bd49578-90ad-4b81-acd7-551112b3dcd6",
          "name": "credentials_verify:proof:boolean"
        },
        "response": {
          "id": "8b2eae71-c0d2-4668-910b-db9e7f771e45",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 244
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2572512d-5ae1-4ff2-9269-eae841dee8fe",
        "cursor": {
          "ref": "57027c73-2a2c-4a86-91da-8c3dfa5b4cef",
          "length": 283,
          "cycles": 1,
          "position": 245,
          "iteration": 0,
          "httpRequestId": "16039f04-b437-41ae-8b80-4d0638463bb1"
        },
        "item": {
          "id": "2572512d-5ae1-4ff2-9269-eae841dee8fe",
          "name": "credentials_verify:proof:integer"
        },
        "response": {
          "id": "ade22208-ab89-4a8c-9eb7-b9447a64d20b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 244
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3815f250-c049-4cd3-9b76-2510966752a3",
        "cursor": {
          "ref": "8941583f-e850-4f29-9c34-509359f39788",
          "length": 283,
          "cycles": 1,
          "position": 246,
          "iteration": 0,
          "httpRequestId": "bf6de45d-718c-4370-8568-f32114ba244a"
        },
        "item": {
          "id": "3815f250-c049-4cd3-9b76-2510966752a3",
          "name": "credentials_verify:proof:null"
        },
        "response": {
          "id": "936404ad-66a4-40ed-b5bf-aec25767bd73",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 295
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "08699145-5059-4782-947d-38d0b674ff57",
        "cursor": {
          "ref": "a4c538e6-b873-4179-bcbb-cf59828df4e2",
          "length": 283,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "95749ad3-af3e-4778-b1d8-8793c5a8c62a"
        },
        "item": {
          "id": "08699145-5059-4782-947d-38d0b674ff57",
          "name": "credentials_verify:proof:string"
        },
        "response": {
          "id": "553ea6ed-218c-4968-8296-920bfeef4e8f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 244
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cc0d54c3-315c-42af-a04f-d07410878f0a",
        "cursor": {
          "ref": "e6ebaafb-0bb3-4551-890a-c12a1d74dbf3",
          "length": 283,
          "cycles": 1,
          "position": 248,
          "iteration": 0,
          "httpRequestId": "2bc5ef51-6578-460f-9eb6-809f24ff4520"
        },
        "item": {
          "id": "cc0d54c3-315c-42af-a04f-d07410878f0a",
          "name": "credentials_verify:proof:type:missing"
        },
        "response": {
          "id": "5735cec6-dd90-450d-97e2-fe0ce33ba2db",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 345
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1d17b4c1-cc65-4671-837e-262ca1fcf8b6",
        "cursor": {
          "ref": "daf7a4cd-4846-4f5a-9b29-540e81ab5f2c",
          "length": 283,
          "cycles": 1,
          "position": 249,
          "iteration": 0,
          "httpRequestId": "4c32b024-a7eb-4902-8587-55313c610eee"
        },
        "item": {
          "id": "1d17b4c1-cc65-4671-837e-262ca1fcf8b6",
          "name": "credentials_verify:proof:type:array"
        },
        "response": {
          "id": "e0570326-a7d6-413e-a2f1-c08c588f8a7a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fbfc9f6e-ae67-4575-8bfe-6d0c07b1fd12",
        "cursor": {
          "ref": "12c00467-9204-460e-9de8-80d53642dc11",
          "length": 283,
          "cycles": 1,
          "position": 250,
          "iteration": 0,
          "httpRequestId": "6e07c7a1-ede2-4dcf-a380-29a4ab1c9959"
        },
        "item": {
          "id": "fbfc9f6e-ae67-4575-8bfe-6d0c07b1fd12",
          "name": "credentials_verify:proof:type:boolean"
        },
        "response": {
          "id": "e6603030-8fb6-4c70-b057-fab43cda0984",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2b5c0ded-74a5-4383-b0be-443795b008cb",
        "cursor": {
          "ref": "54b12722-a1cb-44f5-aaf7-730220025f21",
          "length": 283,
          "cycles": 1,
          "position": 251,
          "iteration": 0,
          "httpRequestId": "158813de-7f73-4659-94f4-7b456ca931d5"
        },
        "item": {
          "id": "2b5c0ded-74a5-4383-b0be-443795b008cb",
          "name": "credentials_verify:proof:type:integer"
        },
        "response": {
          "id": "ad7b0ad4-b50a-4366-8563-15b94d50acfd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c7852810-0601-4638-ac53-ae226aed772a",
        "cursor": {
          "ref": "ea159dc4-bd1d-41ea-ab8f-05dd5555e35d",
          "length": 283,
          "cycles": 1,
          "position": 252,
          "iteration": 0,
          "httpRequestId": "a572e36d-cbcf-4cb0-bc45-2c2cb9b9dc01"
        },
        "item": {
          "id": "c7852810-0601-4638-ac53-ae226aed772a",
          "name": "credentials_verify:proof:type:null"
        },
        "response": {
          "id": "4d35e44e-37bb-4bb4-9ac4-6087e97dc61b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 345
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "85068d03-c05f-4da4-92a4-7ddcdb8d2f9a",
        "cursor": {
          "ref": "c8cf2dc6-c7a4-4ee1-94b5-4ccf5f215dca",
          "length": 283,
          "cycles": 1,
          "position": 253,
          "iteration": 0,
          "httpRequestId": "79f87da2-e5af-45dd-956e-e4b1d2e8c699"
        },
        "item": {
          "id": "85068d03-c05f-4da4-92a4-7ddcdb8d2f9a",
          "name": "credentials_verify:proof:type:object"
        },
        "response": {
          "id": "b0a0bf0c-77d7-4c77-81d2-423f51b23324",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "208cdcec-e74f-4915-8583-432e94255cf1",
        "cursor": {
          "ref": "67663e5e-abbe-4a5c-a4f1-739cf834b594",
          "length": 283,
          "cycles": 1,
          "position": 254,
          "iteration": 0,
          "httpRequestId": "19b81554-444e-4e2c-a731-43cc8b1d217c"
        },
        "item": {
          "id": "208cdcec-e74f-4915-8583-432e94255cf1",
          "name": "credentials_verify:proof:type:string"
        },
        "response": {
          "id": "4a5a2156-31d9-4cc3-9c64-506eb3fa56ca",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6dc1253e-1e47-450b-a39c-f51393e7098e",
        "cursor": {
          "ref": "80c09e77-71af-4186-97f7-67a8d6f413f0",
          "length": 283,
          "cycles": 1,
          "position": 255,
          "iteration": 0,
          "httpRequestId": "3b02bb60-017e-4611-a53c-35d6bfda7e21"
        },
        "item": {
          "id": "6dc1253e-1e47-450b-a39c-f51393e7098e",
          "name": "credentials_verify:proof:created:array"
        },
        "response": {
          "id": "3da373c6-0a71-474a-9e90-ef26966137e9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5e9dbf96-6e65-4fbe-8cd2-b96d1fce8983",
        "cursor": {
          "ref": "c9e1206c-2f67-40b7-9114-8876c28f810a",
          "length": 283,
          "cycles": 1,
          "position": 256,
          "iteration": 0,
          "httpRequestId": "78f4db3a-8914-4ce4-aa5d-2e8f15f5903c"
        },
        "item": {
          "id": "5e9dbf96-6e65-4fbe-8cd2-b96d1fce8983",
          "name": "credentials_verify:proof:created:boolean"
        },
        "response": {
          "id": "fd73df1e-c7f8-4b19-a356-3eecf8a6c410",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9bfee6ea-ec02-49da-85fa-4a2b5a10c6cd",
        "cursor": {
          "ref": "1679a57a-8c9d-4a66-9d39-16fb0d51eca3",
          "length": 283,
          "cycles": 1,
          "position": 257,
          "iteration": 0,
          "httpRequestId": "3a18943e-de20-4451-83a7-7c2b6e4410f3"
        },
        "item": {
          "id": "9bfee6ea-ec02-49da-85fa-4a2b5a10c6cd",
          "name": "credentials_verify:proof:created:integer"
        },
        "response": {
          "id": "121856dc-6e1b-4b93-a0d4-4ff5eb2eb92a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a6e1db84-e1f7-4605-b774-9bf3cdf6e7b1",
        "cursor": {
          "ref": "9147ac95-378d-41f7-ae59-405ee3be42ad",
          "length": 283,
          "cycles": 1,
          "position": 258,
          "iteration": 0,
          "httpRequestId": "222bb6a6-428e-4753-8fbb-16a9abe7e721"
        },
        "item": {
          "id": "a6e1db84-e1f7-4605-b774-9bf3cdf6e7b1",
          "name": "credentials_verify:proof:created:null"
        },
        "response": {
          "id": "8f814795-935e-412c-a296-5d9d2a9f9093",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 252
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "79864099-5434-4633-abb1-7f65ac55635c",
        "cursor": {
          "ref": "c3f4b7d4-25b4-4dde-ac03-6cd19f19449e",
          "length": 283,
          "cycles": 1,
          "position": 259,
          "iteration": 0,
          "httpRequestId": "02182c0c-ea31-4830-94f8-8830ceeb1f07"
        },
        "item": {
          "id": "79864099-5434-4633-abb1-7f65ac55635c",
          "name": "credentials_verify:proof:created:object"
        },
        "response": {
          "id": "aeebeb3c-72bf-4ff4-9e31-3db29b46c86d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "680808bb-2ea0-4b4f-97e9-3a0fe619d0f1",
        "cursor": {
          "ref": "016f6f84-adc2-496f-8f7e-04a34960074b",
          "length": 283,
          "cycles": 1,
          "position": 260,
          "iteration": 0,
          "httpRequestId": "f522fa38-61bc-4a03-92aa-78f20f861f19"
        },
        "item": {
          "id": "680808bb-2ea0-4b4f-97e9-3a0fe619d0f1",
          "name": "credentials_verify:proof:verificationMethod:array"
        },
        "response": {
          "id": "6db71433-981d-4a10-a334-f0852354a2e2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "35e20eeb-64d7-414e-982a-f019aca72fcb",
        "cursor": {
          "ref": "c9cfd2dc-35f5-431f-ba1b-4686aa14886c",
          "length": 283,
          "cycles": 1,
          "position": 261,
          "iteration": 0,
          "httpRequestId": "ee7eb077-d72c-4bda-b1fe-579acf154aef"
        },
        "item": {
          "id": "35e20eeb-64d7-414e-982a-f019aca72fcb",
          "name": "credentials_verify:proof:verificationMethod:boolean"
        },
        "response": {
          "id": "b1220c18-f09c-4e72-8c0e-3c08f2f3ed2e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a9115c4f-8aca-413e-988e-1acd16a25c1b",
        "cursor": {
          "ref": "48a4c816-0fe4-4c47-b5bc-32b52a315817",
          "length": 283,
          "cycles": 1,
          "position": 262,
          "iteration": 0,
          "httpRequestId": "60654eb4-ca24-4090-8dcd-d9e14c4607b1"
        },
        "item": {
          "id": "a9115c4f-8aca-413e-988e-1acd16a25c1b",
          "name": "credentials_verify:proof:verificationMethod:integer"
        },
        "response": {
          "id": "380e45bf-e873-41fd-a8ad-ea3bb0bf20f2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0eed52c2-f154-4d44-8316-af3272c86575",
        "cursor": {
          "ref": "a3733f86-8af1-4866-a405-5d61ba767c48",
          "length": 283,
          "cycles": 1,
          "position": 263,
          "iteration": 0,
          "httpRequestId": "409b7d02-0c73-4639-8eae-4259d354a352"
        },
        "item": {
          "id": "0eed52c2-f154-4d44-8316-af3272c86575",
          "name": "credentials_verify:proof:verificationMethod:null"
        },
        "response": {
          "id": "274d4f8b-182d-4e57-8461-900ebb94af9c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bd1b3231-973c-4d37-b7df-96bd1ef4b820",
        "cursor": {
          "ref": "f0b8a89a-117f-45ad-aa26-8b9a07668057",
          "length": 283,
          "cycles": 1,
          "position": 264,
          "iteration": 0,
          "httpRequestId": "9b1afd2a-c62f-49e0-b9a3-83f86c8deaa1"
        },
        "item": {
          "id": "bd1b3231-973c-4d37-b7df-96bd1ef4b820",
          "name": "credentials_verify:proof:verificationMethod:object"
        },
        "response": {
          "id": "4aff2a8d-d2ef-41e4-94e8-196fddfdbd5c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0416bf50-8974-4c5c-9794-4baad07b90f0",
        "cursor": {
          "ref": "2bf7200d-8f52-43bb-b6bd-aab7755afea4",
          "length": 283,
          "cycles": 1,
          "position": 265,
          "iteration": 0,
          "httpRequestId": "93916c9f-7123-4e99-a53f-f2449799573f"
        },
        "item": {
          "id": "0416bf50-8974-4c5c-9794-4baad07b90f0",
          "name": "credentials_verify:proof:jws:array"
        },
        "response": {
          "id": "5b08541f-7391-4928-b99a-0a51737f334c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4b38544c-559c-4be8-bcc8-2d55da799ee1",
        "cursor": {
          "ref": "9d5ed320-f53d-4d3e-92c9-4c88f4a5cd3c",
          "length": 283,
          "cycles": 1,
          "position": 266,
          "iteration": 0,
          "httpRequestId": "6f86eadf-8671-4c22-80fc-d10067ea122e"
        },
        "item": {
          "id": "4b38544c-559c-4be8-bcc8-2d55da799ee1",
          "name": "credentials_verify:proof:jws:boolean"
        },
        "response": {
          "id": "b8423c29-b4bd-4695-92ba-dfc0b2a6c8c2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "344bf1c7-6aae-4626-8357-c23a598a0aee",
        "cursor": {
          "ref": "e62af62e-3597-4c7e-a3f9-cafe1948f269",
          "length": 283,
          "cycles": 1,
          "position": 267,
          "iteration": 0,
          "httpRequestId": "3476a1c0-44c9-4ba3-b9b6-185a2e666d86"
        },
        "item": {
          "id": "344bf1c7-6aae-4626-8357-c23a598a0aee",
          "name": "credentials_verify:proof:jws:integer"
        },
        "response": {
          "id": "69518b11-c00b-4253-91a3-a0c5e61cfc82",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3aa5fc57-62c5-4acc-a16c-a86911b4b46f",
        "cursor": {
          "ref": "0a65aefd-dbdc-4d8e-ae64-8bdaa51fd762",
          "length": 283,
          "cycles": 1,
          "position": 268,
          "iteration": 0,
          "httpRequestId": "3fea8d7f-bed3-4d5c-87fd-d2cef95d1e8d"
        },
        "item": {
          "id": "3aa5fc57-62c5-4acc-a16c-a86911b4b46f",
          "name": "credentials_verify:proof:jws:null"
        },
        "response": {
          "id": "4a78546f-f529-4708-951d-2de6060d819f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 56,
          "responseSize": 172
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7d920dd6-64b4-41ab-8ab8-d042672d62dc",
        "cursor": {
          "ref": "a75d1e91-744c-488f-a003-91b9cb97fa9d",
          "length": 283,
          "cycles": 1,
          "position": 269,
          "iteration": 0,
          "httpRequestId": "bc7a044c-6398-46df-9e86-44ce5e639e71"
        },
        "item": {
          "id": "7d920dd6-64b4-41ab-8ab8-d042672d62dc",
          "name": "credentials_verify:proof:jws:object"
        },
        "response": {
          "id": "161d76c8-bd43-48c9-87eb-6e876ccc3213",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "143fd0a7-e4cf-403f-bbd7-4a003b92b198",
        "cursor": {
          "ref": "e0194e96-2d67-4e24-b724-e7b55d5e6fc0",
          "length": 283,
          "cycles": 1,
          "position": 270,
          "iteration": 0,
          "httpRequestId": "43a70152-fabe-40c4-8f90-6be74c0f92dd"
        },
        "item": {
          "id": "143fd0a7-e4cf-403f-bbd7-4a003b92b198",
          "name": "credentials_verify:proof:proofPurpose:array"
        },
        "response": {
          "id": "7a432e35-c9ff-44c8-b461-d6cead708c7a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "52cc97d7-4b68-4b72-9217-d0bcfe3f18b4",
        "cursor": {
          "ref": "b426c84a-3a22-4f89-a573-63d9a70d78b7",
          "length": 283,
          "cycles": 1,
          "position": 271,
          "iteration": 0,
          "httpRequestId": "ef2cee05-1313-4ff2-b9c6-9dc6c31f0e63"
        },
        "item": {
          "id": "52cc97d7-4b68-4b72-9217-d0bcfe3f18b4",
          "name": "credentials_verify:proof:proofPurpose:boolean"
        },
        "response": {
          "id": "4de8d7c1-8da0-4b72-a9ba-934a83f628a0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d30bf09a-ecd0-413c-a89d-fdc2f41b51eb",
        "cursor": {
          "ref": "ae7137e5-65c6-4aee-aaa7-ddb23f703ba8",
          "length": 283,
          "cycles": 1,
          "position": 272,
          "iteration": 0,
          "httpRequestId": "0ec9fc90-a82a-4ee4-a7db-583856190560"
        },
        "item": {
          "id": "d30bf09a-ecd0-413c-a89d-fdc2f41b51eb",
          "name": "credentials_verify:proof:proofPurpose:integer"
        },
        "response": {
          "id": "8dd4f7fb-6a87-49b9-a34b-223cd6331925",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "483c44c4-0722-4ee1-be31-6844006722ae",
        "cursor": {
          "ref": "3fdc70e4-fc81-4e64-a9a9-c0af5c594f64",
          "length": 283,
          "cycles": 1,
          "position": 273,
          "iteration": 0,
          "httpRequestId": "c843a67e-6a10-4801-9846-e0efe9432adc"
        },
        "item": {
          "id": "483c44c4-0722-4ee1-be31-6844006722ae",
          "name": "credentials_verify:proof:proofPurpose:null"
        },
        "response": {
          "id": "524efe7a-ad4d-4122-bd65-6b84597e677c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0651cf5e-5dc2-4b0c-a81c-d9b3a8d7d967",
        "cursor": {
          "ref": "66291b96-44a2-4d4a-8bbc-bc6929684647",
          "length": 283,
          "cycles": 1,
          "position": 274,
          "iteration": 0,
          "httpRequestId": "1587008e-0052-498e-910e-398b59b46df4"
        },
        "item": {
          "id": "0651cf5e-5dc2-4b0c-a81c-d9b3a8d7d967",
          "name": "credentials_verify:proof:proofPurpose:object"
        },
        "response": {
          "id": "f067b65e-579e-493c-8c0a-fd103671bf6d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 55,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "62db645b-b46f-4255-b205-c653c081084c",
        "cursor": {
          "ref": "f8612996-0b79-463f-980b-8a1f422d09ff",
          "length": 283,
          "cycles": 1,
          "position": 275,
          "iteration": 0,
          "httpRequestId": "2b650ce6-3a4d-469e-83bf-9ad3a6da4b7b"
        },
        "item": {
          "id": "62db645b-b46f-4255-b205-c653c081084c",
          "name": "credentials_verify:proof:proofPurpose:string"
        },
        "response": {
          "id": "d974b447-db38-45ba-a3c5-7571690a5b6b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f5152ce2-eca7-4b28-885d-d57698b69ea4",
        "cursor": {
          "ref": "115acea6-9723-40d3-9f54-5eb4b768c82a",
          "length": 283,
          "cycles": 1,
          "position": 276,
          "iteration": 0,
          "httpRequestId": "709645fb-8815-4028-8aaa-091efe01104f"
        },
        "item": {
          "id": "f5152ce2-eca7-4b28-885d-d57698b69ea4",
          "name": "credentials_verify:missing_auth"
        },
        "response": {
          "id": "498dde1d-1636-4331-b5d2-cf300c48db1a",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 25,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "52684ef5-7306-4dde-b265-09f71da8ecdf",
        "cursor": {
          "ref": "15657f29-6911-47b8-b998-61cfa0d49d24",
          "length": 283,
          "cycles": 1,
          "position": 277,
          "iteration": 0,
          "httpRequestId": "21af1859-20eb-477e-8dc4-2dad7d75fffd"
        },
        "item": {
          "id": "52684ef5-7306-4dde-b265-09f71da8ecdf",
          "name": "credentials_verify:bad_signature"
        },
        "response": {
          "id": "64814055-c87f-4338-ae61-ebb3090ae2df",
          "status": "OK",
          "code": 200,
          "responseTime": 106,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is false",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response verified is false",
              "message": "expected true to be false",
              "stack": "AssertionError: expected true to be false\n   at Object.eval sandbox-script.js:3:278)"
            }
          }
        ]
      },
      {
        "id": "87890eaa-5b7c-4514-9460-dc66258233fa",
        "cursor": {
          "ref": "468e0769-1706-4d9e-8dc6-c02ae8d73c9d",
          "length": 283,
          "cycles": 1,
          "position": 278,
          "iteration": 0,
          "httpRequestId": "31ce0c97-8a0d-4246-9300-01197c2d488b"
        },
        "item": {
          "id": "87890eaa-5b7c-4514-9460-dc66258233fa",
          "name": "credentials_verify"
        },
        "response": {
          "id": "ab626279-6c81-4bee-bc14-71a3cb19ec94",
          "status": "OK",
          "code": 200,
          "responseTime": 100,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "d6146842-6b4f-4aac-a677-7b3e7d0795dc",
        "cursor": {
          "ref": "035f6c03-0b34-47c5-aa2e-017ad6f708bd",
          "length": 283,
          "cycles": 1,
          "position": 279,
          "iteration": 0,
          "httpRequestId": "99fbffa3-f048-46fa-9ed3-33acceded18d"
        },
        "item": {
          "id": "d6146842-6b4f-4aac-a677-7b3e7d0795dc",
          "name": "credentials_verify:issuer:object"
        },
        "response": {
          "id": "75bc4da5-a6d1-442e-9009-9f4195d2f427",
          "status": "OK",
          "code": 200,
          "responseTime": 101,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "d1ff4c45-fb94-4b05-a32b-4a238b4ba508",
        "cursor": {
          "ref": "ece2cb52-4a5b-43d6-b82d-65b901966312",
          "length": 283,
          "cycles": 1,
          "position": 280,
          "iteration": 0,
          "httpRequestId": "a548b33d-fb4f-4c33-b0e8-cfb24efa8cbd"
        },
        "item": {
          "id": "d1ff4c45-fb94-4b05-a32b-4a238b4ba508",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "0c9e6327-4ecc-4f89-a29e-97dac451e89e",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 24,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d1ff4c45-fb94-4b05-a32b-4a238b4ba508",
        "cursor": {
          "ref": "ece2cb52-4a5b-43d6-b82d-65b901966312",
          "length": 283,
          "cycles": 1,
          "position": 280,
          "iteration": 0,
          "httpRequestId": "a548b33d-fb4f-4c33-b0e8-cfb24efa8cbd"
        },
        "item": {
          "id": "d1ff4c45-fb94-4b05-a32b-4a238b4ba508",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "0c9e6327-4ecc-4f89-a29e-97dac451e89e",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 24,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dbeedf57-d076-4d95-a77d-ccfeb2923c99",
        "cursor": {
          "ref": "79e87ccf-7675-483b-9e99-49bda1c1c7ae",
          "length": 283,
          "cycles": 1,
          "position": 281,
          "iteration": 0,
          "httpRequestId": "c78f3c37-056b-4d67-814a-9396e97ef630"
        },
        "item": {
          "id": "dbeedf57-d076-4d95-a77d-ccfeb2923c99",
          "name": "presentations_prove:missing_auth"
        },
        "response": {
          "id": "09b93e47-c952-4272-b214-431968cd51da",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 24,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "91b05c74-b14b-4c73-926c-ff3570120d89",
        "cursor": {
          "ref": "faa1f0e3-c0c3-4f29-a2fe-c2b9eabb5523",
          "length": 283,
          "cycles": 1,
          "position": 282,
          "iteration": 0,
          "httpRequestId": "056596eb-5f7f-4f1d-8460-360544d67f99"
        },
        "item": {
          "id": "91b05c74-b14b-4c73-926c-ff3570120d89",
          "name": "presentations_verify:missing_auth"
        },
        "response": {
          "id": "af77c50b-c7ed-428b-b452-904f339c0bc5",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 25,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      }
    ]
  }
}