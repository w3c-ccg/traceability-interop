{
  "collection": {
    "info": {
      "_postman_id": "0b8a4a7f-f952-4403-a9a4-909b37b8fa24",
      "name": "Conformance Suite",
      "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
    },
    "item": [
      {
        "id": "e72b7b9d-9904-487c-84aa-fef4099808e3",
        "name": "Clear Cache",
        "item": [
          {
            "id": "b3a9bf43-a430-4ee3-b0a6-fa70bdceab90",
            "name": "Clear Token Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "a36fc064-ee23-4b2d-94e1-e8a066d46551",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"tokenCache\");",
                    ""
                  ],
                  "_lastExecutionId": "e423eff7-cc66-47d7-9aac-5de2dd8bc665"
                }
              }
            ]
          },
          {
            "id": "0627db25-2b86-43bd-856c-aec194957025",
            "name": "Clear DID Web Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "f8236f67-8bff-479f-8c7d-212d0d009572",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"didWebCache\");",
                    ""
                  ],
                  "_lastExecutionId": "84612479-086a-4bd9-9ea3-c4e51172fcb0"
                }
              }
            ]
          }
        ],
        "event": []
      },
      {
        "id": "849a9656-8d5f-49a2-97a5-399db45fcbd2",
        "name": "Discovery - API Configuration",
        "item": [
          {
            "id": "1fb06701-0582-45cb-a124-103308ec23e6",
            "name": "Positive Testing",
            "item": [
              {
                "id": "6ffe1ddf-0106-451d-aa7c-37703051d760",
                "name": "did_json",
                "request": {
                  "url": {
                    "host": [
                      "{{did_web_endpoint}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "3b2fdaa4-4397-474c-bc7f-1a2413369d9d",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200ApiConfiguration\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "3e33d3b5-37fd-4ec2-a07e-ab5641aaeffa"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "8537880b-238c-46a1-82fc-69a3023910f8",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "350430ab-da9a-491e-8303-97629d7996b1"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "f081637a-ca08-4f1c-be38-48c7ec0e3bfb",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "7f977a31-e034-4aaa-bb48-57aa603b3453"
                }
              }
            ]
          }
        ],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "17b603b5-cfcb-4622-bb60-cd7d1191fb38",
              "type": "text/javascript",
              "exec": [
                "// Discovery requires a multi-tenant aware did web endpoint",
                "const did_web = pm.environment.get(\"ORGANIZATION_DID_WEB\");",
                "const did_web_endpoint = utils(pm).convertDidWebToEndpoint(did_web);",
                "pm.variables.set('did_web_endpoint', did_web_endpoint);",
                ""
              ],
              "_lastExecutionId": "8c376886-e395-4632-9a35-de1f6278be36"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "d059c2ad-9df1-4720-9e2e-782992098a0a",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "b99dbcff-a39e-4b94-8ce5-a3570f0f8ade"
            }
          }
        ]
      },
      {
        "id": "c214ae97-e3ea-45d8-8e3e-149c5dad3832",
        "name": "Identifiers - Resolve",
        "item": [
          {
            "id": "fa5e2653-41ab-4a42-9d81-57c7a0ddceff",
            "name": "Negative Testing",
            "item": [
              {
                "id": "131d6988-744f-490e-85a2-1dd7c1e59ca3",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "391c1605-2434-4260-9541-ce3be0a30cc3",
                    "name": "did:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "invalid_did"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "21ccb48c-5aee-4bdb-ae80-6ec38dacb554",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400Identifiers\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "a8773b3f-ff15-4cd3-9f7a-f178eb6d8461"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5f39f945-e26a-4e35-a366-eac2de651d92",
                    "name": "did:not_found:did_web",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "did:web:example.com"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f78df233-43be-4707-b8e7-c10202e50da9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "68a5c3a8-66e8-497a-87b9-50723521debf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "07bd23c4-31a8-43fc-bb56-61ad9dd5be90",
                    "name": "did:not_found:urn",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "urn:uuid:{{$randomUUID}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4f0fab38-5868-4233-b7d7-50a4216ef5b0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "32d475bd-8aa6-4334-bd17-2eced2272e7e"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "49c8a8e6-c647-4554-adde-93a452f81ebc",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "b97fae1c-2595-42f8-9ae0-085b89a1fc50",
                    "name": "identifiers:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET",
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "eb1327d2-3a8d-4382-8c30-d3e790211aed",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "c09b2da6-00fa-407c-b2de-c84071da586e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6880ea59-8424-4146-b270-6c989309d80b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0de56716-ea63-4203-94f8-072d89291a32"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "ad26c92c-5cad-4476-9771-27ce2e3832e2",
            "name": "Positive Testing",
            "item": [
              {
                "id": "13c827e6-6ffb-4348-9c8b-5289c5f23079",
                "name": "identifiers",
                "request": {
                  "url": {
                    "path": [
                      "identifiers",
                      "{{ORGANIZATION_DID_WEB}}"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "3df5a928-d594-48e8-9b8c-0bd84b4e7671",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200Identifiers\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString), {",
                        "     strict: true,",
                        "     strictSchema: true,",
                        " });",
                        "});"
                      ],
                      "_lastExecutionId": "28a8bf24-6131-4c95-9e17-aab1041792b2"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "ef16487c-5825-4397-9e97-4bb4a3d29e41",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                ""
              ],
              "_lastExecutionId": "027ac72e-6434-4ca5-84e4-c9f8729adb8c"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "77070aa8-208b-4203-88df-46590d9931a8",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "9300bb22-60ed-4ddc-a132-398c048b2dbb"
            }
          }
        ]
      },
      {
        "id": "6b866149-3dbe-4d70-89c9-f937bf2ca981",
        "name": "Credentials - Create",
        "item": [
          {
            "id": "a0292cb6-e14c-4e67-909b-7476c5f24a1a",
            "name": "Negative Testing",
            "item": [
              {
                "id": "f787c2fa-4308-4516-81e8-9710e6b20183",
                "name": "Bad Request",
                "description": {
                  "content": "This folder contains requests which mutate a valid request body in a way that should provoke a \"400 Bad Request\" response from the server.",
                  "type": "text/plain"
                },
                "item": [
                  {
                    "id": "c1576d31-2822-454e-9de8-fb7e284a9f7a",
                    "name": "credentials_issue:credential:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2dfd19b3-4bb7-4a01-a75e-08a52ad2b6b2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4fe3985e-dd03-4290-917b-5d3f21681532"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "73544f36-dd12-4943-b5f9-7f9b7b9dabd4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential\" is a required field",
                            "    delete req.credential;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "0bd66282-a518-4dc9-b211-83e050b31f69"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b7d01f25-1fbc-4250-941b-9d963b78cfa4",
                    "name": "credentials_issue:credential.@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4fc0f79d-6ef0-4da4-8e1b-dc7039bc2ffd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8eef0747-bf99-4751-8674-7ddcfd5fe278"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9b6bc1dc-c8ae-41ff-8d66-478dd93b4b2c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" is a required field",
                            "    delete req.credential[\"@context\"];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "c4d5006e-5a17-4435-8a5f-0b412c93ce3f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dc4bb554-f874-4c98-9770-b5538c74ad97",
                    "name": "credentials_issue:credential.@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1b0118db-fd33-4ff1-b788-f5b5fb2ef61f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d70e4b51-ea3e-4fc8-8fde-843de1b663d9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "13f5e5f3-4b2b-42d7-b7b7-144717ded10d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a boolean",
                            "    req.credential[\"@context\"] = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "8042c55d-6281-46d1-8c1e-ef7f2df96bad"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5c16f7db-f445-458b-91c9-e957da2452cd",
                    "name": "credentials_issue:credential.@context:integer Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "165f4981-dd93-45ac-b51a-3460897628d7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "34099505-55a2-4323-89a8-adcb4b03e6c0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "13fb3669-2777-4bfa-915e-2707e3438da5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an integer",
                            "    req.credential[\"@context\"] = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "1846d26a-9bda-4cc3-9353-085e0726946e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0e540212-d1ac-4f09-90db-b1b80a7ec396",
                    "name": "credentials_issue:credential.@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8f7b7a0e-76f1-428b-968e-6dacbb5fb0f9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a45d05b1-4fe2-43f9-90c8-466a21c29a9a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "47a3baf1-51ef-4aef-91cf-c0617abcabe1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not null",
                            "    req.credential[\"@context\"] = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "6ebbc3c1-aeb9-47a5-add3-d6bdefc69361"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e01fd1c2-abea-4358-b4e9-3c10bfb32279",
                    "name": "credentials_issue:credential.@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "eedad7ce-bdff-440f-ac6d-af9dad866422",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1a29359b-177c-4646-a2dd-fbe5caabf6cf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "204001b8-a7d6-4cae-99c4-d89401e923a5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an object",
                            "    req.credential[\"@context\"] = {\"@vocab\": \"https://www.w3.org/2018/credentials/v1\"};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "4ec11162-fa5d-4ce0-b542-2cd65eb48559"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ccfdf8ed-6305-4912-9e43-eb6584842440",
                    "name": "credentials_issue:credential.@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "69836e4e-36c5-411a-b292-18ca36f77cc2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "664668bd-74cf-41e0-9e96-40754a3fca4e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "16a0139d-11bf-4171-a150-9bd1b4739573",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a string",
                            "    req.credential[\"@context\"] = \"https://www.w3.org/2018/credentials/v1\";",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "d543f2a3-312c-47fa-9252-43f2a32ec7ac"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8b2d3c0f-1a5f-41a1-981a-62855cecaad1",
                    "name": "credentials_issue:credential.@context.item.array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9454300c-28d3-4992-b6b5-8f612692ba49",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5e5c1e03-eca7-4d7a-a2ce-3d71799c3dc2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2a84b386-ddf3-4412-9ad8-d8fac7ef6cc1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not array",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        [\"https://w3id.org/traceability/v1\"],",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "2dc35262-6125-4d60-87fa-f3b4fec4da23"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2de1aad3-0475-45a0-93c2-d92cdbbe0615",
                    "name": "credentials_issue:credential.@context.item.boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ff06e3f9-753e-419c-b626-b9c509b4478e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d72c7343-6a5a-49b0-b431-6650a4a25ab3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1166152e-cf97-4896-ab75-3cb34a3c1341",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not boolean",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        false,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "9fe8ef81-54da-4f8f-9174-e2d619dbd733"
                        }
                      }
                    ]
                  },
                  {
                    "id": "20507732-c8cb-4002-9be9-ccf919633d1f",
                    "name": "credentials_issue:credential.@context.item.integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6e8fee60-3709-407f-9997-9bc1383eab25",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "99fdf8e3-2a7d-443f-9277-56da37e4b793"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "480f8d03-a229-4573-b995-e5965a3cc63b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        42,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "a53b48c1-5c89-49d8-bdc0-86458c7acf5a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e5ba69c8-a44c-4e85-b11f-61fc4b3e5769",
                    "name": "credentials_issue:credential.@context.item.null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d24dc9e3-30a5-4d14-884d-a1f0a3181de5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "894eed2d-f06a-4613-bf81-1f6fbf1df408"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d3e9e330-2158-4ca5-bc31-17eb58eb9b01",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        null,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "89a679b5-99f9-4225-8670-61d473f35a5e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "adeaccbe-0929-4fad-8e5c-52e946d03c6c",
                    "name": "credentials_issue:credential.@context.item.object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7d8b2dc9-bed4-47a4-b1ec-bd5d0f6c390e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7138b664-1043-407b-bf9f-8fb975774610"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "05747e9e-fae9-4e28-a9c6-d0b6e0bb4aab",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not object",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        {\"@vocab\": \"https://w3id.org/traceability/v1\"},",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "eab4df27-b283-4224-a791-4c5948e384ad"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c8b5bafd-5ca3-488d-be09-0f48fe27c75b",
                    "name": "credentials_issue:credential.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "be25955f-949e-436f-906f-e40545dd9aed",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "868beb06-0e92-46a1-943b-55fdd0127ae0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7862169e-6bca-454f-b2f7-9ef8c7bd1c72",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not array",
                            "    req.credential.id = [pm.variables.get(\"credentialId\")];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "fbc72dce-7bce-4b5a-a4a2-352169df78d7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7c341d44-ad8a-4061-8394-c0a31fc99faf",
                    "name": "credentials_issue:credential.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9f3fa7f0-9b46-46fa-9966-d906e6d1b55f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0768b6a5-73d6-4859-b10d-15f1550c2537"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "beb7a321-101e-483b-84fb-a601160ef154",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not boolean",
                            "    req.credential.id = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "c3c120e2-6238-4b32-b0e6-cba20a506ce5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ed156fcd-f74a-4e3e-8ea6-4fadc729fc9b",
                    "name": "credentials_issue:credential.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4f026538-935d-4260-818e-e7cbcb8c9674",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cf0cd8fa-bc8b-484a-8375-9c7dae60dd2f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3c958442-f4ca-4644-b80f-2ef908d5d1f9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not integer",
                            "    req.credential.id = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "ae4fecae-5676-4f5a-8d4c-cc7674c125b7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8992532f-7108-425e-af78-d9919f87a315",
                    "name": "credentials_issue:credential.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "825aaa92-eb37-43c5-b4b1-7af8d9ecb7d0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5759de5a-82e6-4300-9bda-698df3f3b9ef"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "59d00278-bdcf-411d-83fa-36c8eb5b0e9b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not null",
                            "    req.credential.id = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "aeb0e10c-c8d4-469f-b5e8-980027185216"
                        }
                      }
                    ]
                  },
                  {
                    "id": "53a1999a-e2cd-49d6-b0e3-dd3116b09d27",
                    "name": "credentials_issue:credential.id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3885b926-9897-4784-9fd0-44c2250e60ca",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9c622a55-d329-401a-b154-78551fc6ecba"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1cc6ef21-a35a-4041-b835-053385c3f597",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not object",
                            "    req.credential.id = {\"id\": pm.variables.get(\"credentialId\")};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "cb2912ea-9caf-4004-b508-2f0bdb27d5bf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f3cc482b-c5ad-4647-8535-e2a029ca0c14",
                    "name": "credentials_issue:credential.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9e80249c-f818-4e98-966c-21a737a7c3a3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "33ee9360-32c4-4abe-b1c0-2959b9bddfd6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7951de04-0cba-458b-a55e-98d5e040347a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type is a required property",
                            "    delete req.credential.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "1d477fa0-2307-4443-b689-16458d68cb88"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a418011f-c04f-4957-875b-4b3639f65aa8",
                    "name": "credentials_issue:credential.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6e689ee3-eff0-4bcf-8cd9-51d15b9d7b06",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4fa31782-715d-49af-a18f-bc4ada4121e9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "593ed815-9951-4106-970e-cc01402f9381",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not boolean",
                            "    req.credential.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "33d332f5-be54-4738-8853-e671100cbab2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bfdb129f-85ed-4621-8093-155ba8389b2c",
                    "name": "credentials_issue:credential.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b6b181ca-cad6-4ae4-869f-fade83d7e42a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bc071e8c-93fd-459d-9e7c-d0a12ceac00b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c9420464-0a7a-45f3-88cf-06764fc2c3db",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not integer",
                            "    req.credential.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "cbbf7f4b-3dba-4306-b91d-ab454d202abb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8d6e556c-e194-499a-b9a7-1152560df6cc",
                    "name": "credentials_issue:credential.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0bde86b8-91a3-41dd-9fd8-c21051455e62",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0938e752-09f2-4e9b-85c8-9e82ced224aa"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bf36ac8c-c050-4a47-8c20-61e2b65276eb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not null",
                            "    req.credential.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "8ee51bcf-2ad5-4df8-a841-e9c29ca9e711"
                        }
                      }
                    ]
                  },
                  {
                    "id": "10816fe9-0e47-4a70-bc61-75dd80f781e2",
                    "name": "credentials_issue:credential.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "70c1977f-aacd-408f-b545-fb2c4bc96b67",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2f804956-d1e0-4704-80a6-ee41e28cbc86"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ad64e267-2ff2-4927-9887-a9d1edd59c47",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not object",
                            "    req.credential.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "a21cbc5d-5e36-4c72-b613-84e109581ac0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8b67cc0f-aab7-47ca-94f1-12e6ed2423cf",
                    "name": "credentials_issue:credential.type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "393891d4-709c-498c-828a-1150c70cbd77",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f5454e36-88cf-47c3-8208-60637a69d7f6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9070bf8a-e3ed-4d96-a0b6-72957fff6c66",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not string",
                            "    req.credential.type = \"VerifiableCredential\";",
                            "}));"
                          ],
                          "_lastExecutionId": "214279a1-6801-4529-81c4-d0853ca7413c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b2ba708e-01e3-4cac-b5f9-91c6f55d990b",
                    "name": "credentials_issue:credential.type.item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c85ef797-36f1-4e76-bb87-fd7fc443e3a7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8f76aafa-3398-4f2f-b45c-e337dc7d1c6f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c49c59a3-85b5-4b53-9c94-792a61abf98b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must have at least one element",
                            "    req.credential.type = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "f0a3b601-0aef-4f8e-84ce-2d9d9f19c07c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "413ddbc2-c953-4215-84c3-91e071df7bf4",
                    "name": "credentials_issue:credential.type.item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "34f16b92-f895-4023-92d8-47f66b125d3a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "72cd06e3-7b2c-4afc-b870-f4a76e2bf0b1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5bc0a897-6e17-4249-a367-b11b60d54e76",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not array",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        [\"AnotherType\"],",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "3412a9b7-89d7-477b-9077-eb95db756e2b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dba4544a-4833-4302-9b4f-e3e8f16122fb",
                    "name": "credentials_issue:credential.type.item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bf53e034-c40f-4f69-a16a-776624eb17e2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8288e61d-7e73-4831-aad9-931f9daa3c3e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "af52645f-1dd3-44cb-a90f-099859f0708e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not boolean",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        false,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "579a5dd6-d16d-4732-947e-d023f2ae4105"
                        }
                      }
                    ]
                  },
                  {
                    "id": "68a239d4-313a-461e-ab7e-b9b1a4e774ea",
                    "name": "credentials_issue:credential.type.item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4bbabbfd-1737-48fd-85b4-d5c0184430de",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cbdb1f6d-0fa4-4f3e-87fd-3ee4312bc4d5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5b94ca16-0d46-4a62-91f7-f2d23ca6c033",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not integer",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        42,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "c58324f6-f277-446d-a026-13d23837946c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "85f9fd4d-5011-4f0b-bdf6-87eb23d68049",
                    "name": "credentials_issue:credential.type.item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c1745c47-76ea-483d-9bdc-99d97dda83e6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4c39cca2-4913-46b4-9926-42378bce0a7c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8c9a401c-a1d0-4fde-8924-bf63cd5bdb43",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not null",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        null,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "4ab36718-97aa-41e5-961f-8e458f2c9791"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6ede5ea8-c1fc-4ddd-85d2-5c4d4f37c8c4",
                    "name": "credentials_issue:credential.type.item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "954d11db-711c-4e62-9c27-c4a80f8327c6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3a5e2b96-2420-4996-9bcf-8225059d7549"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e9e0f885-1bd1-4166-8d4a-cc64a180c885",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not object",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        {},",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "95d90f40-f45d-46f9-83e3-c940bb2b98ef"
                        }
                      }
                    ]
                  },
                  {
                    "id": "15223117-ead0-4ea2-a8c2-db6e11cf81ac",
                    "name": "credentials_issue:credential.issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7123579a-d577-4a7f-8e0c-c334c58422f3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0fcad511-2e27-4e26-87d6-c804e7677b8b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0f9aeef0-a49e-4e38-9434-0679bb4f0d81",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer is a required property",
                            "    delete req.credential.issuer;",
                            "}));"
                          ],
                          "_lastExecutionId": "4c1478d7-f2e7-4421-bb2d-ec012cffc312"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4d4d4c4a-e916-4d29-b427-29657bb7f672",
                    "name": "credentials_issue:credential.issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "073a746f-3103-4d89-8a19-6878c838b5ac",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ebf03639-233f-49aa-84bf-117c29ecbbba"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7754b468-35b2-4536-907b-030d47ee8c00",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not array",
                            "    req.credential.issuer = [pm.variables.get(\"issuer\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "511a0a43-a6a1-4cff-9e53-625f0849dd17"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6da80b3c-da3a-4344-907f-fdf2d727f2c8",
                    "name": "credentials_issue:credential.issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f56a7512-283c-471e-960d-6b3c33b44b16",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f397a1bf-5811-4226-9f9d-074b25603236"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "951d8e42-d0cd-4739-9d57-2013f40785cf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not boolean",
                            "    req.credential.issuer = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "c159b4bb-8b77-4955-a444-e08d119f713f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3af81a59-358f-4997-9d9a-b2575275f20e",
                    "name": "credentials_issue:credential.issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c002ace0-3310-4755-8864-ee879e43f365",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b505e0d5-64e6-415d-b99b-5a0e8b96ad0b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "82650d95-06ad-49f6-929a-47bdfd3c9fcc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not integer",
                            "    req.credential.issuer = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "57aa054b-d290-4493-8708-c87ad7d4f03e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5573c509-932b-4b84-9643-adf95a494fd9",
                    "name": "credentials_issue:credential.issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a1289ada-8628-449b-ba2d-c3b96fa08009",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8652f318-587d-4dff-b60f-3d69b180b65b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5b2e6ce1-1700-469c-b99e-ea6578eb1ef6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not null",
                            "    req.credential.issuer = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "90a5532e-1be4-4b33-b091-3200bcca042b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aec8f27f-5b47-4d55-8d28-191bdc601434",
                    "name": "credentials_issue.credential.issuer:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5b7a1dee-93b2-4bef-b431-c5d697ddbb0b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "40c64ff4-edae-4558-afd9-c655ab52acfb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eb79c9b9-1604-46ab-ae53-6229fcbb64db",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be a valid URI",
                            "    req.credential.issuer = \"not.a.uri\"",
                            "}));"
                          ],
                          "_lastExecutionId": "9f65a78e-1401-4176-a649-7b03278ad6c5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "01170a03-2cc3-408e-9ca3-d54934a36485",
                    "name": "credentials_issue.credential.issuer:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "38246bcc-1156-4ca0-bbc2-f8b721ba79e2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "9d76fb0e-3e34-4771-ad25-30dd3aaa7e79"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "66f0bb6e-0582-41e6-8b30-8e28a2a53a3e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be known to the endpoint.",
                            "    req.credential.issuer = \"urn:uuid:{{$randomUUID}}\";",
                            "}));"
                          ],
                          "_lastExecutionId": "41074115-ee1d-487b-abc3-3ccea531f10b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ebc86a24-c20d-46bf-91b4-42d4268e9ae3",
                    "name": "credentials_issue:credential.issuer.id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5c7bfb5e-877f-4cdc-b56e-659feca58241",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4a63b102-5555-4695-a321-7f869a1c3c6c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "904d5298-73e3-4adc-a2bd-00edb118fda9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id is required when issuer is in object format",
                            "    req.credential.issuer = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "4e8cffdc-d572-442f-a30d-405fb7a80bdf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b73a9e97-0a70-4359-a650-201b090466ed",
                    "name": "credentials_issue:credential.issuer.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e43ab2b8-d4c5-4527-952b-44f5b4df616d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a409b000-2fef-4a3e-93eb-ad4c8215cbe2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b2647b7f-d135-446c-a06f-e393fbbc154b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not array",
                            "    req.credential.issuer = {\"id\": [pm.variables.get(\"issuer\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "891d650f-2ee5-44a3-a523-5a3503f4f3b6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "61d737ae-dca6-4732-83cf-5ace662b5202",
                    "name": "credentials_issue:credential.issuer.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "168b9885-c0f8-486c-b0b5-c5364d22a073",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a4fd37c8-c2e2-4507-9fe9-a31494e95621"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cfe1de72-13d6-4c0c-826c-19094bfb2fd3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not boolean",
                            "    req.credential.issuer = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "8d94d440-58fd-4d42-be27-e3ef002ed401"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9650ee7a-b16c-4e13-b93b-3fc94323249f",
                    "name": "credentials_issue:credential.issuer.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "616dd5ea-3ee7-4b11-9d2c-b6111174686f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ccef4fbd-5001-4429-b3a3-9d688302a989"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f3bf6f7a-c34f-419b-b1b7-ba9d64e92df0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not integer",
                            "    req.credential.issuer = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "6a8559af-94ac-49ea-b591-7cc988e96ad8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e3f50b18-c711-43f9-b5cf-bb3d3a23b658",
                    "name": "credentials_issue:credential.issuer.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "41c0dffc-fdfd-4c30-920f-b07b7f0d0e1b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d4ddc87f-be04-4941-8dae-7a1050566015"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f020bf8a-8bff-4bd5-b7f4-30474e47d6b6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not null",
                            "    req.credential.issuer = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "2d4a5abe-247a-48e5-b276-82a385577fde"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d50417f3-e969-4fba-9e97-756cb31c4ace",
                    "name": "credentials_issue.credential.issuer.id:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c2119141-800e-4826-a185-29f9288940dc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3873f4bf-567a-46f7-9487-0fd33f56ed48"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "40b150a5-6f5a-4d86-ba02-4f3d775485a0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be a valid URI",
                            "    req.credential.issuer = {\"id\": \"not.a.uri\"}",
                            "}));"
                          ],
                          "_lastExecutionId": "84ee0761-1b0a-4785-8fc8-aed3fdf11010"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5323976a-be2e-43f3-b537-7f992297a4ed",
                    "name": "credentials_issue.credential.issuer.id:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dab1ff9a-b37d-4d73-a673-839d85a4fa96",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5de23bc4-454a-45e6-a1f0-834ffe8a0afc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "21dd2ffb-ba99-4a29-b553-d28f55b81014",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be known to the endpoint.",
                            "    req.credential.issuer = {\"id\": \"urn:uuid:{{$randomUUID}}\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "491d2512-03b9-4fcf-ba33-7eec74ce18d9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a1bc303d-eb42-4b31-bcd3-136066ea5c32",
                    "name": "credentials_issue:credential.issuanceDate.missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7b45f0de-83e4-4305-9cc6-81731d0ced0c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "29ba43aa-1672-4f11-9a71-de3b68d1183b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "616c8b9a-ade6-4c32-991b-612ea928c695",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate is a required property",
                            "    delete req.credential.issuanceDate;",
                            "}));"
                          ],
                          "_lastExecutionId": "bac4ab62-1e3d-44e5-bff0-9c9b8b727ae0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7deec527-994d-4f8a-a0eb-e84d417e309a",
                    "name": "credentials_issue:credential.issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3ea6e043-9bbb-40f2-b52d-13fa293f82fa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c148df7e-af59-49af-ad3f-86a9120ad1ef"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c23ca236-1fb8-422e-9d56-1d06861cb13a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not array",
                            "    req.credential.issuanceDate = [pm.variables.get(\"issuanceDate\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "3ac0e3e4-1852-4c1b-a811-3c59ed04f476"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c2453664-eeda-4e9d-92d9-14b752fa64e6",
                    "name": "credentials_issue:credential.issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3c65c2cb-104d-4844-b892-9c41b2ad2df1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "093801f2-1d39-4f17-bfa2-9620c0fa2000"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "22cd0569-ec3f-43af-a688-3efe709734e5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not boolean",
                            "    req.credential.issuanceDate = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "e057c540-af0e-497a-a13d-4523b66c6f50"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1df0d12a-095a-44ad-b14c-c9522ec9ddbb",
                    "name": "credentials_issue:credential.issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "db61ba9f-5e86-4b1b-8257-932c679978f0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "02241c2a-5dc1-4a28-8458-18d45edd6bbd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6ee61603-767b-47fe-bbe2-d8af236621a9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not integer",
                            "    req.credential.issuanceDate = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "17d0ebde-8aae-4af6-9d0b-be363341b356"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1762dffc-9d59-4fe6-8ec8-b7a10abe1209",
                    "name": "credentials_issue:credential.issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5d320bcb-a7f7-41d5-b00d-ff21131fa9e1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3af19b08-583c-432c-90c3-aefb475faf40"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3b9ec4c0-ccec-4c7b-8ece-120caea294b0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not null",
                            "    req.credential.issuanceDate = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "0a847ed2-4d3f-4a59-a2e3-bcb7e653ed33"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eb9adc64-15bc-42ca-8a08-c2ff9c94a7a4",
                    "name": "credentials_issue:credential.issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "915f6036-ce63-458a-8b6d-b59940be2a85",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "681deb59-584f-424e-a9b6-0341b2048279"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1ff2577c-f84d-411c-91e2-0344e67ca336",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not object",
                            "    req.credential.issuanceDate = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "768aa3da-0ac6-4d59-a6b9-4a90d42e1733"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a0f47ed2-5b45-4b2a-b233-f6dd71406007",
                    "name": "credentials_issue:credential.issuanceDate:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "70398ca8-0e10-44d7-83b0-1c3124f30820",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ae4ca72c-ff41-477b-bce2-0a68d4d05752"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "061e6810-a08b-4206-a95b-a73de75ba17d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be a valid XML date time string",
                            "    req.credential.issuanceDate = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "4ecc9ed5-59cf-41ee-a75d-5bc28a2d5e04"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2116b480-04b4-4918-871f-fee9be155e70",
                    "name": "credentials_issue:credential.credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2a769f64-97f0-4e3f-8274-c207dae2ecb5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ad500056-8d6e-4f7b-9f70-f51f578f99f4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5300ba3a-447c-44ee-b3de-6aad3440d778",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject is a required property",
                            "    delete req.credential.credentialSubject;",
                            "}));"
                          ],
                          "_lastExecutionId": "ed450361-7827-41d2-88d7-dd5b23ed6c4e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cd173e13-0fe7-45d2-a3dd-6f9e35378ba6",
                    "name": "credentials_issue:credential.credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9797b02b-135c-4268-8bbc-8425d4d86783",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "795e0dcb-4ca0-4475-876e-e29bc50cdee7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7ae75471-162a-444d-bac7-3ce5ba18025d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not array",
                            "    req.credential.credentialSubject = [pm.variables.get(\"credentialSubject\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "a74626c4-dd78-4856-a57f-651ecec9fa1b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1d29c0b9-f209-441a-a26a-3e65533936a0",
                    "name": "credentials_issue:credential.credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "17a3de13-3e54-4ffc-ac38-ee445d84c140",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "51637312-0e67-483f-8c89-d31296cb079d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e4305932-bf84-484a-830b-8d0e0a4bd684",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not boolean",
                            "    req.credential.credentialSubject = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "563cd0ab-2cc6-4257-b12e-3fb57cebbd3a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ffddde0b-f669-4e43-9dd6-e2a98825f3a3",
                    "name": "credentials_issue:credential.credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6624a5ff-8ba4-4c14-8a90-3f585aec0aa8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9db3cf41-c2ce-4b42-b7e7-a59341a5a0f5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2a442a20-b188-44a4-b220-3fb0ef701dbc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not integer",
                            "    req.credential.credentialSubject = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "22c7a35b-c5bb-4881-aae2-7647cd1531e7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fc845455-76ce-488a-83d4-5ecde2b40618",
                    "name": "credentials_issue:credential.credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ee457f08-d8a8-4be4-87c2-375662988b8a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e6739c16-cb53-4045-a14d-c28ce3e8c7cf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4b8849aa-6684-438b-9928-4c09e2bd8911",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not null",
                            "    req.credential.credentialSubject = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "3cac7398-d05e-45d8-b909-0534fc6b8f97"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4c11a650-f358-460d-b2e9-8d83fa3d9eb1",
                    "name": "credentials_issue:credential.credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e1c413ef-a6a4-478b-a1e7-372c3d5537f0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a9346e66-a44f-4503-8a79-dc8a55f91db2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1af25ea4-b821-4c56-9958-101318c3f0d2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not string.",
                            "    req.credential.credentialSubject = pm.variables.get(\"credentialSubject\");",
                            "}));"
                          ],
                          "_lastExecutionId": "cc0f08b3-78b3-4fb2-a460-78a9683ad404"
                        }
                      }
                    ]
                  },
                  {
                    "id": "949d77fb-2944-4cfb-904e-0a301345d43d",
                    "name": "credentials_issue:credential.credentialSubject.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bbc7cc2d-ed21-46e5-9d84-290eca723834",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "15ba8119-ff75-4cf1-930b-2954bc180a56"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9e349eaf-bc95-4021-9639-45a40cd794ec",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not array",
                            "    req.credential.credentialSubject = {\"id\": [pm.variables.get(\"credentialSubject\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "65449070-3a7c-40b3-b2c2-35dc2b993389"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8b413455-3f3b-481e-845d-ad683a80da1e",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5cdbdc13-4d53-47ce-a7c9-66783db865f4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7f5cde57-97f5-4b0c-ad8c-f945ea1f6183"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4d92d803-bd75-4d8a-a425-21a75b2b545d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not boolean",
                            "    req.credential.credentialSubject = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "91bc70db-d779-42b9-8ff7-9bf146ebadba"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fab11764-8c68-4753-8459-e4e7ca4e96ce",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 2",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "94b10ed3-39d8-4f6c-9947-d2124e175365",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "022dbcb7-4349-409a-bd4a-5fe8943cdf8f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8cdc15cc-8a0d-480d-a480-577970f9599a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not integer",
                            "    req.credential.credentialSubject = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "5f6ef860-3e42-40db-8316-df13b30c64b9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a7b11c06-6642-451c-aa32-bc28938115a7",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 3",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "73862989-2ec7-414c-a425-970d2bf4ccde",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cd71d998-bf15-4a52-ba64-36a07e3987a0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "34b92a67-dc44-4e4c-bf6e-2d79ddda6e8a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not null",
                            "    req.credential.credentialSubject = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "3f533918-a4dd-41b8-89d9-4c9ba4cec20f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1cff5cbe-4df9-461a-8db2-dc348efb0c76",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 4",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "73b146fb-f42e-4745-bb45-f95c190ccea8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "52770208-e673-4bca-a071-d50b0c418dce"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "26eef7ba-9673-4540-a00b-afd8c39421fb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not object",
                            "    req.credential.credentialSubject = {\"id\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "18d6abb8-66cd-4e86-89bd-8f09674f28db"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8db10a17-ba8d-40d7-be73-809701ed46e0",
                    "name": "credentials_issue:options:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6a1729c3-38c5-47df-9a76-c76e8ff57edf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "40342d04-c424-46b2-abc6-b7d5ceeed20f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fd303153-8153-4133-94b8-d5e1b896898d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options is a required property",
                            "    delete req.options;",
                            "}));"
                          ],
                          "_lastExecutionId": "71d810fb-123a-470a-b766-5049b0aabb56"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a483d6ee-ac0b-4418-9b7a-ba45777fb3d8",
                    "name": "credentials_issue:options:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e588f029-789d-4d2c-b2fc-eb3e8927014e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1d8ec510-98f5-40b7-9b49-142b170cbcb7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "52b147d5-5072-4805-b672-3a780ffc2927",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not array",
                            "    req.options = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "390467f9-667e-416a-9dc9-506efda36eb4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f26a0836-1853-4061-b3fd-c7df8dd682d8",
                    "name": "credentials_issue:options:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b16a2ee7-1dd9-4912-8656-dd14fd0145cf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "df6fef76-cf6e-464e-bbdc-492b5943b44b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e64f6ccb-b758-4184-b0a3-732e04b95e62",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not boolean",
                            "    req.options = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "3078eac2-cda9-4a8e-95f5-1d1f9e74f234"
                        }
                      }
                    ]
                  },
                  {
                    "id": "01007517-52f9-4845-997e-20eb60616d27",
                    "name": "credentials_issue:options:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bdb5556b-e862-4756-a98c-d4fb1c56fffa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "98a8e655-1907-44ba-a38f-fe06cf3c3655"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9b184dae-e3df-48c1-9558-8da7acecb940",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not integer",
                            "    req.options = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "fe287603-65e2-4aa1-bda9-34ada38fd0ed"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ffdd671b-a8c1-4924-b0e4-eb71d4f46a72",
                    "name": "credentials_issue:options:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6010a290-f51b-4bc0-839e-c204dd2e9f68",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "81d6b32d-a034-4f6a-b46c-bd8e866936c2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5fd62baf-f18c-4c5b-ac32-a6677097b453",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not null",
                            "    req.options = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "76717ce3-5242-4298-a5c2-80494a48466d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "87f4010a-b69e-4241-b5a9-beab7345a1ae",
                    "name": "credentials_issue:options:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8f318e8b-4bde-4cb0-937c-0325f61bd462",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "837ca4e2-88f3-4433-ad9e-3671a0152721"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8dc1c863-9d55-4700-abb8-945e14bf33b2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not string",
                            "    req.options = \"\";",
                            "}));"
                          ],
                          "_lastExecutionId": "2fd5d18d-2591-483d-880e-0be57dab8ac5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7ebd6e0c-1255-4a77-ab40-3ced75562923",
                    "name": "credentials_issue:options.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8824c0b6-52d0-4a16-a1d5-85bf1a22d70c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3e274a9a-588f-4d17-9719-ebb89ed83b7c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "43c56d78-8e5e-422c-8f8d-9f4e56ed665d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type is a required property",
                            "    delete req.options.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "0e28cf82-f6fb-428c-a14b-a8b9d37de7ae"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9dab5b3e-4ca1-497d-98ef-538f393703e9",
                    "name": "credentials_issue:options.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "581cb802-ac0a-42c6-a968-b883222a2a2f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0ab102bf-f2ed-4a24-9802-4452b9e2b286"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "45ddfbd3-f69f-49bd-a28e-9e71629c27c4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not array",
                            "    req.options.type = [\"Ed25519Signature2018\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "e69f914c-44ec-49fa-a22c-48c6432f3edd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "59efe7a8-b1a5-43dd-a38e-04428b94a81a",
                    "name": "credentials_issue:options.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dfb8f33a-36c1-41aa-b209-81c27d35959a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "13bc55f3-3d58-4824-9248-b76ef8809a7f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "06ccb196-b524-4927-9eb5-c9bb46c264f5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not boolean",
                            "    req.options.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "36a32564-ea37-4367-8bd4-e6b11dc29b66"
                        }
                      }
                    ]
                  },
                  {
                    "id": "60337efa-d4f9-4878-801e-2e2f7d76c1f7",
                    "name": "credentials_issue:options.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e397f9fd-87be-4f56-9345-6d58b05ddabf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4d32a047-d3d7-4226-9b9f-920583bf50bc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ce8dafa4-7cbf-4e2b-ac3b-35e494afd667",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not integer",
                            "    req.options.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "063fcf32-e8f5-4b56-a6ab-0a7261368e05"
                        }
                      }
                    ]
                  },
                  {
                    "id": "57fb8f47-d16a-43bc-9d48-6e40c940b904",
                    "name": "credentials_issue:options.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "07bfe563-22de-4b06-b0f8-4b88872f03fd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6ac9ca1f-7fb7-4f69-9cc5-c03b45c0cfe1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c008963a-6375-41ee-8370-eb4750b90dea",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not null",
                            "    req.options.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "eab94a0e-4e14-4646-97c8-3bbc69d8d00c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0ba53a5d-093b-436d-94df-a71cb564f74c",
                    "name": "credentials_issue:options.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a4966b22-61b6-46c3-9a4c-e0e88f18d9a4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "039a70ce-4467-4fea-877f-2774575edf7c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c4b2d73a-0f92-4ac0-9856-129b2ed66ee2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not object",
                            "    req.options.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "0dc82d50-fdc6-49e6-8d32-3e01a293ed90"
                        }
                      }
                    ]
                  },
                  {
                    "id": "efd1cbae-43d0-4f18-8318-b530151505e9",
                    "name": "credentials_issue:options.type:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0d5140ad-323b-4e45-b200-765e1e7113e5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6e931b7b-af46-4d0e-9528-169edafb645f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d7826311-43cb-4c92-8012-eefbd13bc543",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be one of the valid values",
                            "    req.options.type = \"invalid value\";",
                            "}));"
                          ],
                          "_lastExecutionId": "ba581143-0108-44f8-8145-8e475dcc2459"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1d352e0e-3007-44eb-a0a5-8c807f092714",
                    "name": "credentials_issue:options.created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "05fd4326-c92f-4946-a355-b13a0d5f8bd9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "927b37dc-83e4-4045-bff6-a9e642f31a0d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "663b103a-c415-49ae-8917-ba0bbcf73a84",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not array",
                            "    req.options.created = [pm.variables.get(\"created\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "63fc9b6c-bc0e-434b-b204-b475dfba5dff"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8d74b967-532f-46e3-8b1e-1ee2e2429373",
                    "name": "credentials_issue:options.created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f0be3e7a-1f25-4ddf-93ec-d6ee654a16f2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f4d0a1de-17e2-4797-b140-8918a87e5312"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c80de079-118e-4a8a-a77a-0e1a3eb660a4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not boolean",
                            "    req.options.created = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "639c646d-b44d-4e71-98cb-ebad194d964e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3e42e7a2-83ab-4f94-b226-34ff8eb952d8",
                    "name": "credentials_issue:options.created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cc40551b-47e0-4d1c-b2cf-1c131b164242",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3cf68984-0425-4faa-bce0-0d70604822b4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2093918e-3ad5-47dc-a07e-3c11b9563bbf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not integer",
                            "    req.options.created = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "378581c8-9c5d-428f-b11e-8c7486e0546e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9948e0cd-5953-4aee-871a-54540c562c8b",
                    "name": "credentials_issue:options.created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "49c37a19-0730-4fa2-adff-0255ab7bf2e0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9e9ade8a-b90e-492c-955a-72826c7d72b7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "69f3580a-4e81-4e29-8626-cca71e5c5003",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not null",
                            "    req.options.created = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "fccfd87a-522f-4cae-9948-c16c945ecb34"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1feda663-e420-4248-89be-fbf6e83048ef",
                    "name": "credentials_issue:options.created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "76af12ff-f508-4715-b691-91568fba7d6b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d76087d9-78c1-4e39-afc0-fee6b660cccd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c52ec42d-1b19-4a29-a35f-3834c984fd8d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not object",
                            "    req.options.created = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "a35cebfe-06cc-4ed8-9d0e-5b3e41e54a0e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d8ccd9d4-4805-49a1-9c9f-58390023f5c6",
                    "name": "credentials_issue:options.created:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ea464e99-86f6-44cf-a21c-b6bd420d1749",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6303dda8-fb53-4ff9-ba73-70c1ed9d8117"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f2e022d6-8c7b-4d33-8d66-b4790217982a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be a valid XML date time string",
                            "    req.options.created = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "cf97fb4e-7ae9-4a34-9c5a-2aef23c13033"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eef06688-3d6d-42e1-9c79-f7d9e6f5030e",
                    "name": "credentials_issue:options.credentialStatus:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d2e5fb18-1a20-490e-b8f9-f154ca592b34",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dd669058-06d4-4d37-9810-66309d39f9d8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "00461e3a-95b2-4c8d-a1ce-daf07b741991",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not array",
                            "    req.options.credentialStatus = [\"StatusList2021Entry\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "bbb8dce4-a5c2-42d2-842d-2de1f345fe26"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d076cb40-7015-4852-8933-6cb66cbe5c4e",
                    "name": "credentials_issue:options.credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8bb8d16c-1a71-40b0-936e-0f78a9124026",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b2c2baf2-aed7-462f-a430-95ca12dee6a9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ca3588f4-f31c-4b5a-961f-54e068629de3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not boolean",
                            "    req.options.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "b9de3358-79e0-4a13-a599-b65637bd5cef"
                        }
                      }
                    ]
                  },
                  {
                    "id": "826ee054-d444-4fe8-875f-100d4d04a87a",
                    "name": "credentials_issue:options.credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1b92bd29-9f7a-484b-96f6-98d49474b831",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d0cceb7d-7a6d-4805-ad7b-41ffdc8b4839"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8c83a3df-82c0-4a88-8478-c01b475e9695",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not integer",
                            "    req.options.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "c9b5b6f7-f921-4e2d-b910-e59cb3c85d7d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "add1b29d-e777-4840-a40c-edc0cb5e746e",
                    "name": "credentials_issue:options.credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8a0a951b-5421-4bf3-ad7f-43ab56881a27",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6a43794e-a064-4d33-af6f-a7e3c0463a4d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "682de6a5-44de-464e-8b19-42c01d718014",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not null",
                            "    req.options.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "dbdc21bd-ec25-43f5-90c4-1cd0f7176207"
                        }
                      }
                    ]
                  },
                  {
                    "id": "54272180-b23a-46a1-8f17-0fcd2e5ab95b",
                    "name": "credentials_issue:options.credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "513d96e0-2e98-4413-9470-bc296fec515c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "17492638-c84b-4bfd-a6a9-bb4e1d92eccd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e31d349c-6a73-43e7-9e45-2172b04a12ee",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not string",
                            "    req.options.credentialStatus = \"StatusList2021Entry\";",
                            "}));"
                          ],
                          "_lastExecutionId": "216d9638-80e2-43a7-909a-f457b8307b49"
                        }
                      }
                    ]
                  },
                  {
                    "id": "723c11d7-1c89-4740-9905-434a2d3af1d1",
                    "name": "credentials_issue:options.credentialStatus.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2ea1f805-8341-497d-903a-e3cac2cb022a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "68c06ecf-ae15-4cf8-a8f1-7b2e22b670e2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "26c6d962-acad-4d39-a238-4ccc6ada239b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must contain \"type\" when present    ",
                            "    req.options.credentialStatus = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "3a6f1e8d-0f7d-4eb1-90e0-75918da1aae4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7478c524-5c11-4bee-ac2c-513909c02d3f",
                    "name": "credentials_issue:options.credentialStatus.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1a611ee9-6872-4296-b9ae-3ab674c7dd13",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "67fb22a1-9057-4fd4-82db-1ff09686bf62"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e03c5e03-d92f-477e-ab2b-17baf373bb8d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not array",
                            "    req.options.credentialStatus = {\"type\": [\"StatusList2021Entry\"]};",
                            "}));"
                          ],
                          "_lastExecutionId": "22444881-c400-47dd-a358-4dbdc49e8561"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e36dcbf8-408d-4822-b6fe-841d7f36b5ee",
                    "name": "credentials_issue:options.credentialStatus.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "59920f40-808f-4191-8bbe-c1feaf9eaf73",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9adae79f-d6e6-498b-a4cf-9e4387f35a62"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3dc249a8-727f-4124-b4be-7506b48775d5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not boolean",
                            "    req.options.credentialStatus = {\"type\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "12adc99f-bf1b-4478-98f3-995709ea522e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2eac8414-11bf-4aca-afbb-f9a5416658fb",
                    "name": "credentials_issue:options.credentialStatus.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "54632062-ac07-41ac-b02a-d8e87501edea",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e10f248e-a0c5-4210-b9dd-f8893a86a6cd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b97b6145-578f-422a-b953-069b526862ec",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not integer",
                            "    req.options.credentialStatus = {\"type\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "31dfa65b-20dd-43a2-9511-9b43e5151caa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9fa26bff-76c3-4f57-9fb9-b9b6a0342bc0",
                    "name": "credentials_issue:options.credentialStatus.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "398852b8-200a-45e8-a003-358202e02b2b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4de2cb0b-fb8b-4331-8b9e-511e4909c00d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7c2d3da3-f7d0-4ae2-b0c9-2c2520a6f5b7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not null",
                            "    req.options.credentialStatus = {\"type\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "87344ef8-871c-4274-b40a-f150656ac8a5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3d58bfc6-c1c8-40d9-8857-f27712a854e7",
                    "name": "credentials_issue:options.credentialStatus.type:null Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7465d8e9-6aa7-4bb7-ab0d-21f7557bcb6b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d9dc689b-e302-4dbb-babf-8528f323f3fb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "97d4e74b-6297-4637-9a74-c19d4b0984ec",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not object",
                            "    req.options.credentialStatus = {\"type\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "bf468272-e82a-4ba8-9ba0-24ad031b4af4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4c3cb0f9-f48c-43d3-8a8b-7d7e85e9a8c8",
                    "name": "credentials_issue:options.credentialStatus.type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e4a35408-c49c-4643-a622-6e490ef6b6c5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "a4e62f66-575e-4c79-b0f5-cf4a7ed40911"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "74a7086e-5ee1-4a87-b3c0-a35d1b89e4ac",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be a valid value",
                            "    req.options.credentialStatus = {\"type\": \"invalid value\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "adadbcee-d391-400b-89e7-c5eaacb37da2"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "95c64d12-6978-45be-8db5-dde4a1afd31a",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "6d9c90e3-03db-4bf7-b7f7-81b1d9c82487",
                    "name": "credentials_issue:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4e085270-0f24-403f-9901-0cc8ed5efc12",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "65ee3914-9583-44a9-a35e-83cee2e6dc6c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dbb96ff5-5f77-42e6-965e-8fcabd5e59d4",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "a4748913-d3bc-4505-8724-62a265c14522"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "124fe59f-7781-4171-bb22-a1588de40e09",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "ac8dc935-4da3-4838-9146-b20e34abed3f"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "e28a5012-6193-4e46-b4f1-de1b8666ef1a",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "556c945b-2574-4fd0-8c8e-c3d8d06126fd"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "c2040936-0561-467c-a2bb-d99504770ba0",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "ec8ac7a0-a0f8-44be-9eb4-85a75dd31759"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "4e12331b-feda-4e29-a2e2-11ebe002e049",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "2e684486-aaf3-41ec-ac0e-db34c4d7c70a"
                }
              }
            ]
          },
          {
            "id": "52404f56-f075-43d4-a2d1-c5131118a3af",
            "name": "Positive Testing",
            "item": [
              {
                "id": "87201e80-7d2f-4ac1-b85c-4aea6de4fa7f",
                "name": "Duplicate Keys",
                "item": [
                  {
                    "id": "9a4915a2-74b5-4c1f-9692-4dfb325ba0de",
                    "name": "credentials_issue.credential.issuer:dup",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"credential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"issuer\": \"{{issuer}}-ignored\",\n        \"issuer\": \"{{issuer}}\",\n        \"issuanceDate\": \"{{issuanceDate}}\",\n        \"credentialSubject\": {\"foo\": \"bar\"}\n    },\n    \"options\": {\n        \"type\": \"Ed25519Signature2018\"\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "text"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6792bca4-0459-44eb-b4a2-55d316f8f151",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 201\", function () {",
                            " pm.response.to.have.status(201);",
                            "});",
                            "",
                            "pm.test(\"response issuer matches request credential.issuer\", function() {",
                            " const { issuer } = pm.response.json().verifiableCredential;",
                            " pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "59edfb4c-909b-4f43-8199-c7d3fb110730"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b924cf5a-dfce-41dd-97ff-d6bab68dcc9d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f16b249d-00a9-43ec-b229-d2893824ebfe"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "31634ceb-e9c9-4543-a488-3c1c29989bf6",
                "name": "credentials_issue",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "3cc168bf-d049-4578-92d4-a7194e534d62",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        "});",
                        "",
                        "pm.test(\"response issuanceDate matches request credential.issuanceDate\", function() {",
                        " const { issuanceDate } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuanceDate).to.equal(pm.variables.get(\"issuanceDate\"))",
                        "});",
                        "",
                        "pm.test(\"response proof.created is close to 'now'\", function() {",
                        " const { proof } = pm.response.json().verifiableCredential;",
                        " const delta = Math.abs(Date.parse(proof.created) - Date.now());",
                        " const tenSecondsInMs = 10000;",
                        " pm.expect(delta).to.be.lessThan(tenSecondsInMs);",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "afd967e8-e44e-4095-837d-9b86f2c72df6"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "ac7d8fd4-7395-4375-bc40-dad58b937b92",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // noop",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "f44c16ed-0996-4225-8409-07b9575f8412"
                    }
                  }
                ]
              },
              {
                "id": "bfe3d509-1de6-4a43-8a15-be97cfecc1bf",
                "name": "credentials_issue:credential.opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "c9623e94-4950-48f6-b4b2-0e6d137bb82d",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verifiableCredential.id matches request credential.id\", function() {",
                        " const { id } = pm.response.json().verifiableCredential.id;",
                        " pm.expect(id).to.equal(pm.variables.get(\"id\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "bb1c9842-c2e4-44b3-97fc-4ef67942abdc"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "7c16f003-284b-4614-ba43-aeeabd910f41",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.credential.id = pm.variables.get(\"credentialId\");",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "4e2ad7ce-bfae-41ae-a9ad-d944eb220938"
                    }
                  }
                ]
              },
              {
                "id": "128dc293-9bd3-4245-a9b0-257f3c6acac5",
                "name": "credentials_issue:credential:alt.issuer.object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "48b2ad8e-b90c-452b-bf9f-9f4c59a2c010",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer.id\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " // Implementations may reduce object with just \"id\" property to a bare string",
                        " if (typeof issuer === 'string') {",
                        "  pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        " } else {",
                        "  pm.expect(issuer.id).to.equal(pm.variables.get(\"issuer\"))",
                        " }",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "2174da2f-7e02-42d6-a41a-b38dd8517681"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "d4e07d00-81d9-4873-b4f3-1e295fb47e5c",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.issuer can be an object with required 'id' element",
                        "    req.credential.issuer = {\"id\": pm.variables.get(\"issuer\") };",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "414b80ff-0509-40bf-ad77-9696c23ef628"
                    }
                  }
                ]
              },
              {
                "id": "c2554006-6995-4c0f-8b72-42e21290db75",
                "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "9cf9f754-dbfa-4797-838c-85ba64d4b6ce",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject.id matches request credential.credentialSubject.id\", function() {",
                        " const { credentialSubject } = pm.response.json().verifiableCredential;",
                        " pm.expect(credentialSubject.id).to.equal(pm.variables.get(\"credentialSubject\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "37d24351-acc3-4830-af88-8f410e2d63ab"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "9c8b64c9-e1b6-4c4c-87aa-4e568250f907",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.credentialSubject can be an object with optional 'id' element",
                        "    req.credential.credentialSubject = {\"id\": pm.variables.get(\"credentialSubject\") };",
                        "}));"
                      ],
                      "_lastExecutionId": "a0fd5480-c6f5-4d03-b707-af052b0d5c8a"
                    }
                  }
                ]
              },
              {
                "id": "2831e75d-20e4-4b3e-8bce-48b962a802d5",
                "name": "credentials_issue:options:opt.created",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "78935dd9-2cee-4972-b8fb-dbb0cd298aad",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response proof.created matches request options.created\", function() {",
                        " const { created } = pm.response.json().verifiableCredential.proof;",
                        " pm.expect(created).to.equal(pm.variables.get(\"created\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "c79f110c-572d-4322-9681-b42e187168ed"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "a44babf3-a460-44b3-836e-ca861491fcfd",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.options.created = pm.variables.get(\"created\");",
                        "}));"
                      ],
                      "_lastExecutionId": "077bda49-dcd5-4ca6-b4d7-9074d1333935"
                    }
                  }
                ]
              },
              {
                "id": "c0bbe987-efde-4b14-8596-fc1f60956657",
                "name": "credentials_issue:options:opt.credentialStatus",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "29417b9d-6b8c-4835-a11e-3c3409c640f6",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "f59c61b1-fca3-4025-bf4e-ccc7edac434a"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "e30326c6-b772-4f76-a8c7-5b8c7911933b",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // options.credentialStatus can be an optional object",
                        "    req.options.credentialStatus = {\"type\": \"StatusList2021Entry\"};",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "f1c5e547-75a7-4b29-907f-5adf00659fb4"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "a115c116-1b52-4c06-8259-2a0fd0909798",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "80128997-0a00-457b-9769-10dfc6514d6b"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "bf644410-6097-456f-b58a-7473ed871127",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "447d03dc-3072-420e-aefc-0d29a2db64e5"
                }
              }
            ]
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "70bc848c-ab02-4c4f-adaf-d54a2ffbb4bb",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "pm.variables.set(\"credentialSubject\", \"did:example:123\")",
                "pm.variables.set(\"issuanceDate\", \"2006-01-02T15:04:05Z\");",
                "pm.variables.set(\"issuer\", pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "pm.variables.set(\"created\", \"2006-01-02T15:04:05Z\");",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credential\": {",
                "        \"@context\": [",
                "            \"https://www.w3.org/2018/credentials/v1\",",
                "            \"https://w3id.org/traceability/v1\"",
                "        ],",
                "        \"type\": [",
                "            \"VerifiableCredential\"",
                "        ],",
                "        \"issuer\": pm.variables.get(\"issuer\"),",
                "        \"issuanceDate\": pm.variables.get(\"issuanceDate\"),",
                "        \"credentialSubject\": {\"foo\": \"bar\"}",
                "    },",
                "    \"options\": {",
                "        \"type\": \"Ed25519Signature2018\"",
                "    }",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};",
                ""
              ],
              "_lastExecutionId": "3d2d128d-3ca2-4f38-a610-cddf2344aa79"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "f43a7054-5b69-48a6-a6c3-e8481adfa5db",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "fab71e40-1d49-4858-a5f4-292495814511"
            }
          }
        ]
      },
      {
        "id": "a09b2f04-3e16-4dcb-ad58-19bf566bee14",
        "name": "Credentials - Update Status",
        "item": [
          {
            "id": "0ea5afd9-a135-4aa1-a9a0-ec32752f7cb8",
            "name": "Negative Testing",
            "item": [
              {
                "id": "0173d59d-c220-4b9d-b290-83e8eea2a1f1",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "e8b261c8-f37f-42bc-a7c5-e57013c59f24",
                    "name": "credentials_status:credentialId:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fe43aa64-e35a-4205-9cf3-8621bf442f87",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "90ea4338-c2bc-49db-a4e4-748547cf5c0d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f0883436-0205-45e3-9f12-99c010b2c937",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId is a required property",
                            "    delete req.credentialId;",
                            "}));"
                          ],
                          "_lastExecutionId": "bb5618f2-61ab-4d0d-88f1-cc240e888ce4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "35d403e2-1b8e-4114-bebb-62fdcfdf2210",
                    "name": "credentials_status:credentialId:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0f48da0d-1670-4d07-859b-ae47fe2058b9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d0be1876-b2ac-481f-bba1-09bf1bab73be"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0e0614cd-40f0-4242-a22f-1fce0de9579b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not array",
                            "    req.credentialId = [pm.variables.get(\"credentialId\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "e28adeae-c176-4e16-872b-0d9fabfc36cc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5824a527-8c2d-487c-ae43-01babe023d7f",
                    "name": "credentials_status:credentialId:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3d7142a2-5497-4a2f-964e-df9dfba07d5e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ad37c0d7-1039-438d-8c1c-25d397b3878e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0bf275aa-4076-4b18-a717-056c366e2b14",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not boolean",
                            "    req.credentialId = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "628f7596-31d4-4a3e-96a8-b81ee4f37cad"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6722ecfa-fe1d-4fc7-a9b0-788a83f96472",
                    "name": "credentials_status:credentialId:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5514c769-d976-4f41-b65a-19304fd76a8e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d5bd1084-32f0-4f0b-861b-2341eaceac1e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "33b651ac-0389-494b-a2b6-a80b013450b9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not integer",
                            "    req.credentialId = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "18124c38-731b-4211-b7cc-4dc2a62e483b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fe5a8c6d-53e1-49ff-ac72-1adc6f8d0a05",
                    "name": "credentials_status:credentialId:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b2b3fe12-d658-4828-9b5f-503d327bee16",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "548c9ae3-2d3f-4222-aa37-ca5edda90d21"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "56e15b9e-80ed-429b-bb67-6c4b6927c860",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not null",
                            "    req.credentialId = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "db42b906-a217-4f5e-9e87-90be71eaf117"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a56633d3-dab9-49ea-bcb7-b720363eb85e",
                    "name": "credentials_status:credentialId:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3aa096d8-d4e9-453f-a6eb-76e0a123c3e7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "14994701-a736-4ab6-b840-dee0a640e925"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "92baac9f-77d9-4c19-a205-377a125bde2c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not object",
                            "    req.credentialId = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "dac5ec4f-f062-4838-a7ea-dd82bb090284"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bd096c1e-e5f0-4a09-99b5-73b6e0d730bc",
                    "name": "credentials_status:credentialStatus:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7981d67e-0b30-473f-aeff-e501daf8a2a2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b19df462-06ee-4466-9ff8-966e463a4f76"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a888af97-b192-41f4-8692-55c869ebe1ff",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus is a required property",
                            "    delete req.credentialStatus;",
                            "}));"
                          ],
                          "_lastExecutionId": "9273fd35-cf0e-4270-afa8-f8abe59dde7c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6f574d29-aed8-49a7-b2b5-05ed4d23e98d",
                    "name": "credentials_status:credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e1c6458b-f72b-46b8-b4c3-87a0ff05f574",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b6604981-c3d3-453a-9a6a-02442f4d47c7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8ebd618a-e660-4040-aa88-2b8cc97bca1a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not boolean",
                            "    req.credentialstatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "f5bcb387-f764-48ec-aedd-5f8df2c3a777"
                        }
                      }
                    ]
                  },
                  {
                    "id": "279d73b2-80c6-4816-b40c-677f36c907ed",
                    "name": "credentials_status:credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2215d49c-b6dc-44f3-8d01-66eb2de7067d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4c1ac2e7-cc66-4a9d-baed-89e7983733b5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4f735e30-e99f-40ab-875e-c39828c694c6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not integer",
                            "    req.credentialstatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "6ea1b196-ce98-408f-bc22-313284bf9ec4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "05f6640a-8b73-4896-8060-249f88ae748e",
                    "name": "credentials_status:credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d764d6bb-be5f-4684-8d1a-9a62a2467060",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b9001b3c-7b5d-472c-9700-88249e9bb0c2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ab1e104f-c7a4-4849-9073-098eef437d49",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not null",
                            "    req.credentialstatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "44d52a18-e004-4fc8-bd50-bc90f36f9ef9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2510e8e9-f9f6-46d8-affb-5fe7ce34b61e",
                    "name": "credentials_status:credentialStatus:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bdc82f9d-539c-4176-9d1a-b1f323447a89",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "556b2581-3098-4413-b375-384aa0e4df44"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "10a9f4d2-8ad7-4d5c-be8e-761d088509c3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not object",
                            "    req.credentialstatus = {",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"0\"",
                            "    };",
                            "}));"
                          ],
                          "_lastExecutionId": "2fb7b395-c2e1-4fa5-9922-ea93cf8fc177"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b5ea6216-014d-4e55-b7d7-c3fa6561fc8d",
                    "name": "credentials_status:credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e4732a41-1ea1-4bb5-93a1-276e00e86b8e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0cc6442c-fdbe-4d7c-a868-c07c446bcbf3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e5bb69f7-7bb2-44db-ba53-8471e498723b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not string",
                            "    req.credentialstatus = \"RevocationList2020Status\";",
                            "}));"
                          ],
                          "_lastExecutionId": "13447fe2-76d8-4853-8e1d-eab059eb328d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a50b28b8-64ac-4119-b78f-ac36c7795099",
                    "name": "credentials_status:credentialStatus:too_long",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "743c6bad-1912-4f61-8f35-7ae5366ef2c6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "aa0a6794-fcbe-4266-84ce-d559db18e495"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d20ef828-8622-4d4f-9b65-8bc47b0064f1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus can only have zero or one elements.",
                            "    req.credentialstatus = [",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"0\",",
                            "        },",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"1\",",
                            "        }",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "c9bf2151-f341-4c61-9baa-883bd0b39e96"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fa6a1636-13b2-4f49-b23b-190771c9f82f",
                    "name": "credentials_status:credentialStatus:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cb7bc866-dd02-4318-821d-0d5b39a43ff0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b6ee76ed-a929-44f2-836a-88c51ac88276"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e40d6e1c-9be0-4341-80e3-ece2234d6d40",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not array",
                            "    req.credentialstatus = [[]];",
                            "}));"
                          ],
                          "_lastExecutionId": "45a60e3b-1727-40fe-9b97-5455f91490d3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d7366598-ff6c-4cef-91ce-da1f96f15320",
                    "name": "credentials_status:credentialStatus:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8708864a-2c2f-48fd-ab57-2029c8a0a052",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2606031e-5619-41d8-8eb2-6c5c6513c5f3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4b76a39f-e132-4368-865f-bb8af9964a4e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not boolean",
                            "    req.credentialstatus = [false];",
                            "}));"
                          ],
                          "_lastExecutionId": "0675a58d-a1ee-4317-8e06-2dead78d7db9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "45e3cf67-bf3f-400c-98b3-b460a559c089",
                    "name": "credentials_status:credentialStatus:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d389d721-741b-48ca-a6fa-151a26aa8ba8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "950241c2-5d11-4bcc-acd0-8da702ac270d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7b5b9e39-687d-4b83-870f-ed34e5b17408",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not integer",
                            "    req.credentialstatus = [42];",
                            "}));"
                          ],
                          "_lastExecutionId": "c75694fc-3aaf-40cc-ae03-47ba1838c5a1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b33d9290-dd2c-4754-ac6a-c69a370a38cb",
                    "name": "credentials_status:credentialStatus:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f04dcaec-7276-43af-8def-3d194050c1b4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "03ba7aa4-e214-4e03-b800-3dd73caf57aa"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8c9794ff-77b5-46ab-ada2-683a7098b8cb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not null",
                            "    req.credentialstatus = [null];",
                            "}));"
                          ],
                          "_lastExecutionId": "4dc8f68a-f37e-4b39-9afd-803612b491df"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8d2b1274-05d3-40c0-adae-1a663b262870",
                    "name": "credentials_status:credentialStatus:item:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "00741251-5a6e-4af0-bac5-1ad32aa12a61",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "67a2d40b-d0eb-4dc8-b9c6-a3469f5eaf78"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f6f52ba3-9933-46d8-acb8-e61105c2a0b8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not string",
                            "    req.credentialstatus = [\"RevocationList2020Status\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "51ceaed3-a1a8-4e28-afda-478dcf09fa49"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e55489c5-b37c-4819-9bca-4e5ff71dc0f1",
                    "name": "credentials_status:credentialStatus:item:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f34532c0-043c-4e56-9245-2bb348999a0b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "952c0773-9b4d-4dc7-9f38-6dc1bdb9e2a4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "06f67528-a7d8-4c7d-b36c-6aa8b33a260e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type is a required property",
                            "    req.credentialstatus = [{",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "31fd44c4-f8c7-4e5a-8311-73327927fa6e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bbf9872e-8af5-4d8b-89b8-ac9a055eb86a",
                    "name": "credentials_status:credentialStatus:item:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "278a7fdc-9ff4-4c45-bbaa-f8bc1ec27d6e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f133b9c0-f5f2-4bd0-9493-7626d14e506f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "634b4af9-c15d-47e0-b795-86436a5cdb21",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": [\"RevocationList2020Status\"],",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "ac8c28d5-4fcc-47c8-a073-bc88a17b1531"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ea870980-0c3d-4ca8-b77d-b03396e5188a",
                    "name": "credentials_status:credentialStatus:item:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "477310d5-178c-484d-ad44-623ec09af29d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "08cf5b10-57f6-4ffb-9293-21ff29968bee"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f6dcb904-191c-4444-8c29-7fc818166901",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": false,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "8ade385f-5fbf-4842-9f86-164002bb1524"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a5a5876c-c0a4-4909-9f8a-fca68a370b7c",
                    "name": "credentials_status:credentialStatus:item:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5d397920-ad1d-4b5f-b330-add3e8c107e2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "21922aa6-685a-4770-bf2b-2df3dc331efd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7c2204bf-a8e3-49c8-8732-9b29a68de7fc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": 42,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "07138d6c-7c34-4274-80a1-33dbb10f3fd8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a8116ce6-5d6f-449f-943e-8e003a04da6a",
                    "name": "credentials_status:credentialStatus:item:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9c6525c5-0654-405b-bfd9-1c491b6d60d8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ba379256-8904-47bf-8a33-e577a88a8d94"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5aaacd6f-a59b-4d52-80c2-93864c09874d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": null,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "713ce21f-0b13-4f69-bf8f-e94701bc58f8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bc7556f4-4453-440a-b79d-c231dccb264c",
                    "name": "credentials_status:credentialStatus:item:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "51040bdc-c573-4e42-aeea-f32e013a18c6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9d481270-b5d3-4265-9cee-28c4c4bfa756"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ca063209-0aeb-4779-b557-be0074fa5445",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": {},",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "294c80b3-f95e-4445-83c1-8b7fb0e29146"
                        }
                      }
                    ]
                  },
                  {
                    "id": "47d828a3-137e-4b15-9fe9-16f3c10a8725",
                    "name": "credentials_status:credentialStatus:item:type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b97d94f1-d52f-4efc-a878-7928f6eb4221",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4d5bdfc2-356c-4404-b14a-4df038cddefe"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0e95391b-895f-433a-b35b-4621471280eb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"invalid value\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "17ecfcb0-348b-4cdf-b832-708072ebc17a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "64e7411d-4930-4f44-9cac-729f444fa2da",
                    "name": "credentials_status:credentialStatus:item:status:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "80ddbde2-62d2-4c84-aafd-d04432618097",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b222ff3c-f553-49a9-a910-bb067335f205"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "119bcb7f-42a6-4d6e-b8d0-e28c01bd9774",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "2dfa5919-2b2b-4261-a8b3-137cc9295524"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e4fb31ae-cda2-43e8-9797-c3fe2b60840a",
                    "name": "credentials_status:credentialStatus:item:status:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "acc32add-9c92-40f6-82bc-4e4fd3feaff6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dca67b50-59e6-46a9-8180-0623cb0de237"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "039956f1-bdc4-4291-aa4d-dd685cd70a4f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": [\"0\"],",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "2b0421de-0059-490f-bb1a-2fe23eecd954"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9ebade4a-e228-4591-9ff9-826380eb8a46",
                    "name": "credentials_status:credentialStatus:item:status:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bc6754bf-361c-4a86-8c6c-f7adc2d775c7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "791e92bb-7ef4-4895-8f68-cf0e6e97cce8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1253f763-5f2b-4201-9252-8865fcde85cd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": false,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "6154ed25-a275-4c66-acae-3de56f7e0ca5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a3803610-cb3a-42b7-bed6-da8ab24d2c86",
                    "name": "credentials_status:credentialStatus:item:status:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "01c9ae9f-d5de-499e-9ca4-55229f1aad5d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "497a9826-67e1-4ddc-819f-a7e550dad883"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a98411ef-0b4a-4f85-a016-c98efed4b7cb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": 1,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "f61147b8-43ae-408e-b800-563a8c241678"
                        }
                      }
                    ]
                  },
                  {
                    "id": "028c4e6b-0256-4495-b454-2531d3357200",
                    "name": "credentials_status:credentialStatus:item:status:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c62a63ce-e01b-481b-9fea-75f512d5a72e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "037dc37f-b056-4e5c-b652-2a8fde7079a6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d19f7393-75b3-4449-9480-a3ecf58734f1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": null,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "fad8e539-691c-4d66-b188-1b05495c8c36"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2507249d-08d9-4ded-912c-28fd7338b34e",
                    "name": "credentials_status:credentialStatus:item:status:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ba366599-2100-48db-94c3-deb1909bc6f3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a19fe027-3c65-4c00-bc75-14e8f1076b50"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "99532579-cb02-4a1d-a043-a06a18645e34",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": {},",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "2aa2c491-efe5-491f-97bc-8c2f650d0ef8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5c912ff1-a0ec-4945-a677-9f591b29169a",
                    "name": "credentials_status:credentialStatus:item:status:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "412f13a6-10fe-45af-a8fc-c982700cc21e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "704bc763-57f9-4abd-9f7e-9b4326e3d52f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dfc690fd-d24c-436d-a37d-8c85c5ca1b6a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"invalid value\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "00e5eefd-0221-4e29-958c-b8a369308b91"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "d7399565-7b89-45bb-9ed9-aa8f1cc9fed1",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "bb689f1d-c89b-48e8-b935-15f8c0310c63",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7243b3a9-43e8-4ca6-9b96-0e04ad1c2e78",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "5de8f539-8ed9-4509-851c-4ffddfaa43c6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f00e7f86-a39d-4c8a-a9bf-19c3ac57905e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "640e5e89-761b-414e-bbac-02f8088b86ad"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "9b09d189-4a18-417a-9f47-d7a47b5fab90",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "abb48b79-4a2d-4d6f-a436-9f5b67419be7"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "a4b157db-f127-4e69-b182-825195f13c3b",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "56af2462-85ec-4ec8-9696-27caf19352fe"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "226c8939-ddf1-479a-9bc3-55fa521c512d",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credentialId\": pm.variables.get(\"credentialId\"),",
                "    \"credentialStatus\": [],",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "604d588b-de6e-4342-a37e-351d5e7305d4"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "39688eea-f47d-4590-8a7a-7e84f904643c",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "27591df1-0174-423a-b660-df26423cb457"
            }
          }
        ]
      },
      {
        "id": "ef841f94-ef3f-4ad4-85d0-cde93bfd50ac",
        "name": "Credentials - Update Status (StatusList2021)",
        "item": [
          {
            "id": "11daa277-12ea-42be-9170-56df814415a5",
            "name": "Negative Testing",
            "item": [
              {
                "id": "88f915f2-2b43-4690-ba6d-17662c8e1027",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "a84dc4cc-bad7-4cdc-976f-4318fdcb77d2",
                    "name": "credentials_status:credentialId:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4a2c8f3d-5662-4cbd-8729-8cc8526b38d0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9ed317b8-6756-4991-ba8a-9cd41f29d340"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "57afa209-7bd5-4a7f-bd46-daf4044f651a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId is a required property",
                            "    delete req.credentialId;",
                            "}));"
                          ],
                          "_lastExecutionId": "1c326289-6a4b-45b1-988e-5923121e8bef"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7eb00aa2-e4f3-49bc-a678-715ac3adf89d",
                    "name": "credentials_status:credentialId:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0e520253-0457-4e58-84c8-5d6d1d620dfb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3b1a392f-1281-4f73-a20d-6f031d176855"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8a55aae6-930c-4a9f-aca5-bacf59faa9e7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not array",
                            "    req.credentialId = [pm.variables.get(\"credentialId\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "39576fbb-b1bf-4664-8f24-8a5517399e82"
                        }
                      }
                    ]
                  },
                  {
                    "id": "988ef8b4-baed-4915-a0b1-e3882a3b24f5",
                    "name": "credentials_status:credentialId:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2c4725cf-fb19-4a92-9ed9-7b81ec27b532",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "32042aef-e2a7-4ca0-bcad-c6f35456f240"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9f3fe6f3-9866-40a4-9d23-72e10806574c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not boolean",
                            "    req.credentialId = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "b3e40418-eb2d-46db-ae95-a610b0eb5393"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2fa137b0-1f5a-4455-9b5e-abd2f8ad5a54",
                    "name": "credentials_status:credentialId:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ed507171-a4cc-459f-8c0a-7d7a925e303c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "760e0e69-ab53-4911-8f68-751060a7c257"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "06c59675-6525-4cc9-94d6-9baa3dd1ed53",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not integer",
                            "    req.credentialId = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "1b91f611-7778-42b1-8bf6-14cf95f9aded"
                        }
                      }
                    ]
                  },
                  {
                    "id": "326b76ea-d6d2-4f26-a7cf-d5f3d85320b0",
                    "name": "credentials_status:credentialId:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5e777d7e-470a-4c21-a191-639a5a01e88a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "06a825a4-bcfa-49b7-af84-f119f56c671f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "46a87b45-9f73-4a62-b55a-2947b307aabe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not null",
                            "    req.credentialId = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "e639c820-cd57-400a-bc9b-f8b7041aa89b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "83a429da-9163-4b65-b804-584121246014",
                    "name": "credentials_status:credentialId:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "76a4f5eb-7cb7-439c-bab0-4244e2f68f46",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7a3764e1-30db-4921-a7cd-b3259dd76770"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "11e761c6-225f-4252-bc23-28774105f876",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not object",
                            "    req.credentialId = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "591ff9b6-f64a-42e8-8de0-512e2dc4e2ca"
                        }
                      }
                    ]
                  },
                  {
                    "id": "af5c7216-4854-46fd-b663-ffa092fb7292",
                    "name": "credentials_status:credentialStatus:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "07e4aff9-4d1c-4118-99cd-ffa00925b17b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "35c1029f-c3d3-490a-8a79-3164e82ed227"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ba6458d4-d9ca-4e61-b438-2121f187f1fd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus is a required property",
                            "    delete req.credentialStatus;",
                            "}));"
                          ],
                          "_lastExecutionId": "f5c9a72b-2ef7-4af4-80e8-e566bb08bdf1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "075504b6-d25a-4209-b52c-3a70e089aa4b",
                    "name": "credentials_status:credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b60b8b8a-d4c6-43e3-9dbb-e499216511e4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ca7e86f4-384b-4f9d-8168-5e49e19c07a7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "19fbb384-a676-465b-bc99-e05a1506e9c7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not boolean",
                            "    req.credentialstatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "403d3676-71ba-4ea3-bf4c-d140da7a7359"
                        }
                      }
                    ]
                  },
                  {
                    "id": "35885361-098a-4064-a273-44360369670c",
                    "name": "credentials_status:credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "82141ca3-0164-40d5-a840-b92fc3443ec8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "885b92e7-96a9-4e7e-a26e-0ef7e77eccb2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6f61fad4-5c03-4a67-82c7-a9d87f17f759",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not integer",
                            "    req.credentialstatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "33c6c71d-bc37-40e4-a6f2-6963a50c9c08"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9a35883e-d0b9-4adf-a02b-464a90dde819",
                    "name": "credentials_status:credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "182cc698-0abc-4d53-849d-d92755a2f10c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b0aae14f-d3f9-48ec-bcb5-c17a113a71ae"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e37e6656-66cc-441e-9f19-c327ee499cf6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not null",
                            "    req.credentialstatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "6ff3ef8f-6227-433c-b4c8-187fd68df1dc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c7600008-84de-4648-ae06-7a2402c40e64",
                    "name": "credentials_status:credentialStatus:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7ddbd55a-d0e1-4ed4-bc6f-8e2901ca381c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "92fbbef0-718c-4c85-b4d7-db7ab82de34c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bd058321-9488-49ce-9571-8d04cced3e0d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not object",
                            "    req.credentialstatus = {",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"statusPurpose\": \"revocation\",",
                            "        \"status\": \"0\"",
                            "    };",
                            "}));"
                          ],
                          "_lastExecutionId": "b3731ef4-695d-44ce-920f-a6812d853012"
                        }
                      }
                    ]
                  },
                  {
                    "id": "651a1355-b8f4-4e6e-a90c-9b16b97808f5",
                    "name": "credentials_status:credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5616b15a-b097-4b01-9ec7-ca609072b292",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cd4d020f-5b1f-406f-a6a6-4037839db359"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fb8bdc1a-9a96-47c5-81f3-a73492e08b59",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not string",
                            "    req.credentialstatus = \"StatusList2021Entry\";",
                            "}));"
                          ],
                          "_lastExecutionId": "6426c185-c2b1-4f83-842b-808f0a414347"
                        }
                      }
                    ]
                  },
                  {
                    "id": "92a9bb33-391b-40ab-9d5b-5111758cfd7a",
                    "name": "credentials_status:credentialStatus:too_long",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6e8a409c-f57c-4780-9c08-f5ae964838b3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "07506196-42f8-4e4e-9430-e5d7299b5490"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "115a384f-02f3-4223-9f32-258cf1ec2951",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus can only have zero or one elements.",
                            "    req.credentialstatus = [",
                            "        {",
                            "            \"type\": \"StatusList2021Entry\",",
                            "            \"statusPurpose\": \"revocation\",",
                            "            \"status\": \"0\",",
                            "        },",
                            "        {",
                            "            \"type\": \"StatusList2021Entry\",",
                            "            \"statusPurpose\": \"revocation\",",
                            "            \"status\": \"1\",",
                            "        }",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "7f0f7c68-d6fa-4dac-b7cb-1b583d47fbfb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2964c1aa-fd4b-4a6e-90d2-a18a4685e12f",
                    "name": "credentials_status:credentialStatus:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2705fe29-47f8-47d8-85f5-3cc9c76e2cba",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "30bcd989-638f-4cf2-b70b-91803ef2c1d5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "85f671c7-84c7-4d16-8b9d-ccd70e5ca690",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not array",
                            "    req.credentialstatus = [[]];",
                            "}));"
                          ],
                          "_lastExecutionId": "e772fd60-99cc-406a-8704-f2030e8301ec"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bca7f872-ec2e-4849-8385-92df9b6fda0d",
                    "name": "credentials_status:credentialStatus:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "251d02f8-7918-4760-9fe4-1b9301b4abb1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1eb8a7c9-57ba-487c-ab07-b0939537d5e1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "342e84a2-dfd5-4ce2-9da2-f49d5f815cb2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not boolean",
                            "    req.credentialstatus = [false];",
                            "}));"
                          ],
                          "_lastExecutionId": "98fdcd24-2cfa-4bcc-8d66-982d7db75fc1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "582850fc-c40f-496d-8896-0558cb7d135e",
                    "name": "credentials_status:credentialStatus:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0917b3fc-2c63-41fd-8cbb-a57ebfbb2998",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a1738033-d196-4fa8-941e-5cec2746da2c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "80736add-06ce-4ee1-afbb-f1e4d42ab0ff",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not integer",
                            "    req.credentialstatus = [42];",
                            "}));"
                          ],
                          "_lastExecutionId": "42366410-5952-49dd-9d08-9a84f9a5e7d8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "807244f2-7e4d-41ac-938f-5c4ef8d0a4e7",
                    "name": "credentials_status:credentialStatus:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d9458742-7fda-42ec-b165-19196d56d26a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4870d1b8-86be-4102-927e-6979d2e54924"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8b12cda8-b634-4a08-9625-11be6dfd4c2b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not null",
                            "    req.credentialstatus = [null];",
                            "}));"
                          ],
                          "_lastExecutionId": "b9a188f4-5766-45c1-b997-c13c893bf3df"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e2535632-bd2b-4ee6-80d1-cde75e4fbb2f",
                    "name": "credentials_status:credentialStatus:item:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "def2c341-ec64-4fd4-a5ef-238c64dd41d2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "35d62e9e-9a25-4072-9f82-35d38defbd7a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ec01cd5b-30c0-41de-8b3c-81c7966c0b3a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not string",
                            "    req.credentialstatus = [\"StatusList2021Entry\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "0fbb6f8d-6315-471e-b5de-52f8a397d475"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5974244e-73e2-45f9-8440-7ab94c07780e",
                    "name": "credentials_status:credentialStatus:item:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "74343ddd-141a-4f56-981f-9a38c76da787",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e7334478-d87d-42da-a9bf-08cb89b2ccde"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cfac9b55-0fd8-44b7-be07-eb6ec87300da",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type is a required property",
                            "    req.credentialstatus = [{",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "68f22d84-d662-4184-a1c4-4ab46e3aedc9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3ebbb0eb-2efa-432d-b380-a74446018a2b",
                    "name": "credentials_status:credentialStatus:item:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0b685b89-8ec4-4758-937b-e8e019392f5a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d8b22dce-be50-44a6-a88e-8073146e576f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fd240e37-c021-4297-b7ce-688e479abe1e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": [\"StatusList2021Entry\"],",
                            "        \"statusPurpose\": \"revocation\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "918c1b91-12a1-499d-b01b-b3f965289ba2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c9937633-e309-4723-8ccd-91dadf60b9d1",
                    "name": "credentials_status:credentialStatus:item:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3e02d811-af25-4da1-94c3-113eff057c85",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a78161f7-c16d-4de4-a4ac-949bbebdec2b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2dfa5b78-3661-41ef-84a6-8fcd9503b8e8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": false,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "8db9f47d-a0f7-45d6-a7c6-00493c3d0de2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c11d2e4e-10ff-4e49-a555-efeb773155f6",
                    "name": "credentials_status:credentialStatus:item:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "11797d7c-2afb-49f3-9ad3-0dab41b4bdfe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "06e718ac-337e-4a10-a333-2995d1907c40"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a620e9c8-6edf-40d7-9024-e3c01fb1d628",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": 42,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "7bb4c9ae-e872-4275-860f-ed76442c61c5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "34dfb97f-c23d-4856-990a-a76bc27a77fc",
                    "name": "credentials_status:credentialStatus:item:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d6df2a90-d1b2-496b-bfa0-0ec8fe60b8a0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0d987d8c-10d7-4c74-97d1-430d91447c46"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d7e71c98-f56d-438e-adc8-2b13ba40fd4f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": null,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "fd8b1e1d-a4f7-465d-bd89-a68fd4e2df14"
                        }
                      }
                    ]
                  },
                  {
                    "id": "98c67b3a-5123-4644-b1dc-c74a47397ab9",
                    "name": "credentials_status:credentialStatus:item:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f390d334-632b-4f82-ac2f-27b35751fb23",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "78a00505-4491-430a-adff-9274389cd98f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6dc68639-6c13-45b2-89a0-c12908e24299",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": {},",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "f4be026e-9eee-4627-839d-d7fa776c1341"
                        }
                      }
                    ]
                  },
                  {
                    "id": "74c1ddfa-18cc-4f1f-9e3e-2f4eac8e0489",
                    "name": "credentials_status:credentialStatus:item:type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e23a30f5-371f-47a3-abcf-286954d17654",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2f669fa5-3aac-4fd1-bf50-9c5bb4ced5f3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6f4aaf08-ef2b-4b37-a65d-bdee011604bb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"invalid value\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "50f0146d-b552-428c-8c32-683fe271a0c3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "43085061-09d3-43a3-b5bb-440e04f2c84e",
                    "name": "credentials_status:credentialStatus:item:status:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "74c97743-eb59-45b1-9802-3c98720ceba1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "755d1a0b-a5c9-4488-9da1-5bb3db333929"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4d5fc388-32d3-4c12-b8ef-78ff750c965a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "0465802d-c79c-4c47-b974-7d7bd6e19d48"
                        }
                      }
                    ]
                  },
                  {
                    "id": "93bf6dc3-0a00-42ba-9349-92d8af1d78a1",
                    "name": "credentials_status:credentialStatus:item:status:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "646eecee-ac0c-402f-8eb1-823081a0724f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "629d8e8d-7478-4afd-9839-c4a15f4d7fbc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bfff68ff-8e2c-4145-b6d2-ba1bc54827d8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": [\"0\"],",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "7b41ba8c-05da-4913-a1ab-c3a377d1eb22"
                        }
                      }
                    ]
                  },
                  {
                    "id": "121a293b-68c4-46b0-806b-edf9fe36d3e5",
                    "name": "credentials_status:credentialStatus:item:status:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4e314ff8-9546-4bc1-bbba-8548858e2d34",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "00985e00-5cdd-4102-a1f3-5ca406f3ce95"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fa4b62c4-175f-4a9f-955c-580a3b3bfc15",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": false,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "948bba9b-7ec6-435f-b18b-403dee56225b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a09ba1d4-65d8-4178-a4d0-1c08548f133a",
                    "name": "credentials_status:credentialStatus:item:status:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fcc77433-8516-4360-80bf-11d648ff995f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0baaaebd-f2c6-497f-a76f-94843952aa63"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f7b1ad4d-e4aa-4ce7-b1b4-74578a9998e1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": 1,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "b3ea280f-b14a-41fe-a1e1-93d859f58be1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "05d5cca2-78f9-414f-a05f-e23e5bbaea58",
                    "name": "credentials_status:credentialStatus:item:status:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f022c79e-acca-40bb-9368-8b85f3614e47",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "470da635-e661-4dde-bb54-a182fa9ab3df"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "302ca542-9f9a-41a6-8d36-94489de10a81",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": null,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "6df3238b-6163-4b9c-845c-fc3d9eacf15e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "036647f4-d581-41b0-aeab-5048823a4e67",
                    "name": "credentials_status:credentialStatus:item:status:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b785559d-56a9-40fc-bf93-35128dbf5e9b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b702cb56-5045-49ae-a89c-8ddf74eb3bc9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "36595f59-5ef7-46e2-a482-89d84e6b85f2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": {},",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "0952efb0-87e1-4ed5-b838-eef38d4f1c36"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f7c02b63-ded7-4949-a20f-6dd30a73d580",
                    "name": "credentials_status:credentialStatus:item:purpose:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0db57a40-81d7-4d91-9631-905f1d735f39",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "53457943-10ef-401a-9533-e2e162ad8f64"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e677fb09-5159-45b4-a667-6be0c7e0912c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "6250c457-cf2d-44de-8600-a40a276a10cf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7151e30d-0850-4c14-9681-4adac2502b43",
                    "name": "credentials_status:credentialStatus:item:purpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2a06ff98-2be3-47b6-9fef-389d5037c74c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7dbf29ff-5188-4240-9254-b62f6f90f2ef"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9959aa33-d3ac-4b88-9c27-cc729b787e79",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": [\"revocation\"],",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "ddd3addf-1474-4c18-a1e6-825d926c215d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4889805b-f693-43a1-83d3-4796ad32a3dd",
                    "name": "credentials_status:credentialStatus:item:purpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0f0d3758-bad2-49cf-adea-676e351a9bbf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f577e6fe-1e8d-4124-b6cc-5aed260736ee"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ec5511e1-9343-4aa8-a2ab-53096a21e205",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": false,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "e5cc87c2-af00-4a55-a141-1b4237d53876"
                        }
                      }
                    ]
                  },
                  {
                    "id": "19231c91-ab8c-4d7e-8c58-1aa83bf5821e",
                    "name": "credentials_status:credentialStatus:item:purpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1d1fce76-953d-43d0-a941-03e41aa4d917",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a8789f8b-5940-4a7c-9456-68882aa0ffa7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "313f10e9-e51b-41d4-95b5-1e722393ea72",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": 42,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "5007c9c5-9267-4730-82ab-1645e485c6c9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9cf378c0-8d8e-4f9e-940f-1b50ae1f1ec0",
                    "name": "credentials_status:credentialStatus:item:purpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "36b94d54-75e1-4e36-8839-f008617370a1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "51ed96ff-a093-4693-94c0-03ee0c0080b3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4495966f-59d3-41c5-9c13-1b5f0c437e7a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": null,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "fbdd65b3-3142-49d9-b380-ca27593507ae"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7398044f-9dcd-4f8f-ad6a-c581770c7c11",
                    "name": "credentials_status:credentialStatus:item:purpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "32f76875-de52-44f0-a8a5-119315ba67ee",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e1dd1f28-dfb7-41ea-8ceb-1643f0d07eae"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8d98b40c-67eb-4805-adb5-8ec6da03f463",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": {},",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "31e76f4f-d475-4f11-b83f-dd4bbe268ecb"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "87c5fe50-79d0-4279-982f-0c583aa025b5",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "d3288bfb-d089-4e3d-abbb-fa1614cb01d4",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8fefefe1-f391-44d6-96fc-59a7033e595c",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "f87fe571-7bc9-4bfe-b045-b352c7c439d7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e9697fb1-4e92-4e72-92fe-8216d009810c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "19496f15-a36b-4af1-a1de-ec5f916283be"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "e87e861d-da21-448c-91a9-f39516acdfab",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "c72ba801-9adb-4fe6-b715-a217575e7bde"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "484b8908-f083-4a43-9167-861c12e1b2f3",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "d48f8d02-a512-45cf-8f33-f574942bbc42"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "27ec7e80-072c-4794-9c03-70db7cf53012",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credentialId\": pm.variables.get(\"credentialId\"),",
                "    \"credentialStatus\": [],",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "695f4887-704f-488b-86d7-dbbff319c91c"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "54ccb62c-decb-4bf1-907f-8b39e268f974",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "40d5acb7-acea-42ce-bc48-ec14fd57052f"
            }
          }
        ]
      },
      {
        "id": "57e47b62-e72d-40ff-a817-e6fcd7efd68e",
        "name": "Credentials - Verify",
        "item": [
          {
            "id": "a8a7a8e9-1128-4bbb-86e4-812f54c648a0",
            "name": "Negative Testing",
            "item": [
              {
                "id": "caf9e78c-f628-4fd5-9451-dce3559e9580",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "dbc11de5-7102-489c-baaa-f9f00afe2eae",
                    "name": "credentials_verify:vc:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "daee40ef-6f7e-439d-bed3-21947181b2aa",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "da03ac6e-ace1-419e-824e-7c78ed0f7334"
                        }
                      }
                    ]
                  },
                  {
                    "id": "28b9a6c6-6574-47fc-8a9a-0d8152d5211f",
                    "name": "credentials_verify:vc:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": \"string\"\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "30156ef1-e0cc-4365-a41d-7b3120e8c382",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "29fcbcdf-c64f-4110-bf0a-c50e9034f4ad"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3df60676-7107-4f8e-bfaa-d7e9559097d6",
                    "name": "credentials_verify:vc:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": null\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "59af96fa-5ccc-4a78-9208-f7a17e9ec7e7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "04c25e08-1f96-44fc-8ef8-34f18223a8c1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c95de01e-c665-4f98-b7de-8f21e87cfd18",
                    "name": "credentials_verify:vc:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": 123\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9d76020b-6398-4f70-ad32-4db88c619fda",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2670dfa1-6a7a-4d21-bd1b-8aef20916512"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b2c740df-6d97-4d8e-96ac-09997c55b920",
                    "name": "credentials_verify:vc:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": true\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "49d41983-1ba4-4fed-b66c-8b5e91cba025",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "93992300-077e-47f7-ab22-37f259864c3c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1c2a7a76-2f08-4bd6-bf6e-53cc5d6881e6",
                    "name": "credentials_verify:vc:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": []\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "64ab67b0-3fe4-42fb-8be2-5a3b59adaacd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cfaa892d-72d6-4dce-9070-39f0c8ebd5d9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a416bdbe-3291-4710-a28e-f3481b88518a",
                    "name": "credentials_verify:vc:@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..V5PnQzCWxrPiCYT-WAyKAnypebgwYeD7lX_hyIjFa_lbJje23pZAfFdgnlqBnXLd19Ksa8fZpCE9TN7kAjzxDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ca044b65-7c93-43a3-b013-61b4dad1356d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4a73c64d-6ca5-465c-b6d0-4db64d9f08a0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "03240d30-c6fc-48e5-856c-972c3471fc6a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "971ec23f-1da9-48b0-b363-964d3b9010af"
                        }
                      }
                    ]
                  },
                  {
                    "id": "99972769-fdd2-4029-8be3-0d8b5e232821",
                    "name": "credentials_verify:vc:@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "307adea7-d9b0-446e-a74a-5c39cb3ccb21",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ed3653fa-a8f5-4efc-8ce1-accd6a295db3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "90daebe7-e601-4e57-b804-492ca199ce89",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d8b63a08-019f-4de8-98fd-7720e4f36d1c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "23d8f17c-3b02-4fdd-8084-8423132c534b",
                    "name": "credentials_verify:vc:@context:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d482e579-77f6-43f6-93f1-84c6e6edd85d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "955e3875-33da-49aa-97be-3a00356808ed"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cc4527bc-8dda-4ffe-8a1c-bf5be39f3984",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "de485638-130b-4f0c-a104-d89fe83eb7e1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3c13ab07-4920-43f0-a346-a2187cfc7f3f",
                    "name": "credentials_verify:vc:@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "44e8dc98-9ed8-4f79-9fd9-4fc9b17c391b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "38038ff4-ec00-470e-8ea5-4847b1a4609a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "55762e33-c97d-4d39-8ad0-8276e8b5f796",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4f0ee30e-a98e-44a7-8e4a-79961e369182"
                        }
                      }
                    ]
                  },
                  {
                    "id": "877dc8b9-722e-4aa8-9fe9-dbaf8100e180",
                    "name": "credentials_verify:vc:@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": {\n            \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n        },\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..w4xJhf2l_4JzwE4kp8pD8dNJdWSaws5HiBgal8zFzB6i9p05tmPITdsrUttpUwopW5UAq9M_EZVqlz-kRfSFBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0f3abd8f-417c-45b0-9314-812e6af77513",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cda79c40-455d-4ea4-a666-3ad5601d4992"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "50ed50e9-af1d-454b-ac0c-4cab90633684",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fecd1ea9-5598-4e6d-a212-7166e652c629"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d77455da-0586-479b-8473-56f864562088",
                    "name": "credentials_verify:vc:@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": \"https://www.w3.org/2018/credentials/v1\",\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a3cafbe1-00f3-4968-bbed-ef4f642c540d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e8f1a60c-9793-476e-9ee2-4293762502fe"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8fa4db31-2cf1-4446-927e-c657386505f2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "941bb749-2125-437d-b37b-cade82b155a6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3c7ff681-62a9-4ad5-ac93-398ae7d794c6",
                    "name": "credentials_verify:vc:@context:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "552e3164-bb5a-40cd-bc18-25df90fb6deb",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4aa9a642-b90f-4495-85b3-a5565f505912"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "13e5c478-e618-48a1-bb2b-3d5c78298811",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "552d5e27-eed7-4319-b96d-a9ac6d8b8c9f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1b3e17a4-1c80-448d-85d6-a77e92799f63",
                    "name": "credentials_verify:vc:@context:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "92c52e22-eb8e-415a-a873-1356b40895de",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f5ce81af-dbe8-4068-8edf-8c0b32d0c252"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8776374c-abd7-4284-97a1-5b4c4de6cee3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4c364e00-080b-485d-98b3-038fe1733570"
                        }
                      }
                    ]
                  },
                  {
                    "id": "66e33179-0c3f-4ce6-8555-00cc72b56a04",
                    "name": "credentials_verify:vc:@context:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f2dd0b22-0a2e-43dc-a09e-ed57bc155c8f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b6ee0d13-78e5-4bba-8dfb-e99b655bf805"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "acec0095-4c4b-4093-ab39-c69f765063e3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8c81936f-52e8-42ce-a2e6-a7aea425156a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c402123d-7d07-4bce-befe-f912cd346a0d",
                    "name": "credentials_verify:vc:@context:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f30a9715-7c18-4d09-a9f4-c13068ed1b00",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "478deb54-60b2-44ef-b5cd-ba7f538a23cc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3e049ce0-4208-4387-a07e-77cf268425b5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0ebd5194-3924-4004-94b9-bb758a858727"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b665653e-93ff-4192-aed9-cbc1d539473a",
                    "name": "credentials_verify:vc:@context:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            {\n                \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n            }\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2da2808f-0ea5-4156-96a5-1e8b79e1fe0a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3a2efe6a-ddb1-40aa-8727-0aeace54ce40"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5c763d35-65f5-4802-8ed1-8627d5d4b1d9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9afd424e-30dc-4080-99c5-9ce47fc08e9b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8acd25a2-220e-4c8b-af2e-4330bbf25b98",
                    "name": "credentials_verify:vc:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": [\n            \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        ],\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..iom-sOLAz9-9FhadLRpqOYXXBhx4Rgwa3I3w1oh087xFQqIMhVTzcSpHCGdGWu2QT1KwrrgVAXPeTT2EthmxBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5d33fffb-6ba7-4920-96d1-ed6181cc6ccc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c6dd63ad-42de-45a3-9af5-c9c227af3490"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f8a02729-33a7-45f9-9a9a-760bbb81176a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dbb20fb1-81a9-4410-bc67-851bf9d25d8b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "540a3039-37a3-4fef-b117-ec42f4242ff6",
                    "name": "credentials_verify:vc:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": false,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..xftqB9cBFsSe226cWEZ4wr5sfxlAOJYYo6yjwPCVeHDdk6OoWGjZQGO7xXpSidrrr6e1imP18LiFK34xtRWADQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f6f219b7-7181-42d1-a8d4-7874aad35d11",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "634e5c5f-8def-469f-b79d-34d34a501e69"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fc78fc3b-c764-4a3f-b9ac-c675998e3edf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "536bdf8e-dd40-44c4-97d5-65bf403ff413"
                        }
                      }
                    ]
                  },
                  {
                    "id": "84584eae-bb61-48d9-8fbc-1dec32f0a762",
                    "name": "credentials_verify:vc:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": 123,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ZqV-qqLOh_Kb4vAdXKBfmFdNyv3FzXJAIYV9JltcYGDAefU3OUOnoaAU2WSEufkuYkvczxfRLhrMKgkoVoIRAA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "40be48f3-6b88-4991-9ac7-6ce34801fe22",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0a59c1ee-657b-48b8-ae5e-15161993be8f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "39689e2a-3a87-44f5-bfaa-8bafa568f1e3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "be0acff6-ba6b-497e-ab27-dbadb8a686ea"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b58c44a3-845f-4541-a2da-c812fcc6d87a",
                    "name": "credentials_verify:vc:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": null,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5c8d1475-352b-4b7b-852b-955ad7e62cb6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "eac6b5fa-f7ad-4b60-bee3-5831ce5045b6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9659d1ec-9e87-45ae-874a-e8ddca912cd3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c1bbe317-ebb8-41d9-a353-03bfb58a96f4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b65575c7-6a6b-4a9b-90e1-9f0fb0376085",
                    "name": "credentials_verify:vc:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": {\n            \"key\": \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..0Nrj_srTLYyA-9ZVA_dkVGjUcKx6xELHjbbdppEMFPGEN5c2gPXgstNRjnrr8hhMMegSAbvGASKWseBXGR9uAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c5026cf5-0c48-41c5-8db3-d72b1094e942",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6ec430b1-577e-4c4a-85c2-e3a361ef39ce"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "74d05362-85a7-4b71-999a-da49b742c793",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f1bed92b-49d0-429e-8c29-3d4b8ee88350"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2162d9d9-e31c-494a-8da2-22fe1ac87e38",
                    "name": "credentials_verify:vc:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Bx6sv21fSmT7fCCxU3fDaLhEOhfRK8llXSiFTgApd4PHot00nVjhaKQyhBW9FfFmJljstlOV_Zff164cxOKiCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3cd183a3-6f49-429f-9930-70b1ceb6c0aa",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0afc7c81-5687-4523-89b2-3de761ed6ff3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9d33eaaf-0c6f-4460-97f8-0f83be647b33",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "36f90bdc-256a-4180-9d2e-eac7d3b774e1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cd75d2d7-a52b-425e-be14-19d58f6f535f",
                    "name": "credentials_verify:vc:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "98391c1c-dd36-4ea9-aac6-42d922be662a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2a0210c5-4d0e-4431-ba12-b16b261aa3c1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "00e88067-891f-4408-9ab5-8ac795b6b669",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cba9d93d-d13e-48c1-8045-6ccccd9925ad"
                        }
                      }
                    ]
                  },
                  {
                    "id": "44c89ee7-841b-4e4d-9205-85b93970460b",
                    "name": "credentials_verify:vc:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bfef7eae-89bb-44db-ae34-3c716fb4073c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "bdb50d86-7717-46fe-a7b0-25988b49222c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "74d74f29-9f66-4670-83c6-bc136125ecbf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9e46f80d-a13f-4040-acc0-8565d042514d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7ce905ed-ad7b-4e4e-ac2d-824a3c75618f",
                    "name": "credentials_verify:vc:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "36071531-72c7-41bf-a3c5-108f65a7ceb2",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d59fcb5b-19dc-4045-92cd-0f1f36a895ac"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9f5ede77-4e67-4cfa-928a-a59fdc1b8489",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a4df1ec5-cbe4-48ca-92aa-b6433894e1eb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "52a7c4e1-3b55-4414-82f8-a4eb8b0b07f6",
                    "name": "credentials_verify:vc:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6148f5bd-44dc-4add-a3e2-5127f2751575",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = {\"key\": \"VerifiableCredential\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b83f41d5-0b86-4fc3-b287-350fa92da129"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ba3a888d-4d64-40fe-8e45-619ed8e88a70",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9dbe6dec-042b-4342-9ac3-30153cac421d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eccde2ba-9ea9-49f6-8cd3-f12327e58a0c",
                    "name": "credentials_verify:vc:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": \"VerifiableCredential\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "91d818c8-2e7b-40ef-9641-074cef0d3277",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b9cbbf72-209d-41d0-b6c9-6ded09e03cfa"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fd520ff2-1b02-4397-9c50-772e531d8f8a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3b337b57-eb44-4946-9428-eef2c92b3949"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5ebc4b09-a7d3-4580-8486-f069592dfeb3",
                    "name": "credentials_verify:vc:type:item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a67e04d8-9f32-446d-a8fc-88265f15be5c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must have at least one element",
                            "rawBody.type = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "773233af-d820-44e1-ac01-0714caeb3def"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4343594e-8fdb-4a53-b925-0e74dc486511",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0ef7fe4f-f3ed-42c3-bebd-799d192c139d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f336365d-60f6-4236-bab4-931524b515bb",
                    "name": "credentials_verify:vc:type:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "76c59b12-3d15-4a35-bcc4-cd5225b55ad2",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "15173622-a9d5-47ed-961b-e40d5a1728fd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "21b7944f-a3d3-492e-aee1-f9e817c7002a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5f05abf8-8fe6-4bb2-bf35-1a97d4e0d677"
                        }
                      }
                    ]
                  },
                  {
                    "id": "778fa4c6-ac8f-481a-84e6-6f6d9fd0bd02",
                    "name": "credentials_verify:vc:type:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a4c7271a-919c-4897-88d4-9f5478b62b95",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "54a09f1e-41dc-4c22-82ba-b16800df1332"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5133d42b-19fa-4818-a7d0-e4f0907a80ad",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "150d0af2-b7db-43a5-9592-036901389b89"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dc74d442-0213-4c32-b094-8b18936f4b3a",
                    "name": "credentials_verify:vc:type:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "617a3538-a934-432e-ad2c-548e40046932",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ca3c8425-5919-467d-b904-5f4a6a6bca4f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ade9eb7a-b95a-4941-8bfd-462f0d738920",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "69eb8af9-1515-485b-be40-2616bbf2f311"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b034aa41-db93-4d85-b69a-fe4525394283",
                    "name": "credentials_verify:vc:type:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ddc99b07-7086-40cc-b181-01f31947e831",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5564fc03-096a-41c7-8f26-b1dacf7b181d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a44fc345-691b-4a6a-b3aa-59e0d9d75c2c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "450ce210-d321-4c63-a5a0-941f99a7d48b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0ea12acd-37e8-410c-bcda-318977819e76",
                    "name": "credentials_verify:vc:type:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eea368c7-c3a6-4a83-ae7c-2374940962c9",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", {\"key\": \"VerifiableCredential\"}];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "24ed1952-422f-4a8a-8c38-d272755f4662"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7e697576-3202-4426-b173-d10a93426104",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a7347836-886f-4a3c-91ea-bd33a686a419"
                        }
                      }
                    ]
                  },
                  {
                    "id": "445ccf5c-3a74-4a9f-8e1f-305dc417d815",
                    "name": "credentials_verify:vc:issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "150e7012-9f8a-486e-8721-5a606feaaa89",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "622ebddd-4f3f-4689-b124-6910541613b3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "98435d22-1c2c-4050-b84a-bc68db1c4531",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1a8c861b-054b-4634-8bae-403be0dab317"
                        }
                      }
                    ]
                  },
                  {
                    "id": "123fe3b3-a5e9-4eb3-a250-2bcb63213492",
                    "name": "credentials_verify:vc:issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": [\n            \"did:example:123\"\n        ],\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Mdpb0nbZLuHLqh6IBr6ouahKZNFB-cIKJXn-b-O6Pt6HyJaECfc399qgMTWovf-l04XYEpuYDmfZeYVThBeMDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b40075d1-6724-4a51-9620-2001553c0227",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "adce8f06-094e-4aa1-9656-062624ed44db"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b7a3a608-937b-4ede-b0c9-d9c82d681a03",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d62968e6-a6ef-4dc0-a407-b800278d8b10"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bd66eee5-1676-460f-9dee-6283ce39378a",
                    "name": "credentials_verify:vc:issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": false,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ryGzH1cVI0oyA0eBPKjIBDGJ8FYapvVnUEcovWWepoAASL3SzOOUvcQ9XOnQlclFU8dYhkEN2L8TQAj2OHlcBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e992931c-4ded-456f-babc-ab2f9f6cd5ea",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "809c072b-3f25-4b71-8c04-f7a17108f981"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e712cc5a-99ab-400e-9df2-227b40c0ac79",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7eab0803-7689-47d9-bf48-a0115a5de3a1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0d22915c-5961-462c-951e-52682ba5e372",
                    "name": "credentials_verify:vc:issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": 123,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..kEE8wQKYgVQlcBvJeVeV151aR_iD6vPrlW2bgXPW8NvJx9AOuW5eGtL3j_I3xIGR_JWDA5jGy6KDVkqJNEDHAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3d0c59ac-d893-4c1d-8023-27a692ce9876",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "71940fd1-f187-4c38-9ba5-15e074862f6e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5a166b29-3648-4004-a2fe-5bf8527fbd30",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "97dec993-064c-4106-bcb8-b6c930aac5f9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cff753c8-199f-472e-a7c0-c9f9811672d1",
                    "name": "credentials_verify:vc:issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": null,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "48456711-bfcf-45e5-b141-62e39384eb98",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4e094842-164b-4c3d-990c-1d9af4a16b04"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5e94f862-b9a6-4110-a2f3-3c45f6c2fcf9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1d2ce572-83d7-4c30-a6a9-7093f7491ffd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1c4d424f-0b9e-4df8-a1d2-32edc3058008",
                    "name": "credentials_verify:vc:issuer:id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {},\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "02b9e416-52d7-4900-b570-176c8bb85a2e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fb763c2c-4914-4950-bf0a-71191f4d55af"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "13329cbc-10cc-4736-bbb0-efa62c6d4dfc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "71b562cd-e76f-4860-a4df-fc14ddaf9a11"
                        }
                      }
                    ]
                  },
                  {
                    "id": "04f8fa72-dd00-4aa4-ace6-152fe6ab11cd",
                    "name": "credentials_verify:vc:issuer:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TsN_31UJYzTTx1xh5CB9PjhnehJza3N5gAEFoNO55HLtQvoqGiEd-SI_4Xy7cpuYMbHdYf5CKHwP0eooyzjrAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "98a5c360-8264-43f5-8252-22fd9dfb46f2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c1d716b2-74b7-49f1-b90c-480124dddb66"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2d0d8dd9-12f3-4a15-bd82-83b5badc4e14",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "453dc625-962c-44ab-a54a-ac2ff7bf41d6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3b0d6fe6-d790-4d67-8b73-b999fa4c2a86",
                    "name": "credentials_verify:vc:issuer:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": false\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JOl3FF8mG94K8DDAtSYeirCtE5GRVHXYZcIbf3JRCquZ7obaBm1wh3rEzbG-t8kjdWMn7Zwy8q4zw7pMC2-gAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8a344c5a-9555-4006-a583-90b88f077c90",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "987d7427-592e-4f21-9480-de748a11216d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "be682e89-7fe7-47b1-8cad-079b8c4d06c6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d8341504-d92b-4076-bfe0-ff2cb7204459"
                        }
                      }
                    ]
                  },
                  {
                    "id": "195c0f78-eeaf-4810-b1c1-6b8e7c7125e4",
                    "name": "credentials_verify:vc:issuer:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": 123\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Ibp_FWO5FwzfTfd_PeTgedqAEcbS7dtCOoREanyZP0yAg63ZGay4hjjd-NwZfmWG8LRbMSqtjX2_Cu5BbBEoAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fed5d182-0481-43b8-a2f7-cb4ea0af7188",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e9b57187-9656-4e1a-8b3a-89e8ee20429d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7eec2349-33ed-47d3-be67-2e17dddf1cba",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "123871e8-34a8-4eaf-88d3-965cd69281da"
                        }
                      }
                    ]
                  },
                  {
                    "id": "df953e0a-2ae9-42ca-b33f-b20406571071",
                    "name": "credentials_verify:vc:issuer:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": null\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8ffa6ced-be10-44aa-9774-938b9c0db6e7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3152650e-0903-490d-8af3-fbc1cc8e7341"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0fb528ad-1cf4-47ce-845f-e26441a85473",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "854eca64-2ffe-4c91-bde9-9979d2a3eea5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9f04efc5-eb94-400d-abe1-b3035486d449",
                    "name": "credentials_verify:vc:issuer:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..n3pFfPx4jY7EjlOpLNJT4CAJYI1roVE6LoUgLQhJ1bMgS5xUKbsIhynp7xDW-vSGzIcu58w-Z8_d9--99NCDBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "20bbf071-2306-4c8d-8a15-51c692be131c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0a2f19a1-3eaa-4b43-9241-b1064791c366"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b76b55c3-1b6b-4051-a577-0dfb802618af",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "39439e15-c4a3-44ec-aaae-a71ef0ffe7e7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bee15c60-0b19-4bb0-bc1f-00585e2ae22d",
                    "name": "credentials_verify:vc:issuanceDate:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2f141440-c034-4d61-afb0-48b40bc6532a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f64bd29d-f502-4ea0-bce6-f7fda6137475"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "63119cd7-0c53-4816-bfd9-ab1df3663208",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e2ec297a-ccbd-41b5-ba82-dd5298f31788"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aa15b995-071e-4a82-bf0d-aec6ddaa9756",
                    "name": "credentials_verify:vc:issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": [\n            \"2010-01-01T19:23:24Z\"\n        ],\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..eJGt2anEVhR3qXrd8726C2a8PNJ-S4SnhIUB2YpAUiLJhTQ4FcY_nONpl-U0MbpWgwlpJ7xa1_uk4EMrGmOUBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "645d8d54-7014-425c-9afb-5fcb400b5452",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "170854a7-092c-46bf-a646-86590bb30960"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "80bc9175-7413-469c-b8fc-dd7bac2965c9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d4c6e744-2138-4d04-9dfa-1e929924563f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8735d2f7-41b8-4685-ba72-6855cc4659ce",
                    "name": "credentials_verify:vc:issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": false,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8Ax_d8Yp8MIszSaGQa1WkiT4xktUk0Ltg7EF3QQ-GGY8JaV_jR6-zRUlEF2iW0HcK6C8ZoAt0KrllUUDdJkdDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "511858ea-97c6-430a-a547-5b341d59126e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "99b48cdb-aa19-4bb0-9e4d-ecde68992e22"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d12e3b45-79fb-44d4-99f1-6d240822e5ac",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "30ec6c25-724a-44e8-80bf-fa3c7ef10fe9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "82bafc69-3f6b-4501-9973-17a9f4c104d3",
                    "name": "credentials_verify:vc:issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": 123,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..x-sSX9vqc6977YPFhNbzjKdisDv4qD2mx-yBSH_EG-UQCpyH_ErCzoFWnpJzRJKIKbOLEvvZ5SO_fWbNWyNdCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4cb70e4b-a2a3-4e89-a292-ed2698de59ed",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "209c7ea6-7873-4b34-8c9e-05b7e19c89ab"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2b802bcf-6db0-462e-9baa-fdd057a9f206",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e7fb9a45-0c5a-4f19-b637-901ecf791853"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b5e45e04-21d7-49ad-ae76-7866f396a302",
                    "name": "credentials_verify:vc:issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": null,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d761b163-dd35-4b21-96c8-dd2b7541da49",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "08c1fc99-9a91-46cf-8a9b-bb6dfc571960"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b1d9d1fa-4878-4032-a6c4-d265a50f721e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "998c004c-26cf-4ae1-b919-35cc4515fa22"
                        }
                      }
                    ]
                  },
                  {
                    "id": "31a98625-f91e-45c4-ad0f-bb53d7b2140a",
                    "name": "credentials_verify:vc:issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": {\n            \"key\": \"2010-01-01T19:23:24Z\"\n        },\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Z1GVMKiJuJeJMpR_Ag4Wpv6940N3WUreYSxEsPaZgU_J1C_EDUj8ycRJitlJNEBBuGhibJ0GWyK-WW9RO2WCDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b4d77736-b075-4fb4-bcd1-669ef95b1ac3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "541e88af-a570-4f27-b24e-80acbe2f5f38"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "930a6a43-0ef2-46c6-b257-df13de5418ba",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "89388c36-a706-4aea-98ec-f9bf1b7581de"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0769a891-796c-494f-9a84-62fc2bf00859",
                    "name": "credentials_verify:vc:issuanceDate:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"not a valid XML Date Time string\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ebrsCszvH6TQHw1QhA8laajPRWL_zGvQ96Up8A4TiJrY7ueFm3V-Suk-KNd6JKckpOxLoF-Cb24KG_g73AqHAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "80dd59a2-772c-4b8c-a1d9-2765c3dce01e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5587f694-3fa1-4215-be9f-f8301541552d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "66a6db2e-2057-4db4-963d-f4834ae80acb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0e3677d1-8b43-4330-9f91-c2e367a3dd27"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eec22766-f5d7-4d1e-b69b-6fef68c7dc98",
                    "name": "credentials_verify:vc:credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7ca7bb42-8e51-4b75-8e0a-593f10ddb0c3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f8c64a19-839c-4f8e-96ac-c542144fcf57"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0bdcd316-5d98-4aa0-8a22-ad0ef9564ba1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7c20dad9-9d6b-4ba0-990f-6b3ffab4aa4c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "01976163-7ab1-43c0-8eb2-3a7b27fcca1e",
                    "name": "credentials_verify:vc:credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": [\n            \"did:example:123\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "962fa817-0106-49ec-b8d4-b407f447f137",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2a144d77-2bd3-45c1-b3c3-32745db03166"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "80cbca2d-40f4-4c97-a2a8-fcb15c26ecd8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "050d71c0-55e9-4474-8a16-11ccd43ac9ed"
                        }
                      }
                    ]
                  },
                  {
                    "id": "11f2a8e8-eef2-4042-a034-deb13fbd138a",
                    "name": "credentials_verify:vc:credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": false,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..VK75R0RpQX9g4E_vGExhb_aDUNycy1UlQYvhCL1Ydl9bWiT1oUPeHEUgJMRGzmRRvyByyj13oHI2yB3cOLWXCA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "74c1d156-62d0-4413-acc4-047a75645d75",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "02d59070-2125-45c5-beba-8757c55d3980"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b7016cd2-20f8-4626-b09c-f5cc00d26aa6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "21770f7a-0b14-4648-9565-84f5bbbe7556"
                        }
                      }
                    ]
                  },
                  {
                    "id": "69ff09b9-f64f-4b04-9ab6-da623e2e1493",
                    "name": "credentials_verify:vc:credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": 123,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..dQnu8mT7YMECvDQPODQ1YUudQIO9Yx7WsZ07UWpHRqw0iV3ZvJOebbBoY0gFvsF9t6foFFEaaWcKi4vNgIdfCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "89dab4a9-40e3-437d-a3d2-4f6fc8edaad3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3922549c-319c-4b43-a65c-090e63749563"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5aec8ff1-cb35-4e73-a251-fcf5d3a3f692",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "15a4cbc4-69ce-4f49-a063-d0ffeacbca9f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "11ec9ea8-e430-48fd-b204-6d9307f43f6d",
                    "name": "credentials_verify:vc:credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": null,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "26ae47b9-a717-4251-8b10-891cbff0b994",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2ba1d3f0-6f8f-4bba-8a2e-53cea44b601f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "eec905e5-31f9-4f3f-ac0b-67562066ff9d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3ef5c236-9d92-4ec1-8dc0-9ae78d94cb4d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2d66373d-1874-4cbb-b74d-d284c6c7773b",
                    "name": "credentials_verify:vc:credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": \"did:example:123\",\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fa500cda-a3df-41c0-8d2d-6bcd9e76657c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "18bcaec7-8b1a-4c0d-ab9a-d798584d6f0c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0f186a50-6f15-4910-99fd-0c8aeb8b31d8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "21053c99-88df-4aa8-b2c3-694c4873c1f8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a876c0fd-0c6b-4b3e-8bc4-763167fd398f",
                    "name": "credentials_verify:vc:credentialSubject:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8KJ136ciaI5X01UO8dPG0KMcsxmd7qzxvrahflTNqsrjjd-vF8bBKpjVDLOOj7bUolO277JWFCPX1xvvAVAvAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2443c92f-be95-485c-8b64-e1e39fa57e0c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3f7f3455-5936-4892-af90-ffaebee61542"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "01d2d636-ea72-457d-9619-5c9cfe3f8021",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "66c6ee6d-1ba9-43aa-b7e0-52a29a504ce9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "60e0e401-4714-465f-89c1-df29424c5922",
                    "name": "credentials_verify:vc:credentialSubject:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": false\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..1Tatn2a45JYHHvhGvCLNbO1VUDV_lkvRVosGzDXDF-DseqRorDTFmY7XSyYqrl5yc6B200ET0RBvgK2vyEC6BA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "da9cbf14-d2ed-4e9e-8006-4e3bc91b8e36",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "633e9436-e931-4a87-8825-4d9dcb9e0a34"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2968ff2c-611a-4765-90f8-610480591fc9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "49e8223e-09f2-401b-bc84-e0fc081b3ca8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b646497a-ff97-4a2a-8ad3-443b0d1885b7",
                    "name": "credentials_verify:vc:credentialSubject:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": 123\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..qPc7PrMuniibwI74A9ELPRd1YyUjNyeccnUFc4GCfj7I3oREDl0RT6PEt1pEY81mq7vlIsNG1myE86igC__qBA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4e085cf3-3918-47e9-80f1-71f752af4a55",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fc688728-dd80-4a05-972c-1d9c028dfc5c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "633591c6-82c6-4e2f-963e-f54f8c7909bb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b65fb0ab-7945-448f-b144-e8ed40f625c5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6ea86a3c-1c6d-49f9-a501-cc72b331de2f",
                    "name": "credentials_verify:vc:credentialSubject:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": null\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..10vzNYPpxv6gZwVR-V23lgvIgseVOwxT6Tc1Zbn5T6pWGmUhrkur_O-OexNVjkVSf7Qu_6NDnIL1m0KcNKGBCg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "54a0322a-b55b-436d-808c-a2c0f596933d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1a5d7d15-407a-4775-87f8-c22ef5033cd7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6ea72df4-0c71-4620-ba35-e79c5caf030b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "337871a2-48a8-46e9-a2ef-e45bf66f64eb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bddac0a2-cc89-40e8-a17c-e7f50bf80bcb",
                    "name": "credentials_verify:vc:credentialSubject:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..tQJMGZTsqt1RhpxKkq647EHc3pjQ183zd4KchfvD3dXWVfL9X1fUedMbj33l8eev6YWua2-6_4_sUTDr2MLEDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ea9b7567-7e7a-45e9-8d80-0d2cef240e88",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9638795f-9b24-4fac-952e-74bc504b67c0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fbe4f7fe-e420-4c3f-bdbf-46484b57dcc3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3956632e-7603-48d1-b10b-1ea5559b720f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d41595e8-8bfb-4cb2-8aeb-d76a3f19c904",
                    "name": "credentials_verify:proof:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e9354374-4a4d-49fd-9a89-fe8cbc3632d7",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required for embedded proof VCs",
                            "delete rawBody.proof",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5ef5f2dd-4bb8-415e-8765-e40e470ce2f0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ff524c96-9523-45c7-8dce-544c7897024c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "42552108-61f0-4462-9751-63598c14d33d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0664f468-aaf2-412f-9b0e-da812b6195f5",
                    "name": "credentials_verify:proof:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7fb56be4-61b6-48b7-882e-022ce07d7a5e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d2cc3b76-67b3-4cbe-b5a3-b675219e9183"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "49762f77-1aee-4ff7-9476-8dcddf5cc9f2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6eb6e8a9-5706-45fb-8685-a421789aeeaa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a48a4c77-b48f-41a3-bac0-c95d3503bef4",
                    "name": "credentials_verify:proof:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "825e33d3-6177-4b99-b86d-4c087473dfa6",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c7343796-3fc9-4e4e-90ca-d595cb3f0530"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "dd3b2c1f-bc43-418a-b9b4-1f3c50ffbe72",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c08171f1-02fd-44e8-ae04-6becd1872b5d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "564f709b-a7e8-4547-88be-60022bd43220",
                    "name": "credentials_verify:proof:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "de378865-b21d-4ed6-b95b-d82ede1f6be6",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = 10;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8390089e-4581-45df-821d-a7d5cedb6826"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c4953517-7dd8-4bf6-85a3-e82c0b33d060",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "99ddbda0-2ea5-4e8a-99d5-fb62b829b27e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ef1da39c-eea4-4600-90e1-6eaf7a4a063c",
                    "name": "credentials_verify:proof:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "128b4baa-e8f1-4b4b-af74-af4a08cbe7b7",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "beab063d-7d9d-463f-bf7d-65a47faa854f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7e263f82-95e7-4de2-83b3-182a3bda03b7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "44daa454-46af-4b50-9123-5782c84e58e1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "83c7971c-db4e-4a95-ae85-3695a7c348b2",
                    "name": "credentials_verify:proof:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7a1957fa-6cb3-42ab-92c6-680f917287a3",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = \"string\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c8398cb0-2ba1-447d-8946-7f1363d70464"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "dfb7f608-199f-4fb2-ab1f-8e0a0463e5e0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "712bd8e9-76d0-44d2-9b8d-f05828c0a96b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "29cdc070-94cf-4737-bf30-f57c1bb637da",
                    "name": "credentials_verify:proof:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "211b47de-854f-4b3e-8a42-3d0941c7e2f6",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required for embedded proof VCs",
                            "delete rawBody.proof.type",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "fee87290-da6a-4b4c-a2a9-4c132afdb555"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7ba1e578-87d3-44b3-9804-2fccc0cadcff",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6bf2acc7-aaab-4150-bcee-1edbb368b197"
                        }
                      }
                    ]
                  },
                  {
                    "id": "da38e54e-f05f-4572-a197-238bedadbb65",
                    "name": "credentials_verify:proof:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7993ae2d-ed85-4ce5-b668-bbeaaca31421",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = [\"Ed25519Signature2018\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "eac6ddc7-65fb-4033-bc74-c79a5c9a6cf8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1f19b304-82ce-424b-a3fd-c1b829d55656",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4bfaaca2-9e11-4789-8e3d-f5720f5a4a51"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ba43c663-dfbb-4c1f-9fa6-b7a216f90686",
                    "name": "credentials_verify:proof:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fc1325cf-8ee6-4065-b92f-4da04f75771a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1afbc68e-9cb7-4d59-853e-894d43b0724a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "632e2a23-36b4-433f-9932-460721266759",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c9bf558d-ca51-456b-9c98-8c4f75657868"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d66a28af-15c1-4547-93d9-d53826e46b51",
                    "name": "credentials_verify:proof:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0a0abca8-9ea8-4a67-b450-73a03baab9f8",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "181c74d2-c5e2-4c55-9365-1029d53bb32e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f203ee62-5636-47c6-9fd3-f3f9fb811708",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f6c76565-5de9-475b-bc2f-5205ff2aac88"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b9f2b19f-2485-4f39-9ad6-d66a14ec3ae6",
                    "name": "credentials_verify:proof:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5b6f4ab6-811f-45db-985a-06add87288f8",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8efb279c-afb6-40b5-bc9d-a8b319adcf7c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7244f00d-5f3f-426e-9af7-317e6c83cd9f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cbf32fcb-5415-4aba-904d-fe656769f5c2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "720ee432-6928-41d3-adff-42b508e2fdff",
                    "name": "credentials_verify:proof:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7daae5b3-04ba-4e85-88fd-a6a7dd965ffa",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = {\"key\": \"Ed25519Signature2018\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1c7f0eb2-67ee-47a7-927e-4bf45fdc36c5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4dc4b72a-b32d-440a-85a2-f31dcc782c40",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "25f7263a-5b51-4ca8-be6d-ad1d42260b11"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5fedef73-369a-4180-a7a4-b12fc82ee1e6",
                    "name": "credentials_verify:proof:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "13a4daef-cd76-4579-85e0-7096fe13f4fb",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = \"not one of the valid values\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a8bc7637-064f-420f-b613-6cfad6b60358"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8087c43a-d333-4f24-90b5-90ea0033d799",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "48becd5b-bbaf-49c9-a757-a39734909410"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5edd01a1-1047-4a02-92a8-090cc248b48d",
                    "name": "credentials_verify:proof:created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "79279b28-a698-49d3-8e39-1a8ecea9c462",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = [\"2020-04-02T18:28:08Z\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "25324fde-f252-47ed-9e17-aad1cd9d8143"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "117a6233-bccc-4fc9-a3fe-8e33ca30473c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9ab9d5d3-a084-4dd4-b187-0dc5400ef63a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "506b7716-c3c2-442d-bee8-515b27102209",
                    "name": "credentials_verify:proof:created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6bc118de-7024-4941-b2e3-442835fef040",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2d0b08c7-6a32-4d7a-9271-bca15609f93b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4b383eb5-d700-446d-9053-9f7fa580e897",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "af3ed202-cbfc-4b9a-93aa-e1b36fdd98f3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "52aa0479-810b-4d83-865a-21f1857f91e1",
                    "name": "credentials_verify:proof:created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "01db2752-b82f-43d9-8e9e-0b253136503c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "49749eb0-02b1-4c9a-8137-c1b2d0e6d22f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "79491415-4c1e-43c4-910e-1d49885be340",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d7c67233-4fe5-445e-8194-11b6ffe4d6d4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "37f9e6ef-d0b4-43cb-8cd8-b5267161d89b",
                    "name": "credentials_verify:proof:created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "98c648cd-e0ec-4903-a25a-dc29cf8364a0",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a4ce1e9d-4667-4803-93db-fadc6f258685"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cdc5d518-7ada-4b08-913f-c4c20522034d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8165216d-a6b9-4709-ad33-b27541b53856"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a7e2b179-7dc1-456d-afe5-d18dd5e69c37",
                    "name": "credentials_verify:proof:created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1d584516-e489-4473-ad35-e7dd8b49da0e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = {\"key\": \"2020-04-02T18:28:08Z\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "686c9281-6ccb-41e6-a8c9-f301364ace05"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ec483b1e-bd91-4f1c-ac6e-0a727bc31c1c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b252e947-771f-4f06-8d70-12d091de7561"
                        }
                      }
                    ]
                  },
                  {
                    "id": "718fcc42-7958-4bb8-adf8-ba692b5f9894",
                    "name": "credentials_verify:proof:verificationMethod:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3a9e8fca-511c-423f-8410-930e78d29bd2",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = [\"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "60ff415e-991b-482f-b6a7-c1084a7fcced"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "496a1af5-991a-402c-8762-fc7706a1449d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "449b94a5-3e8a-405e-a4eb-d3ae3306f485"
                        }
                      }
                    ]
                  },
                  {
                    "id": "daf1779e-1d51-40e4-8b10-35d846f63d08",
                    "name": "credentials_verify:proof:verificationMethod:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9480b81c-1666-43e3-b067-400faa5d7c84",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "dcd6831c-c3ee-46db-b2bb-45cd45c489e0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "28599ba7-6c2c-48f8-ae63-9974693571a3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "403d33ff-7f3f-4b8c-853f-4bf7b67efb80"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6f9ff178-02d2-4c84-95f5-9f5c3e827739",
                    "name": "credentials_verify:proof:verificationMethod:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "611ce67d-5d7e-47c4-ad0e-1b4d30e4352e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "013664a3-5370-41f0-8fab-684882ff694e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6f5007bc-d685-448c-9e8a-dd6590b19e35",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "370fbf67-4a21-4d91-9584-c914e2676651"
                        }
                      }
                    ]
                  },
                  {
                    "id": "37df9680-d294-44c9-bf09-82dd5fd1bab9",
                    "name": "credentials_verify:proof:verificationMethod:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1fe0abed-fc03-4fa9-9f82-b775df2e867b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "bb11e723-7a05-45fb-aae2-a2fc8f08fd40"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "71b428c3-9a60-4f01-ab48-34ee26b30856",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c5bc3d5b-f57c-44b0-98dd-1055b140df0d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8997f374-4ca6-4997-8f9d-67601e5ceadb",
                    "name": "credentials_verify:proof:verificationMethod:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5f6a6e08-5270-4868-ba41-416f7a4eb7cc",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = {\"key\": \"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "69129007-8497-4d03-9e5c-781dd20cd4af"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4d46a8c4-ef4e-43fd-b084-7fcbe7955d8b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8b537db6-294f-4d05-8273-fe7cc446b683"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fa92bfc9-eef7-4569-aa90-f181ed6ffd6b",
                    "name": "credentials_verify:proof:jws:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9330c296-668a-4b4b-a487-374d0e6507a7",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = [\"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "98174716-6637-41d4-a126-264e20bf2653"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a6c86755-bf93-49fc-8aa3-d357caec73df",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2b175500-3520-41cb-806b-9c5314c96a7d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fcb867b2-73b7-4a44-8221-3eb03c09db00",
                    "name": "credentials_verify:proof:jws:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "542cbe19-b1e3-432e-ba2a-d9d6bc586d56",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1b4ad6b0-0a1d-4720-a31b-8d54259d249c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d3b098b4-dad1-4ac9-92ee-ade48cc87598",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f45c3345-fe0f-4d59-909a-80462c8b3bd1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "33aa6b05-2bfc-4def-8c86-f5e865726719",
                    "name": "credentials_verify:proof:jws:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1877f8b5-7fa4-484b-8eee-a570f4576786",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "62b3e04f-0469-4b45-a6c8-1429fe8fb277"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7beb4b2c-6c26-4834-9a1d-8754295edea7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ac39b56c-c0c1-41a4-b947-2ac18d6d93ba"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6a63fde9-4018-4a62-aad4-bdf31d1a07f1",
                    "name": "credentials_verify:proof:jws:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f5fbbd17-c92d-4aef-b686-c67957af7ebc",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c6a7462b-499b-48db-abe3-483dd0487378"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "388049a7-a457-4b37-90a5-5b0c2dc335ca",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "beada2e6-f1fd-4e84-8613-d154689e5fcd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d2a91339-64e6-46d9-81af-23bc2ee878f1",
                    "name": "credentials_verify:proof:jws:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6e1b5c47-9afd-417a-a9fd-b9a048fb13d9",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = {\"key\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7a1b4cb3-7e5d-4b90-8935-a882322ed0b6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f8b50d1b-f184-4f0b-8425-69d46f68e642",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6a61b261-78d4-4c75-88cc-aeab59b084d9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "40d5acf7-7351-4a3c-a2f9-228b18661e78",
                    "name": "credentials_verify:proof:proofPurpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3849023f-b838-4cf5-adda-fc9623fffed6",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = [\"assertionMethod\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "74e1dae4-7f8e-400c-a06e-8b5d13840b21"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "766c9614-1a0a-4afa-b39d-e6ab226c0e3b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "00fbaf64-b42f-4bb4-aeb8-836c59dd0363"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c8250c21-914e-47a0-b842-7b4d81ccf054",
                    "name": "credentials_verify:proof:proofPurpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "98fbb163-38f8-4729-9377-cf003ccda25e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6f4861d6-e7ba-4f8d-a3fb-57e823d80578"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "16de32a3-784b-4c41-b64d-8059837117c1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8ae5458e-574f-438b-ae9f-90ba07f7d12c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "32e0dcdd-f90e-40ce-91b4-70d6bac74cd6",
                    "name": "credentials_verify:proof:proofPurpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "95923410-154a-44cf-9c32-3fc1c302d524",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "734e7a58-0544-4218-9865-abd4de5620fe"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "49a24c01-5df3-48a8-b61c-be7f87b1693e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f2152d64-8f18-401c-92a0-5833a8428060"
                        }
                      }
                    ]
                  },
                  {
                    "id": "57cff114-e1c2-4a99-86f6-3a88dfa5006c",
                    "name": "credentials_verify:proof:proofPurpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8b606409-5625-4ea4-a477-d2a850e128fe",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2014f5b4-f55a-4cc1-a460-86ce6d5cb1fd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0cc5e457-999a-4fc3-ab41-59ef9193c68b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cbfca4aa-02c3-4097-8055-d0547e802e17"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7ec65748-97da-4713-bec5-b08ee19423b7",
                    "name": "credentials_verify:proof:proofPurpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8175e072-91c9-49e4-8984-80e6a4e13ca9",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = {\"key\": \"assertionMethod\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d83928f3-5d12-47d2-8203-344621c79172"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "70c91e5e-90b2-473c-b465-8a92a0945488",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fad6f0dc-6007-4e50-bb13-1464e61e1595"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2686be39-96c0-496b-bc5e-33ee3b02a60a",
                    "name": "credentials_verify:proof:proofPurpose:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a32f4f21-5fbc-4bf7-b6f5-fabee4e4e388",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = \"not a valid value\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "05caaf66-b0ab-467e-bd90-4dafc23c0289"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c3ffd7b4-19de-4cd4-8077-f85380c1e58a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1e87f3d1-f27d-4803-a654-e8e219475f25"
                        }
                      }
                    ]
                  }
                ],
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "420da107-6b9d-4659-a5d3-b9ed8cc99b8a",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "3b4aedde-5c7c-4b5f-884d-49c96e1e893f"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "886fca0d-b478-43ec-89c1-c91667421d69",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 400\", function () {",
                        " pm.response.to.have.status(400);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "e85c35cb-59c6-448e-9e93-0cbb276d92f3"
                    }
                  }
                ]
              },
              {
                "id": "03109af4-1083-43fc-982a-6629fa7da72a",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "3d050576-3822-452a-bc83-75fb950ab2d6",
                    "name": "credentials_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6a7e71a7-a0ab-4ea2-b45d-d19bdb5f668f",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"valid_vc\")));"
                          ],
                          "_lastExecutionId": "19ff52b3-e360-45ff-ab29-b300cf8af871"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8f0ba040-cecc-4786-a25f-98d69ac6ef0e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "48957ceb-c9dd-49a1-af73-dd3c6897f45a"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "9a5cd9b0-0efa-4163-8282-b03d67e5a360",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "43ebde02-671d-49d8-b28c-c9330bb69454"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "6c00407c-d2a8-4ecb-a40c-4f529c95cc37",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "f151c809-f7b9-461a-b2f5-1b2ec2d80b23"
                    }
                  }
                ]
              },
              {
                "id": "879109c0-c3d8-4342-94c9-d83bac45c707",
                "name": "Bad Signature",
                "item": [
                  {
                    "id": "d2723d5b-c43f-4858-88ee-97cc1556dc92",
                    "name": "credentials_verify:bad_signature",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"id\": \"urn:uuid:e22ccc92-2c81-411f-a80f-e7f8334000a7\",\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..mvbcalofPOi7o7nxByyxXCuSOKXuGFM7_W9a8N62-EERarrH4p4T_0c2ZfGnGLiHOvY6Q-dyy38t9HPvXy-MBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e9a8ef28-3d14-4d8d-a7e4-a80dcd7ca438",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 200\", function () {",
                            " pm.response.to.have.status(200);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            "pm.test(\"response verified is false\", function() {",
                            " const { verified } = pm.response.json();",
                            " pm.expect(verified).to.be.false;",
                            "});"
                          ],
                          "_lastExecutionId": "fc1f6550-b4a7-4465-a19b-7846e42db90b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "505248ef-a07d-4cf0-b0be-cbab5d952a79",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b31be5da-d4c2-436c-a00b-c54f3f141bd4"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "36fe0424-b261-489c-8575-b89914bee02c",
            "name": "Positive Testing",
            "item": [
              {
                "id": "e296ec12-64fd-4731-88e6-9a78d50a9b45",
                "name": "credentials_verify",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "8c3ecce8-4883-4c41-ad64-c359fcd2e07a",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "1be72f14-ca16-4633-af1e-9c09facd095f"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "856f1036-9e63-4af0-9e5b-85b205864bc2",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "e1fc0fb9-47e1-4958-9bc4-29cdd9739a69"
                    }
                  }
                ]
              },
              {
                "id": "8fa8a51d-807e-435e-9ad9-95cdc3d1773e",
                "name": "credentials_verify:issuer:object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\"\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "acf653cc-c7e8-42de-9589-b26766c9c750",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "06568fe6-63d2-4af5-a8da-7d3ded936a22"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "7f61fa3f-902d-4759-a0f8-eca2591666de",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "cdffb66f-5f5d-438d-a684-e948bafbe532"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "51ccfb72-c485-40a0-9de2-17987f0f5836",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Dummy VC issued for testing",
                "pm.variables.set(\"valid_vc\", {",
                "    \"@context\": [",
                "        \"https://www.w3.org/2018/credentials/v1\"",
                "    ],",
                "    \"credentialSubject\": {",
                "        \"id\": \"did:example:123\"",
                "    },",
                "    \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",",
                "    \"issuanceDate\": \"2006-01-02T15:04:05Z\",",
                "    \"issuer\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\",",
                "    \"proof\": {",
                "        \"created\": \"2020-04-02T18:48:36Z\",",
                "        \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..R618vVfGIF2jTe5dVkzMqQYIFKoIkyK_3_35z15tp_aFzew_4ruQt2DcaxdtkwsRff7bFsrVfigTl_XeE3tPDA\",",
                "        \"proofPurpose\": \"assertionMethod\",",
                "        \"type\": \"Ed25519Signature2018\",",
                "        \"verificationMethod\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV#z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\"",
                "    },",
                "    \"type\": \"VerifiableCredential\"",
                "});",
                ""
              ],
              "_lastExecutionId": "2cd9c8f3-66b7-46c9-a6c0-fa6e50982574"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "ae12bc39-0ccc-47cb-8d3e-4687c9c0e6d1",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "72495061-fb45-4c39-b246-623e1fc9ad6f"
            }
          }
        ]
      },
      {
        "id": "1e7cf546-5d31-414a-b049-85cd4c1fb31d",
        "name": "Presentations - Present",
        "item": [
          {
            "id": "17759813-3ae1-4889-9344-e9ca2d8ae863",
            "name": "Negative Testing",
            "item": [
              {
                "id": "a2734cfe-6c1a-43d1-99bb-f0bbf4be1726",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "3e2b3aec-9719-4e7f-93ae-0fc4d2fc8c71",
                    "name": "presentations:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "aa32be38-de2d-4fcf-a6ee-678a43050743",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "50ce0785-7803-42a3-87c5-f62ff4631396"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2c2e7c89-d346-4577-89f1-3b84222046ce",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "ae50cd1a-1787-4e1e-8afb-2c136a77de11"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "a1dcbbcd-8eae-4fcc-89d4-ad493366df43",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "f0517112-d31e-4535-a7dd-4f276a793254"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "44e3cadb-f9b2-440e-838f-249efeaa0d8a",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "bc8a3424-c52b-495c-84ec-906d57ee92b2"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "352a79be-59e7-4a9f-bf7e-37ce0e2adbc5",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "b89623ab-3cec-4ef3-bbea-11a80f92fccd"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "a0301b33-de7f-4565-9543-76a1ade36c5c",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "e538d73c-b5d7-40ac-9ee3-8045083b02e2"
            }
          }
        ]
      },
      {
        "id": "fa5bc83b-fd37-46f7-a685-c64413d0db42",
        "name": "Presentations - Create",
        "item": [
          {
            "id": "517ac314-1c80-48bd-8dfd-b9e40008b54a",
            "name": "Negative Testing",
            "item": [
              {
                "id": "b1ef8d0e-2f19-438c-a0d2-b915446b2ca9",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "61582d31-33fb-4dc4-9c93-ceff428134c0",
                    "name": "presentations_prove:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "29c219f3-1a02-4b7f-aef8-7af9d58ff44f",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "f50f0d40-d5e1-420b-a841-fbbab304d49d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ae1ee900-1db4-49b6-87b1-084c7cbaab52",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "a060002a-063c-4346-81dd-4c6558201ac0"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "b00dc367-2a0f-4cd8-b1fb-cc62cae10a32",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "2678f35b-1d37-41b6-924b-100b5246c7ee"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "f0397027-519d-469b-8f39-3e878073e7fd",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "94e5f7c1-6bec-4d9f-b7dd-580eebf327fa"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "38daa2c5-57dc-4518-ae2e-7495bdbd470c",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "a9c2c818-1787-4878-ba01-04136f560dbf"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "f1a8e5a6-f088-4c95-9eb9-8abbdd6e5350",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "a1c318eb-528a-4387-8987-f58c74bf53cd"
            }
          }
        ]
      },
      {
        "id": "ee52376e-21eb-44e4-a09d-6388d3c42803",
        "name": "Presentations - Verify",
        "item": [
          {
            "id": "4e955aff-6b76-4a5c-99ef-41454d8b2e55",
            "name": "Negative Testing",
            "item": [
              {
                "id": "1f46ec51-63f2-4887-9440-cffb256c31aa",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "2f009b43-e93b-461d-bcef-02b5b08176f0",
                    "name": "presentations_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b4baeede-f234-4cd4-8908-e2003a650106",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "c5e22247-0495-43a7-aacf-5dc062006724"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bc0a36f6-1672-4896-9553-9bde39356028",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "9a644dfc-2ec7-4811-aeef-6724be4451e7"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "b3f4c9ac-bf4f-4362-9d7e-8c249a64a53f",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "ff2dc1c2-a4a0-4dcd-a19b-8527dc06eab8"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "0b700af7-86e6-4023-be24-2ff0f03a9d2e",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "51ee31be-e8df-4f42-9d48-edf4dead68c7"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "7060211a-57ba-41b1-ab47-2a3f7dd28b8b",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "460bc319-2afe-490f-9ccb-7b810a68ce71"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "7337ea44-36dd-494a-a079-5c80872e384a",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "f6e180e6-1de6-4aca-9231-1f62931c6809"
            }
          }
        ]
      },
      {
        "id": "3e8e5874-2add-40dd-b0aa-035d3df7b355",
        "name": "Presentations - Notify",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "a6555c06-ae07-4ec7-b99f-7034e25151c0",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "9c29d57e-1f7f-463c-bf96-c4e0acf4e5ce",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      },
      {
        "id": "ce59c136-351b-47c1-91aa-fe45d86d0c4f",
        "name": "Presentations - Submit",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "c7366abf-7d73-44f2-9a4e-7a84e8b4eee1",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "9a0516da-6b98-4a6b-a939-d5a31e32bd48",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      }
    ]
  },
  "run": {
    "stats": {
      "iterations": {
        "total": 1,
        "pending": 0,
        "failed": 0
      },
      "items": {
        "total": 283,
        "pending": 0,
        "failed": 0
      },
      "scripts": {
        "total": 2091,
        "pending": 0,
        "failed": 0
      },
      "prerequests": {
        "total": 283,
        "pending": 0,
        "failed": 0
      },
      "requests": {
        "total": 285,
        "pending": 0,
        "failed": 0
      },
      "tests": {
        "total": 283,
        "pending": 0,
        "failed": 0
      },
      "assertions": {
        "total": 573,
        "pending": 0,
        "failed": 69
      },
      "testScripts": {
        "total": 1050,
        "pending": 0,
        "failed": 0
      },
      "prerequestScripts": {
        "total": 1041,
        "pending": 0,
        "failed": 0
      }
    },
    "timings": {
      "responseAverage": 100.29824561403508,
      "responseMin": 23,
      "responseMax": 616,
      "responseSd": 69.54492802833293,
      "dnsAverage": 0,
      "dnsMin": 0,
      "dnsMax": 0,
      "dnsSd": 0,
      "firstByteAverage": 0,
      "firstByteMin": 0,
      "firstByteMax": 0,
      "firstByteSd": 0,
      "started": 1698280362590,
      "completed": 1698280403622
    },
    "executions": [
      {
        "id": "b3a9bf43-a430-4ee3-b0a6-fa70bdceab90",
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 283,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "8d6ea89f-e233-4a06-8412-9b18923b56b6",
          "httpRequestId": "f8ef050d-8f97-4bfb-ba57-39c37c740710"
        },
        "item": {
          "id": "b3a9bf43-a430-4ee3-b0a6-fa70bdceab90",
          "name": "Clear Token Cache"
        },
        "response": {
          "id": "2b8e9aa8-be2a-4a56-beb5-39f5365364fc",
          "status": "OK",
          "code": 200,
          "responseTime": 106,
          "responseSize": 0
        }
      },
      {
        "id": "0627db25-2b86-43bd-856c-aec194957025",
        "cursor": {
          "ref": "8092fc42-d9f6-4e33-a561-9ab56dae5cf6",
          "length": 283,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "a6a3e3d9-027b-4b59-aca7-7dc2c5a649f2"
        },
        "item": {
          "id": "0627db25-2b86-43bd-856c-aec194957025",
          "name": "Clear DID Web Cache"
        },
        "response": {
          "id": "9d9b63ee-d204-4270-9e1a-fa597f9c8493",
          "status": "OK",
          "code": 200,
          "responseTime": 23,
          "responseSize": 0
        }
      },
      {
        "id": "6ffe1ddf-0106-451d-aa7c-37703051d760",
        "cursor": {
          "ref": "b13a12e4-c32d-48e4-aae1-d323691bfe4e",
          "length": 283,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "8bdf3192-6f1d-4edf-ba5f-4c5265f94f33"
        },
        "item": {
          "id": "6ffe1ddf-0106-451d-aa7c-37703051d760",
          "name": "did_json"
        },
        "response": {
          "id": "8d00e3d6-2511-4781-91b8-ba9d89646792",
          "status": "OK",
          "code": 200,
          "responseTime": 313,
          "responseSize": 1446
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "391c1605-2434-4260-9541-ce3be0a30cc3",
        "cursor": {
          "ref": "af9d6ae4-d391-4d7d-9069-5e75080f3b2a",
          "length": 283,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "c5a05c9a-3463-40b4-899b-b5f934ab5c99"
        },
        "item": {
          "id": "391c1605-2434-4260-9541-ce3be0a30cc3",
          "name": "did:invalid"
        },
        "response": {
          "id": "03293656-fb15-4f50-a236-2a5b1f1b065b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 145,
          "responseSize": 81
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "391c1605-2434-4260-9541-ce3be0a30cc3",
        "cursor": {
          "ref": "af9d6ae4-d391-4d7d-9069-5e75080f3b2a",
          "length": 283,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "c5a05c9a-3463-40b4-899b-b5f934ab5c99"
        },
        "item": {
          "id": "391c1605-2434-4260-9541-ce3be0a30cc3",
          "name": "did:invalid"
        },
        "response": {
          "id": "03293656-fb15-4f50-a236-2a5b1f1b065b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 145,
          "responseSize": 81
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5f39f945-e26a-4e35-a366-eac2de651d92",
        "cursor": {
          "ref": "e53246e7-e5d7-418b-a435-fc78138c5841",
          "length": 283,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "6acd9a3b-8927-4da4-ab5e-01b24961a0bd"
        },
        "item": {
          "id": "5f39f945-e26a-4e35-a366-eac2de651d92",
          "name": "did:not_found:did_web"
        },
        "response": {
          "id": "48fd8a31-ad06-4497-ab61-a2091f31b3e5",
          "status": "Not Found",
          "code": 404,
          "responseTime": 129,
          "responseSize": 53
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "07bd23c4-31a8-43fc-bb56-61ad9dd5be90",
        "cursor": {
          "ref": "933ef8c1-aa47-42c9-84c2-2f2a9eccc1a5",
          "length": 283,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "7c33a897-93c3-46df-968a-29a693bdaa75"
        },
        "item": {
          "id": "07bd23c4-31a8-43fc-bb56-61ad9dd5be90",
          "name": "did:not_found:urn"
        },
        "response": {
          "id": "b20301ca-952b-434f-bb44-204ed54a14bb",
          "status": "Not Found",
          "code": 404,
          "responseTime": 79,
          "responseSize": 86
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b97fae1c-2595-42f8-9ae0-085b89a1fc50",
        "cursor": {
          "ref": "93265b5e-bdf9-4cb3-b30e-22246a4be684",
          "length": 283,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "e47bb23e-8c82-486c-b864-fd39db9183c6"
        },
        "item": {
          "id": "b97fae1c-2595-42f8-9ae0-085b89a1fc50",
          "name": "identifiers:missing_auth"
        },
        "response": {
          "id": "5fa6389c-c527-4b88-8d11-9842a2fd35c5",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 66,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "13c827e6-6ffb-4348-9c8b-5289c5f23079",
        "cursor": {
          "ref": "78237b4d-92eb-41a1-a560-80bbbc2a0b36",
          "length": 283,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "a3bd446a-9a0b-4a2c-b6bb-0a6a05c90645"
        },
        "item": {
          "id": "13c827e6-6ffb-4348-9c8b-5289c5f23079",
          "name": "identifiers"
        },
        "response": {
          "id": "45a97a42-f8e3-4fb9-91bb-cad849edd39c",
          "status": "OK",
          "code": 200,
          "responseTime": 119,
          "responseSize": 1462
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c1576d31-2822-454e-9de8-fb7e284a9f7a",
        "cursor": {
          "ref": "aa56cab0-a90b-483b-aa20-0112d18419dc",
          "length": 283,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "626cb1bf-04d1-44c2-9d5c-1528b3e99ae1"
        },
        "item": {
          "id": "c1576d31-2822-454e-9de8-fb7e284a9f7a",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "b90afa4c-01f5-48a4-ba5e-961df218c12c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 85,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b7d01f25-1fbc-4250-941b-9d963b78cfa4",
        "cursor": {
          "ref": "75f39dd3-e1b7-439f-bd04-3bd4913bba1a",
          "length": 283,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "7f850506-53e8-44db-8430-c953e503c7e7"
        },
        "item": {
          "id": "b7d01f25-1fbc-4250-941b-9d963b78cfa4",
          "name": "credentials_issue:credential.@context:missing"
        },
        "response": {
          "id": "6d16e006-5e68-4cba-bd79-aefca0f08f63",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 77,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dc4bb554-f874-4c98-9770-b5538c74ad97",
        "cursor": {
          "ref": "be500ce0-7a71-424b-b46b-48226ca462f0",
          "length": 283,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "ae2d92be-da9f-4225-907a-301b680ca8af"
        },
        "item": {
          "id": "dc4bb554-f874-4c98-9770-b5538c74ad97",
          "name": "credentials_issue:credential.@context:boolean"
        },
        "response": {
          "id": "07272e91-0edb-4a5c-b1a4-823972e89ade",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 80,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5c16f7db-f445-458b-91c9-e957da2452cd",
        "cursor": {
          "ref": "a94784a0-b9a2-40f7-ae4b-8328db1235d6",
          "length": 283,
          "cycles": 1,
          "position": 11,
          "iteration": 0,
          "httpRequestId": "87b85aa7-a3d0-4e4c-8e51-89b085202869"
        },
        "item": {
          "id": "5c16f7db-f445-458b-91c9-e957da2452cd",
          "name": "credentials_issue:credential.@context:integer Copy"
        },
        "response": {
          "id": "26e66f5a-e07e-4dbb-b6a3-02920ad22c4e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 79,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0e540212-d1ac-4f09-90db-b1b80a7ec396",
        "cursor": {
          "ref": "4e0a2f8c-768b-418b-b855-fa982f8b53fa",
          "length": 283,
          "cycles": 1,
          "position": 12,
          "iteration": 0,
          "httpRequestId": "0d91ae23-1a5d-4f67-b009-c700cdead176"
        },
        "item": {
          "id": "0e540212-d1ac-4f09-90db-b1b80a7ec396",
          "name": "credentials_issue:credential.@context:null"
        },
        "response": {
          "id": "2d8ba1bf-fdad-422f-9d46-be3dd39274fd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 75,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e01fd1c2-abea-4358-b4e9-3c10bfb32279",
        "cursor": {
          "ref": "155cf3e3-ce4a-4df6-8afd-1657b56a18f3",
          "length": 283,
          "cycles": 1,
          "position": 13,
          "iteration": 0,
          "httpRequestId": "83ec439c-0bed-4d36-a097-5db63c08c1c6"
        },
        "item": {
          "id": "e01fd1c2-abea-4358-b4e9-3c10bfb32279",
          "name": "credentials_issue:credential.@context:object"
        },
        "response": {
          "id": "7308595d-ff25-4e7e-810f-98824044bb3d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 79,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ccfdf8ed-6305-4912-9e43-eb6584842440",
        "cursor": {
          "ref": "c1216d4b-eda0-4ab9-a3c2-aec38d5f66ad",
          "length": 283,
          "cycles": 1,
          "position": 14,
          "iteration": 0,
          "httpRequestId": "4b6db686-cca7-458b-a9fc-da71fe7f6f67"
        },
        "item": {
          "id": "ccfdf8ed-6305-4912-9e43-eb6584842440",
          "name": "credentials_issue:credential.@context:string"
        },
        "response": {
          "id": "76334824-0d1a-44f4-a45a-08a4efcda690",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 79,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8b2d3c0f-1a5f-41a1-981a-62855cecaad1",
        "cursor": {
          "ref": "aa3a5686-8603-488c-9b9e-d49959801214",
          "length": 283,
          "cycles": 1,
          "position": 15,
          "iteration": 0,
          "httpRequestId": "45e9f54d-089c-481b-9406-7e4cf2a0c140"
        },
        "item": {
          "id": "8b2d3c0f-1a5f-41a1-981a-62855cecaad1",
          "name": "credentials_issue:credential.@context.item.array"
        },
        "response": {
          "id": "ecc2d59d-28e8-4154-bd3a-17899df1485a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 75,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2de1aad3-0475-45a0-93c2-d92cdbbe0615",
        "cursor": {
          "ref": "18ded2b6-7867-4dcd-b884-d906de0f0c28",
          "length": 283,
          "cycles": 1,
          "position": 16,
          "iteration": 0,
          "httpRequestId": "80edb1a5-c8dd-4784-b682-0ee7ce8cf529"
        },
        "item": {
          "id": "2de1aad3-0475-45a0-93c2-d92cdbbe0615",
          "name": "credentials_issue:credential.@context.item.boolean"
        },
        "response": {
          "id": "d4847ec5-4853-4eb6-a020-8e4bd83b08a7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 79,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "20507732-c8cb-4002-9be9-ccf919633d1f",
        "cursor": {
          "ref": "c7814710-39d4-493b-bc31-64ae040983be",
          "length": 283,
          "cycles": 1,
          "position": 17,
          "iteration": 0,
          "httpRequestId": "e26a0a45-35a9-49a6-ad70-79133a510f4f"
        },
        "item": {
          "id": "20507732-c8cb-4002-9be9-ccf919633d1f",
          "name": "credentials_issue:credential.@context.item.integer"
        },
        "response": {
          "id": "b8579df8-c5d6-4413-b005-0fc2de05fd86",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 80,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e5ba69c8-a44c-4e85-b11f-61fc4b3e5769",
        "cursor": {
          "ref": "5b55fc12-194d-45ee-a567-238a7fc2e7a1",
          "length": 283,
          "cycles": 1,
          "position": 18,
          "iteration": 0,
          "httpRequestId": "91764f72-ea61-4470-bbeb-8213ff77101b"
        },
        "item": {
          "id": "e5ba69c8-a44c-4e85-b11f-61fc4b3e5769",
          "name": "credentials_issue:credential.@context.item.null"
        },
        "response": {
          "id": "8c5b3298-6279-4078-8219-449eca5d4e9f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 78,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "adeaccbe-0929-4fad-8e5c-52e946d03c6c",
        "cursor": {
          "ref": "a00ea1ea-86f0-4f3c-864e-c04a272fc137",
          "length": 283,
          "cycles": 1,
          "position": 19,
          "iteration": 0,
          "httpRequestId": "0be1ba02-0240-452c-a7cd-d27bacad5eda"
        },
        "item": {
          "id": "adeaccbe-0929-4fad-8e5c-52e946d03c6c",
          "name": "credentials_issue:credential.@context.item.object"
        },
        "response": {
          "id": "9c13084f-3195-481e-ae2c-ba83c1e8cbb8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 79,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c8b5bafd-5ca3-488d-be09-0f48fe27c75b",
        "cursor": {
          "ref": "a1af53ee-a28b-4018-8339-114e023ef7f0",
          "length": 283,
          "cycles": 1,
          "position": 20,
          "iteration": 0,
          "httpRequestId": "62388890-1c7d-41cc-a6a9-b664f6ce2194"
        },
        "item": {
          "id": "c8b5bafd-5ca3-488d-be09-0f48fe27c75b",
          "name": "credentials_issue:credential.id:array"
        },
        "response": {
          "id": "c931a56c-20a4-4f0d-8ba9-104459b72b04",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 75,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7c341d44-ad8a-4061-8394-c0a31fc99faf",
        "cursor": {
          "ref": "c9228bb8-c77e-4ab0-bb10-12846f008328",
          "length": 283,
          "cycles": 1,
          "position": 21,
          "iteration": 0,
          "httpRequestId": "c5ecda2d-58fc-494d-b474-246dff0e2473"
        },
        "item": {
          "id": "7c341d44-ad8a-4061-8394-c0a31fc99faf",
          "name": "credentials_issue:credential.id:boolean"
        },
        "response": {
          "id": "d0f38382-18a1-4538-983c-f07dac4b8ac3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 77,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ed156fcd-f74a-4e3e-8ea6-4fadc729fc9b",
        "cursor": {
          "ref": "fc84e80f-4bf1-4b23-995c-c943cfbf283a",
          "length": 283,
          "cycles": 1,
          "position": 22,
          "iteration": 0,
          "httpRequestId": "c732b931-1d6f-4f0f-bc59-638384dd66c2"
        },
        "item": {
          "id": "ed156fcd-f74a-4e3e-8ea6-4fadc729fc9b",
          "name": "credentials_issue:credential.id:integer"
        },
        "response": {
          "id": "85ad9fbc-2833-4f50-9950-e939a68cc7da",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 78,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8992532f-7108-425e-af78-d9919f87a315",
        "cursor": {
          "ref": "7ddf2298-7f72-4729-84f1-2ea00095c9d6",
          "length": 283,
          "cycles": 1,
          "position": 23,
          "iteration": 0,
          "httpRequestId": "67bd7390-b1d0-4c00-b796-af033a374b69"
        },
        "item": {
          "id": "8992532f-7108-425e-af78-d9919f87a315",
          "name": "credentials_issue:credential.id:null"
        },
        "response": {
          "id": "f6d5198f-b734-4355-824d-ab78a4d2baee",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 79,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "53a1999a-e2cd-49d6-b0e3-dd3116b09d27",
        "cursor": {
          "ref": "5e1b2df1-ec56-47f7-a534-e6ac9e5ad8a8",
          "length": 283,
          "cycles": 1,
          "position": 24,
          "iteration": 0,
          "httpRequestId": "13faa127-1a8c-4953-8ce1-fc2db456bbb3"
        },
        "item": {
          "id": "53a1999a-e2cd-49d6-b0e3-dd3116b09d27",
          "name": "credentials_issue:credential.id:object"
        },
        "response": {
          "id": "d0388e18-1dfb-4e90-843f-ba60d11b2647",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 76,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f3cc482b-c5ad-4647-8535-e2a029ca0c14",
        "cursor": {
          "ref": "65aeb70a-e8d8-40f3-99b8-3dff40e18134",
          "length": 283,
          "cycles": 1,
          "position": 25,
          "iteration": 0,
          "httpRequestId": "9a7288ec-3b8e-4338-b0b4-2c42fbb7b5eb"
        },
        "item": {
          "id": "f3cc482b-c5ad-4647-8535-e2a029ca0c14",
          "name": "credentials_issue:credential.type:missing"
        },
        "response": {
          "id": "81cb8de7-357f-4d7d-a2e2-6f6577df34d7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 79,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a418011f-c04f-4957-875b-4b3639f65aa8",
        "cursor": {
          "ref": "ab08a09f-5eea-4ab3-ac5c-8dcb7ebcf4e9",
          "length": 283,
          "cycles": 1,
          "position": 26,
          "iteration": 0,
          "httpRequestId": "75047403-1ec0-452d-b6be-b8e21c45be36"
        },
        "item": {
          "id": "a418011f-c04f-4957-875b-4b3639f65aa8",
          "name": "credentials_issue:credential.type:boolean"
        },
        "response": {
          "id": "7b9ba874-003a-4fee-be89-44b1d17d07ce",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 80,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bfdb129f-85ed-4621-8093-155ba8389b2c",
        "cursor": {
          "ref": "d9d3ea9c-2c3d-4b1f-b163-e8c610f85fa7",
          "length": 283,
          "cycles": 1,
          "position": 27,
          "iteration": 0,
          "httpRequestId": "ba26eb32-9186-46fb-873b-b7605e393f40"
        },
        "item": {
          "id": "bfdb129f-85ed-4621-8093-155ba8389b2c",
          "name": "credentials_issue:credential.type:integer"
        },
        "response": {
          "id": "32e20d62-0a9a-458e-b3ff-4460fedf8217",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 74,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8d6e556c-e194-499a-b9a7-1152560df6cc",
        "cursor": {
          "ref": "4e6c90a7-32f0-4ba2-891a-f8e86132e633",
          "length": 283,
          "cycles": 1,
          "position": 28,
          "iteration": 0,
          "httpRequestId": "b5e43e71-af5c-43ca-8d64-8c8d06cbb1c3"
        },
        "item": {
          "id": "8d6e556c-e194-499a-b9a7-1152560df6cc",
          "name": "credentials_issue:credential.type:null"
        },
        "response": {
          "id": "82586f13-c0f3-4039-b0ab-bef594532f1d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 87,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "10816fe9-0e47-4a70-bc61-75dd80f781e2",
        "cursor": {
          "ref": "4c4820b4-6f1f-43ce-9b01-e97560803dab",
          "length": 283,
          "cycles": 1,
          "position": 29,
          "iteration": 0,
          "httpRequestId": "4e8bb6cd-4fc6-4598-bb31-328805a310bb"
        },
        "item": {
          "id": "10816fe9-0e47-4a70-bc61-75dd80f781e2",
          "name": "credentials_issue:credential.type:object"
        },
        "response": {
          "id": "c2109ad1-4849-4785-ae8a-b0216efb7e04",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 75,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8b67cc0f-aab7-47ca-94f1-12e6ed2423cf",
        "cursor": {
          "ref": "763af5de-6577-4da6-89bb-4d0a8abddc2b",
          "length": 283,
          "cycles": 1,
          "position": 30,
          "iteration": 0,
          "httpRequestId": "32f93ab4-d8b9-4111-9c33-1677eba7b930"
        },
        "item": {
          "id": "8b67cc0f-aab7-47ca-94f1-12e6ed2423cf",
          "name": "credentials_issue:credential.type:string"
        },
        "response": {
          "id": "2ced8e49-6c2f-4f19-9b7e-8205646afb40",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 81,
          "responseSize": 107
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b2ba708e-01e3-4cac-b5f9-91c6f55d990b",
        "cursor": {
          "ref": "1d1f4458-e635-471d-8597-6c3e3fa3cfec",
          "length": 283,
          "cycles": 1,
          "position": 31,
          "iteration": 0,
          "httpRequestId": "14618c33-bddb-46df-bc68-59d6cdec000c"
        },
        "item": {
          "id": "b2ba708e-01e3-4cac-b5f9-91c6f55d990b",
          "name": "credentials_issue:credential.type.item:missing"
        },
        "response": {
          "id": "a42cda5f-6cf9-4598-9cea-d3586fe30dc2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 82,
          "responseSize": 107
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "413ddbc2-c953-4215-84c3-91e071df7bf4",
        "cursor": {
          "ref": "25a68101-96fc-46c8-9e85-33a5887cc95c",
          "length": 283,
          "cycles": 1,
          "position": 32,
          "iteration": 0,
          "httpRequestId": "f209518b-4aaf-4dc1-adab-4cec6dd52064"
        },
        "item": {
          "id": "413ddbc2-c953-4215-84c3-91e071df7bf4",
          "name": "credentials_issue:credential.type.item:array"
        },
        "response": {
          "id": "965cd545-d686-462d-8ac6-2fb00eeaa03a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 76,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dba4544a-4833-4302-9b4f-e3e8f16122fb",
        "cursor": {
          "ref": "cb96731e-3868-4b27-b0fb-425dd10f347e",
          "length": 283,
          "cycles": 1,
          "position": 33,
          "iteration": 0,
          "httpRequestId": "8ad2c6ce-e844-4ace-872f-439988cf7f68"
        },
        "item": {
          "id": "dba4544a-4833-4302-9b4f-e3e8f16122fb",
          "name": "credentials_issue:credential.type.item:boolean"
        },
        "response": {
          "id": "44989f0e-9a28-4229-9310-a13f26a34fb9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 76,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "68a239d4-313a-461e-ab7e-b9b1a4e774ea",
        "cursor": {
          "ref": "7c4420e8-c414-4e33-958f-c9a99ee8e078",
          "length": 283,
          "cycles": 1,
          "position": 34,
          "iteration": 0,
          "httpRequestId": "abd230a9-3ec6-4c50-af18-581328d3dcfb"
        },
        "item": {
          "id": "68a239d4-313a-461e-ab7e-b9b1a4e774ea",
          "name": "credentials_issue:credential.type.item:integer"
        },
        "response": {
          "id": "b2497fdf-12ad-44be-8a0e-8746ecffdf73",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 79,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "85f9fd4d-5011-4f0b-bdf6-87eb23d68049",
        "cursor": {
          "ref": "edae5ba5-ee01-4f01-8564-b829b6eb3523",
          "length": 283,
          "cycles": 1,
          "position": 35,
          "iteration": 0,
          "httpRequestId": "5e3445f1-7709-4d2f-a837-0ead97adcc52"
        },
        "item": {
          "id": "85f9fd4d-5011-4f0b-bdf6-87eb23d68049",
          "name": "credentials_issue:credential.type.item:null"
        },
        "response": {
          "id": "8a6facaf-e1c7-4fbd-bdb2-fb43a6c5976f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 81,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6ede5ea8-c1fc-4ddd-85d2-5c4d4f37c8c4",
        "cursor": {
          "ref": "fd1011cf-b398-4d08-82d5-5703583c2365",
          "length": 283,
          "cycles": 1,
          "position": 36,
          "iteration": 0,
          "httpRequestId": "e38497ef-af4c-4e57-8962-9f52312c44b2"
        },
        "item": {
          "id": "6ede5ea8-c1fc-4ddd-85d2-5c4d4f37c8c4",
          "name": "credentials_issue:credential.type.item:object"
        },
        "response": {
          "id": "70548a23-c482-4101-a4b7-5efd7c6a5c8c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 73,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "15223117-ead0-4ea2-a8c2-db6e11cf81ac",
        "cursor": {
          "ref": "5383d40c-0c41-4f6d-b2b0-183fdd840d20",
          "length": 283,
          "cycles": 1,
          "position": 37,
          "iteration": 0,
          "httpRequestId": "7018f387-e3cb-4c60-bea2-46cd44ce5dfc"
        },
        "item": {
          "id": "15223117-ead0-4ea2-a8c2-db6e11cf81ac",
          "name": "credentials_issue:credential.issuer:missing"
        },
        "response": {
          "id": "d878a0ff-f1e4-47ad-b388-b7e86a927fee",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 83,
          "responseSize": 96
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4d4d4c4a-e916-4d29-b427-29657bb7f672",
        "cursor": {
          "ref": "14a3ceb2-624a-45d1-9a2c-cb626bff5685",
          "length": 283,
          "cycles": 1,
          "position": 38,
          "iteration": 0,
          "httpRequestId": "dad72eb0-470c-4471-9b71-749f4fc02cd6"
        },
        "item": {
          "id": "4d4d4c4a-e916-4d29-b427-29657bb7f672",
          "name": "credentials_issue:credential.issuer:array"
        },
        "response": {
          "id": "80de1f23-21a4-456e-a2a6-20b98fe5cf1b",
          "status": "Created",
          "code": 201,
          "responseTime": 616,
          "responseSize": 691
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:39)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:39)"
            }
          }
        ]
      },
      {
        "id": "6da80b3c-da3a-4344-907f-fdf2d727f2c8",
        "cursor": {
          "ref": "449224ba-ed98-4555-af85-c308ce5d1d6f",
          "length": 283,
          "cycles": 1,
          "position": 39,
          "iteration": 0,
          "httpRequestId": "9d5272d0-e9cc-4366-8353-36df1c392768"
        },
        "item": {
          "id": "6da80b3c-da3a-4344-907f-fdf2d727f2c8",
          "name": "credentials_issue:credential.issuer:boolean"
        },
        "response": {
          "id": "374ef6c3-d007-419d-aefe-cd7de5552fe3",
          "status": "Created",
          "code": 201,
          "responseTime": 273,
          "responseSize": 650
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:40)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:40)"
            }
          }
        ]
      },
      {
        "id": "3af81a59-358f-4997-9d9a-b2575275f20e",
        "cursor": {
          "ref": "0176f745-9868-4385-b948-8e67cb56a007",
          "length": 283,
          "cycles": 1,
          "position": 40,
          "iteration": 0,
          "httpRequestId": "08025694-e4ff-40c2-8955-513cb94de5f8"
        },
        "item": {
          "id": "3af81a59-358f-4997-9d9a-b2575275f20e",
          "name": "credentials_issue:credential.issuer:integer"
        },
        "response": {
          "id": "74c7e85f-e0ba-4c8b-a497-4b6d8e42e60d",
          "status": "Created",
          "code": 201,
          "responseTime": 412,
          "responseSize": 647
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:41)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:41)"
            }
          }
        ]
      },
      {
        "id": "5573c509-932b-4b84-9643-adf95a494fd9",
        "cursor": {
          "ref": "8aafeca9-6e93-45e7-9560-13f79ed8a360",
          "length": 283,
          "cycles": 1,
          "position": 41,
          "iteration": 0,
          "httpRequestId": "352393e5-b324-4ea2-b79a-17b55d05af59"
        },
        "item": {
          "id": "5573c509-932b-4b84-9643-adf95a494fd9",
          "name": "credentials_issue:credential.issuer:null"
        },
        "response": {
          "id": "e372297b-7f2b-48e4-9c5e-d3da0515a086",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 87,
          "responseSize": 96
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "aec8f27f-5b47-4d55-8d28-191bdc601434",
        "cursor": {
          "ref": "094aa067-b7ee-4cf7-91c3-e62c58e4ecc2",
          "length": 283,
          "cycles": 1,
          "position": 42,
          "iteration": 0,
          "httpRequestId": "5850a832-51fd-44a1-970d-740095c371d3"
        },
        "item": {
          "id": "aec8f27f-5b47-4d55-8d28-191bdc601434",
          "name": "credentials_issue.credential.issuer:invalid"
        },
        "response": {
          "id": "75af3ea3-63a6-4e09-b840-63af6e5edb26",
          "status": "Created",
          "code": 201,
          "responseTime": 253,
          "responseSize": 656
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:43)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:43)"
            }
          }
        ]
      },
      {
        "id": "01170a03-2cc3-408e-9ca3-d54934a36485",
        "cursor": {
          "ref": "97948c73-cf7d-4f41-9590-740da11cf0d7",
          "length": 283,
          "cycles": 1,
          "position": 43,
          "iteration": 0,
          "httpRequestId": "00345f4b-d072-4616-9ffd-8bde29b5fd10"
        },
        "item": {
          "id": "01170a03-2cc3-408e-9ca3-d54934a36485",
          "name": "credentials_issue.credential.issuer:unknown"
        },
        "response": {
          "id": "5bb2cd92-8701-4a9a-b292-3e9d01c86a31",
          "status": "Created",
          "code": 201,
          "responseTime": 254,
          "responseSize": 692
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 201",
              "stack": "AssertionError: expected response to have status code 422 but got 201\n   at Object.eval sandbox-script.js:1:44)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:44)"
            }
          }
        ]
      },
      {
        "id": "ebc86a24-c20d-46bf-91b4-42d4268e9ae3",
        "cursor": {
          "ref": "66ddcc9c-c8a5-4c79-a3be-3908886621f3",
          "length": 283,
          "cycles": 1,
          "position": 44,
          "iteration": 0,
          "httpRequestId": "46728032-9b2f-43cb-b5fb-5c4195b9983b"
        },
        "item": {
          "id": "ebc86a24-c20d-46bf-91b4-42d4268e9ae3",
          "name": "credentials_issue:credential.issuer.id:missing"
        },
        "response": {
          "id": "14277630-79a3-4202-8fa4-10e674e065b4",
          "status": "Created",
          "code": 201,
          "responseTime": 252,
          "responseSize": 647
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:45)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:45)"
            }
          }
        ]
      },
      {
        "id": "b73a9e97-0a70-4359-a650-201b090466ed",
        "cursor": {
          "ref": "7be9c2c0-9f10-41dc-809a-ae7642d96f84",
          "length": 283,
          "cycles": 1,
          "position": 45,
          "iteration": 0,
          "httpRequestId": "aaa7e792-1cc4-4e66-b2dd-951533fcd81d"
        },
        "item": {
          "id": "b73a9e97-0a70-4359-a650-201b090466ed",
          "name": "credentials_issue:credential.issuer.id:array"
        },
        "response": {
          "id": "d378520c-a63c-4dba-80f2-4688a9048dd5",
          "status": "Created",
          "code": 201,
          "responseTime": 266,
          "responseSize": 698
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:46)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:46)"
            }
          }
        ]
      },
      {
        "id": "61d737ae-dca6-4732-83cf-5ace662b5202",
        "cursor": {
          "ref": "02bd1586-5801-4b31-8c85-0ed148109456",
          "length": 283,
          "cycles": 1,
          "position": 46,
          "iteration": 0,
          "httpRequestId": "5b06353c-92a1-43e8-b987-7cfbe2576953"
        },
        "item": {
          "id": "61d737ae-dca6-4732-83cf-5ace662b5202",
          "name": "credentials_issue:credential.issuer.id:boolean"
        },
        "response": {
          "id": "8732461c-75e0-406c-a1a1-304d31ae53e4",
          "status": "Created",
          "code": 201,
          "responseTime": 269,
          "responseSize": 657
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:47)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:47)"
            }
          }
        ]
      },
      {
        "id": "9650ee7a-b16c-4e13-b93b-3fc94323249f",
        "cursor": {
          "ref": "0c1b6103-7df8-48b5-839f-6faa717c527a",
          "length": 283,
          "cycles": 1,
          "position": 47,
          "iteration": 0,
          "httpRequestId": "34510137-cc9a-4701-88c4-824b1b403b73"
        },
        "item": {
          "id": "9650ee7a-b16c-4e13-b93b-3fc94323249f",
          "name": "credentials_issue:credential.issuer.id:integer"
        },
        "response": {
          "id": "a3d1935e-9cd2-48bd-816c-cb72cb1bb5fe",
          "status": "Created",
          "code": 201,
          "responseTime": 268,
          "responseSize": 654
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:48)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:48)"
            }
          }
        ]
      },
      {
        "id": "e3f50b18-c711-43f9-b5cf-bb3d3a23b658",
        "cursor": {
          "ref": "1d21928e-74f1-4192-bfc5-77f492bfbd3a",
          "length": 283,
          "cycles": 1,
          "position": 48,
          "iteration": 0,
          "httpRequestId": "486bcdca-0f55-4563-9bbc-7e2053b3175b"
        },
        "item": {
          "id": "e3f50b18-c711-43f9-b5cf-bb3d3a23b658",
          "name": "credentials_issue:credential.issuer.id:null"
        },
        "response": {
          "id": "b4888292-fd12-47c5-acc5-8a3d366f3f32",
          "status": "Created",
          "code": 201,
          "responseTime": 270,
          "responseSize": 656
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:49)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:49)"
            }
          }
        ]
      },
      {
        "id": "d50417f3-e969-4fba-9e97-756cb31c4ace",
        "cursor": {
          "ref": "aeef02e2-c089-4d05-a4ab-a6121bf04553",
          "length": 283,
          "cycles": 1,
          "position": 49,
          "iteration": 0,
          "httpRequestId": "a695f9b8-9122-4648-86c4-1675a4b9433e"
        },
        "item": {
          "id": "d50417f3-e969-4fba-9e97-756cb31c4ace",
          "name": "credentials_issue.credential.issuer.id:invalid"
        },
        "response": {
          "id": "886b1e96-c3f9-44f1-8603-3de6224dfeb8",
          "status": "Created",
          "code": 201,
          "responseTime": 262,
          "responseSize": 663
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:50)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:50)"
            }
          }
        ]
      },
      {
        "id": "5323976a-be2e-43f3-b537-7f992297a4ed",
        "cursor": {
          "ref": "a81be77c-9b0b-4cf6-97d0-22b461dc1cc2",
          "length": 283,
          "cycles": 1,
          "position": 50,
          "iteration": 0,
          "httpRequestId": "d04eca4c-bd0e-4cea-afc1-8489d58ec397"
        },
        "item": {
          "id": "5323976a-be2e-43f3-b537-7f992297a4ed",
          "name": "credentials_issue.credential.issuer.id:unknown"
        },
        "response": {
          "id": "8ae646d6-d74f-4982-bb06-f1d4cedd4bd5",
          "status": "Created",
          "code": 201,
          "responseTime": 266,
          "responseSize": 699
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 201",
              "stack": "AssertionError: expected response to have status code 422 but got 201\n   at Object.eval sandbox-script.js:1:51)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:51)"
            }
          }
        ]
      },
      {
        "id": "a1bc303d-eb42-4b31-bcd3-136066ea5c32",
        "cursor": {
          "ref": "40d42cc4-70df-46b6-b4ce-7606d68a34b2",
          "length": 283,
          "cycles": 1,
          "position": 51,
          "iteration": 0,
          "httpRequestId": "0343afc2-2678-4a46-8266-6ed5fff441ae"
        },
        "item": {
          "id": "a1bc303d-eb42-4b31-bcd3-136066ea5c32",
          "name": "credentials_issue:credential.issuanceDate.missing"
        },
        "response": {
          "id": "a6191756-1615-4f31-a518-e1dda117443c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 76,
          "responseSize": 167
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7deec527-994d-4f8a-a0eb-e84d417e309a",
        "cursor": {
          "ref": "2d8941aa-7b5c-4243-bac2-88280f92d5f7",
          "length": 283,
          "cycles": 1,
          "position": 52,
          "iteration": 0,
          "httpRequestId": "e78d2082-33c0-4e20-94ec-0a162dff8fa8"
        },
        "item": {
          "id": "7deec527-994d-4f8a-a0eb-e84d417e309a",
          "name": "credentials_issue:credential.issuanceDate:array"
        },
        "response": {
          "id": "a5b851dd-f7ef-4ee2-9ad6-6903bca1a33f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 75,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c2453664-eeda-4e9d-92d9-14b752fa64e6",
        "cursor": {
          "ref": "5994030e-7328-49f7-a39a-10ea8db9fe8c",
          "length": 283,
          "cycles": 1,
          "position": 53,
          "iteration": 0,
          "httpRequestId": "cdb213e7-c6b3-44a1-bb09-21223e1091aa"
        },
        "item": {
          "id": "c2453664-eeda-4e9d-92d9-14b752fa64e6",
          "name": "credentials_issue:credential.issuanceDate:boolean"
        },
        "response": {
          "id": "f7041f57-f849-4627-a609-be07c516296e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 76,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1df0d12a-095a-44ad-b14c-c9522ec9ddbb",
        "cursor": {
          "ref": "e3542835-9354-429b-9d59-531bb1ffbe04",
          "length": 283,
          "cycles": 1,
          "position": 54,
          "iteration": 0,
          "httpRequestId": "82c7e819-aef7-4375-9260-a8d43cdf1970"
        },
        "item": {
          "id": "1df0d12a-095a-44ad-b14c-c9522ec9ddbb",
          "name": "credentials_issue:credential.issuanceDate:integer"
        },
        "response": {
          "id": "47773a85-384a-431d-afb8-19116b8611a5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 74,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1762dffc-9d59-4fe6-8ec8-b7a10abe1209",
        "cursor": {
          "ref": "6c1ca1e9-fa18-4668-8a22-27ca101d6a8d",
          "length": 283,
          "cycles": 1,
          "position": 55,
          "iteration": 0,
          "httpRequestId": "a8c4fd44-8a9b-4f4c-ba6e-cd2acbce9e5f"
        },
        "item": {
          "id": "1762dffc-9d59-4fe6-8ec8-b7a10abe1209",
          "name": "credentials_issue:credential.issuanceDate:null"
        },
        "response": {
          "id": "f0bf2324-7920-458b-b748-d99680d59117",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 78,
          "responseSize": 167
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "eb9adc64-15bc-42ca-8a08-c2ff9c94a7a4",
        "cursor": {
          "ref": "c83e345c-58aa-4806-94cb-4ac7ca252023",
          "length": 283,
          "cycles": 1,
          "position": 56,
          "iteration": 0,
          "httpRequestId": "bfb65418-f262-433b-8b88-94da00038137"
        },
        "item": {
          "id": "eb9adc64-15bc-42ca-8a08-c2ff9c94a7a4",
          "name": "credentials_issue:credential.issuanceDate:object"
        },
        "response": {
          "id": "9e9960c9-37d3-4c8d-9a29-a4f7c6fcbc3d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 81,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a0f47ed2-5b45-4b2a-b233-f6dd71406007",
        "cursor": {
          "ref": "081334d4-0deb-47a7-afa2-daa71a730717",
          "length": 283,
          "cycles": 1,
          "position": 57,
          "iteration": 0,
          "httpRequestId": "19a443f4-e406-4f67-8feb-c26c4f85548c"
        },
        "item": {
          "id": "a0f47ed2-5b45-4b2a-b233-f6dd71406007",
          "name": "credentials_issue:credential.issuanceDate:invalid_value"
        },
        "response": {
          "id": "6443245b-12a1-4ee1-887f-fbceec814453",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 73,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2116b480-04b4-4918-871f-fee9be155e70",
        "cursor": {
          "ref": "d6b8d7fc-dcc6-46cd-b159-205354ce30bc",
          "length": 283,
          "cycles": 1,
          "position": 58,
          "iteration": 0,
          "httpRequestId": "f752ceb6-0813-4987-8964-0602439c407b"
        },
        "item": {
          "id": "2116b480-04b4-4918-871f-fee9be155e70",
          "name": "credentials_issue:credential.credentialSubject:missing"
        },
        "response": {
          "id": "754ccf25-654b-485d-b673-5a749e34a704",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 78,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cd173e13-0fe7-45d2-a3dd-6f9e35378ba6",
        "cursor": {
          "ref": "506b222b-9d59-4b70-8343-d45e4ddbff76",
          "length": 283,
          "cycles": 1,
          "position": 59,
          "iteration": 0,
          "httpRequestId": "0ab84660-3b15-4250-9b8f-cb856fe89134"
        },
        "item": {
          "id": "cd173e13-0fe7-45d2-a3dd-6f9e35378ba6",
          "name": "credentials_issue:credential.credentialSubject:array"
        },
        "response": {
          "id": "dcb72ed3-0e01-494d-b43e-fcd125cad278",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 75,
          "responseSize": 203
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1d29c0b9-f209-441a-a26a-3e65533936a0",
        "cursor": {
          "ref": "6a967d5d-7f99-422d-a8c6-2681ced07946",
          "length": 283,
          "cycles": 1,
          "position": 60,
          "iteration": 0,
          "httpRequestId": "7653a6fb-38cd-4d95-af8b-7c8bf874f781"
        },
        "item": {
          "id": "1d29c0b9-f209-441a-a26a-3e65533936a0",
          "name": "credentials_issue:credential.credentialSubject:boolean"
        },
        "response": {
          "id": "83b23bfc-76c9-4c3d-b661-032900e61df8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 74,
          "responseSize": 185
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ffddde0b-f669-4e43-9dd6-e2a98825f3a3",
        "cursor": {
          "ref": "dfb314af-a1ed-4dd1-aa8e-c99056fa12b3",
          "length": 283,
          "cycles": 1,
          "position": 61,
          "iteration": 0,
          "httpRequestId": "7eda0dc7-12ff-49a9-874a-f04d861fee2b"
        },
        "item": {
          "id": "ffddde0b-f669-4e43-9dd6-e2a98825f3a3",
          "name": "credentials_issue:credential.credentialSubject:integer"
        },
        "response": {
          "id": "4ee78b40-2617-4ba6-acfe-2383ee140db5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 78,
          "responseSize": 185
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fc845455-76ce-488a-83d4-5ecde2b40618",
        "cursor": {
          "ref": "d54c6faa-b53a-4a83-bb28-e1cb5494a9be",
          "length": 283,
          "cycles": 1,
          "position": 62,
          "iteration": 0,
          "httpRequestId": "55dd857a-f1b4-44b9-950f-9f44b5dad617"
        },
        "item": {
          "id": "fc845455-76ce-488a-83d4-5ecde2b40618",
          "name": "credentials_issue:credential.credentialSubject:null"
        },
        "response": {
          "id": "bac30718-d48a-48ee-9bd8-1782a939d790",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 74,
          "responseSize": 238
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4c11a650-f358-460d-b2e9-8d83fa3d9eb1",
        "cursor": {
          "ref": "7da98b18-bd28-4e45-a152-fc655fda7dab",
          "length": 283,
          "cycles": 1,
          "position": 63,
          "iteration": 0,
          "httpRequestId": "0f81ee5f-ec3e-492f-a0b1-feeafd3ca735"
        },
        "item": {
          "id": "4c11a650-f358-460d-b2e9-8d83fa3d9eb1",
          "name": "credentials_issue:credential.credentialSubject:string"
        },
        "response": {
          "id": "f2f17507-e245-4068-8cdd-6e1eb328c800",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 79,
          "responseSize": 185
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "949d77fb-2944-4cfb-904e-0a301345d43d",
        "cursor": {
          "ref": "ad44a464-9bbe-4f75-a15a-20ee4e67cdeb",
          "length": 283,
          "cycles": 1,
          "position": 64,
          "iteration": 0,
          "httpRequestId": "648c510a-2cfd-4fab-8fe6-b900536d3b93"
        },
        "item": {
          "id": "949d77fb-2944-4cfb-904e-0a301345d43d",
          "name": "credentials_issue:credential.credentialSubject.id:array"
        },
        "response": {
          "id": "cadf6632-b074-4780-89db-26f403257615",
          "status": "Created",
          "code": 201,
          "responseTime": 280,
          "responseSize": 702
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:65)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:65)"
            }
          }
        ]
      },
      {
        "id": "8b413455-3f3b-481e-845d-ad683a80da1e",
        "cursor": {
          "ref": "e072abf3-b8e5-4f88-bff5-49d7cd54144d",
          "length": 283,
          "cycles": 1,
          "position": 65,
          "iteration": 0,
          "httpRequestId": "f95b4f36-4352-44fb-bdfb-db00b5722e28"
        },
        "item": {
          "id": "8b413455-3f3b-481e-845d-ad683a80da1e",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy"
        },
        "response": {
          "id": "62c7714a-2e36-43a7-bd69-478b26d854b3",
          "status": "Created",
          "code": 201,
          "responseTime": 364,
          "responseSize": 688
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:66)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:66)"
            }
          }
        ]
      },
      {
        "id": "fab11764-8c68-4753-8459-e4e7ca4e96ce",
        "cursor": {
          "ref": "29f04dc3-8b56-4057-b668-4f1d93d2618f",
          "length": 283,
          "cycles": 1,
          "position": 66,
          "iteration": 0,
          "httpRequestId": "4f77dd26-f149-4365-8bc5-6cdb0d02f0ea"
        },
        "item": {
          "id": "fab11764-8c68-4753-8459-e4e7ca4e96ce",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 2"
        },
        "response": {
          "id": "ae70df60-8e02-4efe-a047-fbe689c5415d",
          "status": "Created",
          "code": 201,
          "responseTime": 255,
          "responseSize": 685
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:67)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:67)"
            }
          }
        ]
      },
      {
        "id": "a7b11c06-6642-451c-aa32-bc28938115a7",
        "cursor": {
          "ref": "e15b8a12-fbdd-4cea-b822-deccacd62ae8",
          "length": 283,
          "cycles": 1,
          "position": 67,
          "iteration": 0,
          "httpRequestId": "63f6e99e-e0d1-400e-8eef-d6e95016f694"
        },
        "item": {
          "id": "a7b11c06-6642-451c-aa32-bc28938115a7",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 3"
        },
        "response": {
          "id": "6a62876b-819e-43f6-b430-9655841a6a8e",
          "status": "Created",
          "code": 201,
          "responseTime": 273,
          "responseSize": 687
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:68)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:68)"
            }
          }
        ]
      },
      {
        "id": "1cff5cbe-4df9-461a-8db2-dc348efb0c76",
        "cursor": {
          "ref": "2cfa9971-584a-448c-b751-dd01ecee55ad",
          "length": 283,
          "cycles": 1,
          "position": 68,
          "iteration": 0,
          "httpRequestId": "b12fc04d-3273-4223-9116-aa21a669c5c4"
        },
        "item": {
          "id": "1cff5cbe-4df9-461a-8db2-dc348efb0c76",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 4"
        },
        "response": {
          "id": "83c73e2d-0d57-45bb-9fdc-cf47dff51ebf",
          "status": "Created",
          "code": 201,
          "responseTime": 266,
          "responseSize": 685
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:69)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:69)"
            }
          }
        ]
      },
      {
        "id": "8db10a17-ba8d-40d7-be73-809701ed46e0",
        "cursor": {
          "ref": "bd10ccc7-f2c0-4705-af05-57409e1a0a64",
          "length": 283,
          "cycles": 1,
          "position": 69,
          "iteration": 0,
          "httpRequestId": "b8201f8e-76f5-46ca-a83f-ed8932de640c"
        },
        "item": {
          "id": "8db10a17-ba8d-40d7-be73-809701ed46e0",
          "name": "credentials_issue:options:missing"
        },
        "response": {
          "id": "3ae5b4d5-bdce-4d20-8c8f-41ab4dc53b0a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 74,
          "responseSize": 116
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a483d6ee-ac0b-4418-9b7a-ba45777fb3d8",
        "cursor": {
          "ref": "3e2d5acf-f667-4271-97f3-7daa4fa1a920",
          "length": 283,
          "cycles": 1,
          "position": 70,
          "iteration": 0,
          "httpRequestId": "f379e7d0-d7a4-4594-b060-09ac7f5c1f28"
        },
        "item": {
          "id": "a483d6ee-ac0b-4418-9b7a-ba45777fb3d8",
          "name": "credentials_issue:options:array"
        },
        "response": {
          "id": "85be9001-0ab8-4fcb-8974-7ff2217b2227",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 77,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f26a0836-1853-4061-b3fd-c7df8dd682d8",
        "cursor": {
          "ref": "437858fc-926d-4863-b542-76d7b7e0716e",
          "length": 283,
          "cycles": 1,
          "position": 71,
          "iteration": 0,
          "httpRequestId": "8a93db94-583a-45ec-a3d8-32b1ac959e77"
        },
        "item": {
          "id": "f26a0836-1853-4061-b3fd-c7df8dd682d8",
          "name": "credentials_issue:options:boolean"
        },
        "response": {
          "id": "3a01dfe2-5ee6-4468-b3b4-c6f32deefad6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 76,
          "responseSize": 157
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "01007517-52f9-4845-997e-20eb60616d27",
        "cursor": {
          "ref": "74a8054a-fc0c-4d26-a4b2-abd6bf84b625",
          "length": 283,
          "cycles": 1,
          "position": 72,
          "iteration": 0,
          "httpRequestId": "b89a3037-d534-452f-814e-0b1c8447cd31"
        },
        "item": {
          "id": "01007517-52f9-4845-997e-20eb60616d27",
          "name": "credentials_issue:options:integer"
        },
        "response": {
          "id": "b1c23245-92ad-4ba5-bcdd-f9aacc1481a8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 73,
          "responseSize": 157
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ffdd671b-a8c1-4924-b0e4-eb71d4f46a72",
        "cursor": {
          "ref": "622acd62-e578-4db9-bb0b-79ffd7d2a287",
          "length": 283,
          "cycles": 1,
          "position": 73,
          "iteration": 0,
          "httpRequestId": "fc560f9f-2103-427b-bae0-dcee208b4831"
        },
        "item": {
          "id": "ffdd671b-a8c1-4924-b0e4-eb71d4f46a72",
          "name": "credentials_issue:options:null"
        },
        "response": {
          "id": "d7192b6b-740d-4d8f-9c8f-14cd8636cd9e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 77,
          "responseSize": 189
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "87f4010a-b69e-4241-b5a9-beab7345a1ae",
        "cursor": {
          "ref": "bc9f1146-28b9-4a1e-a98f-3ccdad4e83b6",
          "length": 283,
          "cycles": 1,
          "position": 74,
          "iteration": 0,
          "httpRequestId": "1c12f3f7-1147-42cd-b4e9-6a3961820d41"
        },
        "item": {
          "id": "87f4010a-b69e-4241-b5a9-beab7345a1ae",
          "name": "credentials_issue:options:string"
        },
        "response": {
          "id": "a7d3a370-571e-4161-9667-29d4ac09efde",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 76,
          "responseSize": 189
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7ebd6e0c-1255-4a77-ab40-3ced75562923",
        "cursor": {
          "ref": "abf9734b-c9bc-4730-b1d3-99bbb3791301",
          "length": 283,
          "cycles": 1,
          "position": 75,
          "iteration": 0,
          "httpRequestId": "c9f55c5b-d3d2-480c-bbd1-7c4749297cf3"
        },
        "item": {
          "id": "7ebd6e0c-1255-4a77-ab40-3ced75562923",
          "name": "credentials_issue:options.type:missing"
        },
        "response": {
          "id": "33817aa3-c26b-4513-b6da-d20de89dd2ab",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 82,
          "responseSize": 278
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9dab5b3e-4ca1-497d-98ef-538f393703e9",
        "cursor": {
          "ref": "6ec68e7c-a17a-48ad-be70-81435f7fcd16",
          "length": 283,
          "cycles": 1,
          "position": 76,
          "iteration": 0,
          "httpRequestId": "d4f180fc-c56a-4478-be6f-3285fd2993f2"
        },
        "item": {
          "id": "9dab5b3e-4ca1-497d-98ef-538f393703e9",
          "name": "credentials_issue:options.type:array"
        },
        "response": {
          "id": "4505da47-1bd6-48dc-b4c6-410233093392",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 78,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "59efe7a8-b1a5-43dd-a38e-04428b94a81a",
        "cursor": {
          "ref": "8db95e0b-7283-4f7c-a511-2f1c222671be",
          "length": 283,
          "cycles": 1,
          "position": 77,
          "iteration": 0,
          "httpRequestId": "c84670ff-07d3-415f-9c9d-5f210e9bf30b"
        },
        "item": {
          "id": "59efe7a8-b1a5-43dd-a38e-04428b94a81a",
          "name": "credentials_issue:options.type:boolean"
        },
        "response": {
          "id": "a9ea3eba-861e-4919-a3f8-6eb5ec0a6e32",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 76,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "60337efa-d4f9-4878-801e-2e2f7d76c1f7",
        "cursor": {
          "ref": "fcb079f5-79fb-4106-ba1a-f3fb85b14c8d",
          "length": 283,
          "cycles": 1,
          "position": 78,
          "iteration": 0,
          "httpRequestId": "9991294f-8e8b-47e3-bf51-a9cd062da286"
        },
        "item": {
          "id": "60337efa-d4f9-4878-801e-2e2f7d76c1f7",
          "name": "credentials_issue:options.type:integer"
        },
        "response": {
          "id": "c21a3656-d68e-4e9e-b92f-41ae26685f55",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 75,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "57fb8f47-d16a-43bc-9d48-6e40c940b904",
        "cursor": {
          "ref": "e2516f5b-ae42-4af7-a5bc-96ce2c6caec8",
          "length": 283,
          "cycles": 1,
          "position": 79,
          "iteration": 0,
          "httpRequestId": "bda547ac-3533-4bbf-ac8d-eff07fa1ba95"
        },
        "item": {
          "id": "57fb8f47-d16a-43bc-9d48-6e40c940b904",
          "name": "credentials_issue:options.type:null"
        },
        "response": {
          "id": "5d3a526d-c75a-437b-b20b-b215d82f5701",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 77,
          "responseSize": 278
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0ba53a5d-093b-436d-94df-a71cb564f74c",
        "cursor": {
          "ref": "5f8e0524-f91a-4092-a41d-5f4c4e6124a8",
          "length": 283,
          "cycles": 1,
          "position": 80,
          "iteration": 0,
          "httpRequestId": "39f261f0-328d-4aa1-afc5-76e0ed01e0aa"
        },
        "item": {
          "id": "0ba53a5d-093b-436d-94df-a71cb564f74c",
          "name": "credentials_issue:options.type:object"
        },
        "response": {
          "id": "49244590-b1a5-43a6-bace-3f9c1e2770ae",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 76,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "efd1cbae-43d0-4f18-8318-b530151505e9",
        "cursor": {
          "ref": "98fe31f4-6e80-4120-97af-a43486a4b2d6",
          "length": 283,
          "cycles": 1,
          "position": 81,
          "iteration": 0,
          "httpRequestId": "e234a0e0-c5a1-4270-af8e-331734dd7754"
        },
        "item": {
          "id": "efd1cbae-43d0-4f18-8318-b530151505e9",
          "name": "credentials_issue:options.type:invalid_value"
        },
        "response": {
          "id": "05a61f07-fe6e-43f2-b586-107bf105d99a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 87,
          "responseSize": 207
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1d352e0e-3007-44eb-a0a5-8c807f092714",
        "cursor": {
          "ref": "884ab771-9208-4144-b36c-070295cdcc2b",
          "length": 283,
          "cycles": 1,
          "position": 82,
          "iteration": 0,
          "httpRequestId": "b7f25399-88e1-4468-991c-ef9f577af0ed"
        },
        "item": {
          "id": "1d352e0e-3007-44eb-a0a5-8c807f092714",
          "name": "credentials_issue:options.created:array"
        },
        "response": {
          "id": "90a6ad6b-8e7f-49e0-af74-309f99e56d28",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 81,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8d74b967-532f-46e3-8b1e-1ee2e2429373",
        "cursor": {
          "ref": "08850a10-b39a-461a-81cb-dc62711fa122",
          "length": 283,
          "cycles": 1,
          "position": 83,
          "iteration": 0,
          "httpRequestId": "3fd754b5-0b59-4f01-922a-4f9301fc5fa0"
        },
        "item": {
          "id": "8d74b967-532f-46e3-8b1e-1ee2e2429373",
          "name": "credentials_issue:options.created:boolean"
        },
        "response": {
          "id": "f12aa036-59ab-433b-afed-449bb2582807",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 82,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3e42e7a2-83ab-4f94-b226-34ff8eb952d8",
        "cursor": {
          "ref": "5620e4be-f1ef-40e5-96b8-1e34c56b1364",
          "length": 283,
          "cycles": 1,
          "position": 84,
          "iteration": 0,
          "httpRequestId": "750d30d8-f6c9-4ae1-852b-84ab0e6a89d2"
        },
        "item": {
          "id": "3e42e7a2-83ab-4f94-b226-34ff8eb952d8",
          "name": "credentials_issue:options.created:integer"
        },
        "response": {
          "id": "dd5e7bf3-5a2f-4b25-8bdd-e649faac78e6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 73,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9948e0cd-5953-4aee-871a-54540c562c8b",
        "cursor": {
          "ref": "debf3e3a-db34-45e5-93c3-62517ec3525a",
          "length": 283,
          "cycles": 1,
          "position": 85,
          "iteration": 0,
          "httpRequestId": "27c880c4-30e9-41cf-a82e-43c9b982579f"
        },
        "item": {
          "id": "9948e0cd-5953-4aee-871a-54540c562c8b",
          "name": "credentials_issue:options.created:null"
        },
        "response": {
          "id": "ec2e18c0-d98d-4774-9a5b-aafee804fa48",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 78,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1feda663-e420-4248-89be-fbf6e83048ef",
        "cursor": {
          "ref": "61814986-19bf-4d56-b88f-7e495ac2fac5",
          "length": 283,
          "cycles": 1,
          "position": 86,
          "iteration": 0,
          "httpRequestId": "9891d373-c46f-425f-bf85-0a78fe2c1a04"
        },
        "item": {
          "id": "1feda663-e420-4248-89be-fbf6e83048ef",
          "name": "credentials_issue:options.created:object"
        },
        "response": {
          "id": "793bff6b-0d80-444e-8cdb-69bd5c6a913b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 74,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d8ccd9d4-4805-49a1-9c9f-58390023f5c6",
        "cursor": {
          "ref": "54b08c79-c736-49b3-89af-7eaea22d39ca",
          "length": 283,
          "cycles": 1,
          "position": 87,
          "iteration": 0,
          "httpRequestId": "6c6d8b5b-685d-4210-aefb-6ecf46677829"
        },
        "item": {
          "id": "d8ccd9d4-4805-49a1-9c9f-58390023f5c6",
          "name": "credentials_issue:options.created:invalid"
        },
        "response": {
          "id": "2cf71382-52c5-4539-a755-3157a730d2a8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 72,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "eef06688-3d6d-42e1-9c79-f7d9e6f5030e",
        "cursor": {
          "ref": "729385e7-bc47-4499-a11a-d3b3a11bd701",
          "length": 283,
          "cycles": 1,
          "position": 88,
          "iteration": 0,
          "httpRequestId": "34f4ee4e-499b-43e8-a5d8-39f06a268965"
        },
        "item": {
          "id": "eef06688-3d6d-42e1-9c79-f7d9e6f5030e",
          "name": "credentials_issue:options.credentialStatus:array"
        },
        "response": {
          "id": "47e929cf-a646-48f0-8ebe-6b01318d9f21",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 78,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d076cb40-7015-4852-8933-6cb66cbe5c4e",
        "cursor": {
          "ref": "a9728f79-418a-4f09-9628-516fb47a5cc0",
          "length": 283,
          "cycles": 1,
          "position": 89,
          "iteration": 0,
          "httpRequestId": "c7da35bb-9cf0-4a0c-8a93-5d30c2a91c77"
        },
        "item": {
          "id": "d076cb40-7015-4852-8933-6cb66cbe5c4e",
          "name": "credentials_issue:options.credentialStatus:boolean"
        },
        "response": {
          "id": "24d1ccbf-583f-4ddf-93e0-e6fa57ff7031",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 77,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "826ee054-d444-4fe8-875f-100d4d04a87a",
        "cursor": {
          "ref": "8676a091-a875-4ce5-a108-c62bff24cea7",
          "length": 283,
          "cycles": 1,
          "position": 90,
          "iteration": 0,
          "httpRequestId": "d4a2c9df-8e1f-4912-b849-f1cb4ea7b974"
        },
        "item": {
          "id": "826ee054-d444-4fe8-875f-100d4d04a87a",
          "name": "credentials_issue:options.credentialStatus:integer"
        },
        "response": {
          "id": "17ff6fb6-87a9-4a03-8934-8595af99e133",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 72,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "add1b29d-e777-4840-a40c-edc0cb5e746e",
        "cursor": {
          "ref": "ec8e305f-7ba5-4673-8281-8e73898dc7cc",
          "length": 283,
          "cycles": 1,
          "position": 91,
          "iteration": 0,
          "httpRequestId": "1b7d8086-5900-4791-a800-37ad6898e8e1"
        },
        "item": {
          "id": "add1b29d-e777-4840-a40c-edc0cb5e746e",
          "name": "credentials_issue:options.credentialStatus:null"
        },
        "response": {
          "id": "a33069ba-e242-42fe-a119-f534afae3204",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 75,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "54272180-b23a-46a1-8f17-0fcd2e5ab95b",
        "cursor": {
          "ref": "7e3486a2-dc00-4cb0-92aa-12f50a77b9d9",
          "length": 283,
          "cycles": 1,
          "position": 92,
          "iteration": 0,
          "httpRequestId": "ebce663d-736e-4150-bef5-0409d5385643"
        },
        "item": {
          "id": "54272180-b23a-46a1-8f17-0fcd2e5ab95b",
          "name": "credentials_issue:options.credentialStatus:string"
        },
        "response": {
          "id": "d844a734-81e0-48b1-a121-a3bff3eb6a57",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 73,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "723c11d7-1c89-4740-9905-434a2d3af1d1",
        "cursor": {
          "ref": "99484524-de13-4411-a877-776650546ba1",
          "length": 283,
          "cycles": 1,
          "position": 93,
          "iteration": 0,
          "httpRequestId": "e3ce771a-0707-4860-8189-842af3648b7f"
        },
        "item": {
          "id": "723c11d7-1c89-4740-9905-434a2d3af1d1",
          "name": "credentials_issue:options.credentialStatus.type:missing"
        },
        "response": {
          "id": "1fb83610-93fe-408c-9b04-ae449cace346",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 74,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7478c524-5c11-4bee-ac2c-513909c02d3f",
        "cursor": {
          "ref": "cc5a0827-82dc-4a76-a786-0594f546901a",
          "length": 283,
          "cycles": 1,
          "position": 94,
          "iteration": 0,
          "httpRequestId": "6eb5badf-1613-4244-b609-d2fd0c8d1dd6"
        },
        "item": {
          "id": "7478c524-5c11-4bee-ac2c-513909c02d3f",
          "name": "credentials_issue:options.credentialStatus.type:array"
        },
        "response": {
          "id": "4f584e29-12f4-462a-9d81-cbdfa8073d80",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 79,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e36dcbf8-408d-4822-b6fe-841d7f36b5ee",
        "cursor": {
          "ref": "c3e9cce7-6648-4d31-bfcc-c23bd918669c",
          "length": 283,
          "cycles": 1,
          "position": 95,
          "iteration": 0,
          "httpRequestId": "320dc4b0-0cf1-4330-8325-d414479d6a35"
        },
        "item": {
          "id": "e36dcbf8-408d-4822-b6fe-841d7f36b5ee",
          "name": "credentials_issue:options.credentialStatus.type:boolean"
        },
        "response": {
          "id": "d5eb3fe9-d5ec-4ca7-a170-3cd87c154c84",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 77,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2eac8414-11bf-4aca-afbb-f9a5416658fb",
        "cursor": {
          "ref": "19be1668-7071-4bed-bf4b-95a59a08378d",
          "length": 283,
          "cycles": 1,
          "position": 96,
          "iteration": 0,
          "httpRequestId": "ac2465cc-a634-46e6-90ae-8cf01bda7746"
        },
        "item": {
          "id": "2eac8414-11bf-4aca-afbb-f9a5416658fb",
          "name": "credentials_issue:options.credentialStatus.type:integer"
        },
        "response": {
          "id": "64368c8b-cfae-4208-9efb-500fe0a445aa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 74,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9fa26bff-76c3-4f57-9fb9-b9b6a0342bc0",
        "cursor": {
          "ref": "ea564090-6180-497b-a3ab-92c29dcbb494",
          "length": 283,
          "cycles": 1,
          "position": 97,
          "iteration": 0,
          "httpRequestId": "b310b048-87e6-4606-991d-2db169d63b62"
        },
        "item": {
          "id": "9fa26bff-76c3-4f57-9fb9-b9b6a0342bc0",
          "name": "credentials_issue:options.credentialStatus.type:null"
        },
        "response": {
          "id": "fc32bfa3-1ba3-4124-9587-01849c05169c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 76,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3d58bfc6-c1c8-40d9-8857-f27712a854e7",
        "cursor": {
          "ref": "89e9668b-a3e2-4be9-aced-5d34e597e30f",
          "length": 283,
          "cycles": 1,
          "position": 98,
          "iteration": 0,
          "httpRequestId": "e20d7687-5fcd-4da4-bc9c-f4b97ee8517b"
        },
        "item": {
          "id": "3d58bfc6-c1c8-40d9-8857-f27712a854e7",
          "name": "credentials_issue:options.credentialStatus.type:null Copy"
        },
        "response": {
          "id": "4ebce71e-a6d1-4e51-bed0-658e950fcd75",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 78,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4c3cb0f9-f48c-43d3-8a8b-7d7e85e9a8c8",
        "cursor": {
          "ref": "7a6aef06-f537-4f36-a3e3-5a1774bd4b11",
          "length": 283,
          "cycles": 1,
          "position": 99,
          "iteration": 0,
          "httpRequestId": "88b7bf91-f831-479c-ba6e-9846c6a2396b"
        },
        "item": {
          "id": "4c3cb0f9-f48c-43d3-8a8b-7d7e85e9a8c8",
          "name": "credentials_issue:options.credentialStatus.type:invalid"
        },
        "response": {
          "id": "6317de47-a9c9-4f0c-9043-8a2887a548ce",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 76,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6d9c90e3-03db-4bf7-b7f7-81b1d9c82487",
        "cursor": {
          "ref": "fd5438f7-7ab0-4418-b44e-ec37326ea14d",
          "length": 283,
          "cycles": 1,
          "position": 100,
          "iteration": 0,
          "httpRequestId": "7567643e-be39-49b0-90d1-5d40b5bf4c77"
        },
        "item": {
          "id": "6d9c90e3-03db-4bf7-b7f7-81b1d9c82487",
          "name": "credentials_issue:missing_auth"
        },
        "response": {
          "id": "da0e4a88-5583-406b-9d52-a259d34f7144",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 61,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9a4915a2-74b5-4c1f-9692-4dfb325ba0de",
        "cursor": {
          "ref": "7d5cef82-008c-4da7-9a92-22c03d3eab1f",
          "length": 283,
          "cycles": 1,
          "position": 101,
          "iteration": 0,
          "httpRequestId": "564a7d1a-1184-46da-bf47-e6e2e76d5eeb"
        },
        "item": {
          "id": "9a4915a2-74b5-4c1f-9692-4dfb325ba0de",
          "name": "credentials_issue.credential.issuer:dup"
        },
        "response": {
          "id": "b730cbf2-8e98-4911-b92d-400cfa6090f6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 78,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 400",
              "stack": "AssertionError: expected response to have status code 201 but got 400\n   at Object.eval sandbox-script.js:1:102)"
            }
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 1,
              "test": "response issuer matches request credential.issuer",
              "message": "Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.",
              "stack": "TypeError: Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.\n   at Object.eval sandbox-script.js:2:102)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:3:102)"
            }
          }
        ]
      },
      {
        "id": "31634ceb-e9c9-4543-a488-3c1c29989bf6",
        "cursor": {
          "ref": "dc335639-1bf8-48ce-b370-a17b02636e01",
          "length": 283,
          "cycles": 1,
          "position": 102,
          "iteration": 0,
          "httpRequestId": "1cc64d03-550b-4254-8c74-712af1475523"
        },
        "item": {
          "id": "31634ceb-e9c9-4543-a488-3c1c29989bf6",
          "name": "credentials_issue"
        },
        "response": {
          "id": "3d17c7d9-a8c4-468d-9f8c-50bc4f7249e5",
          "status": "Created",
          "code": 201,
          "responseTime": 254,
          "responseSize": 689
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false
          },
          {
            "assertion": "response issuanceDate matches request credential.issuanceDate",
            "skipped": false
          },
          {
            "assertion": "response proof.created is close to 'now'",
            "skipped": false
          }
        ]
      },
      {
        "id": "bfe3d509-1de6-4a43-8a15-be97cfecc1bf",
        "cursor": {
          "ref": "c12e4437-9b9a-4e86-839f-e1df5e1018e0",
          "length": 283,
          "cycles": 1,
          "position": 103,
          "iteration": 0,
          "httpRequestId": "1dc66e5b-de9f-445e-bd61-76d230af9a4d"
        },
        "item": {
          "id": "bfe3d509-1de6-4a43-8a15-be97cfecc1bf",
          "name": "credentials_issue:credential.opt.id"
        },
        "response": {
          "id": "cc0d4b21-a9ce-4a34-8e58-c31da90271d8",
          "status": "Created",
          "code": 201,
          "responseTime": 265,
          "responseSize": 643
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verifiableCredential.id matches request credential.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "128dc293-9bd3-4245-a9b0-257f3c6acac5",
        "cursor": {
          "ref": "b98dfcbf-0003-49c8-b125-2ddf6831ea16",
          "length": 283,
          "cycles": 1,
          "position": 104,
          "iteration": 0,
          "httpRequestId": "ab1cd394-8620-4750-9305-b28f2b99c69b"
        },
        "item": {
          "id": "128dc293-9bd3-4245-a9b0-257f3c6acac5",
          "name": "credentials_issue:credential:alt.issuer.object"
        },
        "response": {
          "id": "4cf3851b-9a0f-4820-9e09-147f0a1f56df",
          "status": "Created",
          "code": 201,
          "responseTime": 308,
          "responseSize": 696
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "c2554006-6995-4c0f-8b72-42e21290db75",
        "cursor": {
          "ref": "4d077afb-7dc1-495b-ab05-923872f35462",
          "length": 283,
          "cycles": 1,
          "position": 105,
          "iteration": 0,
          "httpRequestId": "90111e29-34ff-451a-9c1b-c11d7997dd5c"
        },
        "item": {
          "id": "c2554006-6995-4c0f-8b72-42e21290db75",
          "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id"
        },
        "response": {
          "id": "3a5b0aa0-2546-4b42-9236-242bad3a151e",
          "status": "Created",
          "code": 201,
          "responseTime": 253,
          "responseSize": 700
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response credentialSubject.id matches request credential.credentialSubject.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "2831e75d-20e4-4b3e-8bce-48b962a802d5",
        "cursor": {
          "ref": "8a9ef277-a722-43d6-8895-170b0ea38024",
          "length": 283,
          "cycles": 1,
          "position": 106,
          "iteration": 0,
          "httpRequestId": "aad05872-55be-409b-b9e0-d72d8ce247d7"
        },
        "item": {
          "id": "2831e75d-20e4-4b3e-8bce-48b962a802d5",
          "name": "credentials_issue:options:opt.created"
        },
        "response": {
          "id": "40a97bdb-36ff-4563-ad71-7534df2c2b18",
          "status": "Created",
          "code": 201,
          "responseTime": 270,
          "responseSize": 689
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response proof.created matches request options.created",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response proof.created matches request options.created",
              "message": "expected '2023-10-26T00:33:01.169Z' to equal '2006-01-02T15:04:05Z'",
              "stack": "AssertionError: expected '2023-10-26T00:33:01.169Z' to equal '2006-01-02T15:04:05Z'\n   at Object.eval sandbox-script.js:3:107)"
            }
          }
        ]
      },
      {
        "id": "c0bbe987-efde-4b14-8596-fc1f60956657",
        "cursor": {
          "ref": "f889ae78-8994-400c-a364-dda5984f8fd2",
          "length": 283,
          "cycles": 1,
          "position": 107,
          "iteration": 0,
          "httpRequestId": "124d2046-2c40-4436-9dee-f23ea1ae883f"
        },
        "item": {
          "id": "c0bbe987-efde-4b14-8596-fc1f60956657",
          "name": "credentials_issue:options:opt.credentialStatus"
        },
        "response": {
          "id": "fc0bd952-ae58-4000-a619-4655a64b45c4",
          "status": "Created",
          "code": 201,
          "responseTime": 481,
          "responseSize": 689
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e8b261c8-f37f-42bc-a7c5-e57013c59f24",
        "cursor": {
          "ref": "066f3866-5568-45f9-85c6-8d3d071f11e0",
          "length": 283,
          "cycles": 1,
          "position": 108,
          "iteration": 0,
          "httpRequestId": "ced6571a-f08e-47ec-aa7c-ead778645cc1"
        },
        "item": {
          "id": "e8b261c8-f37f-42bc-a7c5-e57013c59f24",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "1d4ae412-3935-4539-a8bc-20d3769ed3da",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 78,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "35d403e2-1b8e-4114-bebb-62fdcfdf2210",
        "cursor": {
          "ref": "cece5adf-b668-48b5-a5af-8082ff730951",
          "length": 283,
          "cycles": 1,
          "position": 109,
          "iteration": 0,
          "httpRequestId": "9c9db65b-0cc6-4d6d-8634-76a22b0f7d2c"
        },
        "item": {
          "id": "35d403e2-1b8e-4114-bebb-62fdcfdf2210",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "3047cda0-65fa-41d2-93c0-48097df5bbf1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 72,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5824a527-8c2d-487c-ae43-01babe023d7f",
        "cursor": {
          "ref": "f57f948e-116f-4eae-900c-f582af2bcb02",
          "length": 283,
          "cycles": 1,
          "position": 110,
          "iteration": 0,
          "httpRequestId": "dac5a678-1c2d-4281-9153-218a5e540ac5"
        },
        "item": {
          "id": "5824a527-8c2d-487c-ae43-01babe023d7f",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "0baac34c-792d-4e8d-9fb9-7753861fa5c3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 76,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6722ecfa-fe1d-4fc7-a9b0-788a83f96472",
        "cursor": {
          "ref": "d2d0d30d-5733-49e9-ba5b-37b8b2fa623e",
          "length": 283,
          "cycles": 1,
          "position": 111,
          "iteration": 0,
          "httpRequestId": "5e656b16-71e7-43cb-bbf3-92a72e122f2d"
        },
        "item": {
          "id": "6722ecfa-fe1d-4fc7-a9b0-788a83f96472",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "ef5df88f-d2b2-433c-8afc-d888a659368c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 77,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fe5a8c6d-53e1-49ff-ac72-1adc6f8d0a05",
        "cursor": {
          "ref": "965d8c1c-e38b-44a3-babb-46afe6955758",
          "length": 283,
          "cycles": 1,
          "position": 112,
          "iteration": 0,
          "httpRequestId": "2699c038-f5db-41d9-bd84-63f41bbb8f3e"
        },
        "item": {
          "id": "fe5a8c6d-53e1-49ff-ac72-1adc6f8d0a05",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "fc4a78e2-e748-4072-8581-bd788ac993a3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 73,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a56633d3-dab9-49ea-bcb7-b720363eb85e",
        "cursor": {
          "ref": "f9d090c7-97df-4631-8ab7-e4499c9d762e",
          "length": 283,
          "cycles": 1,
          "position": 113,
          "iteration": 0,
          "httpRequestId": "84b75ef0-eb1f-4cf1-9d5c-ea3a6eb160ef"
        },
        "item": {
          "id": "a56633d3-dab9-49ea-bcb7-b720363eb85e",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "7dae970b-5ba6-40f6-9f56-1a9822cf4da6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 78,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bd096c1e-e5f0-4a09-99b5-73b6e0d730bc",
        "cursor": {
          "ref": "6c417a58-e783-4a59-acd2-ce51f1480829",
          "length": 283,
          "cycles": 1,
          "position": 114,
          "iteration": 0,
          "httpRequestId": "a64b3c14-8e33-4f62-95b6-9d5a5e182a28"
        },
        "item": {
          "id": "bd096c1e-e5f0-4a09-99b5-73b6e0d730bc",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "53ab31fe-ae37-4bf5-abd2-2777178361b1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 75,
          "responseSize": 146
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6f574d29-aed8-49a7-b2b5-05ed4d23e98d",
        "cursor": {
          "ref": "cf861c2c-5e22-4c7b-a5e8-74a13b2d390b",
          "length": 283,
          "cycles": 1,
          "position": 115,
          "iteration": 0,
          "httpRequestId": "d2f13350-f2e8-461d-8bac-bb4f22d889a8"
        },
        "item": {
          "id": "6f574d29-aed8-49a7-b2b5-05ed4d23e98d",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "c8a11304-d667-414b-839a-4cfa8f74850a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 75,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "279d73b2-80c6-4816-b40c-677f36c907ed",
        "cursor": {
          "ref": "9b415c37-8c75-414f-92e3-80b9d109a6d6",
          "length": 283,
          "cycles": 1,
          "position": 116,
          "iteration": 0,
          "httpRequestId": "192e0533-dced-408c-b8cd-8ec3fc234ec6"
        },
        "item": {
          "id": "279d73b2-80c6-4816-b40c-677f36c907ed",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "a8f3e5ad-1dab-4742-a8b8-1cb1b41708b4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 76,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "05f6640a-8b73-4896-8060-249f88ae748e",
        "cursor": {
          "ref": "8342f2a4-9d18-41c5-9573-e572ddb61b4f",
          "length": 283,
          "cycles": 1,
          "position": 117,
          "iteration": 0,
          "httpRequestId": "cd2400e6-e282-4f7c-b924-6ddfadd48d83"
        },
        "item": {
          "id": "05f6640a-8b73-4896-8060-249f88ae748e",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "7bc114cf-efd3-4fe9-b9d7-a2233062c3f4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 77,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2510e8e9-f9f6-46d8-affb-5fe7ce34b61e",
        "cursor": {
          "ref": "e9d05931-525c-4406-a0dd-b9384ef0c016",
          "length": 283,
          "cycles": 1,
          "position": 118,
          "iteration": 0,
          "httpRequestId": "ec621ce9-fcc7-418c-9fc9-7a16e2026127"
        },
        "item": {
          "id": "2510e8e9-f9f6-46d8-affb-5fe7ce34b61e",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "b629c4e1-2e89-4b62-ba18-e9d4b7db2bca",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 87,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b5ea6216-014d-4e55-b7d7-c3fa6561fc8d",
        "cursor": {
          "ref": "3121c2d9-688b-44fe-b2d3-fe76c1045986",
          "length": 283,
          "cycles": 1,
          "position": 119,
          "iteration": 0,
          "httpRequestId": "cc2e1801-66df-41ba-afa6-2da92dcf0762"
        },
        "item": {
          "id": "b5ea6216-014d-4e55-b7d7-c3fa6561fc8d",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "b5d6ec5b-1912-49da-9bd1-f62834644d2e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 119,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a50b28b8-64ac-4119-b78f-ac36c7795099",
        "cursor": {
          "ref": "34c08bb8-2c50-4b32-b06f-8087b6c100a6",
          "length": 283,
          "cycles": 1,
          "position": 120,
          "iteration": 0,
          "httpRequestId": "09f917e6-b684-405b-9270-537f96a42f63"
        },
        "item": {
          "id": "a50b28b8-64ac-4119-b78f-ac36c7795099",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "1be91658-6c00-4324-b4b9-298d02e68a59",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 75,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fa6a1636-13b2-4f49-b23b-190771c9f82f",
        "cursor": {
          "ref": "b95a622e-234c-442e-9a44-5268a3cc5a64",
          "length": 283,
          "cycles": 1,
          "position": 121,
          "iteration": 0,
          "httpRequestId": "cbb52fc0-b87b-4ac5-bf6b-10864e82f570"
        },
        "item": {
          "id": "fa6a1636-13b2-4f49-b23b-190771c9f82f",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "6fff651e-885b-4a4c-94bb-78d5cf08878f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 72,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d7366598-ff6c-4cef-91ce-da1f96f15320",
        "cursor": {
          "ref": "9b8c0f76-d7de-4dcb-bb1e-f261fde3e80a",
          "length": 283,
          "cycles": 1,
          "position": 122,
          "iteration": 0,
          "httpRequestId": "9d964f4b-5ca4-42b9-98bc-1af24452b29e"
        },
        "item": {
          "id": "d7366598-ff6c-4cef-91ce-da1f96f15320",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "085bcb33-0a1f-448b-851e-b9f9cd2b9daa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 78,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "45e3cf67-bf3f-400c-98b3-b460a559c089",
        "cursor": {
          "ref": "be0e0391-50bd-4ade-ad8b-a4a1c283f9a7",
          "length": 283,
          "cycles": 1,
          "position": 123,
          "iteration": 0,
          "httpRequestId": "654a931f-f3c1-4075-8e23-d23dd9d31565"
        },
        "item": {
          "id": "45e3cf67-bf3f-400c-98b3-b460a559c089",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "f68d41e6-6e12-4666-8f36-f08d5d9f42ba",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 74,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b33d9290-dd2c-4754-ac6a-c69a370a38cb",
        "cursor": {
          "ref": "24cc6877-c56b-487d-a35d-01e6f943d1f4",
          "length": 283,
          "cycles": 1,
          "position": 124,
          "iteration": 0,
          "httpRequestId": "41cd56bd-c0aa-4d6f-b1ac-9aa874f9d1c9"
        },
        "item": {
          "id": "b33d9290-dd2c-4754-ac6a-c69a370a38cb",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "1e1c3863-6ef1-41d5-bd15-8f1d5706b6f6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 77,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8d2b1274-05d3-40c0-adae-1a663b262870",
        "cursor": {
          "ref": "f1647988-defc-4e13-a800-3d89f06700d8",
          "length": 283,
          "cycles": 1,
          "position": 125,
          "iteration": 0,
          "httpRequestId": "5fc6e8d3-ce6e-4831-a779-9a3b3a3ba9bb"
        },
        "item": {
          "id": "8d2b1274-05d3-40c0-adae-1a663b262870",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "39369f10-4e1f-42c1-b188-5aa07de86189",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 76,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e55489c5-b37c-4819-9bca-4e5ff71dc0f1",
        "cursor": {
          "ref": "359588fd-89ce-415a-b86f-6597ead0ee40",
          "length": 283,
          "cycles": 1,
          "position": 126,
          "iteration": 0,
          "httpRequestId": "f2a30fb6-c408-4258-9c81-685bc5fde2de"
        },
        "item": {
          "id": "e55489c5-b37c-4819-9bca-4e5ff71dc0f1",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "fe018abe-3680-43c7-8898-248f9910d513",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 74,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bbf9872e-8af5-4d8b-89b8-ac9a055eb86a",
        "cursor": {
          "ref": "b2d72ae7-83ae-42e1-b548-e4c3d65e5a0b",
          "length": 283,
          "cycles": 1,
          "position": 127,
          "iteration": 0,
          "httpRequestId": "9740c68e-a536-483c-9fee-36f37da3ad4d"
        },
        "item": {
          "id": "bbf9872e-8af5-4d8b-89b8-ac9a055eb86a",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "97928aeb-9e9d-4db0-af4f-77645aed2865",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 73,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ea870980-0c3d-4ca8-b77d-b03396e5188a",
        "cursor": {
          "ref": "c9086f34-f5c7-4a6b-a146-e52770177336",
          "length": 283,
          "cycles": 1,
          "position": 128,
          "iteration": 0,
          "httpRequestId": "445a8a0b-9e95-4a3e-bb90-658ab39c1761"
        },
        "item": {
          "id": "ea870980-0c3d-4ca8-b77d-b03396e5188a",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "8884847a-c00a-4cfc-abea-1c13018dc7e2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 77,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a5a5876c-c0a4-4909-9f8a-fca68a370b7c",
        "cursor": {
          "ref": "37305668-c89c-425b-b63b-5c971b55dc61",
          "length": 283,
          "cycles": 1,
          "position": 129,
          "iteration": 0,
          "httpRequestId": "8377b758-f5a7-4dbd-847b-242aa20b4245"
        },
        "item": {
          "id": "a5a5876c-c0a4-4909-9f8a-fca68a370b7c",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "fd053b28-f244-440d-820d-db877d4aea18",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 76,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a8116ce6-5d6f-449f-943e-8e003a04da6a",
        "cursor": {
          "ref": "d6c53ced-c766-4763-b2d9-430d985d5243",
          "length": 283,
          "cycles": 1,
          "position": 130,
          "iteration": 0,
          "httpRequestId": "9427b28e-0eab-46b2-b836-f929f9b3f556"
        },
        "item": {
          "id": "a8116ce6-5d6f-449f-943e-8e003a04da6a",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "c085fd3a-c20a-4491-a1ce-e09a4a4b6689",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 72,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bc7556f4-4453-440a-b79d-c231dccb264c",
        "cursor": {
          "ref": "b83d5531-f666-4787-b785-192b2e59f484",
          "length": 283,
          "cycles": 1,
          "position": 131,
          "iteration": 0,
          "httpRequestId": "6eee6a51-ebc4-4b8c-bb32-3fa86eb81312"
        },
        "item": {
          "id": "bc7556f4-4453-440a-b79d-c231dccb264c",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "99bcc400-9363-453d-bcc4-a4c8538d0caf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 78,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "47d828a3-137e-4b15-9fe9-16f3c10a8725",
        "cursor": {
          "ref": "13c73ec8-d77e-44c3-b6f6-901f75f49c02",
          "length": 283,
          "cycles": 1,
          "position": 132,
          "iteration": 0,
          "httpRequestId": "726e8b42-5d90-4b4f-a81e-332e4664ddd9"
        },
        "item": {
          "id": "47d828a3-137e-4b15-9fe9-16f3c10a8725",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "2504168a-1f99-4903-bc7d-bce57a727fba",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 74,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "64e7411d-4930-4f44-9cac-729f444fa2da",
        "cursor": {
          "ref": "d9a9a5d6-335b-4dd4-a351-44d48769f9b1",
          "length": 283,
          "cycles": 1,
          "position": 133,
          "iteration": 0,
          "httpRequestId": "b2621dfd-8a11-444c-a74d-e24054bf7806"
        },
        "item": {
          "id": "64e7411d-4930-4f44-9cac-729f444fa2da",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "f649e698-22ea-4656-8182-0a1ce339e00f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 72,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e4fb31ae-cda2-43e8-9797-c3fe2b60840a",
        "cursor": {
          "ref": "74906bd9-095a-40f5-86e7-64f0b7195cfd",
          "length": 283,
          "cycles": 1,
          "position": 134,
          "iteration": 0,
          "httpRequestId": "3dee0bbd-b01a-4682-898d-cea5fe625a6b"
        },
        "item": {
          "id": "e4fb31ae-cda2-43e8-9797-c3fe2b60840a",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "f34bf57c-fc6c-4d82-b80d-e81f14210430",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 76,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9ebade4a-e228-4591-9ff9-826380eb8a46",
        "cursor": {
          "ref": "78294439-4d36-441c-91dc-d94b2966e7de",
          "length": 283,
          "cycles": 1,
          "position": 135,
          "iteration": 0,
          "httpRequestId": "6a35ffd5-7baf-488a-aedc-54a097173f62"
        },
        "item": {
          "id": "9ebade4a-e228-4591-9ff9-826380eb8a46",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "c5519741-b501-4876-9a90-bebf64ca0717",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 74,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a3803610-cb3a-42b7-bed6-da8ab24d2c86",
        "cursor": {
          "ref": "839867be-c67c-4b1e-843e-2bc9b98fbe36",
          "length": 283,
          "cycles": 1,
          "position": 136,
          "iteration": 0,
          "httpRequestId": "e5219abc-331f-4a1a-97df-79ecb7e9585d"
        },
        "item": {
          "id": "a3803610-cb3a-42b7-bed6-da8ab24d2c86",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "0682462c-bdce-4f83-980f-e60f82b55eed",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 74,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "028c4e6b-0256-4495-b454-2531d3357200",
        "cursor": {
          "ref": "db047f17-c83f-4c72-9b40-75f37b53b42f",
          "length": 283,
          "cycles": 1,
          "position": 137,
          "iteration": 0,
          "httpRequestId": "db7d63c4-9459-4074-867e-8b47b70df2d2"
        },
        "item": {
          "id": "028c4e6b-0256-4495-b454-2531d3357200",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "92a28353-1db3-4479-b58c-12fd5a0f87a9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 75,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2507249d-08d9-4ded-912c-28fd7338b34e",
        "cursor": {
          "ref": "ac0319fe-c894-43c8-9a9d-e6dc5c2264a1",
          "length": 283,
          "cycles": 1,
          "position": 138,
          "iteration": 0,
          "httpRequestId": "18660f9f-6a03-42f3-b9e5-2e50a6138560"
        },
        "item": {
          "id": "2507249d-08d9-4ded-912c-28fd7338b34e",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "a75fa85f-6630-48eb-8d57-3aae1973f95d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 80,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5c912ff1-a0ec-4945-a677-9f591b29169a",
        "cursor": {
          "ref": "531b07df-e307-42a3-b71a-c2c9dcc544ba",
          "length": 283,
          "cycles": 1,
          "position": 139,
          "iteration": 0,
          "httpRequestId": "833d347c-f017-4447-babc-23f93fc87a05"
        },
        "item": {
          "id": "5c912ff1-a0ec-4945-a677-9f591b29169a",
          "name": "credentials_status:credentialStatus:item:status:invalid"
        },
        "response": {
          "id": "d80b75d6-c534-47e7-95a8-1db563bba333",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 77,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bb689f1d-c89b-48e8-b935-15f8c0310c63",
        "cursor": {
          "ref": "69bb6917-318e-4f04-a22c-46ca6dcca8f9",
          "length": 283,
          "cycles": 1,
          "position": 140,
          "iteration": 0,
          "httpRequestId": "98b6dd95-f24e-4029-8204-b9536bce62e7"
        },
        "item": {
          "id": "bb689f1d-c89b-48e8-b935-15f8c0310c63",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "aba888f5-3215-4c6d-b3cd-8cbc2f141032",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 61,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a84dc4cc-bad7-4cdc-976f-4318fdcb77d2",
        "cursor": {
          "ref": "78831324-b4e4-46c1-b830-752c54314d45",
          "length": 283,
          "cycles": 1,
          "position": 141,
          "iteration": 0,
          "httpRequestId": "8e798357-b7a9-48c3-a0dc-a88475d20be1"
        },
        "item": {
          "id": "a84dc4cc-bad7-4cdc-976f-4318fdcb77d2",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "efc5fd33-cf12-45a5-9f08-312dd4822f93",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 76,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7eb00aa2-e4f3-49bc-a678-715ac3adf89d",
        "cursor": {
          "ref": "bea60e6e-0400-4c06-b9d4-076f54ff9280",
          "length": 283,
          "cycles": 1,
          "position": 142,
          "iteration": 0,
          "httpRequestId": "d9d0a4a7-ded3-4aa1-9472-66f2ca4bf873"
        },
        "item": {
          "id": "7eb00aa2-e4f3-49bc-a678-715ac3adf89d",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "a9b62222-7088-4b93-9198-5c66f9132f52",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 74,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "988ef8b4-baed-4915-a0b1-e3882a3b24f5",
        "cursor": {
          "ref": "228efc18-88d7-4b57-8a38-884b0356b628",
          "length": 283,
          "cycles": 1,
          "position": 143,
          "iteration": 0,
          "httpRequestId": "27350a30-6b11-4528-ad97-b5d401179d55"
        },
        "item": {
          "id": "988ef8b4-baed-4915-a0b1-e3882a3b24f5",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "582f1feb-1227-4982-a71f-e0539e0e766d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 75,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2fa137b0-1f5a-4455-9b5e-abd2f8ad5a54",
        "cursor": {
          "ref": "c78ad1a6-061f-4dcd-be4d-db2e9677f3ba",
          "length": 283,
          "cycles": 1,
          "position": 144,
          "iteration": 0,
          "httpRequestId": "c5e19042-396e-490a-a4bd-5b65d55982ab"
        },
        "item": {
          "id": "2fa137b0-1f5a-4455-9b5e-abd2f8ad5a54",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "ab117561-90ab-4d11-a607-4ce2ff0d3bfe",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 75,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "326b76ea-d6d2-4f26-a7cf-d5f3d85320b0",
        "cursor": {
          "ref": "def50da6-0289-4aa1-bac5-038e1b8fc818",
          "length": 283,
          "cycles": 1,
          "position": 145,
          "iteration": 0,
          "httpRequestId": "f61899c1-2864-48eb-b2d9-f718632d99b9"
        },
        "item": {
          "id": "326b76ea-d6d2-4f26-a7cf-d5f3d85320b0",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "99f0aa7e-6014-4ac8-aff0-ed160679dc1d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 75,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "83a429da-9163-4b65-b804-584121246014",
        "cursor": {
          "ref": "bb5a9450-c71b-4d1b-9b5f-fd7f332a0fb6",
          "length": 283,
          "cycles": 1,
          "position": 146,
          "iteration": 0,
          "httpRequestId": "658d2b5c-9c36-4b2a-98e3-765ac97b559e"
        },
        "item": {
          "id": "83a429da-9163-4b65-b804-584121246014",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "667894ea-715b-4db2-8b1e-2e7495fb0ca0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 80,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "af5c7216-4854-46fd-b663-ffa092fb7292",
        "cursor": {
          "ref": "87ca8b73-4216-4e6e-b8da-dacd02045093",
          "length": 283,
          "cycles": 1,
          "position": 147,
          "iteration": 0,
          "httpRequestId": "d4c1804d-9105-4ecf-a85a-a5fd754e8ca5"
        },
        "item": {
          "id": "af5c7216-4854-46fd-b663-ffa092fb7292",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "8ad4c9f5-0f86-4144-bbe6-6dec3b68a98d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 77,
          "responseSize": 146
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "075504b6-d25a-4209-b52c-3a70e089aa4b",
        "cursor": {
          "ref": "404499e1-3074-4401-b2af-c1e432c30abc",
          "length": 283,
          "cycles": 1,
          "position": 148,
          "iteration": 0,
          "httpRequestId": "4acc5a26-3e59-4899-8359-48b59f17497d"
        },
        "item": {
          "id": "075504b6-d25a-4209-b52c-3a70e089aa4b",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "ff708204-3fac-4f8e-8c91-1b7acb1dbe9c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 73,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "35885361-098a-4064-a273-44360369670c",
        "cursor": {
          "ref": "fe1f02ae-eb3d-4894-ae78-59d68859dda7",
          "length": 283,
          "cycles": 1,
          "position": 149,
          "iteration": 0,
          "httpRequestId": "a95fe972-7d46-4052-aaa9-f13c13dfa70d"
        },
        "item": {
          "id": "35885361-098a-4064-a273-44360369670c",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "3a03176d-f80d-451b-9471-11d3590ee9c1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 71,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9a35883e-d0b9-4adf-a02b-464a90dde819",
        "cursor": {
          "ref": "61a9c542-9628-446e-930c-286ab830f1e1",
          "length": 283,
          "cycles": 1,
          "position": 150,
          "iteration": 0,
          "httpRequestId": "3eaeccb1-e773-4839-a3b6-10d983ae9929"
        },
        "item": {
          "id": "9a35883e-d0b9-4adf-a02b-464a90dde819",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "63b7142f-e32e-48e0-8bf2-4dc356018c48",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 77,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c7600008-84de-4648-ae06-7a2402c40e64",
        "cursor": {
          "ref": "5d541334-fb88-4509-aae7-93b1b0bc3587",
          "length": 283,
          "cycles": 1,
          "position": 151,
          "iteration": 0,
          "httpRequestId": "a6a5dfc9-e7e2-4222-a1a3-de3c68ae34b3"
        },
        "item": {
          "id": "c7600008-84de-4648-ae06-7a2402c40e64",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "9fb08174-84b3-4bdc-8051-3c26e73f47fd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 76,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "651a1355-b8f4-4e6e-a90c-9b16b97808f5",
        "cursor": {
          "ref": "1d4295a0-b940-4d31-aaab-b94f26de4af8",
          "length": 283,
          "cycles": 1,
          "position": 152,
          "iteration": 0,
          "httpRequestId": "2fb29262-b9c0-407e-b844-d477ac320b36"
        },
        "item": {
          "id": "651a1355-b8f4-4e6e-a90c-9b16b97808f5",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "6798d9f9-0ae5-497d-aa3b-ce00f210a494",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 76,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "92a9bb33-391b-40ab-9d5b-5111758cfd7a",
        "cursor": {
          "ref": "60490c9b-b8b4-473e-982a-dcaf6e9358a3",
          "length": 283,
          "cycles": 1,
          "position": 153,
          "iteration": 0,
          "httpRequestId": "475b0b26-2c9a-4a8d-a1f3-8bc751f5586b"
        },
        "item": {
          "id": "92a9bb33-391b-40ab-9d5b-5111758cfd7a",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "7d21579c-6ba9-4a05-816c-7d2d47df22b3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 81,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2964c1aa-fd4b-4a6e-90d2-a18a4685e12f",
        "cursor": {
          "ref": "132dd924-08fc-490d-998e-eb8762669714",
          "length": 283,
          "cycles": 1,
          "position": 154,
          "iteration": 0,
          "httpRequestId": "5982ed96-f20d-4956-91df-eee28c574263"
        },
        "item": {
          "id": "2964c1aa-fd4b-4a6e-90d2-a18a4685e12f",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "c0b0a648-8051-44bf-b7bb-932ac06c0bdf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 74,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bca7f872-ec2e-4849-8385-92df9b6fda0d",
        "cursor": {
          "ref": "c1c3cddc-488d-4f4c-96e6-bc927e3b7719",
          "length": 283,
          "cycles": 1,
          "position": 155,
          "iteration": 0,
          "httpRequestId": "2007dad9-ab0b-43c2-a980-9bdcb343cce2"
        },
        "item": {
          "id": "bca7f872-ec2e-4849-8385-92df9b6fda0d",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "2fff8390-4f45-4489-bf22-81a0ffda27a9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 73,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "582850fc-c40f-496d-8896-0558cb7d135e",
        "cursor": {
          "ref": "69b49b31-93c2-43ec-9f79-2b10c370299f",
          "length": 283,
          "cycles": 1,
          "position": 156,
          "iteration": 0,
          "httpRequestId": "28ff094b-a81b-4bbc-8aef-733aee84eb54"
        },
        "item": {
          "id": "582850fc-c40f-496d-8896-0558cb7d135e",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "5f597e47-9bf7-44ae-a458-abebf913587b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 75,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "807244f2-7e4d-41ac-938f-5c4ef8d0a4e7",
        "cursor": {
          "ref": "2d6c14f4-58a9-4ed9-bd87-cd9dca6aa166",
          "length": 283,
          "cycles": 1,
          "position": 157,
          "iteration": 0,
          "httpRequestId": "453d7a39-52cc-4248-94e6-dc207de5149d"
        },
        "item": {
          "id": "807244f2-7e4d-41ac-938f-5c4ef8d0a4e7",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "7ae67252-3954-4bf3-8117-5b787321887c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 78,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e2535632-bd2b-4ee6-80d1-cde75e4fbb2f",
        "cursor": {
          "ref": "6d25cbcc-e81a-427d-8991-8e2c2d2a9f30",
          "length": 283,
          "cycles": 1,
          "position": 158,
          "iteration": 0,
          "httpRequestId": "e8e30038-e283-45e6-8949-926b37debc7a"
        },
        "item": {
          "id": "e2535632-bd2b-4ee6-80d1-cde75e4fbb2f",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "486f2807-b31d-4a97-824e-f25b870a35bc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 73,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5974244e-73e2-45f9-8440-7ab94c07780e",
        "cursor": {
          "ref": "a52709c1-fa3d-42f8-9252-6e99073e31e5",
          "length": 283,
          "cycles": 1,
          "position": 159,
          "iteration": 0,
          "httpRequestId": "378d2948-6ce3-464d-8291-2c5038f6aecc"
        },
        "item": {
          "id": "5974244e-73e2-45f9-8440-7ab94c07780e",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "2b20ce6a-10fc-44f8-a8da-d4b5301e93b9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 77,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3ebbb0eb-2efa-432d-b380-a74446018a2b",
        "cursor": {
          "ref": "d3ce3db3-4c78-404a-b14f-b25ded94b4fb",
          "length": 283,
          "cycles": 1,
          "position": 160,
          "iteration": 0,
          "httpRequestId": "94b584d1-da84-424f-8738-e185392f065a"
        },
        "item": {
          "id": "3ebbb0eb-2efa-432d-b380-a74446018a2b",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "669b03e6-2177-4f1d-8038-8c8d1e4caf0c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 75,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c9937633-e309-4723-8ccd-91dadf60b9d1",
        "cursor": {
          "ref": "f77a9901-d137-401d-bf1a-e6804cd6cdd9",
          "length": 283,
          "cycles": 1,
          "position": 161,
          "iteration": 0,
          "httpRequestId": "7284e171-52a2-4f98-9082-8d34206d28a7"
        },
        "item": {
          "id": "c9937633-e309-4723-8ccd-91dadf60b9d1",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "9fe80524-096b-4356-9ee6-0930d74ad0dd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 72,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c11d2e4e-10ff-4e49-a555-efeb773155f6",
        "cursor": {
          "ref": "52a8b7f7-b15e-42c4-9235-54067358b368",
          "length": 283,
          "cycles": 1,
          "position": 162,
          "iteration": 0,
          "httpRequestId": "6e9438e1-688f-416f-844f-3edc8849a9a7"
        },
        "item": {
          "id": "c11d2e4e-10ff-4e49-a555-efeb773155f6",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "1964ef7e-91d5-446d-886d-c76a01533122",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 75,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "34dfb97f-c23d-4856-990a-a76bc27a77fc",
        "cursor": {
          "ref": "923a5df5-59e9-4ea9-a4a3-aa8a45fd4a43",
          "length": 283,
          "cycles": 1,
          "position": 163,
          "iteration": 0,
          "httpRequestId": "3cf4ab3e-82cd-4eaf-9c17-d5c04830d0cc"
        },
        "item": {
          "id": "34dfb97f-c23d-4856-990a-a76bc27a77fc",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "10aebbab-ef1f-4cf5-99fc-64efd899b839",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 73,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "98c67b3a-5123-4644-b1dc-c74a47397ab9",
        "cursor": {
          "ref": "dfb2119e-fe04-4b67-9701-652a166a4822",
          "length": 283,
          "cycles": 1,
          "position": 164,
          "iteration": 0,
          "httpRequestId": "c1be0c35-0679-4942-a691-756f6210c75d"
        },
        "item": {
          "id": "98c67b3a-5123-4644-b1dc-c74a47397ab9",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "a909b0db-f498-40ad-b7cd-14f4878ec6bf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 72,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "74c1ddfa-18cc-4f1f-9e3e-2f4eac8e0489",
        "cursor": {
          "ref": "aedb287c-8219-4ea3-b20c-dbe13ca9b4ee",
          "length": 283,
          "cycles": 1,
          "position": 165,
          "iteration": 0,
          "httpRequestId": "abbda969-a6ce-418e-abf3-88eaac7f67e1"
        },
        "item": {
          "id": "74c1ddfa-18cc-4f1f-9e3e-2f4eac8e0489",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "63aa95cc-5f9f-40b0-a849-0db79fd476cb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 75,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "43085061-09d3-43a3-b5bb-440e04f2c84e",
        "cursor": {
          "ref": "c9094159-7e49-49d7-b0a3-860d00e2863f",
          "length": 283,
          "cycles": 1,
          "position": 166,
          "iteration": 0,
          "httpRequestId": "7ccf0ce8-c6fe-46e4-a5fe-89bc73565ff3"
        },
        "item": {
          "id": "43085061-09d3-43a3-b5bb-440e04f2c84e",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "112be596-f827-4536-83af-9221f9e3ee5e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 74,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "93bf6dc3-0a00-42ba-9349-92d8af1d78a1",
        "cursor": {
          "ref": "503b47dd-2f9f-4937-91e1-10adc5f4b498",
          "length": 283,
          "cycles": 1,
          "position": 167,
          "iteration": 0,
          "httpRequestId": "164f605b-d502-43e5-815f-796c4b222d3f"
        },
        "item": {
          "id": "93bf6dc3-0a00-42ba-9349-92d8af1d78a1",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "6c28277e-db19-40c6-bb03-67ec417816eb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 72,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "121a293b-68c4-46b0-806b-edf9fe36d3e5",
        "cursor": {
          "ref": "b79508e8-4ff8-4b78-8986-c9a55122f151",
          "length": 283,
          "cycles": 1,
          "position": 168,
          "iteration": 0,
          "httpRequestId": "33a6b7a7-51c7-412d-838d-aeeb6cb453c9"
        },
        "item": {
          "id": "121a293b-68c4-46b0-806b-edf9fe36d3e5",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "760a1732-41d5-4923-a249-333d6c386aac",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 76,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a09ba1d4-65d8-4178-a4d0-1c08548f133a",
        "cursor": {
          "ref": "34755c73-6054-4798-aa7b-cdfc014c5df0",
          "length": 283,
          "cycles": 1,
          "position": 169,
          "iteration": 0,
          "httpRequestId": "a9549aaa-4718-4463-80fb-ed8946c83da8"
        },
        "item": {
          "id": "a09ba1d4-65d8-4178-a4d0-1c08548f133a",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "1cb7a0e0-787e-44da-895a-a7cd984314c3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 79,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "05d5cca2-78f9-414f-a05f-e23e5bbaea58",
        "cursor": {
          "ref": "f5ebf5cd-ccd3-41c8-85b2-633261920318",
          "length": 283,
          "cycles": 1,
          "position": 170,
          "iteration": 0,
          "httpRequestId": "9c1ca355-c04f-49e5-a79e-286b6ead0ebf"
        },
        "item": {
          "id": "05d5cca2-78f9-414f-a05f-e23e5bbaea58",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "9161e0f5-2df8-44f4-af81-a4e5c67378ef",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 71,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "036647f4-d581-41b0-aeab-5048823a4e67",
        "cursor": {
          "ref": "a52691c0-21c7-49fa-8120-30125cd915e9",
          "length": 283,
          "cycles": 1,
          "position": 171,
          "iteration": 0,
          "httpRequestId": "45637ba0-6af5-45ec-ac06-d4d0506e0395"
        },
        "item": {
          "id": "036647f4-d581-41b0-aeab-5048823a4e67",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "fc94547e-b478-4659-8284-75fbce1f2a0f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 77,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f7c02b63-ded7-4949-a20f-6dd30a73d580",
        "cursor": {
          "ref": "052c62d8-3807-4e46-9b34-6e64d930162b",
          "length": 283,
          "cycles": 1,
          "position": 172,
          "iteration": 0,
          "httpRequestId": "3b1949db-824c-4b77-9794-bb69b5d402f4"
        },
        "item": {
          "id": "f7c02b63-ded7-4949-a20f-6dd30a73d580",
          "name": "credentials_status:credentialStatus:item:purpose:missing"
        },
        "response": {
          "id": "7986aade-abe8-4c3a-b5a3-e9f06e41eca8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 74,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7151e30d-0850-4c14-9681-4adac2502b43",
        "cursor": {
          "ref": "7e9e8a00-2d53-42da-988b-2630c7dc5bbd",
          "length": 283,
          "cycles": 1,
          "position": 173,
          "iteration": 0,
          "httpRequestId": "dc7aca5d-09c8-42e1-b7c5-13c0886de1b8"
        },
        "item": {
          "id": "7151e30d-0850-4c14-9681-4adac2502b43",
          "name": "credentials_status:credentialStatus:item:purpose:array"
        },
        "response": {
          "id": "a2d5c738-9db1-4d3b-a41b-8ba19a238324",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 71,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4889805b-f693-43a1-83d3-4796ad32a3dd",
        "cursor": {
          "ref": "e69751bd-6f51-4051-b0bb-b30c1cf8cf01",
          "length": 283,
          "cycles": 1,
          "position": 174,
          "iteration": 0,
          "httpRequestId": "6aff8ca6-5a59-4ffa-9db7-d7d2162070f3"
        },
        "item": {
          "id": "4889805b-f693-43a1-83d3-4796ad32a3dd",
          "name": "credentials_status:credentialStatus:item:purpose:boolean"
        },
        "response": {
          "id": "df2cfd14-f01f-4dee-bfef-e85ac9abd791",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 77,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "19231c91-ab8c-4d7e-8c58-1aa83bf5821e",
        "cursor": {
          "ref": "a9186375-da33-48f9-b54e-ecbcdc333e62",
          "length": 283,
          "cycles": 1,
          "position": 175,
          "iteration": 0,
          "httpRequestId": "50aefa93-1ce4-4a55-8673-784cf21ab69b"
        },
        "item": {
          "id": "19231c91-ab8c-4d7e-8c58-1aa83bf5821e",
          "name": "credentials_status:credentialStatus:item:purpose:integer"
        },
        "response": {
          "id": "4240b7e0-9c03-42da-bbd0-6a799a572f56",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 77,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9cf378c0-8d8e-4f9e-940f-1b50ae1f1ec0",
        "cursor": {
          "ref": "205b074b-1816-4493-b4ab-d9e9dd34e690",
          "length": 283,
          "cycles": 1,
          "position": 176,
          "iteration": 0,
          "httpRequestId": "fed83667-0d25-4af4-953a-345e37f33a62"
        },
        "item": {
          "id": "9cf378c0-8d8e-4f9e-940f-1b50ae1f1ec0",
          "name": "credentials_status:credentialStatus:item:purpose:null"
        },
        "response": {
          "id": "3b7949a4-bf09-4cd6-9936-94f17cebb7e6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 86,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7398044f-9dcd-4f8f-ad6a-c581770c7c11",
        "cursor": {
          "ref": "e2319ee4-16cc-4831-83fd-38c542e392e1",
          "length": 283,
          "cycles": 1,
          "position": 177,
          "iteration": 0,
          "httpRequestId": "815fff45-d1f3-49b6-992b-45e05cc66741"
        },
        "item": {
          "id": "7398044f-9dcd-4f8f-ad6a-c581770c7c11",
          "name": "credentials_status:credentialStatus:item:purpose:object"
        },
        "response": {
          "id": "c26b1046-c007-4b1b-943e-ad06bedbf38e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 76,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d3288bfb-d089-4e3d-abbb-fa1614cb01d4",
        "cursor": {
          "ref": "b6c60a86-53b4-44c3-a5f1-81855dfb326d",
          "length": 283,
          "cycles": 1,
          "position": 178,
          "iteration": 0,
          "httpRequestId": "a4fdb545-012f-4610-bd60-843c6f58063f"
        },
        "item": {
          "id": "d3288bfb-d089-4e3d-abbb-fa1614cb01d4",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "3bc9307f-11e2-4562-a74d-37bbdfc3d50b",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 60,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dbc11de5-7102-489c-baaa-f9f00afe2eae",
        "cursor": {
          "ref": "235ae89c-287c-472d-a2fe-48b211f5a352",
          "length": 283,
          "cycles": 1,
          "position": 179,
          "iteration": 0,
          "httpRequestId": "2156fd9b-6f6e-4c9c-9442-608dc3e0b7a1"
        },
        "item": {
          "id": "dbc11de5-7102-489c-baaa-f9f00afe2eae",
          "name": "credentials_verify:vc:missing"
        },
        "response": {
          "id": "0595ea4c-0799-44ad-9422-cd729d0ed9a1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 78,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "28b9a6c6-6574-47fc-8a9a-0d8152d5211f",
        "cursor": {
          "ref": "7212e647-446e-4ba6-a0ae-3d56f4214757",
          "length": 283,
          "cycles": 1,
          "position": 180,
          "iteration": 0,
          "httpRequestId": "e4a50b73-1ddb-4738-9e20-3d9c29b9f68b"
        },
        "item": {
          "id": "28b9a6c6-6574-47fc-8a9a-0d8152d5211f",
          "name": "credentials_verify:vc:string"
        },
        "response": {
          "id": "9ec40f14-f311-4d13-a193-ca1fd564d0b9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 71,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3df60676-7107-4f8e-bfaa-d7e9559097d6",
        "cursor": {
          "ref": "82566451-3226-46d0-9cdd-e697b0d8a0c1",
          "length": 283,
          "cycles": 1,
          "position": 181,
          "iteration": 0,
          "httpRequestId": "66a94df3-3e25-47ce-a73e-6797eb120672"
        },
        "item": {
          "id": "3df60676-7107-4f8e-bfaa-d7e9559097d6",
          "name": "credentials_verify:vc:null"
        },
        "response": {
          "id": "53516d02-3c3d-4001-9aed-5c4aa21c0402",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 75,
          "responseSize": 171
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c95de01e-c665-4f98-b7de-8f21e87cfd18",
        "cursor": {
          "ref": "3bd02e2c-380c-42da-bcb7-15dd2cd2f340",
          "length": 283,
          "cycles": 1,
          "position": 182,
          "iteration": 0,
          "httpRequestId": "88007fa3-e88a-4ebd-a94d-6df42259a2fe"
        },
        "item": {
          "id": "c95de01e-c665-4f98-b7de-8f21e87cfd18",
          "name": "credentials_verify:vc:integer"
        },
        "response": {
          "id": "efb76538-194d-40e4-9d1f-79cbaf49d847",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 74,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b2c740df-6d97-4d8e-96ac-09997c55b920",
        "cursor": {
          "ref": "15817e43-f47c-4246-8e5a-3512fbcaad5b",
          "length": 283,
          "cycles": 1,
          "position": 183,
          "iteration": 0,
          "httpRequestId": "860ef5e9-e28e-4e8c-9fea-731548b6b765"
        },
        "item": {
          "id": "b2c740df-6d97-4d8e-96ac-09997c55b920",
          "name": "credentials_verify:vc:boolean"
        },
        "response": {
          "id": "f7993a8b-11cd-4102-bc45-2114c9b661f2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1c2a7a76-2f08-4bd6-bf6e-53cc5d6881e6",
        "cursor": {
          "ref": "ba91cb32-7f49-4677-9d90-7aadd0c17eb1",
          "length": 283,
          "cycles": 1,
          "position": 184,
          "iteration": 0,
          "httpRequestId": "ac53a2bc-5685-47c2-a3c6-7e18562eb3d6"
        },
        "item": {
          "id": "1c2a7a76-2f08-4bd6-bf6e-53cc5d6881e6",
          "name": "credentials_verify:vc:array"
        },
        "response": {
          "id": "c4dc0dc7-69ff-4318-a20f-30c52f860994",
          "status": "OK",
          "code": 200,
          "responseTime": 214,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:185)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:185)"
            }
          }
        ]
      },
      {
        "id": "a416bdbe-3291-4710-a28e-f3481b88518a",
        "cursor": {
          "ref": "144d0381-ed29-46e1-9c38-f08810259e7c",
          "length": 283,
          "cycles": 1,
          "position": 185,
          "iteration": 0,
          "httpRequestId": "4591775c-c0d4-4d86-b9be-1cdb8bf1dce8"
        },
        "item": {
          "id": "a416bdbe-3291-4710-a28e-f3481b88518a",
          "name": "credentials_verify:vc:@context:missing"
        },
        "response": {
          "id": "e21e801b-9c9c-42d7-bef2-bbf416c76ef2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 76,
          "responseSize": 242
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "99972769-fdd2-4029-8be3-0d8b5e232821",
        "cursor": {
          "ref": "8a6a8460-ca17-41bd-91c5-6b22ce5d6f52",
          "length": 283,
          "cycles": 1,
          "position": 186,
          "iteration": 0,
          "httpRequestId": "8123053b-b237-4306-b657-e375055a6b54"
        },
        "item": {
          "id": "99972769-fdd2-4029-8be3-0d8b5e232821",
          "name": "credentials_verify:vc:@context:boolean"
        },
        "response": {
          "id": "87edbedb-c6a0-4210-8c93-90d0daf79983",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 72,
          "responseSize": 305
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "23d8f17c-3b02-4fdd-8084-8423132c534b",
        "cursor": {
          "ref": "7c92201b-0d32-456e-863c-e86ad6e18e74",
          "length": 283,
          "cycles": 1,
          "position": 187,
          "iteration": 0,
          "httpRequestId": "baf07106-2cdf-46b3-b972-b1495c1d186d"
        },
        "item": {
          "id": "23d8f17c-3b02-4fdd-8084-8423132c534b",
          "name": "credentials_verify:vc:@context:integer"
        },
        "response": {
          "id": "4eaec593-041a-44cd-aac0-db36eaae9828",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 86,
          "responseSize": 305
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3c13ab07-4920-43f0-a346-a2187cfc7f3f",
        "cursor": {
          "ref": "6ade2c67-ec41-421f-8eec-27d2a4c0279f",
          "length": 283,
          "cycles": 1,
          "position": 188,
          "iteration": 0,
          "httpRequestId": "b557d739-3f5d-4c59-9539-6b2a832fbeea"
        },
        "item": {
          "id": "3c13ab07-4920-43f0-a346-a2187cfc7f3f",
          "name": "credentials_verify:vc:@context:null"
        },
        "response": {
          "id": "175034ce-889e-457d-8c93-68b773c5ea16",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 74,
          "responseSize": 305
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "877dc8b9-722e-4aa8-9fe9-dbaf8100e180",
        "cursor": {
          "ref": "7c111860-8fa7-4e45-8d5c-872fbc307a33",
          "length": 283,
          "cycles": 1,
          "position": 189,
          "iteration": 0,
          "httpRequestId": "dc49e6c8-fb15-47d0-8421-cec96d14f7c7"
        },
        "item": {
          "id": "877dc8b9-722e-4aa8-9fe9-dbaf8100e180",
          "name": "credentials_verify:vc:@context:object"
        },
        "response": {
          "id": "31c0eb38-9574-4cf6-a3cc-0e639eef2de4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 76,
          "responseSize": 242
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d77455da-0586-479b-8473-56f864562088",
        "cursor": {
          "ref": "dd3d7762-4d7a-41d5-ab0e-c559cc17f15e",
          "length": 283,
          "cycles": 1,
          "position": 190,
          "iteration": 0,
          "httpRequestId": "d6469cac-4067-496a-8dd5-e3253f787063"
        },
        "item": {
          "id": "d77455da-0586-479b-8473-56f864562088",
          "name": "credentials_verify:vc:@context:string"
        },
        "response": {
          "id": "968853e8-8693-4cdc-bd18-185c13e5a0b4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 75,
          "responseSize": 172
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3c7ff681-62a9-4ad5-ac93-398ae7d794c6",
        "cursor": {
          "ref": "81cd1b04-3b2d-4a66-8047-2c3d88e8668b",
          "length": 283,
          "cycles": 1,
          "position": 191,
          "iteration": 0,
          "httpRequestId": "5f2b44d5-08f4-42a7-9708-75f79cc13d82"
        },
        "item": {
          "id": "3c7ff681-62a9-4ad5-ac93-398ae7d794c6",
          "name": "credentials_verify:vc:@context:item:array"
        },
        "response": {
          "id": "3a850f47-b6d1-4f3a-9291-039101b11537",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 77,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1b3e17a4-1c80-448d-85d6-a77e92799f63",
        "cursor": {
          "ref": "9d9c70b5-4383-49ce-9448-0f001f657051",
          "length": 283,
          "cycles": 1,
          "position": 192,
          "iteration": 0,
          "httpRequestId": "bb987345-251a-40b2-aad1-e4e2bfa079bd"
        },
        "item": {
          "id": "1b3e17a4-1c80-448d-85d6-a77e92799f63",
          "name": "credentials_verify:vc:@context:item:boolean"
        },
        "response": {
          "id": "7619b397-5d34-47ae-83b0-addd0e41cb2d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 74,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "66e33179-0c3f-4ce6-8555-00cc72b56a04",
        "cursor": {
          "ref": "3ec4f1f0-724a-4ec3-a1cb-29a274c04491",
          "length": 283,
          "cycles": 1,
          "position": 193,
          "iteration": 0,
          "httpRequestId": "040702a3-631e-4273-86ac-2f43a4994035"
        },
        "item": {
          "id": "66e33179-0c3f-4ce6-8555-00cc72b56a04",
          "name": "credentials_verify:vc:@context:item:integer"
        },
        "response": {
          "id": "8f4e03f9-ec62-4884-a472-05c5a7741972",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 74,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c402123d-7d07-4bce-befe-f912cd346a0d",
        "cursor": {
          "ref": "b8c67b20-56f9-44db-af4c-44db6fad59c8",
          "length": 283,
          "cycles": 1,
          "position": 194,
          "iteration": 0,
          "httpRequestId": "472996ae-ca53-49c3-9737-848eb1b7c284"
        },
        "item": {
          "id": "c402123d-7d07-4bce-befe-f912cd346a0d",
          "name": "credentials_verify:vc:@context:item:null"
        },
        "response": {
          "id": "0b6ed1c4-575a-43ef-9abb-12e72c04833f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 74,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b665653e-93ff-4192-aed9-cbc1d539473a",
        "cursor": {
          "ref": "88d4cd9f-cd6c-482b-b3e4-e5d9786af225",
          "length": 283,
          "cycles": 1,
          "position": 195,
          "iteration": 0,
          "httpRequestId": "b739f2e9-4c14-4b7b-8af0-dc90db0235b1"
        },
        "item": {
          "id": "b665653e-93ff-4192-aed9-cbc1d539473a",
          "name": "credentials_verify:vc:@context:item:object"
        },
        "response": {
          "id": "04711bda-667c-4f0c-9e68-370609610706",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 73,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8acd25a2-220e-4c8b-af2e-4330bbf25b98",
        "cursor": {
          "ref": "4b1ceaee-5cc0-4ef0-8a43-b70eb114670d",
          "length": 283,
          "cycles": 1,
          "position": 196,
          "iteration": 0,
          "httpRequestId": "2c20ad04-f1ed-4a72-8676-18ae68afef7a"
        },
        "item": {
          "id": "8acd25a2-220e-4c8b-af2e-4330bbf25b98",
          "name": "credentials_verify:vc:id:array"
        },
        "response": {
          "id": "dd0c50ae-440a-4a48-89a1-7689be3980df",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 77,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "540a3039-37a3-4fef-b117-ec42f4242ff6",
        "cursor": {
          "ref": "cc3b9888-8da5-43cb-9935-ecf99888176c",
          "length": 283,
          "cycles": 1,
          "position": 197,
          "iteration": 0,
          "httpRequestId": "cc17a920-ff36-4255-adaf-b6606cd68c43"
        },
        "item": {
          "id": "540a3039-37a3-4fef-b117-ec42f4242ff6",
          "name": "credentials_verify:vc:id:boolean"
        },
        "response": {
          "id": "4b5be3a4-ed13-4309-acc6-c24f812501f6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 77,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "84584eae-bb61-48d9-8fbc-1dec32f0a762",
        "cursor": {
          "ref": "074d1c35-4aaf-4b72-9199-73536f9deb70",
          "length": 283,
          "cycles": 1,
          "position": 198,
          "iteration": 0,
          "httpRequestId": "bdd93c5b-0a4a-470b-bbca-9912d2ae3376"
        },
        "item": {
          "id": "84584eae-bb61-48d9-8fbc-1dec32f0a762",
          "name": "credentials_verify:vc:id:integer"
        },
        "response": {
          "id": "05157f40-f473-464b-aaeb-c00d1723af17",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 72,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b58c44a3-845f-4541-a2da-c812fcc6d87a",
        "cursor": {
          "ref": "56d0650d-e727-43a8-860d-f2cf75bdc607",
          "length": 283,
          "cycles": 1,
          "position": 199,
          "iteration": 0,
          "httpRequestId": "f59f455a-fde1-4c1f-9ec6-4aa64317b25e"
        },
        "item": {
          "id": "b58c44a3-845f-4541-a2da-c812fcc6d87a",
          "name": "credentials_verify:vc:id:null"
        },
        "response": {
          "id": "950cc94f-b0c8-497c-b698-752a79b4936b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 75,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b65575c7-6a6b-4a9b-90e1-9f0fb0376085",
        "cursor": {
          "ref": "9d2726cf-c35a-47e2-a0fc-8baddf38989f",
          "length": 283,
          "cycles": 1,
          "position": 200,
          "iteration": 0,
          "httpRequestId": "2f556fb7-88b9-4505-aac7-acc49cb626a9"
        },
        "item": {
          "id": "b65575c7-6a6b-4a9b-90e1-9f0fb0376085",
          "name": "credentials_verify:vc:id:object"
        },
        "response": {
          "id": "bfa54dcc-b2a5-4225-b295-a426249c4023",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 74,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2162d9d9-e31c-494a-8da2-22fe1ac87e38",
        "cursor": {
          "ref": "4ec60bd8-f07f-4839-a477-671e0fb83742",
          "length": 283,
          "cycles": 1,
          "position": 201,
          "iteration": 0,
          "httpRequestId": "1ac7b08a-6f93-41d6-b203-a1778421806d"
        },
        "item": {
          "id": "2162d9d9-e31c-494a-8da2-22fe1ac87e38",
          "name": "credentials_verify:vc:type:missing"
        },
        "response": {
          "id": "dafd289d-5c25-43af-9a98-28b893bc4cb2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 73,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cd75d2d7-a52b-425e-be14-19d58f6f535f",
        "cursor": {
          "ref": "1fe16a65-eef4-41c1-8340-ffff4c795f61",
          "length": 283,
          "cycles": 1,
          "position": 202,
          "iteration": 0,
          "httpRequestId": "688af8b1-941e-4cc1-b459-eacd801ab787"
        },
        "item": {
          "id": "cd75d2d7-a52b-425e-be14-19d58f6f535f",
          "name": "credentials_verify:vc:type:boolean"
        },
        "response": {
          "id": "e8778077-fad3-44ed-82c5-325b03e0ba49",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 74,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "44c89ee7-841b-4e4d-9205-85b93970460b",
        "cursor": {
          "ref": "98e3baf1-30e6-40a8-9c47-a4df5f57b20c",
          "length": 283,
          "cycles": 1,
          "position": 203,
          "iteration": 0,
          "httpRequestId": "a35ee97e-44ed-4219-bb3c-7682345d9070"
        },
        "item": {
          "id": "44c89ee7-841b-4e4d-9205-85b93970460b",
          "name": "credentials_verify:vc:type:integer"
        },
        "response": {
          "id": "984fadb1-edff-4fee-8a5f-db2bcddc492d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 75,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7ce905ed-ad7b-4e4e-ac2d-824a3c75618f",
        "cursor": {
          "ref": "6b181ec0-e925-4878-96bb-27e2cd11853a",
          "length": 283,
          "cycles": 1,
          "position": 204,
          "iteration": 0,
          "httpRequestId": "ac6faaa6-5a1c-46c1-92ff-4e085d0de10e"
        },
        "item": {
          "id": "7ce905ed-ad7b-4e4e-ac2d-824a3c75618f",
          "name": "credentials_verify:vc:type:null"
        },
        "response": {
          "id": "6ad87e9a-4efc-4b5a-9d4d-912f1e3facfe",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 83,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "52a7c4e1-3b55-4414-82f8-a4eb8b0b07f6",
        "cursor": {
          "ref": "797cfaa2-4614-453d-bead-54dde1cb4dd7",
          "length": 283,
          "cycles": 1,
          "position": 205,
          "iteration": 0,
          "httpRequestId": "293fc5ff-f365-4a34-88eb-a9fd04df4dc0"
        },
        "item": {
          "id": "52a7c4e1-3b55-4414-82f8-a4eb8b0b07f6",
          "name": "credentials_verify:vc:type:object"
        },
        "response": {
          "id": "5afcc6e3-adbe-4044-b98c-20bae04824b3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 75,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "eccde2ba-9ea9-49f6-8cd3-f12327e58a0c",
        "cursor": {
          "ref": "82be889a-09cd-45a3-85d8-fbcf54a07372",
          "length": 283,
          "cycles": 1,
          "position": 206,
          "iteration": 0,
          "httpRequestId": "204cd292-c31f-49f0-b668-d4238d2c2bad"
        },
        "item": {
          "id": "eccde2ba-9ea9-49f6-8cd3-f12327e58a0c",
          "name": "credentials_verify:vc:type:string"
        },
        "response": {
          "id": "e9a454c5-b834-4f03-88ab-f994e3475a6b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 77,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5ebc4b09-a7d3-4580-8486-f069592dfeb3",
        "cursor": {
          "ref": "f406f339-5008-4df4-92d2-20c3ad1fac89",
          "length": 283,
          "cycles": 1,
          "position": 207,
          "iteration": 0,
          "httpRequestId": "1154f0d8-10c0-4a30-af89-b72e736d144d"
        },
        "item": {
          "id": "5ebc4b09-a7d3-4580-8486-f069592dfeb3",
          "name": "credentials_verify:vc:type:item:missing"
        },
        "response": {
          "id": "2d18e0f0-cc19-496b-9c78-6b9b0ec57c5b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 76,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f336365d-60f6-4236-bab4-931524b515bb",
        "cursor": {
          "ref": "edaa9e99-6691-4942-b81e-621e978c7089",
          "length": 283,
          "cycles": 1,
          "position": 208,
          "iteration": 0,
          "httpRequestId": "1b52c7ea-5d86-4e04-8fa5-959fa9d678a3"
        },
        "item": {
          "id": "f336365d-60f6-4236-bab4-931524b515bb",
          "name": "credentials_verify:vc:type:item:array"
        },
        "response": {
          "id": "486fd134-56cb-404b-b2a9-cdc97c4adbbf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 129,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "778fa4c6-ac8f-481a-84e6-6f6d9fd0bd02",
        "cursor": {
          "ref": "d0510689-1616-42fc-9ef5-425668c01b85",
          "length": 283,
          "cycles": 1,
          "position": 209,
          "iteration": 0,
          "httpRequestId": "e3125400-8225-4caf-8a58-faa4394caa29"
        },
        "item": {
          "id": "778fa4c6-ac8f-481a-84e6-6f6d9fd0bd02",
          "name": "credentials_verify:vc:type:item:boolean"
        },
        "response": {
          "id": "a2098c17-e813-4c49-a6a3-04a65204c976",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 74,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dc74d442-0213-4c32-b094-8b18936f4b3a",
        "cursor": {
          "ref": "52ef8c16-91c9-4bcc-bb27-38a53b4ed69c",
          "length": 283,
          "cycles": 1,
          "position": 210,
          "iteration": 0,
          "httpRequestId": "8a831c5e-babf-480a-9f64-382ecd988706"
        },
        "item": {
          "id": "dc74d442-0213-4c32-b094-8b18936f4b3a",
          "name": "credentials_verify:vc:type:item:integer"
        },
        "response": {
          "id": "195aeda9-fe71-4945-b1b8-4d7efa444437",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 73,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b034aa41-db93-4d85-b69a-fe4525394283",
        "cursor": {
          "ref": "6b5e5c84-39e9-48ce-a796-258dfed3824e",
          "length": 283,
          "cycles": 1,
          "position": 211,
          "iteration": 0,
          "httpRequestId": "af061f7d-ec1a-4743-9e46-e468c7d0b719"
        },
        "item": {
          "id": "b034aa41-db93-4d85-b69a-fe4525394283",
          "name": "credentials_verify:vc:type:item:null"
        },
        "response": {
          "id": "3e0131f4-db49-44f7-9b2f-4bc55b546acb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 77,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0ea12acd-37e8-410c-bcda-318977819e76",
        "cursor": {
          "ref": "59d08f59-c2c3-4188-aca2-ed02e892c36d",
          "length": 283,
          "cycles": 1,
          "position": 212,
          "iteration": 0,
          "httpRequestId": "47f15e61-400d-405a-b487-eb8cd356cd5b"
        },
        "item": {
          "id": "0ea12acd-37e8-410c-bcda-318977819e76",
          "name": "credentials_verify:vc:type:item:object"
        },
        "response": {
          "id": "a228d2ec-c4b1-43f8-83a9-895c6acd4119",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 74,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "445ccf5c-3a74-4a9f-8e1f-305dc417d815",
        "cursor": {
          "ref": "46dee137-fa38-44b5-9e94-e0c7404aadea",
          "length": 283,
          "cycles": 1,
          "position": 213,
          "iteration": 0,
          "httpRequestId": "ea063ae0-439a-41e2-a56b-744b75c4507e"
        },
        "item": {
          "id": "445ccf5c-3a74-4a9f-8e1f-305dc417d815",
          "name": "credentials_verify:vc:issuer:missing"
        },
        "response": {
          "id": "bb674495-c32c-4bd8-bd7f-f77fe2e56f49",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 72,
          "responseSize": 106
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "123fe3b3-a5e9-4eb3-a250-2bcb63213492",
        "cursor": {
          "ref": "3fb07d31-ff85-4602-a249-ba6505a97752",
          "length": 283,
          "cycles": 1,
          "position": 214,
          "iteration": 0,
          "httpRequestId": "f755f6cf-90e5-4d45-9600-ce1f9272d102"
        },
        "item": {
          "id": "123fe3b3-a5e9-4eb3-a250-2bcb63213492",
          "name": "credentials_verify:vc:issuer:array"
        },
        "response": {
          "id": "824f006d-eb52-4dcf-afba-72c165bd1ce9",
          "status": "OK",
          "code": 200,
          "responseTime": 155,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:215)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:215)"
            }
          }
        ]
      },
      {
        "id": "bd66eee5-1676-460f-9dee-6283ce39378a",
        "cursor": {
          "ref": "0ebf2853-9f21-4a10-9cf8-f55ecdc79341",
          "length": 283,
          "cycles": 1,
          "position": 215,
          "iteration": 0,
          "httpRequestId": "a9c7d959-61c7-43f5-a591-f6d9a7c5beea"
        },
        "item": {
          "id": "bd66eee5-1676-460f-9dee-6283ce39378a",
          "name": "credentials_verify:vc:issuer:boolean"
        },
        "response": {
          "id": "a780b1d8-7084-45e9-af35-f32ec4754a43",
          "status": "OK",
          "code": 200,
          "responseTime": 134,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:216)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:216)"
            }
          }
        ]
      },
      {
        "id": "0d22915c-5961-462c-951e-52682ba5e372",
        "cursor": {
          "ref": "75c235c0-6934-4488-a355-919c13b02616",
          "length": 283,
          "cycles": 1,
          "position": 216,
          "iteration": 0,
          "httpRequestId": "69f72003-0a0e-48ed-b872-f494a2fb806f"
        },
        "item": {
          "id": "0d22915c-5961-462c-951e-52682ba5e372",
          "name": "credentials_verify:vc:issuer:integer"
        },
        "response": {
          "id": "08713dd3-ae31-48cb-8f40-d2cd85727d13",
          "status": "OK",
          "code": 200,
          "responseTime": 132,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:217)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:217)"
            }
          }
        ]
      },
      {
        "id": "cff753c8-199f-472e-a7c0-c9f9811672d1",
        "cursor": {
          "ref": "aa1d0bb9-afa7-4868-9eb1-15a9fa01e25d",
          "length": 283,
          "cycles": 1,
          "position": 217,
          "iteration": 0,
          "httpRequestId": "6a60338b-038c-4aa4-a636-48027ef42766"
        },
        "item": {
          "id": "cff753c8-199f-472e-a7c0-c9f9811672d1",
          "name": "credentials_verify:vc:issuer:null"
        },
        "response": {
          "id": "b05f48b2-0222-4653-9774-5eb94b1d121c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 78,
          "responseSize": 106
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1c4d424f-0b9e-4df8-a1d2-32edc3058008",
        "cursor": {
          "ref": "61faef8a-fe36-45ca-b369-50231ade1335",
          "length": 283,
          "cycles": 1,
          "position": 218,
          "iteration": 0,
          "httpRequestId": "0190425c-a67c-4a36-b241-4d95df1cdeb5"
        },
        "item": {
          "id": "1c4d424f-0b9e-4df8-a1d2-32edc3058008",
          "name": "credentials_verify:vc:issuer:id:missing"
        },
        "response": {
          "id": "68b5184f-722b-424e-8258-ccb93f3f0d6b",
          "status": "OK",
          "code": 200,
          "responseTime": 124,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:219)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:219)"
            }
          }
        ]
      },
      {
        "id": "04f8fa72-dd00-4aa4-ace6-152fe6ab11cd",
        "cursor": {
          "ref": "120b8da3-dac0-40ec-9717-68d56de82814",
          "length": 283,
          "cycles": 1,
          "position": 219,
          "iteration": 0,
          "httpRequestId": "938ec7bf-f965-45d2-9fb9-e3a1d68f6bc5"
        },
        "item": {
          "id": "04f8fa72-dd00-4aa4-ace6-152fe6ab11cd",
          "name": "credentials_verify:vc:issuer:id:array"
        },
        "response": {
          "id": "3ef0ab4e-1d4d-4735-ae1c-648f36baed42",
          "status": "OK",
          "code": 200,
          "responseTime": 117,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:220)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:220)"
            }
          }
        ]
      },
      {
        "id": "3b0d6fe6-d790-4d67-8b73-b999fa4c2a86",
        "cursor": {
          "ref": "0182adde-d4a8-4fdb-adf5-aea21ccf162a",
          "length": 283,
          "cycles": 1,
          "position": 220,
          "iteration": 0,
          "httpRequestId": "ea947efe-7636-40ac-89b8-4a0b8a911658"
        },
        "item": {
          "id": "3b0d6fe6-d790-4d67-8b73-b999fa4c2a86",
          "name": "credentials_verify:vc:issuer:id:boolean"
        },
        "response": {
          "id": "b8b95fd2-6772-448f-96a9-d90f66596fb5",
          "status": "OK",
          "code": 200,
          "responseTime": 124,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:221)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:221)"
            }
          }
        ]
      },
      {
        "id": "195c0f78-eeaf-4810-b1c1-6b8e7c7125e4",
        "cursor": {
          "ref": "77366b41-d895-4855-87ad-b3c9579e78ef",
          "length": 283,
          "cycles": 1,
          "position": 221,
          "iteration": 0,
          "httpRequestId": "afcbffd3-d46f-4664-a9cd-b5bf38bfe711"
        },
        "item": {
          "id": "195c0f78-eeaf-4810-b1c1-6b8e7c7125e4",
          "name": "credentials_verify:vc:issuer:id:integer"
        },
        "response": {
          "id": "0cd0aaf3-0e77-4d07-8239-76f843426822",
          "status": "OK",
          "code": 200,
          "responseTime": 150,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:222)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:222)"
            }
          }
        ]
      },
      {
        "id": "df953e0a-2ae9-42ca-b33f-b20406571071",
        "cursor": {
          "ref": "9ac95465-f5df-40ba-ab3a-434ef4bf44bf",
          "length": 283,
          "cycles": 1,
          "position": 222,
          "iteration": 0,
          "httpRequestId": "35401a0e-d521-4760-99e7-8a990afcebec"
        },
        "item": {
          "id": "df953e0a-2ae9-42ca-b33f-b20406571071",
          "name": "credentials_verify:vc:issuer:id:null"
        },
        "response": {
          "id": "a9965fc2-88a1-46a7-9358-75d0c2cee125",
          "status": "OK",
          "code": 200,
          "responseTime": 119,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:223)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:223)"
            }
          }
        ]
      },
      {
        "id": "9f04efc5-eb94-400d-abe1-b3035486d449",
        "cursor": {
          "ref": "b391824f-e5fe-4240-adf5-7e3bd7619fec",
          "length": 283,
          "cycles": 1,
          "position": 223,
          "iteration": 0,
          "httpRequestId": "f7ba9a46-c785-4c4f-be37-1844d0450749"
        },
        "item": {
          "id": "9f04efc5-eb94-400d-abe1-b3035486d449",
          "name": "credentials_verify:vc:issuer:id:object"
        },
        "response": {
          "id": "a401a119-15f1-4740-b3c9-56458d9f7243",
          "status": "OK",
          "code": 200,
          "responseTime": 228,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:224)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:224)"
            }
          }
        ]
      },
      {
        "id": "bee15c60-0b19-4bb0-bc1f-00585e2ae22d",
        "cursor": {
          "ref": "4bdab355-fbc6-4f9a-a23e-2187528fc15b",
          "length": 283,
          "cycles": 1,
          "position": 224,
          "iteration": 0,
          "httpRequestId": "384f1321-328e-421e-bcd4-b6a807bdae45"
        },
        "item": {
          "id": "bee15c60-0b19-4bb0-bc1f-00585e2ae22d",
          "name": "credentials_verify:vc:issuanceDate:missing"
        },
        "response": {
          "id": "c83306a6-e302-4eea-be81-a61b96309c79",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 77,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "aa15b995-071e-4a82-bf0d-aec6ddaa9756",
        "cursor": {
          "ref": "b35afdf6-4169-4d96-864e-49daa930c4e3",
          "length": 283,
          "cycles": 1,
          "position": 225,
          "iteration": 0,
          "httpRequestId": "7e32fb5c-da17-44f2-b602-edee41fc1e19"
        },
        "item": {
          "id": "aa15b995-071e-4a82-bf0d-aec6ddaa9756",
          "name": "credentials_verify:vc:issuanceDate:array"
        },
        "response": {
          "id": "e6634674-34ae-4e89-a810-e751319128b6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 81,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8735d2f7-41b8-4685-ba72-6855cc4659ce",
        "cursor": {
          "ref": "d549ead5-7651-4c44-9718-0168519da53f",
          "length": 283,
          "cycles": 1,
          "position": 226,
          "iteration": 0,
          "httpRequestId": "8d7b6cbc-35ea-4e47-a5ce-d4f6fbdfa73f"
        },
        "item": {
          "id": "8735d2f7-41b8-4685-ba72-6855cc4659ce",
          "name": "credentials_verify:vc:issuanceDate:boolean"
        },
        "response": {
          "id": "b7a86a4e-5c98-4ba0-bc5f-fa3e327f85db",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 76,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "82bafc69-3f6b-4501-9973-17a9f4c104d3",
        "cursor": {
          "ref": "8d64841f-8c1d-4b4c-91e8-868d6ea984fd",
          "length": 283,
          "cycles": 1,
          "position": 227,
          "iteration": 0,
          "httpRequestId": "dc49bb86-e1a9-44d8-9de4-2eb9e5c86f08"
        },
        "item": {
          "id": "82bafc69-3f6b-4501-9973-17a9f4c104d3",
          "name": "credentials_verify:vc:issuanceDate:integer"
        },
        "response": {
          "id": "34dd3ff1-36e0-4104-b01f-6d2734cef3dc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 74,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b5e45e04-21d7-49ad-ae76-7866f396a302",
        "cursor": {
          "ref": "d7274eea-cf54-458a-be77-debe2ce0afb5",
          "length": 283,
          "cycles": 1,
          "position": 228,
          "iteration": 0,
          "httpRequestId": "1dc3bc93-4bd1-4d4d-9751-2990d420acbd"
        },
        "item": {
          "id": "b5e45e04-21d7-49ad-ae76-7866f396a302",
          "name": "credentials_verify:vc:issuanceDate:null"
        },
        "response": {
          "id": "08e6c950-c109-4095-9ab9-c52a2d258a05",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 72,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "31a98625-f91e-45c4-ad0f-bb53d7b2140a",
        "cursor": {
          "ref": "5ba721f2-a905-41e5-9a19-e99a3cc458c9",
          "length": 283,
          "cycles": 1,
          "position": 229,
          "iteration": 0,
          "httpRequestId": "a808ac45-31ae-4729-85e5-266c1cab86e9"
        },
        "item": {
          "id": "31a98625-f91e-45c4-ad0f-bb53d7b2140a",
          "name": "credentials_verify:vc:issuanceDate:object"
        },
        "response": {
          "id": "9f0325f2-8516-4ab6-b067-168c8da9efdd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 76,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0769a891-796c-494f-9a84-62fc2bf00859",
        "cursor": {
          "ref": "d0b7f3cb-10df-4549-a404-422ea29d01ce",
          "length": 283,
          "cycles": 1,
          "position": 230,
          "iteration": 0,
          "httpRequestId": "afc47292-64f0-4709-ac5d-4520aeaddbac"
        },
        "item": {
          "id": "0769a891-796c-494f-9a84-62fc2bf00859",
          "name": "credentials_verify:vc:issuanceDate:string"
        },
        "response": {
          "id": "be02c538-3aa4-4a0d-8c5d-eec605ab16e9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 75,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "eec22766-f5d7-4d1e-b69b-6fef68c7dc98",
        "cursor": {
          "ref": "97e3d976-032d-4685-a646-bc22d2d5374b",
          "length": 283,
          "cycles": 1,
          "position": 231,
          "iteration": 0,
          "httpRequestId": "60ae7561-0a19-4ddd-a8b4-9f6dbe6cf867"
        },
        "item": {
          "id": "eec22766-f5d7-4d1e-b69b-6fef68c7dc98",
          "name": "credentials_verify:vc:credentialSubject:missing"
        },
        "response": {
          "id": "2594cba8-95bb-4575-9fbe-8e5a7873f6fb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 74,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "01976163-7ab1-43c0-8eb2-3a7b27fcca1e",
        "cursor": {
          "ref": "cc4ba203-2049-40b8-82ea-07fba72c8c36",
          "length": 283,
          "cycles": 1,
          "position": 232,
          "iteration": 0,
          "httpRequestId": "819b5a6b-3682-44ec-849f-65b22b70e244"
        },
        "item": {
          "id": "01976163-7ab1-43c0-8eb2-3a7b27fcca1e",
          "name": "credentials_verify:vc:credentialSubject:array"
        },
        "response": {
          "id": "cd7fc004-4822-4d86-b7bd-9745ba871e3f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 76,
          "responseSize": 223
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "11f2a8e8-eef2-4042-a034-deb13fbd138a",
        "cursor": {
          "ref": "632e33ef-639a-4c38-b08a-24d79b524cc6",
          "length": 283,
          "cycles": 1,
          "position": 233,
          "iteration": 0,
          "httpRequestId": "4f270f4b-6c96-4599-9e5f-6a8a2990a96f"
        },
        "item": {
          "id": "11f2a8e8-eef2-4042-a034-deb13fbd138a",
          "name": "credentials_verify:vc:credentialSubject:boolean"
        },
        "response": {
          "id": "fc39aafa-d4ed-4678-800e-72741a9624d6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 74,
          "responseSize": 205
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "69ff09b9-f64f-4b04-9ab6-da623e2e1493",
        "cursor": {
          "ref": "000947f9-432e-4ae9-8546-89a7ae47a9b1",
          "length": 283,
          "cycles": 1,
          "position": 234,
          "iteration": 0,
          "httpRequestId": "752aff26-8d85-4cae-b5fd-4a6ed4a27fc0"
        },
        "item": {
          "id": "69ff09b9-f64f-4b04-9ab6-da623e2e1493",
          "name": "credentials_verify:vc:credentialSubject:integer"
        },
        "response": {
          "id": "5e93d0e2-c507-4993-9a7e-5c4b249573af",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 72,
          "responseSize": 205
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "11ec9ea8-e430-48fd-b204-6d9307f43f6d",
        "cursor": {
          "ref": "601f930b-64a0-4b6e-83cc-0c39e8db497c",
          "length": 283,
          "cycles": 1,
          "position": 235,
          "iteration": 0,
          "httpRequestId": "c3bd39bd-c4ce-43f4-9fc4-4b036fa9d9ab"
        },
        "item": {
          "id": "11ec9ea8-e430-48fd-b204-6d9307f43f6d",
          "name": "credentials_verify:vc:credentialSubject:null"
        },
        "response": {
          "id": "357d680f-5b9a-4930-814d-57b026cf6fe5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 76,
          "responseSize": 268
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2d66373d-1874-4cbb-b74d-d284c6c7773b",
        "cursor": {
          "ref": "1c08070d-4e92-4f5f-8eee-06450c2bb32c",
          "length": 283,
          "cycles": 1,
          "position": 236,
          "iteration": 0,
          "httpRequestId": "a37048c9-d526-43ac-89e5-b8ad656e2896"
        },
        "item": {
          "id": "2d66373d-1874-4cbb-b74d-d284c6c7773b",
          "name": "credentials_verify:vc:credentialSubject:string"
        },
        "response": {
          "id": "346e32f6-a739-42d2-8ef1-16860b282c6d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 78,
          "responseSize": 205
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a876c0fd-0c6b-4b3e-8bc4-763167fd398f",
        "cursor": {
          "ref": "f86394be-c051-41d4-8651-dcefa12ba5fa",
          "length": 283,
          "cycles": 1,
          "position": 237,
          "iteration": 0,
          "httpRequestId": "399c5f0f-161d-4d66-a3bf-e2ea9eca6ae8"
        },
        "item": {
          "id": "a876c0fd-0c6b-4b3e-8bc4-763167fd398f",
          "name": "credentials_verify:vc:credentialSubject:id:array"
        },
        "response": {
          "id": "0d65b1e6-ad7d-4413-8ef1-aa608f44dbee",
          "status": "OK",
          "code": 200,
          "responseTime": 129,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:238)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:238)"
            }
          }
        ]
      },
      {
        "id": "60e0e401-4714-465f-89c1-df29424c5922",
        "cursor": {
          "ref": "3f9437a8-2393-40c2-b626-ff6a2325fb47",
          "length": 283,
          "cycles": 1,
          "position": 238,
          "iteration": 0,
          "httpRequestId": "7f80da2e-54c1-4b4d-b0fc-e8f1fbbaa6e7"
        },
        "item": {
          "id": "60e0e401-4714-465f-89c1-df29424c5922",
          "name": "credentials_verify:vc:credentialSubject:id:boolean"
        },
        "response": {
          "id": "7d829645-cf32-4bae-b4d2-9e6a1f441bc5",
          "status": "OK",
          "code": 200,
          "responseTime": 123,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:239)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:239)"
            }
          }
        ]
      },
      {
        "id": "b646497a-ff97-4a2a-8ad3-443b0d1885b7",
        "cursor": {
          "ref": "f6aa66c5-5626-4146-a6c4-bf5f91c0e832",
          "length": 283,
          "cycles": 1,
          "position": 239,
          "iteration": 0,
          "httpRequestId": "84171c46-9f04-41d1-9ab1-344b6b82f11d"
        },
        "item": {
          "id": "b646497a-ff97-4a2a-8ad3-443b0d1885b7",
          "name": "credentials_verify:vc:credentialSubject:id:integer"
        },
        "response": {
          "id": "30ca0423-0c36-4c48-89d4-e23cb5a0801d",
          "status": "OK",
          "code": 200,
          "responseTime": 123,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:240)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:240)"
            }
          }
        ]
      },
      {
        "id": "6ea86a3c-1c6d-49f9-a501-cc72b331de2f",
        "cursor": {
          "ref": "5a942ac4-356a-4eaf-a366-a00dc31e9428",
          "length": 283,
          "cycles": 1,
          "position": 240,
          "iteration": 0,
          "httpRequestId": "7a3077c0-e6d5-4cb3-bbce-c7659876bb90"
        },
        "item": {
          "id": "6ea86a3c-1c6d-49f9-a501-cc72b331de2f",
          "name": "credentials_verify:vc:credentialSubject:id:null"
        },
        "response": {
          "id": "5f2fbdca-7751-4c06-bd79-ba916bdbfb6e",
          "status": "OK",
          "code": 200,
          "responseTime": 135,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:241)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:241)"
            }
          }
        ]
      },
      {
        "id": "bddac0a2-cc89-40e8-a17c-e7f50bf80bcb",
        "cursor": {
          "ref": "2b54f669-cebf-4867-a084-9a58dca8b7d6",
          "length": 283,
          "cycles": 1,
          "position": 241,
          "iteration": 0,
          "httpRequestId": "4370522c-75a3-4ca9-abd1-aea1d49a2b26"
        },
        "item": {
          "id": "bddac0a2-cc89-40e8-a17c-e7f50bf80bcb",
          "name": "credentials_verify:vc:credentialSubject:id:object"
        },
        "response": {
          "id": "c7cf9bc5-daa6-4fd5-b48c-143fbadccee9",
          "status": "OK",
          "code": 200,
          "responseTime": 135,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:242)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:242)"
            }
          }
        ]
      },
      {
        "id": "d41595e8-8bfb-4cb2-8aeb-d76a3f19c904",
        "cursor": {
          "ref": "4092e1aa-2238-414c-bf8b-d6169ba243d8",
          "length": 283,
          "cycles": 1,
          "position": 242,
          "iteration": 0,
          "httpRequestId": "f6e1ec6e-9220-4a46-b3f0-8cba93f650c1"
        },
        "item": {
          "id": "d41595e8-8bfb-4cb2-8aeb-d76a3f19c904",
          "name": "credentials_verify:proof:missing"
        },
        "response": {
          "id": "44762cff-94dd-49ab-8d09-02d075f1bb4d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 79,
          "responseSize": 217
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0664f468-aaf2-412f-9b0e-da812b6195f5",
        "cursor": {
          "ref": "7d6aa794-fc37-45c7-af3d-737a8a572eb5",
          "length": 283,
          "cycles": 1,
          "position": 243,
          "iteration": 0,
          "httpRequestId": "70bbf29e-af79-4f8b-a8be-66e55b9cb2a7"
        },
        "item": {
          "id": "0664f468-aaf2-412f-9b0e-da812b6195f5",
          "name": "credentials_verify:proof:array"
        },
        "response": {
          "id": "3fab5f90-7065-4a57-8183-d16ca7402897",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 75,
          "responseSize": 166
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a48a4c77-b48f-41a3-bac0-c95d3503bef4",
        "cursor": {
          "ref": "9f202764-bfe4-4b43-aaa8-ee3d1edaa2df",
          "length": 283,
          "cycles": 1,
          "position": 244,
          "iteration": 0,
          "httpRequestId": "685aea3b-4ca0-485f-825a-d32d29b3dca5"
        },
        "item": {
          "id": "a48a4c77-b48f-41a3-bac0-c95d3503bef4",
          "name": "credentials_verify:proof:boolean"
        },
        "response": {
          "id": "8f52b572-682b-4cad-8964-56b37590c395",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 79,
          "responseSize": 244
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "564f709b-a7e8-4547-88be-60022bd43220",
        "cursor": {
          "ref": "3a72b05d-61ef-4404-a2d9-e2cb361efc64",
          "length": 283,
          "cycles": 1,
          "position": 245,
          "iteration": 0,
          "httpRequestId": "ef5d1228-7a83-4cfa-9722-8c801cb87614"
        },
        "item": {
          "id": "564f709b-a7e8-4547-88be-60022bd43220",
          "name": "credentials_verify:proof:integer"
        },
        "response": {
          "id": "8c6ff34d-3d88-4c1c-b5b7-2ffb6985d24b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 77,
          "responseSize": 244
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ef1da39c-eea4-4600-90e1-6eaf7a4a063c",
        "cursor": {
          "ref": "e6067671-66f5-4ec5-a95d-3d4329f62319",
          "length": 283,
          "cycles": 1,
          "position": 246,
          "iteration": 0,
          "httpRequestId": "7e372563-84fe-4e8f-b473-0e10194d4861"
        },
        "item": {
          "id": "ef1da39c-eea4-4600-90e1-6eaf7a4a063c",
          "name": "credentials_verify:proof:null"
        },
        "response": {
          "id": "140f7940-8109-40e7-9918-5518421da9b5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 71,
          "responseSize": 295
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "83c7971c-db4e-4a95-ae85-3695a7c348b2",
        "cursor": {
          "ref": "0c12d297-9d01-4cae-95d7-f028d30b3922",
          "length": 283,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "d4fa4376-2c4c-4e4e-9689-72780b463f8f"
        },
        "item": {
          "id": "83c7971c-db4e-4a95-ae85-3695a7c348b2",
          "name": "credentials_verify:proof:string"
        },
        "response": {
          "id": "7253a5a3-6f48-455b-b113-e7ddaa86b01c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 70,
          "responseSize": 244
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "29cdc070-94cf-4737-bf30-f57c1bb637da",
        "cursor": {
          "ref": "941ddc02-c426-46d8-aec7-50e8d7c7c80b",
          "length": 283,
          "cycles": 1,
          "position": 248,
          "iteration": 0,
          "httpRequestId": "4468f46c-85c8-48ff-8285-d7879be44100"
        },
        "item": {
          "id": "29cdc070-94cf-4737-bf30-f57c1bb637da",
          "name": "credentials_verify:proof:type:missing"
        },
        "response": {
          "id": "6219b3ef-e3eb-403f-9919-7724b14009e7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 84,
          "responseSize": 345
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "da38e54e-f05f-4572-a197-238bedadbb65",
        "cursor": {
          "ref": "1e15e067-1c50-4eee-a50b-36cd9bf537b2",
          "length": 283,
          "cycles": 1,
          "position": 249,
          "iteration": 0,
          "httpRequestId": "adea092c-a45b-4190-9218-b62b699f39e5"
        },
        "item": {
          "id": "da38e54e-f05f-4572-a197-238bedadbb65",
          "name": "credentials_verify:proof:type:array"
        },
        "response": {
          "id": "4927ce1e-9754-480b-bfca-58803f7950aa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 72,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ba43c663-dfbb-4c1f-9fa6-b7a216f90686",
        "cursor": {
          "ref": "34137d24-ee07-4708-952b-ad00d2d37a96",
          "length": 283,
          "cycles": 1,
          "position": 250,
          "iteration": 0,
          "httpRequestId": "3a524ac4-aa21-4a0e-b65d-dd1b8bd7cb8c"
        },
        "item": {
          "id": "ba43c663-dfbb-4c1f-9fa6-b7a216f90686",
          "name": "credentials_verify:proof:type:boolean"
        },
        "response": {
          "id": "11d0f095-2940-48f9-8145-07e6b17e19b0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 72,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d66a28af-15c1-4547-93d9-d53826e46b51",
        "cursor": {
          "ref": "633185d5-c5b9-49a0-9812-d40bbb7681b1",
          "length": 283,
          "cycles": 1,
          "position": 251,
          "iteration": 0,
          "httpRequestId": "24deeb1b-4897-43a1-abdf-e20a8c53a8b5"
        },
        "item": {
          "id": "d66a28af-15c1-4547-93d9-d53826e46b51",
          "name": "credentials_verify:proof:type:integer"
        },
        "response": {
          "id": "b461b8b2-4c02-457d-94bf-cc93fdb02b98",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 77,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b9f2b19f-2485-4f39-9ad6-d66a14ec3ae6",
        "cursor": {
          "ref": "437adf9a-9304-43dc-b765-ae97a26c642b",
          "length": 283,
          "cycles": 1,
          "position": 252,
          "iteration": 0,
          "httpRequestId": "f570efad-40ab-4dcc-96f7-f17b342c99ba"
        },
        "item": {
          "id": "b9f2b19f-2485-4f39-9ad6-d66a14ec3ae6",
          "name": "credentials_verify:proof:type:null"
        },
        "response": {
          "id": "55d87951-6e01-44f5-ac51-9a9db95de7fe",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 74,
          "responseSize": 345
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "720ee432-6928-41d3-adff-42b508e2fdff",
        "cursor": {
          "ref": "89e8518b-ecfc-4886-8172-246d184dba0c",
          "length": 283,
          "cycles": 1,
          "position": 253,
          "iteration": 0,
          "httpRequestId": "303d6bca-c602-4dec-97af-3cbbaba51f4a"
        },
        "item": {
          "id": "720ee432-6928-41d3-adff-42b508e2fdff",
          "name": "credentials_verify:proof:type:object"
        },
        "response": {
          "id": "34d527d7-c240-448c-8e4b-b41fe0d0013f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 74,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5fedef73-369a-4180-a7a4-b12fc82ee1e6",
        "cursor": {
          "ref": "982cd4c6-a3cb-4c38-8f88-81983a9ac6ce",
          "length": 283,
          "cycles": 1,
          "position": 254,
          "iteration": 0,
          "httpRequestId": "bac8629b-d170-4de5-95a8-164741114285"
        },
        "item": {
          "id": "5fedef73-369a-4180-a7a4-b12fc82ee1e6",
          "name": "credentials_verify:proof:type:string"
        },
        "response": {
          "id": "aa915b51-4cd9-42fd-84cd-cf3290f23671",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 76,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5edd01a1-1047-4a02-92a8-090cc248b48d",
        "cursor": {
          "ref": "5b152fd1-d429-4cd8-a668-385279857807",
          "length": 283,
          "cycles": 1,
          "position": 255,
          "iteration": 0,
          "httpRequestId": "64c13294-27a8-4ced-a596-604d6fa114ba"
        },
        "item": {
          "id": "5edd01a1-1047-4a02-92a8-090cc248b48d",
          "name": "credentials_verify:proof:created:array"
        },
        "response": {
          "id": "1b12b8f7-aaa3-41bf-a7d9-66b737364ec5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 72,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "506b7716-c3c2-442d-bee8-515b27102209",
        "cursor": {
          "ref": "388a30d5-b295-452b-a91b-d45fdadc11d5",
          "length": 283,
          "cycles": 1,
          "position": 256,
          "iteration": 0,
          "httpRequestId": "1f50b6bd-4687-4d0c-8fdf-dba5f3e45f1b"
        },
        "item": {
          "id": "506b7716-c3c2-442d-bee8-515b27102209",
          "name": "credentials_verify:proof:created:boolean"
        },
        "response": {
          "id": "ee7b17bc-bd90-45e3-82c5-d797a1d70073",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 75,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "52aa0479-810b-4d83-865a-21f1857f91e1",
        "cursor": {
          "ref": "116f79db-83e4-47c1-88e5-067d1d56bff5",
          "length": 283,
          "cycles": 1,
          "position": 257,
          "iteration": 0,
          "httpRequestId": "c1051249-51e7-47fc-8df2-d1a789f1763e"
        },
        "item": {
          "id": "52aa0479-810b-4d83-865a-21f1857f91e1",
          "name": "credentials_verify:proof:created:integer"
        },
        "response": {
          "id": "3dbc5d65-f886-42b3-8714-deabf889e30c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 75,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "37f9e6ef-d0b4-43cb-8cd8-b5267161d89b",
        "cursor": {
          "ref": "ac5feb89-1ad0-4a89-904e-f600c7e33ec1",
          "length": 283,
          "cycles": 1,
          "position": 258,
          "iteration": 0,
          "httpRequestId": "d318de47-8e0c-4a59-89f2-04c7e7c3c0d5"
        },
        "item": {
          "id": "37f9e6ef-d0b4-43cb-8cd8-b5267161d89b",
          "name": "credentials_verify:proof:created:null"
        },
        "response": {
          "id": "6af1ddd7-9ae1-4236-82a6-ad380342e7e0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 73,
          "responseSize": 252
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a7e2b179-7dc1-456d-afe5-d18dd5e69c37",
        "cursor": {
          "ref": "53d894a5-5a17-49ff-b586-e60e5ce4c27e",
          "length": 283,
          "cycles": 1,
          "position": 259,
          "iteration": 0,
          "httpRequestId": "77144a01-92fa-4115-884a-fd3c184e54c4"
        },
        "item": {
          "id": "a7e2b179-7dc1-456d-afe5-d18dd5e69c37",
          "name": "credentials_verify:proof:created:object"
        },
        "response": {
          "id": "9c1bebd9-1d77-4040-a678-16b3f6fb203e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 74,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "718fcc42-7958-4bb8-adf8-ba692b5f9894",
        "cursor": {
          "ref": "58a2d5f1-9f83-4f21-9990-c8e30f76c1bf",
          "length": 283,
          "cycles": 1,
          "position": 260,
          "iteration": 0,
          "httpRequestId": "94f489f4-cbd2-4f6c-896c-b842b3f2f6ae"
        },
        "item": {
          "id": "718fcc42-7958-4bb8-adf8-ba692b5f9894",
          "name": "credentials_verify:proof:verificationMethod:array"
        },
        "response": {
          "id": "cceda47b-68a8-493b-bb8e-ece67541e1ce",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 76,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "daf1779e-1d51-40e4-8b10-35d846f63d08",
        "cursor": {
          "ref": "f4c6363d-2aab-4e1d-9b26-d1c935002739",
          "length": 283,
          "cycles": 1,
          "position": 261,
          "iteration": 0,
          "httpRequestId": "ef6b2c88-23b2-4e34-9449-5c1478861c0a"
        },
        "item": {
          "id": "daf1779e-1d51-40e4-8b10-35d846f63d08",
          "name": "credentials_verify:proof:verificationMethod:boolean"
        },
        "response": {
          "id": "d26bf227-cd5e-402d-b02b-b21037602e57",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 74,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6f9ff178-02d2-4c84-95f5-9f5c3e827739",
        "cursor": {
          "ref": "7dbbf9e7-ea24-4547-8fbd-db60316136df",
          "length": 283,
          "cycles": 1,
          "position": 262,
          "iteration": 0,
          "httpRequestId": "0bd1dbeb-bea6-40f3-8e25-d19adb758cf5"
        },
        "item": {
          "id": "6f9ff178-02d2-4c84-95f5-9f5c3e827739",
          "name": "credentials_verify:proof:verificationMethod:integer"
        },
        "response": {
          "id": "832cc4d2-66d4-4b60-95f9-ea4383bac300",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 81,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "37df9680-d294-44c9-bf09-82dd5fd1bab9",
        "cursor": {
          "ref": "61306bc6-a88f-4832-8efe-aceb4af5b258",
          "length": 283,
          "cycles": 1,
          "position": 263,
          "iteration": 0,
          "httpRequestId": "82a254f0-6d7e-4934-9da1-554ae94546c4"
        },
        "item": {
          "id": "37df9680-d294-44c9-bf09-82dd5fd1bab9",
          "name": "credentials_verify:proof:verificationMethod:null"
        },
        "response": {
          "id": "ff7d2883-12ca-4881-91af-bfae31f8c89c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 82,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8997f374-4ca6-4997-8f9d-67601e5ceadb",
        "cursor": {
          "ref": "f4031da3-902a-4c7a-806c-f6c02fcb224f",
          "length": 283,
          "cycles": 1,
          "position": 264,
          "iteration": 0,
          "httpRequestId": "5727124e-35e6-420d-92ab-29bb99004c69"
        },
        "item": {
          "id": "8997f374-4ca6-4997-8f9d-67601e5ceadb",
          "name": "credentials_verify:proof:verificationMethod:object"
        },
        "response": {
          "id": "e8859fad-03ab-46a1-a7c8-2c66cb8633c5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 77,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fa92bfc9-eef7-4569-aa90-f181ed6ffd6b",
        "cursor": {
          "ref": "60e19b9c-953f-49d1-85df-b106719bff45",
          "length": 283,
          "cycles": 1,
          "position": 265,
          "iteration": 0,
          "httpRequestId": "4e348931-8a20-478c-becf-cb01f5cf825b"
        },
        "item": {
          "id": "fa92bfc9-eef7-4569-aa90-f181ed6ffd6b",
          "name": "credentials_verify:proof:jws:array"
        },
        "response": {
          "id": "b55a482e-e386-4e15-b728-a0b6ac40463c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 75,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fcb867b2-73b7-4a44-8221-3eb03c09db00",
        "cursor": {
          "ref": "68babec3-e779-4566-b6a1-3799c2a5c112",
          "length": 283,
          "cycles": 1,
          "position": 266,
          "iteration": 0,
          "httpRequestId": "3e7ca35c-548b-4653-8cd9-3503e4480955"
        },
        "item": {
          "id": "fcb867b2-73b7-4a44-8221-3eb03c09db00",
          "name": "credentials_verify:proof:jws:boolean"
        },
        "response": {
          "id": "1f5fd8bf-5469-4545-9882-f2fd0820e1be",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 77,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "33aa6b05-2bfc-4def-8c86-f5e865726719",
        "cursor": {
          "ref": "8da4fb43-561b-4484-8525-8c35bb59953e",
          "length": 283,
          "cycles": 1,
          "position": 267,
          "iteration": 0,
          "httpRequestId": "7f85696f-40f8-4df2-b64c-cd1fe4df09ce"
        },
        "item": {
          "id": "33aa6b05-2bfc-4def-8c86-f5e865726719",
          "name": "credentials_verify:proof:jws:integer"
        },
        "response": {
          "id": "6dd79b27-674a-48c9-80e3-90cc8ee25db7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 73,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6a63fde9-4018-4a62-aad4-bdf31d1a07f1",
        "cursor": {
          "ref": "af1c0b14-ae7f-45bc-b5b4-2aefb490bd90",
          "length": 283,
          "cycles": 1,
          "position": 268,
          "iteration": 0,
          "httpRequestId": "b25e6c9d-5767-4c4d-8afa-ab4396ffdbd7"
        },
        "item": {
          "id": "6a63fde9-4018-4a62-aad4-bdf31d1a07f1",
          "name": "credentials_verify:proof:jws:null"
        },
        "response": {
          "id": "1ad98b07-a804-424c-beed-489383e839c2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 74,
          "responseSize": 172
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d2a91339-64e6-46d9-81af-23bc2ee878f1",
        "cursor": {
          "ref": "8d1c96f7-9e27-4d5e-af8d-cc277bba6b16",
          "length": 283,
          "cycles": 1,
          "position": 269,
          "iteration": 0,
          "httpRequestId": "23251cd1-237f-4e9a-928f-cb7be0c29c39"
        },
        "item": {
          "id": "d2a91339-64e6-46d9-81af-23bc2ee878f1",
          "name": "credentials_verify:proof:jws:object"
        },
        "response": {
          "id": "b52f868b-0ce0-4149-81e9-ba809b2c0d2e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 77,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "40d5acf7-7351-4a3c-a2f9-228b18661e78",
        "cursor": {
          "ref": "c934e5af-0a65-4ef7-923a-64f5b7b3036a",
          "length": 283,
          "cycles": 1,
          "position": 270,
          "iteration": 0,
          "httpRequestId": "4f89747b-e94b-4d32-8f08-07503745e77b"
        },
        "item": {
          "id": "40d5acf7-7351-4a3c-a2f9-228b18661e78",
          "name": "credentials_verify:proof:proofPurpose:array"
        },
        "response": {
          "id": "a4746cc6-b6ef-46aa-b457-4b26e88e987a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 74,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c8250c21-914e-47a0-b842-7b4d81ccf054",
        "cursor": {
          "ref": "c3e31f47-e8c4-49bd-999f-66feff720840",
          "length": 283,
          "cycles": 1,
          "position": 271,
          "iteration": 0,
          "httpRequestId": "1ed4ec46-5e57-4f97-941b-976abb9c8b44"
        },
        "item": {
          "id": "c8250c21-914e-47a0-b842-7b4d81ccf054",
          "name": "credentials_verify:proof:proofPurpose:boolean"
        },
        "response": {
          "id": "eb8cfc87-1c48-4050-8dc8-4d0aecbd54b6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 75,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "32e0dcdd-f90e-40ce-91b4-70d6bac74cd6",
        "cursor": {
          "ref": "c228fa1e-1fbc-4faa-bf92-ffeaa32d500c",
          "length": 283,
          "cycles": 1,
          "position": 272,
          "iteration": 0,
          "httpRequestId": "4732c5ff-288e-49a7-8370-5254f5401dde"
        },
        "item": {
          "id": "32e0dcdd-f90e-40ce-91b4-70d6bac74cd6",
          "name": "credentials_verify:proof:proofPurpose:integer"
        },
        "response": {
          "id": "35873e5e-f7c4-4415-93e3-1928a6a99a46",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 76,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "57cff114-e1c2-4a99-86f6-3a88dfa5006c",
        "cursor": {
          "ref": "62ba2aae-d42a-4f9c-957c-0ef30742bd56",
          "length": 283,
          "cycles": 1,
          "position": 273,
          "iteration": 0,
          "httpRequestId": "99d117b4-2ae3-4402-804a-494ad66b798d"
        },
        "item": {
          "id": "57cff114-e1c2-4a99-86f6-3a88dfa5006c",
          "name": "credentials_verify:proof:proofPurpose:null"
        },
        "response": {
          "id": "5350061f-49ab-4f6d-b748-677bfa3edf91",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 72,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7ec65748-97da-4713-bec5-b08ee19423b7",
        "cursor": {
          "ref": "3e32ed6a-4dde-4f81-8c55-df749f009125",
          "length": 283,
          "cycles": 1,
          "position": 274,
          "iteration": 0,
          "httpRequestId": "7a59fbd6-fdff-4827-9005-09862f073d29"
        },
        "item": {
          "id": "7ec65748-97da-4713-bec5-b08ee19423b7",
          "name": "credentials_verify:proof:proofPurpose:object"
        },
        "response": {
          "id": "3b144e11-adf9-46b4-a2b3-cc61ca9b938e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 75,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2686be39-96c0-496b-bc5e-33ee3b02a60a",
        "cursor": {
          "ref": "e4bc72c5-a0e2-43d4-afb2-0ee5ab796caa",
          "length": 283,
          "cycles": 1,
          "position": 275,
          "iteration": 0,
          "httpRequestId": "442003cb-f957-4b19-b932-47f763c13c3f"
        },
        "item": {
          "id": "2686be39-96c0-496b-bc5e-33ee3b02a60a",
          "name": "credentials_verify:proof:proofPurpose:string"
        },
        "response": {
          "id": "a33e5938-249c-4c42-a751-11f845047fdb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 81,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3d050576-3822-452a-bc83-75fb950ab2d6",
        "cursor": {
          "ref": "56b8c85d-aec5-40c9-8302-876da412d333",
          "length": 283,
          "cycles": 1,
          "position": 276,
          "iteration": 0,
          "httpRequestId": "32ff52c5-9281-4077-880a-6016483bb76d"
        },
        "item": {
          "id": "3d050576-3822-452a-bc83-75fb950ab2d6",
          "name": "credentials_verify:missing_auth"
        },
        "response": {
          "id": "52190dbd-da12-4646-ab9c-706891b85380",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 61,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d2723d5b-c43f-4858-88ee-97cc1556dc92",
        "cursor": {
          "ref": "b0368a97-b39a-4baf-a542-2cb9e95015de",
          "length": 283,
          "cycles": 1,
          "position": 277,
          "iteration": 0,
          "httpRequestId": "8b778b5f-6fdc-4366-b6fd-80e78380d2fc"
        },
        "item": {
          "id": "d2723d5b-c43f-4858-88ee-97cc1556dc92",
          "name": "credentials_verify:bad_signature"
        },
        "response": {
          "id": "8973f239-f620-4442-8454-7a139ea02596",
          "status": "OK",
          "code": 200,
          "responseTime": 137,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is false",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response verified is false",
              "message": "expected true to be false",
              "stack": "AssertionError: expected true to be false\n   at Object.eval sandbox-script.js:3:278)"
            }
          }
        ]
      },
      {
        "id": "e296ec12-64fd-4731-88e6-9a78d50a9b45",
        "cursor": {
          "ref": "f3fc20ce-9dea-41f4-a9ac-c6d93aab2df0",
          "length": 283,
          "cycles": 1,
          "position": 278,
          "iteration": 0,
          "httpRequestId": "dc920a52-024a-42aa-8978-4a3474611bda"
        },
        "item": {
          "id": "e296ec12-64fd-4731-88e6-9a78d50a9b45",
          "name": "credentials_verify"
        },
        "response": {
          "id": "92c55742-d9d7-41d6-b96b-38efad4904c7",
          "status": "OK",
          "code": 200,
          "responseTime": 134,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "8fa8a51d-807e-435e-9ad9-95cdc3d1773e",
        "cursor": {
          "ref": "dec0fecb-2325-46a0-8b36-56e8a669dd0a",
          "length": 283,
          "cycles": 1,
          "position": 279,
          "iteration": 0,
          "httpRequestId": "068fbabf-db2c-474e-b58c-7de9091c2a33"
        },
        "item": {
          "id": "8fa8a51d-807e-435e-9ad9-95cdc3d1773e",
          "name": "credentials_verify:issuer:object"
        },
        "response": {
          "id": "45a20ae9-88de-44ef-ab7a-6e70d03d30b5",
          "status": "OK",
          "code": 200,
          "responseTime": 123,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "3e2b3aec-9719-4e7f-93ae-0fc4d2fc8c71",
        "cursor": {
          "ref": "20e660cd-072a-40ae-b6dd-4359c4020b2b",
          "length": 283,
          "cycles": 1,
          "position": 280,
          "iteration": 0,
          "httpRequestId": "31fab4e9-7c0d-4296-879e-b0ce368340c8"
        },
        "item": {
          "id": "3e2b3aec-9719-4e7f-93ae-0fc4d2fc8c71",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "9da71b4f-a643-4477-80aa-52053c90863e",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 61,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3e2b3aec-9719-4e7f-93ae-0fc4d2fc8c71",
        "cursor": {
          "ref": "20e660cd-072a-40ae-b6dd-4359c4020b2b",
          "length": 283,
          "cycles": 1,
          "position": 280,
          "iteration": 0,
          "httpRequestId": "31fab4e9-7c0d-4296-879e-b0ce368340c8"
        },
        "item": {
          "id": "3e2b3aec-9719-4e7f-93ae-0fc4d2fc8c71",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "9da71b4f-a643-4477-80aa-52053c90863e",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 61,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "61582d31-33fb-4dc4-9c93-ceff428134c0",
        "cursor": {
          "ref": "618536eb-f879-4847-b956-2c00209d33b6",
          "length": 283,
          "cycles": 1,
          "position": 281,
          "iteration": 0,
          "httpRequestId": "1eec6b8f-fe40-455a-8fa9-ffcc8e6d61ff"
        },
        "item": {
          "id": "61582d31-33fb-4dc4-9c93-ceff428134c0",
          "name": "presentations_prove:missing_auth"
        },
        "response": {
          "id": "91082768-48ca-49ed-8213-7055d2b125cd",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 60,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2f009b43-e93b-461d-bcef-02b5b08176f0",
        "cursor": {
          "ref": "701f933a-b42d-4517-943c-9a329ff06a75",
          "length": 283,
          "cycles": 1,
          "position": 282,
          "iteration": 0,
          "httpRequestId": "34aea6fa-b90e-4675-b9f9-6a801bd182a3"
        },
        "item": {
          "id": "2f009b43-e93b-461d-bcef-02b5b08176f0",
          "name": "presentations_verify:missing_auth"
        },
        "response": {
          "id": "7f7ab8d3-75b3-449e-906e-55d4afee1581",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 60,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      }
    ]
  }
}