{
  "collection": {
    "info": {
      "_postman_id": "a8035051-bb5b-4670-abe3-cfb96bc141e9",
      "name": "Conformance Suite",
      "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
    },
    "item": [
      {
        "id": "6a2b09f7-b456-49b4-af10-a43e1d4c17ee",
        "name": "Clear Cache",
        "item": [
          {
            "id": "2d5fff10-5f3a-4013-8ce2-643c9464c3c4",
            "name": "Clear Token Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "5b53c181-6f09-451f-8e5e-2a8849fd4914",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"tokenCache\");",
                    ""
                  ],
                  "_lastExecutionId": "1fa2eba4-5055-46a1-93cf-5c79ea9f4950"
                }
              }
            ]
          },
          {
            "id": "0251c1ee-c37b-449c-866e-0924841de184",
            "name": "Clear DID Web Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "5fe646d8-0724-4f0b-babd-9759d3044a55",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"didWebCache\");",
                    ""
                  ],
                  "_lastExecutionId": "d2a8805f-4f40-4ec6-9cc8-cc1fcec91361"
                }
              }
            ]
          }
        ],
        "event": []
      },
      {
        "id": "b9b65f71-a5f0-40c5-be33-58f37162afaf",
        "name": "Discovery - API Configuration",
        "item": [
          {
            "id": "26c1f681-c67f-4126-bc2e-b58ae2dc1e33",
            "name": "Positive Testing",
            "item": [
              {
                "id": "a94aa697-1148-49ae-a237-728c0277920d",
                "name": "did_json",
                "request": {
                  "url": {
                    "host": [
                      "{{did_web_endpoint}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "75032130-b247-4422-9873-319c0d4c0936",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200ApiConfiguration\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "d098f57c-3245-45fd-8bb4-9400c54b7d04"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "8f4841ec-b78a-4ff0-a0e7-f7ae5b6a3c7e",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "689908a7-ad5f-48ae-b9ff-31e0fb1dca6e"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "a579d7b2-c463-490a-8b35-01eec89eeead",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "329108f4-43f6-4353-87c1-b5e0b5cd4543"
                }
              }
            ]
          }
        ],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "6ad2b677-f6e7-44c7-b53e-3e4188f6c2cd",
              "type": "text/javascript",
              "exec": [
                "// Discovery requires a multi-tenant aware did web endpoint",
                "const did_web = pm.environment.get(\"ORGANIZATION_DID_WEB\");",
                "const did_web_endpoint = utils(pm).convertDidWebToEndpoint(did_web);",
                "pm.variables.set('did_web_endpoint', did_web_endpoint);",
                ""
              ],
              "_lastExecutionId": "b009ae52-04c9-494e-9a70-3297989a75fd"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "a4368f9f-bbd7-49c1-97c9-ae6bbe347d45",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "91e12900-e5bd-4bc7-b397-7a0ac141dc05"
            }
          }
        ]
      },
      {
        "id": "db8fd065-8365-4935-a7f2-3fa5499720d4",
        "name": "Identifiers - Resolve",
        "item": [
          {
            "id": "74bf46a3-e1a4-488b-a53b-32326eac2145",
            "name": "Negative Testing",
            "item": [
              {
                "id": "565e1838-0f87-47e4-8531-4c3dcaeb1ea7",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "f69e5d87-8560-4ec6-aeea-0ef647eabce6",
                    "name": "did:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "invalid_did"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a441ee29-74df-462a-b4a5-7f47cdf4920d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400Identifiers\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "054c26b1-786d-4fd5-825e-b3549114bd1f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9223bf5b-4f9a-431f-b1b2-c67ef6366abe",
                    "name": "did:not_found:did_web",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "did:web:example.com"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3fb20f37-9dc1-41e8-9841-33b4fb2a40d8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "4e83b2f0-3a53-4864-b383-b23fde4a8694"
                        }
                      }
                    ]
                  },
                  {
                    "id": "46f41711-0b0d-4046-8def-c24fd36cc783",
                    "name": "did:not_found:urn",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "urn:uuid:{{$randomUUID}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "27fc77f6-74ce-411e-bbaf-3a57ec5a2d4d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "880c04e3-ec7a-42d6-b682-2f9fff5f40d7"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "79b5308a-4782-47d0-b809-25140caaf5b2",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "965af0c7-09d7-4c20-ae2f-2b75a20d15ff",
                    "name": "identifiers:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET",
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "07accf42-7fd0-4b7d-9158-b565ea31b487",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "94958ce4-a1ce-43c5-8881-99f8464a2ab2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f21b715d-a791-4bb1-a214-659795172d6a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1daf86f1-dc9b-4f1e-8015-ccb31a9915d0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "762f1bf8-c2ba-4a5a-8e37-3c2e48086ce2",
                    "name": "identifiers:missing_scope:resolve:dids",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9b36e424-f204-4ae1-a709-eb110c0682ae",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "a471dcdc-a822-47a6-981b-23bc9036a20e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dc71805f-c39d-47c9-ac65-f39e64b20c69",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"resolve:dids\" scope",
                            "utils(pm).getAccessToken('')",
                            ""
                          ],
                          "_lastExecutionId": "f13ad891-eb59-4a57-9785-8309b7aeb210"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "059e6ab4-88a9-4521-8b72-b6a650271636",
            "name": "Positive Testing",
            "item": [
              {
                "id": "83639f02-a94a-4433-8f56-1b1c05e41dce",
                "name": "identifiers",
                "request": {
                  "url": {
                    "path": [
                      "identifiers",
                      "{{ORGANIZATION_DID_WEB}}"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "bdab9103-12e9-4b21-8caf-de98b576dd5a",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200Identifiers\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString), {",
                        "     strict: true,",
                        "     strictSchema: true,",
                        " });",
                        "});"
                      ],
                      "_lastExecutionId": "0481586e-4e17-4d5c-9225-d60ee851560a"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "89e0b746-210e-42c1-ad9f-2100555f7a70",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"resolve:dids\" scope",
                "utils(pm).getAccessToken('resolve:dids');",
                ""
              ],
              "_lastExecutionId": "d83e7801-71f2-4c21-a784-3e80419341b5"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "4f788281-ecba-41ab-a50f-264afdc8824a",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "9beb681f-3b76-4970-8058-6c6674c22973"
            }
          }
        ]
      },
      {
        "id": "4086046b-7b4f-4a7e-b081-005be3397153",
        "name": "Credentials - Create",
        "item": [
          {
            "id": "05b9e19c-3ebd-4e19-979a-628b34edbb69",
            "name": "Negative Testing",
            "item": [
              {
                "id": "cb9e42b2-b533-4b6e-a77b-8f2bc16c975f",
                "name": "Bad Request",
                "description": {
                  "content": "This folder contains requests which mutate a valid request body in a way that should provoke a \"400 Bad Request\" response from the server.",
                  "type": "text/plain"
                },
                "item": [
                  {
                    "id": "58429586-de18-4805-a7ae-e5e678145184",
                    "name": "credentials_issue:credential:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f12b1570-0c3c-47e1-a555-cd50dba90bb6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9a168b97-93c1-4d36-85f9-7a7734363ee0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "707bdd28-5788-4f53-856e-18fac8f8bc91",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential\" is a required field",
                            "    delete req.credential;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "cd4ce98e-7122-48ba-9807-df8e9c7a7988"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d5a979e4-6e3c-4a5c-a04c-89026a58be79",
                    "name": "credentials_issue:credential.@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4b592c61-70ca-443d-9e9b-c289e5837b3d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fe138c2b-ce77-40ea-87d0-66b21af67350"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f8fde8d2-e0cb-4453-a8ef-41429e591ad7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" is a required field",
                            "    delete req.credential[\"@context\"];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "029105c6-5e39-4246-8939-d6ec52457d0e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a9cc23dd-286a-4026-9905-88fe3d02973f",
                    "name": "credentials_issue:credential.@context:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b7d50a55-8dc8-4d5e-9fc9-be45f17b6e84",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3186a0e9-0b5c-4185-8ce9-c865727344e1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7bbebefc-966a-4516-a648-263a3ccbf827",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must contain \"https://w3id.org/traceability/v1\"",
                            "    req.credential[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\"];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "94f3db66-0603-4e85-a138-ab9e6d7b7ebe"
                        }
                      }
                    ]
                  },
                  {
                    "id": "21ea51d2-2ed7-4abc-9749-21dd14022068",
                    "name": "credentials_issue:credential.@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "371378e6-d788-4868-84e8-0a26ae73de43",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "322aa311-c1b4-4480-bc2c-e72a7ee7ac9d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e40adb10-7960-4c42-aa2c-cccbd2578ecb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a boolean",
                            "    req.credential[\"@context\"] = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "4e3e2bd6-050d-4bb6-90f5-eb5c09a0e7ac"
                        }
                      }
                    ]
                  },
                  {
                    "id": "93fdbac9-22e9-4bde-8db2-b2d0aac28345",
                    "name": "credentials_issue:credential.@context:integer Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a6d1d545-b7a0-45db-8cbb-07abd58c6964",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "deb6fb15-2891-4772-933e-f4d5f1e32a4a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8c7234ad-c19e-4157-9610-eca5dc6bbbd0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an integer",
                            "    req.credential[\"@context\"] = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "300d56f2-ef18-4049-81ef-2584d3925cb9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6dd423cf-bc65-41a4-997b-6a4866d0019c",
                    "name": "credentials_issue:credential.@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "be581b78-b052-4ee3-a6c7-d32db942a2df",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "155e8930-ece4-46bf-aa18-54903b40efab"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a93e0e48-ce35-41a6-93a3-e9d60246de76",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not null",
                            "    req.credential[\"@context\"] = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "02ea8971-ceb5-495c-b951-05c4d9caf56a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a22da739-6afe-46b8-8045-e48309b41064",
                    "name": "credentials_issue:credential.@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7597814a-da49-4db2-87ce-3c6b626f5ba6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ae42aeb4-dd9f-493d-ad38-299e63369d84"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e50dcf03-0941-44e7-83c0-457b29488cf1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an object",
                            "    req.credential[\"@context\"] = {\"@vocab\": \"https://www.w3.org/2018/credentials/v1\"};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "f5a6ed93-4366-4af6-8974-31ecfcc231ec"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a16f03f4-54c6-4f3a-bc13-95640e3cbae7",
                    "name": "credentials_issue:credential.@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "165f6859-1ead-4352-90d3-4e3a80dc1de1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8d96648c-de01-4620-a904-c0062adf6c73"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0358928f-3281-4c67-afd3-8d16457dc65c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a string",
                            "    req.credential[\"@context\"] = \"https://www.w3.org/2018/credentials/v1\";",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "97f81828-824f-47b3-9c5a-4883c526d63b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f36dbf68-3d83-49b3-9935-4def498b002e",
                    "name": "credentials_issue:credential.@context.item.array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5327480e-ccf9-4546-b0b5-843be3a0c1db",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b541b3c2-5dde-438d-924b-efb12346ce3d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9327230c-4ea3-4310-bf72-640911a76d6d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not array",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        [\"https://w3id.org/traceability/v1\"],",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "86c06feb-5f72-4eed-b48b-b344d03ff627"
                        }
                      }
                    ]
                  },
                  {
                    "id": "26a8d3c1-9e68-4b79-ab08-a099ed04f8e7",
                    "name": "credentials_issue:credential.@context.item.boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7301739a-84d7-4199-b125-0facfece31eb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "18f44a7b-2a54-4896-8a4a-ae8b5915899b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6debbcb4-eb76-46d7-a239-55900c77fde4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not boolean",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        false,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "3594b912-ed29-4577-9dc0-12ceaf651dce"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3c32df45-c457-4a6f-98c3-57d7aea9241e",
                    "name": "credentials_issue:credential.@context.item.integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9f33ffcb-d40d-48d8-915a-f47b1385351b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dbe458f1-8270-4b52-9d2b-4d220ef783fe"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "483004ed-c1c6-41cc-a77b-9dfe94d3fbe8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        42,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "a219bbfc-6836-46c8-91a1-30f6dadbcf17"
                        }
                      }
                    ]
                  },
                  {
                    "id": "99fe8162-52ed-4148-957e-ed5799979f1a",
                    "name": "credentials_issue:credential.@context.item.null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "087dde43-f3a1-4eec-8295-c62636856bb9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9a9968a9-7ceb-4cd5-861c-eb8dc71f0617"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "714d39db-b2e0-468b-a70e-d88c5bf18090",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        null,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "4e71d2e0-f52a-4532-af22-c078d5673842"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2f67b7b3-dbd7-48ee-968c-487b805df46d",
                    "name": "credentials_issue:credential.@context.item.object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0b4f8874-4c25-4a84-9ade-e5a0ffb89c87",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "263f0ab6-77e7-488a-819d-0022b02aa39c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "74544318-9fa8-4fb8-b80d-1199f864f98f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not object",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        {\"@vocab\": \"https://w3id.org/traceability/v1\"},",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "ba7b038e-7814-4c34-b475-cdc91b6c560d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f20e3043-ae3b-4cc9-a047-811bd41093fa",
                    "name": "credentials_issue:credential.id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ca0e4ef3-8a64-470c-8253-ad3c73391d0f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c3f1b059-1a2c-4b9c-abf5-366820098014"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bd0615e1-95f1-4945-a28b-99317e7a774a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.id is a required property",
                            "    delete req.credential.id;",
                            "}));"
                          ],
                          "_lastExecutionId": "a8537ed1-0f9e-48a7-8491-723929460075"
                        }
                      }
                    ]
                  },
                  {
                    "id": "66cc66d9-5f6e-45d3-8073-c7638f50006c",
                    "name": "credentials_issue:credential.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fab0c4d4-7666-4117-8a23-bd640312dbf3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b0751157-de24-43d4-a7cf-38f42c395fb3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d1ca6e18-cbf3-425f-af66-90c5cdf505d3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not array",
                            "    req.credential.id = [pm.variables.get(\"credentialId\")];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "520588d3-f26c-4679-881e-fd31506cbe8e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9d2bb450-62af-4ee0-a555-0092430c63e2",
                    "name": "credentials_issue:credential.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c49a84fc-9c23-4016-9664-525a1bfe264e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "44a51bab-cb83-43f1-8ce8-5a52f12bc9a8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dab00073-8b48-48a3-a72a-f913e4a10a02",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not boolean",
                            "    req.credential.id = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "3055ef08-17b7-4732-ab73-f522048e204d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a9bb4ca2-a91f-41ea-a778-7315f84c0e00",
                    "name": "credentials_issue:credential.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "02547522-070a-4f27-8d4a-526d27b6d0d4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b47f9ac1-42a3-4067-b1d9-115e2f2b0e5d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e3a58cb4-57a0-49d7-b221-fdfd922903f1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not integer",
                            "    req.credential.id = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "650fa32c-8675-4015-8f90-bd60deec5029"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dbc26a09-821d-411d-a2f1-d79fcba1f2f2",
                    "name": "credentials_issue:credential.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a8e48e5c-9900-49c9-b0fb-6fe9abf1f422",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "55680169-f2ed-4de0-aa07-5b01952cd5a2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1d86b896-7a00-4f2b-89a9-dee847beacb3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not null",
                            "    req.credential.id = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "29fe0e92-12ed-4c23-8129-fe41dc4783a8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "65087b6f-2e2e-4345-b383-160d601d4571",
                    "name": "credentials_issue:credential.id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7414c63d-9181-4109-b7d1-d6666050257b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "07ae23be-ec21-4ce4-bc29-6515f98f6bb5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "58b7c125-40ac-4c42-95dd-65f10d016571",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not object",
                            "    req.credential.id = {\"id\": pm.variables.get(\"credentialId\")};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "a5b8aff4-d231-4406-b860-781eb3e594c5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bf54c064-95e2-4b5c-9fa6-9bb58af02325",
                    "name": "credentials_issue:credential.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5dbd5722-404d-4599-9fd0-d4182c9ba95e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "114eef29-ae9b-4ff1-8e8b-63a7ba102c57"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4c58c22c-5860-401e-a5c4-b4a33402230d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type is a required property",
                            "    delete req.credential.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "a6dd1be6-3323-41cc-8838-0739284889dc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "383398e5-47ff-48d3-a64b-46a3f908b34b",
                    "name": "credentials_issue:credential.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b70ed7cb-956f-427e-8210-c5b4e5ad6762",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "92a30f05-cb69-4b1e-8a7e-5c33afb910bf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0c0ed4b9-4867-4e7c-8d38-b1bbfb93e7b2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not boolean",
                            "    req.credential.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "62c4b9b7-f0de-4be2-8557-42bb56430cc5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bdd91435-3326-4bfe-bf67-634a64af228c",
                    "name": "credentials_issue:credential.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a5730f58-fd30-418f-b2b0-76f97cbfeae8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9e3d9d20-b372-402a-8cc2-e95c495cd53d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ac4fc234-fa40-47f9-b883-58812b8b52e0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not integer",
                            "    req.credential.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "2f6eaf23-4202-4ec2-9ff6-3f427af3d1f1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "96e56b99-28fc-4120-9c79-de0e088a29ac",
                    "name": "credentials_issue:credential.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "432a1878-8fe4-4961-91d7-f14758dc4e66",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "95b43ea3-9ac0-4b00-8bdb-78f12edab04c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cb900c20-02c9-41db-a602-098272175a4b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not null",
                            "    req.credential.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "953473df-e684-480a-8a12-847e300bf67e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b223bedd-5dde-4101-a329-457c3fd4d699",
                    "name": "credentials_issue:credential.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5df15ef1-7267-411a-871c-421e303b196f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "de3f4fd5-603a-4db8-8749-b3c7a40d17f6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2d08054e-80d6-436b-89a5-21eaccd573b3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not object",
                            "    req.credential.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "f18d5216-874e-43b5-a59f-82d7fc27b6b0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "443b4ea0-9d06-4339-bacf-24cf3075bebd",
                    "name": "credentials_issue:credential.type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dcec2514-2767-4a44-be2f-1d3f49dab850",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "542fbba5-bd53-4216-932d-570972373d18"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8733f83a-5539-4249-bbb0-d0199a916b53",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not string",
                            "    req.credential.type = \"VerifiableCredential\";",
                            "}));"
                          ],
                          "_lastExecutionId": "7146dc1b-361b-4cbe-b278-b284e0285087"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f9a2308f-a3b4-4832-8bf5-7fc31f95edbc",
                    "name": "credentials_issue:credential.type.item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dbb646e7-ce18-4561-bf6c-0074298aae51",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3c1053a5-d064-455b-a705-c12512616ab1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "89e4f3d8-f7c0-4284-9837-ee51c40b7e55",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must have at least one element",
                            "    req.credential.type = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "0b6b1d6d-fb0a-4fbf-aa50-6f440d559fc5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "84d8f1ba-ac6a-4979-a690-a24a3b0b500e",
                    "name": "credentials_issue:credential.type.item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8066afa7-19d8-4641-af18-6eb345dfec98",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9dc34600-510d-415a-8682-2507a076aacf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d9fca027-af90-4025-96d2-e19d05f766e6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not array",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        [\"AnotherType\"],",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "499c3674-73c1-49dd-8eb0-77cdbf77101e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "47dccd7d-8acc-439e-b13e-587a6024070b",
                    "name": "credentials_issue:credential.type.item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d50f4598-7af0-4d9f-9fc3-e6829827e75d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e2b034a3-9c99-480e-ae7e-bc92b616c616"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e42bad0a-13da-4953-87a5-f68df1987908",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not boolean",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        false,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "70d31942-8adf-4cba-a6bf-61101bd0d703"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c74c028b-73e1-4cd5-9a1b-26e29bfc2945",
                    "name": "credentials_issue:credential.type.item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c42e1a14-6cdf-4f0f-a43d-e6bc53590778",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "006b5fd5-6dc2-4dbc-aae1-a49571334d13"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6ebf7b6b-9e64-484d-990b-b4ba50a19aab",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not integer",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        42,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "a1e7d2bd-9d24-4f6b-a6e5-59532e5eaa18"
                        }
                      }
                    ]
                  },
                  {
                    "id": "edaeaec3-1afb-4f63-86af-785aa1335056",
                    "name": "credentials_issue:credential.type.item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b4b29797-d1ba-48dd-985e-4bd8582a9714",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c13649d1-74b6-43a2-adc1-61641d07a385"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b79ef5fd-3b0b-417c-a399-1810c26a34cc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not null",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        null,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "1f733833-b7fa-4a2e-864a-b21b975d490e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4c56b0a1-0f70-4eea-b7eb-ca138caab743",
                    "name": "credentials_issue:credential.type.item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "24b0d0a0-0c77-41d2-bfed-a53dc05f2438",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f07f3dc2-6f08-49cf-94ef-7c53c911032b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1139a3ea-b9f4-4adc-b492-a0f8d3d35c0d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not object",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        {},",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "27dce838-519a-454f-823b-21bf5f754aa4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "25d1b6b0-4744-4b7a-8612-a9a07f5ecc49",
                    "name": "credentials_issue:credential.issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7cc8744a-72f5-4a3e-81e6-41d2efe4321b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9f712493-b86d-4c81-bed9-be8c1b8632c6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c50d195a-517b-48f2-b6c0-b820df3d23fa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer is a required property",
                            "    delete req.credential.issuer;",
                            "}));"
                          ],
                          "_lastExecutionId": "2bdb5e96-3baf-400a-ac8e-9ee705b35095"
                        }
                      }
                    ]
                  },
                  {
                    "id": "30b4cd2b-0f2b-4293-8b0a-d58d1879cc50",
                    "name": "credentials_issue:credential.issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6376fbe9-33cb-4c03-9f08-cf7f98e5fcee",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fef6ad96-442b-4f75-8378-07d06148b7ab"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4ea7a2d3-24eb-4e32-aa5a-746e7c27c916",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not array",
                            "    req.credential.issuer = [pm.variables.get(\"issuer\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "833dd147-92c1-4bec-824f-c1f52a490c9b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4dc69180-4806-4a74-9080-e9787f4dc475",
                    "name": "credentials_issue:credential.issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c3eb7c91-00b3-4130-b75c-0d0a398938c2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0cb0a57c-5669-410b-9601-d2f75b4d3435"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7e98c936-5597-413d-bd85-95a8788d1595",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not boolean",
                            "    req.credential.issuer = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "10a7fedf-8e21-457f-954a-2586f0ab617a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9b57db5c-4357-48c3-8e9a-ba704454e667",
                    "name": "credentials_issue:credential.issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a141dd7b-9f20-40e7-b6bf-1d62f94a7c95",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3a008735-c06a-40d2-a284-6735df711bf5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d87fc735-2af8-4f65-b356-3bfedfdd47b2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not integer",
                            "    req.credential.issuer = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "6ff2c8e3-6768-48d1-99e5-d1abe90a2cad"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0d0f666a-e383-4d15-bee9-d2ed9f3daa9c",
                    "name": "credentials_issue:credential.issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4e41367a-3ec4-46db-b3ca-d6144b02bc81",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "777adff5-0b12-4c6e-93aa-238833d5ef33"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "35128d40-a64c-4072-a4d2-cabee82eb328",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not null",
                            "    req.credential.issuer = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "808e1628-bea0-4fea-aa55-9f6dae562f3a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "98c6ee77-a82b-499b-9b88-3017633a6536",
                    "name": "credentials_issue.credential.issuer:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "47082774-0b44-4a4b-a987-0c6b17302840",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9c1bd790-46da-45c2-b9e5-aae242f90966"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fe6b2423-3046-41f1-9924-29547db47c44",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be a valid URI",
                            "    req.credential.issuer = \"not.a.uri\"",
                            "}));"
                          ],
                          "_lastExecutionId": "7dc094fe-7832-4ea3-801e-82c5f802c6f3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b7edd075-9e0d-4363-9686-127f7fc67724",
                    "name": "credentials_issue.credential.issuer:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "339e029d-afa8-4525-8519-beb005a453d8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "4eb87e89-f00e-4b58-b5dc-087c638ce9e3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1147f7b9-778c-49fa-955c-71eb78552d3d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be known to the endpoint.",
                            "    req.credential.issuer = \"urn:uuid:{{$randomUUID}}\";",
                            "}));"
                          ],
                          "_lastExecutionId": "44f04275-3716-4b65-a867-9a2666ab03cc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6956dd36-012f-4049-94ae-28744e6b5e5b",
                    "name": "credentials_issue:credential.issuer.id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "be1a42e8-45c4-4c7f-bb86-e2f959be0833",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c57b2191-5703-4465-9ce2-625888f91c87"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bb262518-a21d-4300-9390-395aeb86885b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id is required when issuer is in object format",
                            "    req.credential.issuer = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "19e31380-201e-4ba6-b67e-2b76363f0672"
                        }
                      }
                    ]
                  },
                  {
                    "id": "79662284-0bfb-42b0-a361-52aa5a30c5d4",
                    "name": "credentials_issue:credential.issuer.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4f15a26d-bbaf-4012-84a5-8bb9979dda96",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7f6939dd-2350-4de0-b673-15f7d08d9c08"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "488f6160-eb1b-4d2c-ae8f-97929fa2a501",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not array",
                            "    req.credential.issuer = {\"id\": [pm.variables.get(\"issuer\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "f496668a-4ab6-458c-ba15-6c13a8929b99"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ca066ed3-8100-45fd-a327-1054b837a1e0",
                    "name": "credentials_issue:credential.issuer.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9db94347-2ca1-4c8f-9395-0ed162b20de7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e5443b44-e461-4fd5-a6cb-9f60ce30ada5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6eb9c079-8cef-47a8-829f-bb546d5a2524",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not boolean",
                            "    req.credential.issuer = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "51f9f08f-a0c5-4b07-9599-cfb9f5b81b16"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a49d5b01-3839-41da-bae3-2d9211098bb7",
                    "name": "credentials_issue:credential.issuer.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "76775d9d-61b4-46cd-a6ff-29bbd6be5cd6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6820e1a7-0057-4d15-9913-4601255c56d8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9e6c0366-cf86-4dfb-bd7d-2c47e4a78308",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not integer",
                            "    req.credential.issuer = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "a5a40071-bc93-4ef0-8e3a-b21b46d5cc35"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0df0c0ca-34ce-4fee-bb4d-68606f1c5e5d",
                    "name": "credentials_issue:credential.issuer.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b16147a5-5317-4f92-8a93-b7ba908e691d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8a5654c4-77f9-4c11-8a95-87cc67f25908"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6713f9a6-03bd-4d83-b6d4-c7e6c6f6c4d1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not null",
                            "    req.credential.issuer = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "0d53450a-3a66-4a01-89c3-746f68c3c27a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3e8c5e61-7055-430f-95da-58e28ad2e7e9",
                    "name": "credentials_issue.credential.issuer.id:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a4eea13d-3e99-4f03-9470-7673944c01d0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "805e6aa9-ded3-4d8a-b1cf-9bff41894704"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "343ee989-0bd0-47c0-9647-27835937c421",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be a valid URI",
                            "    req.credential.issuer = {\"id\": \"not.a.uri\"}",
                            "}));"
                          ],
                          "_lastExecutionId": "2159d4ee-627d-4042-b182-7578a3c55f28"
                        }
                      }
                    ]
                  },
                  {
                    "id": "04ed0cfa-0fe3-4bec-b643-054716cebe01",
                    "name": "credentials_issue.credential.issuer.id:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2c61f07c-a642-4af1-af82-853d9bc8057a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3ee1a3a8-fada-4e97-aecf-70a7bca34717"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "edc56865-1765-4ca6-a207-52d48af9dd21",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be known to the endpoint.",
                            "    req.credential.issuer = {\"id\": \"urn:uuid:{{$randomUUID}}\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "1510e383-5e8d-4b44-b88b-f7c73bded2fb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7b014699-5054-4157-a51d-832fdaad25e8",
                    "name": "credentials_issue:credential.issuanceDate.missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ec5ef14a-7377-4739-a62c-00170bc89bd4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "71f21e56-768c-4b1c-90f8-1e23c9f8510e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2201c39b-6d2e-4a60-ae8e-5b8c24ad7b33",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate is a required property",
                            "    delete req.credential.issuanceDate;",
                            "}));"
                          ],
                          "_lastExecutionId": "fe2983cf-3f2c-454f-9c47-f7f270c328f8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a89dd2be-473f-49de-b861-38ed31f0badd",
                    "name": "credentials_issue:credential.issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6acb188a-895b-4b9f-8ac6-fb80fc486706",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "210c00d5-a96d-400d-919e-896a26365022"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a97727e7-926a-41f5-b3f2-b3e961ebe1c5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not array",
                            "    req.credential.issuanceDate = [pm.variables.get(\"issuanceDate\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "bf4b228a-c391-4cc8-9344-3717c0ddea3d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "da8313ca-468f-40a7-93c2-0d6a7cba03a8",
                    "name": "credentials_issue:credential.issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1e3b9990-33f7-4e86-82fe-2b31535b4275",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c68deecc-e8a2-4718-82b1-60c6adbf77c1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "abe6476f-ae59-4194-8bf0-1789fc16e4ed",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not boolean",
                            "    req.credential.issuanceDate = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "3037cb6a-8a52-4cc8-8b50-dc0daf6423c0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3ed255fa-797b-46b9-81bf-e9a92a34d03b",
                    "name": "credentials_issue:credential.issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4da28439-bee4-466a-891d-2a1d9d121a1f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "53000843-5ecc-43f5-974e-ef5f8ccc97b9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d8254241-9876-4770-9e8c-da9edaf60956",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not integer",
                            "    req.credential.issuanceDate = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "570d2040-40d8-4393-b186-34a5fb200e00"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a5f2dc7a-0ba7-4885-945b-73ab6548bbf0",
                    "name": "credentials_issue:credential.issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "043a784d-ab36-4cf3-bc98-5d853bdff538",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bdba0f26-6693-446e-93d3-dfbaf26ebb54"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6303acef-fe77-4c5c-823b-7bb5d52296e4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not null",
                            "    req.credential.issuanceDate = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "845d6e56-1a23-413e-9d7e-130a5d3287da"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7df80cd8-bc97-4152-bdb4-4dabcddf3054",
                    "name": "credentials_issue:credential.issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "40b8ef82-7377-4dc1-b999-38e02c54cd56",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f3422ba7-417f-40a0-9293-ae8ec670e7fd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bd67c5c5-48aa-44c2-a759-42a15a9b82b6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not object",
                            "    req.credential.issuanceDate = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "a28356af-8d29-4885-bcb8-e18952417ecf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dc3c7beb-4ea2-4a45-b6d6-e6463d0c79a1",
                    "name": "credentials_issue:credential.issuanceDate:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9ecf1c40-d436-4756-8f21-34c72c434d05",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5de66d79-501a-4595-823e-79428ebe6ddb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6f37e8f4-dc7e-412e-a57a-af48e064dd0e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be a valid XML date time string",
                            "    req.credential.issuanceDate = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "5e52d8cf-018c-4e5c-b9ee-d109f83e2b08"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4b73c588-fcdb-4250-ba70-0f52a2ad8e2b",
                    "name": "credentials_issue:credential.credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4fa5a453-8839-4bf2-8a66-fe56aa58f3ee",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8c73315d-bec6-4cd0-9e31-3c480e94163a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9f5e4ac6-888f-4157-9e7f-2ec6f4a289db",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject is a required property",
                            "    delete req.credential.credentialSubject;",
                            "}));"
                          ],
                          "_lastExecutionId": "2d5037cf-552e-4589-af2e-6512f20d3ede"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5f0dbfb8-efb0-4716-bc67-b79d7b7e5b42",
                    "name": "credentials_issue:credential.credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "15fa05b8-06ee-4f8c-a94d-6760d8133557",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c49c6dff-e690-468a-985d-e6cbd167de7c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d651f48e-f99c-411b-be94-5f76001a84dd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not array",
                            "    req.credential.credentialSubject = [pm.variables.get(\"credentialSubject\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "1bddd957-9866-41d8-b949-5838cd0e6fea"
                        }
                      }
                    ]
                  },
                  {
                    "id": "50be42ce-dd99-4b5c-88e0-49816ee0f253",
                    "name": "credentials_issue:credential.credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "51deaef3-85d2-4792-bafc-4bc152ec740b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6d180fe2-ce6e-40d8-8dc6-1e5d85bb4b90"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fa0d3a0f-0e00-41d6-8e95-6c3906f0751e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not boolean",
                            "    req.credential.credentialSubject = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "ef2cc2f6-d7e3-48c4-b4fe-f9b3ef040cc0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5d2def8e-b250-4108-b9e7-f36906ae51bc",
                    "name": "credentials_issue:credential.credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9de398fd-61f6-40ba-83b4-3fe4db73c88c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a7bfed23-0a95-4180-86e6-da413f22f0a8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eb0ab8c5-0cdb-4547-a047-10a75045ff0c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not integer",
                            "    req.credential.credentialSubject = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "3faa0aac-17ba-4f72-a2be-21fe2e52d0a5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8dd74f1c-8df9-43c2-b882-f36ca2ccef0c",
                    "name": "credentials_issue:credential.credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "22f17bcb-ce98-4f63-bb1a-be582865afa4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5c5a1bd7-7669-44de-8def-bbd69a3e3f3d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6651a7b5-d128-4a43-bb31-78a50b726246",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not null",
                            "    req.credential.credentialSubject = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "b822e0d5-5e18-499b-9010-67c59f50bade"
                        }
                      }
                    ]
                  },
                  {
                    "id": "13fd6acf-778d-4899-ab66-28d9288d30c5",
                    "name": "credentials_issue:credential.credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e9d14706-ad6d-4a69-9293-b8105530f8d9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fa40a8a8-e635-4368-9c7c-310cee5a1ecc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6ca5915b-0126-455a-ae71-55b6247d05e7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not string.",
                            "    req.credential.credentialSubject = pm.variables.get(\"credentialSubject\");",
                            "}));"
                          ],
                          "_lastExecutionId": "4bebd427-6d67-4f79-b09f-3640928ea9a7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dd4276c0-857e-4f85-8353-4a24d9938574",
                    "name": "credentials_issue:credential.credentialSubject.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d07fec46-349e-4464-993e-15e33c6d45de",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3623b129-36df-4271-8649-9d2d9ecf891b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2eb076ad-244b-45db-9d90-78cc6402cf53",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not array",
                            "    req.credential.credentialSubject = {\"id\": [pm.variables.get(\"credentialSubject\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "24f0f5ee-c3c5-410c-8d57-d6c098c76300"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1f9f7885-f591-4603-b947-cc746fdad4ec",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "55e451e2-a179-4b21-953c-7637e4308a2b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "39f1d5bf-c930-4068-a3eb-aa2050daa12a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f1f55180-9d98-4a0f-ad22-98671488c330",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not boolean",
                            "    req.credential.credentialSubject = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "8a0a539c-b35e-4748-97b2-8deaa73f91c1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c979963c-b4da-40a9-acb3-17da9a889d5f",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 2",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e154f2dc-dfd6-4f39-a684-b827c4063253",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ad5da223-505b-49f0-81b6-84af6c48b4bc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "25784ca1-f549-484e-bdb4-52babe80e50f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not integer",
                            "    req.credential.credentialSubject = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "cd4ed5f4-829d-4812-aca4-35d78eb1f34c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7063c0cb-d714-4452-998d-5b65592008ba",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 3",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b997fb89-4be7-4636-afbd-ea8367eec587",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "edbf8096-11e0-4706-9e94-0b49890c033b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ebe0f621-e2be-4acd-a044-6c4d6cb8d075",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not null",
                            "    req.credential.credentialSubject = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "22bbe87a-1e85-41b1-b247-b51fa646c6c9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "70b288fb-6e34-448a-aa18-335b059f7843",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 4",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "60321a4a-4f87-41d6-95f2-96bcf9885a90",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "693493be-6739-4fa6-8fca-8e0454f0ec0a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f4b7646b-8c6f-4c5c-a3e8-348aaa30722b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not object",
                            "    req.credential.credentialSubject = {\"id\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "bd13ce9f-905a-437c-b27b-9536b276115d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "58c114f5-9750-4b6a-b333-d567d468b321",
                    "name": "credentials_issue:options:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b2cd9217-52ac-404d-9ae9-6dafd3bb690d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "98476171-72cf-411d-9167-fb414e785d7e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1205d9d9-18e6-4405-b0ad-d32175f1f8c2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options is a required property",
                            "    delete req.options;",
                            "}));"
                          ],
                          "_lastExecutionId": "33117fb2-0164-462f-ad39-a8c07524a96f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f9bae2ea-b1b3-4672-8b13-b8ec405c9f58",
                    "name": "credentials_issue:options:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "99d3774b-53f4-4601-a6be-6c62ddf5c2d1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ce9d86f5-6686-47a3-8ce0-341ced80b3dd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "944f42aa-7a64-4838-bbe7-4660d9655e02",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not array",
                            "    req.options = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "59ad1ced-aff2-48b0-8d93-45541edcc926"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7697ab22-5a5a-4efb-8329-8920dd101e4f",
                    "name": "credentials_issue:options:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "eb3c092d-f13c-4e69-a482-c96ff8d08323",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "47b84474-8950-4e30-bc03-d841d1936314"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "11693a5b-75e4-446a-ab6a-0cdbebff9833",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not boolean",
                            "    req.options = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "d5b57222-dd18-46b6-90e2-5eb459d2ce8e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "11a1d680-b1c1-42be-9ab8-c0f85386b5e7",
                    "name": "credentials_issue:options:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9386964e-0a86-477c-b1b6-25430d68359c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "88e4068b-b6f5-44d5-874a-caf9f969cd29"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f36dcf2f-e490-46fd-8ce4-18a992f5d410",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not integer",
                            "    req.options = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "f8b58c0d-a604-454a-aa2c-e371171d3a32"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3a6f002e-f4d4-45e0-80c1-cc6de28fadc9",
                    "name": "credentials_issue:options:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c83c3920-3756-4cb7-b2cc-5e75c451eb9e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1cbdde3b-2682-4d19-97be-5c524523f0c3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "87d8d0ee-c888-4721-8dfa-88bf31897dbf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not null",
                            "    req.options = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "7cdde248-7314-45ce-a262-68fdbc065102"
                        }
                      }
                    ]
                  },
                  {
                    "id": "676d56d9-22c4-42bb-b0ac-fe27cd8db135",
                    "name": "credentials_issue:options:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "06c0a4be-798e-44e2-b764-4cab61f646dd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a969c8d8-72b0-4523-aefb-a3e5537865e0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6df55964-f02c-4c10-9ebb-d4b8208998ed",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not string",
                            "    req.options = \"\";",
                            "}));"
                          ],
                          "_lastExecutionId": "5c95c26e-2830-4efa-8f67-04993cf99702"
                        }
                      }
                    ]
                  },
                  {
                    "id": "043dce02-6163-4736-8e48-ba264c5daf97",
                    "name": "credentials_issue:options.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2c80f508-b4fc-4e81-859c-099ad28cdfcb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3b448560-2d6d-4540-9dae-9607b9605ac4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6f9f9ef1-e1fa-4fd5-b7ac-f064db32218b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type is a required property",
                            "    delete req.options.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "d028e7a4-9957-42fd-b462-e1a48869270a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5430d1e4-64c6-486d-aa8c-ae0ead7f3c27",
                    "name": "credentials_issue:options.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d9f447db-edb7-4910-b65a-6ac8da7dd104",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "74a1ed18-243d-46c1-bf68-1cb50417393e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "68b99eea-68ef-4d4b-8ee6-ca89cd7f16d5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not array",
                            "    req.options.type = [\"Ed25519Signature2018\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "14621fdb-c1a8-4906-9c19-866a1f21cc2a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d4f40f45-fb5d-4c72-b5ae-f7db91708053",
                    "name": "credentials_issue:options.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "127e5967-b576-422c-aa8f-ad2121070012",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "727aad46-6351-4e08-b157-062142e775c3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cafbb24d-1aed-415d-8c64-c66666218303",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not boolean",
                            "    req.options.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "9853aeea-21cf-4332-842b-c7caad612caf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a178a93a-6033-4311-8dfc-9bf9ad368980",
                    "name": "credentials_issue:options.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d8739130-3e16-454b-abd4-af70e852e0a7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a2d89283-cc1b-40fc-8d9b-69255cb03915"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c6dcb58c-fc43-4218-9049-35c18815bf28",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not integer",
                            "    req.options.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "da908a71-56d9-4516-a2ed-b90c97445e92"
                        }
                      }
                    ]
                  },
                  {
                    "id": "79a0c148-4c68-4ba0-84fd-1a24779cfecb",
                    "name": "credentials_issue:options.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "230e7b12-5726-45ac-be00-7c618dde5e97",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "850b2385-19a1-4f7d-adae-5a38d512f1b1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7e662733-883e-40bc-b35f-ad70c23ef6a2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not null",
                            "    req.options.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "200f80b7-b9de-4e66-a577-f83649f18a52"
                        }
                      }
                    ]
                  },
                  {
                    "id": "54ad57cc-8e3c-4837-ac29-d4f6507c0bea",
                    "name": "credentials_issue:options.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4ab8cafd-fb56-4a9a-80d3-9fb695f326eb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a2a8776f-6d70-4e54-a809-f78f7c9e32bf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "78b6cc62-1b68-4714-95f1-a12d0f7cacc1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not object",
                            "    req.options.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "1cb5c44e-1a8c-485a-a814-4b1e35ebe9e2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c68e3de8-a17d-4cf1-bcf1-4de9886e5ff2",
                    "name": "credentials_issue:options.type:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8c2e36ff-048e-4352-873f-137e7dedfc83",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "35ca2a0b-0e0d-4e70-ba29-170211672b45"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "19ec40a3-896d-4768-840b-fb4a67eb4700",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be one of the valid values",
                            "    req.options.type = \"invalid value\";",
                            "}));"
                          ],
                          "_lastExecutionId": "97eb00ec-6521-4e9f-aa8f-5ddc10053da9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "916c49cc-4123-495a-952d-d3a959d463e3",
                    "name": "credentials_issue:options.created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b01c57ab-5b2f-4bea-b0bd-156ec159ae2e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a47213b5-1740-45fc-b7cf-7308edf23b39"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5bce5c8c-7c66-46a8-96a0-763c93e9fb4f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not array",
                            "    req.options.created = [pm.variables.get(\"created\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "85f9150d-691e-408f-8633-535ad98e9031"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4f533473-a8e4-47cb-b575-bfba5b4b706d",
                    "name": "credentials_issue:options.created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d8f40c10-f2c4-4a18-b3e5-c81a7ac7e138",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8dc25eb7-56b2-499a-9e66-24d16d7ca431"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "365b73d0-8a94-4ee8-8aa5-73b46e9e604f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not boolean",
                            "    req.options.created = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "47d31d35-7c7e-4b8d-ad42-0869750b7634"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3511b924-d3c1-453b-a8b8-4a43a5d42517",
                    "name": "credentials_issue:options.created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "51663239-cc98-41cc-9c5e-757bb0e6b2f9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bda6055a-2582-4e9b-aee4-c00b2f85dcb4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "65da83a9-17c3-4d46-a283-1cdda10fa108",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not integer",
                            "    req.options.created = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "8f5184b0-063a-4c65-b1db-c5211b2a19f8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cc7df153-6f46-4755-ab49-5e8690baeaa7",
                    "name": "credentials_issue:options.created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5c299754-cb5a-4890-9fc0-6479b801cea4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5cb6aff3-9f73-479e-848d-13321c0d4dcc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9a3a1148-d4f6-42fe-9745-a3eb31d1e6bd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not null",
                            "    req.options.created = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "a644b140-dc0c-4412-8280-5c93ec03349a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "df333bbf-9780-4e83-901d-a06818ee1ac3",
                    "name": "credentials_issue:options.created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "213ed118-6b3e-4bec-8513-0af0a9a9802f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a72285b8-6ea6-4fd9-bc19-2ac0f0c10dc5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "466bea82-be00-4b28-8220-256270b3f780",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not object",
                            "    req.options.created = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "d23da393-df02-4edf-b57b-3627581e5c8f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f267b167-90d4-4258-a87f-83740f2cfe61",
                    "name": "credentials_issue:options.created:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "90791a7e-682b-45ed-ae8f-c78335bfd6c7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4147dd00-4e41-452e-bd10-90771396f478"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6b5272ec-5b8c-4592-9570-bed5694da330",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be a valid XML date time string",
                            "    req.options.created = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "944cd410-7244-49ac-9f88-30f6e53b4d7c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8a1ad3dc-07d0-40c0-88ba-d4e06f24d9ec",
                    "name": "credentials_issue:options.credentialStatus:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "44f59ab5-f7dd-475f-86d3-7283f4167540",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "318e2968-5fb3-4a44-9305-86ebafae4b9c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "81f2b981-0159-465b-8d34-d68d865504a4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not array",
                            "    req.options.credentialStatus = [\"RevocationList2020Status\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "755b1a5e-dc79-4565-b25d-7c9f1251a701"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8e955a52-bed8-41ed-8c0f-3462ee5fc14a",
                    "name": "credentials_issue:options.credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0fc626b9-776c-4161-a695-cdb688dac30f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ae98decf-ba55-435e-99e9-c56a304ac97e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "097d6762-f890-40e0-bb25-90722a43b347",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not boolean",
                            "    req.options.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "c182cc73-b87e-4338-90cc-6e46ed919856"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d37243a2-ca5b-4d8e-86cd-62df70f0b5cf",
                    "name": "credentials_issue:options.credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "371db61b-c895-4d43-8d18-12e5915157c3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5bec0acc-64b8-4eee-b5e2-0cde0910b6f1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "64f7aaf0-2f4e-47e6-b7bc-49832b231c48",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not integer",
                            "    req.options.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "a47683bc-9ded-49c8-8830-ba33c3b9876b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "73e137ff-cf96-475c-94a0-d8f7f2dc4ac8",
                    "name": "credentials_issue:options.credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a254ee73-0fc6-424a-914d-e1eef1a1ecdc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "012eac8f-e45d-4d28-9380-4e27684ecbbf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b50df819-6de4-4b0c-bf2b-2d0944e657bd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not null",
                            "    req.options.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "dd8d1f96-5c6d-462f-9fa9-0454736e1ba4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "588b0aa0-d67e-41a5-8d31-6172301d6ff4",
                    "name": "credentials_issue:options.credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ee765b45-04e0-475a-ba3e-824d744309f8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "01c94c54-d037-4c82-a0a2-17387508ba4c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "98baf058-cf5c-46b8-b606-9b49f7732bda",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not string",
                            "    req.options.credentialStatus = \"RevocationList2020Status\";",
                            "}));"
                          ],
                          "_lastExecutionId": "0280fbf5-0d71-469f-bcaa-30d2dd142e7e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b8ff9032-c889-492d-b827-9201e509a74e",
                    "name": "credentials_issue:options.credentialStatus.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8362cc41-88ba-49cc-98d8-836e65caf287",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c98d5d13-8d8c-4d2e-bbd7-a279864e0f8b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "47fc6fd2-09d0-40f7-92ef-dd3cadf5c709",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must contain \"type\" when present    ",
                            "    req.options.credentialStatus = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "9d378d23-2adf-4711-b88a-8e2dbec0f1a1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2c83fdfc-5f51-44a3-8c51-8cfbc32a2f06",
                    "name": "credentials_issue:options.credentialStatus.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7b13c6b1-7526-4c1b-951c-b78f67edf4e8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "46265066-884b-4408-b6b9-efaf320473f3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9dac96ff-6f90-4707-a914-9bcaf3708095",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not array",
                            "    req.options.credentialStatus = {\"type\": [\"RevocationList2020Status\"]};",
                            "}));"
                          ],
                          "_lastExecutionId": "e4c20e83-eba6-4ae6-b9e3-c44a23779c4b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6b1d83e6-ba43-44d0-bf9d-9a8bd17802c0",
                    "name": "credentials_issue:options.credentialStatus.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "80c88669-0dd1-4ad4-8691-2b6374b5b40c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7e7a9fbc-355d-4f20-99dd-7cbf2c06d6fa"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c2b186b2-fe14-4c68-a1d7-b83404624336",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not boolean",
                            "    req.options.credentialStatus = {\"type\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "d162b8c0-023f-4f0c-a0a5-e84346389b6a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1a111e44-6d7a-49a6-a9fe-697f41910b5f",
                    "name": "credentials_issue:options.credentialStatus.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2078e2c6-3e8f-4647-9b36-09ee8413dbf4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fa2a07a7-09d1-4e49-99ed-9300a6933bf3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8011b82d-ca11-4ee8-b3ea-7fb114757046",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not integer",
                            "    req.options.credentialStatus = {\"type\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "b5e754dd-34a2-4360-907c-b644037a7398"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2a58bcd6-cbed-4739-855b-1392ae335df3",
                    "name": "credentials_issue:options.credentialStatus.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f6cc0961-4318-4fc0-bb10-124bf60eb020",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2a3ef839-5243-40cb-93ef-b88aa9538a76"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dbefbe84-42c6-4354-b2a2-95005669dcad",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not null",
                            "    req.options.credentialStatus = {\"type\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "9e730629-2e7c-4106-ab6f-ac7dd03b7ac3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c0cd9a66-b9f7-48de-aa30-493c9038f30c",
                    "name": "credentials_issue:options.credentialStatus.type:null Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "49fde661-3622-46c5-ba2a-aac58312945a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c173a621-b4ec-49cf-b282-6fa7666c5e88"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fc2eba5e-942d-436b-867b-8ed2aa90186d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not object",
                            "    req.options.credentialStatus = {\"type\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "9ca7bfec-f861-4e27-b0de-a3832441a683"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a61f768e-8ac2-4b1c-8480-834599dd2993",
                    "name": "credentials_issue:options.credentialStatus.type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "35628073-b59d-47d6-854d-dde489ba0636",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "d1bbc29b-a285-4aa6-8717-6bc63e7970d6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "46642620-f58c-4d6b-9ab8-2d47c5ae66d9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be a valid value",
                            "    req.options.credentialStatus = {\"type\": \"invalid value\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "5f0cd038-4138-4c5c-8aef-de3f52d080a3"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "177ab0f4-38a7-4c2a-80ad-231caed3944c",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "93c30d4d-58db-4c0f-8b9d-fd97e578c6df",
                    "name": "credentials_issue:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c57c41b5-9308-4a60-b216-6dc29e8b160d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "c33bd250-0f5d-4f1b-9a2f-69c2dca830ee"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e0627bcc-641f-4ba3-989d-b4846dc0f6ac",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"rawBody\")));"
                          ],
                          "_lastExecutionId": "c99000c4-ac3c-4653-9862-ca31a72b9b00"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8a0505ed-6916-4dba-86df-8aebb30b9c5a",
                    "name": "credentials_issue:missing_scope:issue_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c3be36e8-6d05-497a-8950-5f811c5955ff",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "b866ef53-4845-4e53-af0c-936b30b18e2a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "74a711df-59c0-4f0f-a3c7-ff67bd890f42",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"issue:credentials\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"rawBody\")));"
                          ],
                          "_lastExecutionId": "e6062e91-6082-499b-bd82-2a951e49ed71"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "b982805c-64b9-4543-898d-019ef4af6d12",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "78e31437-b5fd-4473-afb5-084e7dd43bf1"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "0234c894-2b31-42e3-bad5-c4d375dcb4f4",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "6885f45f-3735-4c20-bef8-f4f5aa9d8963"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "084b6d57-f85e-48b4-bb76-7320abaa4182",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "084f9045-51f3-487f-89e6-8acd3acbec67"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "b2573356-5161-4f92-951a-6cdf36028286",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "5d017eb8-6174-44a2-b1f6-3f1e876bd8af"
                }
              }
            ]
          },
          {
            "id": "472cc442-d08a-438e-bd1f-decc7b9f4556",
            "name": "Positive Testing",
            "item": [
              {
                "id": "8fa789a4-c605-4d75-a48f-bf7bd1ec5106",
                "name": "credentials_issue",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "382ec9fd-91bf-4a5a-95cd-bcf0d989b852",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "// Current OpenAPI v3.x schema cannot require specific array contents",
                        "pm.test(\"response @context contains traceability/v1\", function() {",
                        " const context = pm.response.json().verifiableCredential[\"@context\"];",
                        " pm.expect(context).to.contain(\"https://w3id.org/traceability/v1\");",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject matches request credential.credentialSubject\", function() {",
                        " const { credentialSubject } = pm.response.json().verifiableCredential;",
                        " pm.expect(credentialSubject).to.be.empty;",
                        "});",
                        "",
                        "pm.test(\"response issuanceDate matches request credential.issuanceDate\", function() {",
                        " const { issuanceDate } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuanceDate).to.equal(pm.variables.get(\"issuanceDate\"))",
                        "});",
                        "",
                        "pm.test(\"response proof.created is close to 'now'\", function() {",
                        " const { proof } = pm.response.json().verifiableCredential;",
                        " const delta = Math.abs(Date.parse(proof.created) - Date.now());",
                        " const tenSecondsInMs = 10000;",
                        " pm.expect(delta).to.be.lessThan(tenSecondsInMs);",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "c847a15f-f0f4-4ceb-8298-b3a16ae63d29"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "2da255c8-2eba-4422-b005-e4552598724f",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // noop",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "7cd1d755-246a-4933-83a4-3886aa10c042"
                    }
                  }
                ]
              },
              {
                "id": "f83d9f9d-2e53-4cc6-b75b-f334884384cb",
                "name": "credentials_issue:credential:alt.issuer.object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "cf30f053-8f67-4b92-8da9-273d008ab974",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "// Current OpenAPI v3.x schema cannot require specific array contents",
                        "pm.test(\"response @context contains traceability/v1\", function() {",
                        " const context = pm.response.json().verifiableCredential[\"@context\"];",
                        " pm.expect(context).to.contain(\"https://w3id.org/traceability/v1\");",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer.id\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " // Implementations may reduce object with just \"id\" property to a bare string",
                        " if (typeof issuer === 'string') {",
                        "  pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        " } else {",
                        "  pm.expect(issuer.id).to.equal(pm.variables.get(\"issuer\"))",
                        " }",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "6b9e81e5-1f7f-48b5-9884-fc9f3f4604ad"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "cbdb0395-be6e-4daf-8245-402309c71505",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.issuer can be an object with required 'id' element",
                        "    req.credential.issuer = {\"id\": pm.variables.get(\"issuer\") };",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "29a3e5c8-5469-4fc7-803f-01e56b85580b"
                    }
                  }
                ]
              },
              {
                "id": "cb95b3c6-1aba-4ba9-8a64-bfd62d548a86",
                "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "65b99410-76fe-47ff-be2e-00f2f9ede75c",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "// Current OpenAPI v3.x schema cannot require specific array contents",
                        "pm.test(\"response @context contains traceability/v1\", function() {",
                        " const context = pm.response.json().verifiableCredential[\"@context\"];",
                        " pm.expect(context).to.contain(\"https://w3id.org/traceability/v1\");",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject.id matches request credential.credentialSubject.id\", function() {",
                        " const { credentialSubject } = pm.response.json().verifiableCredential;",
                        " pm.expect(credentialSubject.id).to.equal(pm.variables.get(\"credentialSubject\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "00a73bff-aab4-4d3d-9d2a-eae37fc32c42"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "ce836a21-d461-4e16-9e38-7e1ab2602c02",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.credentialSubject can be an object with optional 'id' element",
                        "    req.credential.credentialSubject = {\"id\": pm.variables.get(\"credentialSubject\") };",
                        "}));"
                      ],
                      "_lastExecutionId": "5d2a1b2a-73d0-47b5-9d0d-d1e7278e7604"
                    }
                  }
                ]
              },
              {
                "id": "7c5954b5-9c1b-4b45-ae4b-bb3defb07553",
                "name": "credentials_issue:options:opt.created",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "b5ed4189-7f8e-4f14-ab88-dc849af178ca",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "// Current OpenAPI v3.x schema cannot require specific array contents",
                        "pm.test(\"response @context contains traceability/v1\", function() {",
                        " const context = pm.response.json().verifiableCredential[\"@context\"];",
                        " pm.expect(context).to.contain(\"https://w3id.org/traceability/v1\");",
                        "});",
                        "",
                        "pm.test(\"response proof.created matches request options.created\", function() {",
                        " const { created } = pm.response.json().verifiableCredential.proof;",
                        " pm.expect(created).to.equal(pm.variables.get(\"created\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "0f897c0b-671c-4918-bcd1-07d2523a33a6"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "8912b334-bc60-49c7-9491-27131cae952f",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.options.created = pm.variables.get(\"created\");",
                        "}));"
                      ],
                      "_lastExecutionId": "b149f65d-6c40-47cb-805e-9d9d28c73df3"
                    }
                  }
                ]
              },
              {
                "id": "3a11d219-9b6a-40d8-bb34-f0b3cae0ec8b",
                "name": "credentials_issue:options:opt.credentialStatus",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "f3d2a968-c8d2-48c5-9f4f-b80586062e58",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "// Current OpenAPI v3.x schema cannot require specific array contents",
                        "pm.test(\"response @context contains traceability/v1\", function() {",
                        " const context = pm.response.json().verifiableCredential[\"@context\"];",
                        " pm.expect(context).to.contain(\"https://w3id.org/traceability/v1\");",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "4c032cbb-cfd7-4041-bc81-0cd4a01925e5"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "03540fd1-bfef-45da-a16d-80a837fac787",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // options.credentialStatus can be an optional object",
                        "    req.options.credentialStatus = {\"type\": \"RevocationList2020Status\"};",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "fe959a7a-8eca-4e57-a9a9-1cd0e8f36222"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "b127a422-3f5a-4e1c-94e9-4e6dccdacfc6",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "cb4d4c1c-e818-4319-ad02-9ed7beb1af1a"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "44f5c417-ef6c-4689-b0ce-dd03cc83e273",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "83334ae1-d556-428a-9d7d-f127cc39534d"
                }
              }
            ]
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "ae243483-ce60-409a-b15d-93b90f6752d0",
              "type": "text/javascript",
              "exec": [
                "// Populate \"currentAccessToken\" with a bearer token that has the required",
                "// \"issue:credentials\" scope.",
                "",
                "utils(pm).getAccessToken('issue:credentials');",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "pm.variables.set(\"credentialSubject\", \"did:example:123\")",
                "pm.variables.set(\"issuanceDate\", \"2006-01-02T15:04:05Z\");",
                "pm.variables.set(\"issuer\", pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "pm.variables.set(\"created\", \"2006-01-02T15:04:05Z\");",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credential\": {",
                "        \"@context\": [",
                "            \"https://www.w3.org/2018/credentials/v1\",",
                "            \"https://w3id.org/traceability/v1\"",
                "        ],",
                "        \"id\": pm.variables.get(\"credentialId\"),",
                "        \"type\": [",
                "            \"VerifiableCredential\"",
                "        ],",
                "        \"issuer\": pm.variables.get(\"issuer\"),",
                "        \"issuanceDate\": pm.variables.get(\"issuanceDate\"),",
                "        \"credentialSubject\": {}",
                "    },",
                "    \"options\": {",
                "        \"type\": \"Ed25519Signature2018\"",
                "    }",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};",
                ""
              ],
              "_lastExecutionId": "8c77156f-c85f-4da5-bcb1-68c866967fbc"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "b5e5fcb6-cbe3-4603-a20b-ab0b66c1da7d",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "19cdf86d-5e4b-45a0-a17e-2a9c69351dda"
            }
          }
        ]
      },
      {
        "id": "969a9c4d-07b2-4687-8d98-235d4f845c03",
        "name": "Credentials - Update Status",
        "item": [
          {
            "id": "a6b9b1c5-ec1f-4ca9-ade8-5788328d6072",
            "name": "Negative Testing",
            "item": [
              {
                "id": "564e80e7-999e-46b0-9911-cbfb55e0c0bd",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "44954586-2b63-46ee-a315-6cfcd2aba995",
                    "name": "credentials_status:credentialId:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "62c9ef2b-ebc3-4d8c-9327-25ba1281a449",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8034ac9a-be49-462d-9f54-9f38439a313b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e04e38af-0a39-410b-852c-e87aacd1c5b8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId is a required property",
                            "    delete req.credentialId;",
                            "}));"
                          ],
                          "_lastExecutionId": "d69e20a0-f90b-47ac-8198-d6f33fda37a3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0db605fe-a7b3-4229-98c9-4f7160f34629",
                    "name": "credentials_status:credentialId:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1631c623-b6ac-4e9c-8709-9f2fd1f9126a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "62b03370-9875-4653-82f2-1eebacf30b35"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "24ddd283-1f77-414d-b351-d47ea33fb567",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not array",
                            "    req.credentialId = [pm.variables.get(\"credentialId\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "706c8183-d354-4b96-b50b-83903026ec0d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "40b9177a-9914-40a9-bb86-5affc23f7141",
                    "name": "credentials_status:credentialId:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c3121456-041e-47e0-9b8f-8346564419b9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d892b221-88d9-4278-a9f5-ebdd66dc347e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "88756175-0ec1-402b-8982-4a9c24f9606e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not boolean",
                            "    req.credentialId = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "4657a8a4-1369-4c73-b57a-64c1e12f8a32"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0ef427e3-6256-4ea6-b2e6-d4eeaa3d8b66",
                    "name": "credentials_status:credentialId:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8ef61840-8a05-470b-992d-4a44918188eb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ee490ca6-7c02-44e5-84ab-57472be5ffad"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "79f02544-9666-402a-86e3-9f43749aec27",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not integer",
                            "    req.credentialId = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "10329f2d-0409-46bd-bbe9-09d8ed051946"
                        }
                      }
                    ]
                  },
                  {
                    "id": "848847a6-8b6e-4206-b5f8-40e1ceaee86d",
                    "name": "credentials_status:credentialId:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d824beaf-73fb-4825-8fa1-a167106563ff",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "733649e7-9180-4c9b-a5b4-50bfa2d7e87c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1409597f-df0b-48c2-8554-6339bbef438c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not null",
                            "    req.credentialId = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "0db0f4f0-f4d1-41d4-8424-c0127fb3f6b5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "81b9f691-d89d-49e2-a69d-c5abe065af2a",
                    "name": "credentials_status:credentialId:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "59446d46-00aa-461d-a422-8e2852e5a4a2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0e10d53f-dbc1-48e7-b051-2a103c53c4aa"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ce624e7b-6e62-4d1b-a818-f85114265394",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not object",
                            "    req.credentialId = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "d61dbca5-3c13-4b89-900a-a07a1a4dcea2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "369b9dfc-0547-40e0-bebb-b49c7f09baec",
                    "name": "credentials_status:credentialStatus:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3e8cbf9f-ca71-4ce3-ba61-bfc26de3462f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0279ec65-cd1a-4f0d-b25b-fac564863ded"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9c502cf6-45aa-46dd-94d6-58a9889bb050",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus is a required property",
                            "    delete req.credentialStatus;",
                            "}));"
                          ],
                          "_lastExecutionId": "9159002a-e471-4c98-acad-0db74557e82d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "17aeb145-6c31-42d3-b109-f857eba165ea",
                    "name": "credentials_status:credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5c495b83-743b-405e-9899-f06f547f3519",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "196c79a7-de63-40db-93fe-95454a3d3fea"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3621700b-7406-46b6-b4dd-a7314a670bcc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not boolean",
                            "    req.credentialstatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "546256e1-7fbe-490e-9996-95b2efe767a6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "021143c1-ea53-4d1d-8099-506c41b5d931",
                    "name": "credentials_status:credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8cf25871-5b16-4ac0-8537-df05b0ae9df1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5da3c11e-52f9-4b02-adcb-09f27f3ccd83"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d31255aa-21ca-495b-a8e8-07875452a206",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not integer",
                            "    req.credentialstatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "f3ff3993-cf18-40f4-8f75-d878d816b7b9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3deb0437-57d5-45ff-a2dd-0cab42499edb",
                    "name": "credentials_status:credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "18558487-7d0c-4382-8ec7-dea49f820cbf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0cb92c7a-b642-437d-972a-8517b85954f4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a006ba1d-a5bd-462b-900e-0df7bd082c5e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not null",
                            "    req.credentialstatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "f89d2715-2ecd-4a8a-af08-4453aaba4b90"
                        }
                      }
                    ]
                  },
                  {
                    "id": "40d6795b-23fe-457a-a17a-731b39bf3fb2",
                    "name": "credentials_status:credentialStatus:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0d52cbc1-b15e-4fc5-92ee-e13790815d97",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dba8d357-7d71-4156-948c-3ac09740a18a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8d23b596-670e-4aab-9ef3-0bdfc118a416",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not object",
                            "    req.credentialstatus = {",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"0\"",
                            "    };",
                            "}));"
                          ],
                          "_lastExecutionId": "79ffb3f1-bceb-4a62-bdda-b77f17c5c3c1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4483e4b3-7f9d-4db9-b891-e0ac2d97d75a",
                    "name": "credentials_status:credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4deae5ee-188c-4dbc-852d-a2cb218a544f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "04fc6242-7b44-4cc9-8246-9da84a9e48a7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "19c91e40-4372-4bf0-8b37-fde5cacdf2d3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not string",
                            "    req.credentialstatus = \"RevocationList2020Status\";",
                            "}));"
                          ],
                          "_lastExecutionId": "f75b942b-def0-403e-96c3-c6b5c98d6029"
                        }
                      }
                    ]
                  },
                  {
                    "id": "50fbba48-b74d-40b5-b769-f55809bca75f",
                    "name": "credentials_status:credentialStatus:too_long",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a0d36351-83d4-4f6c-bd85-68c8569d4a9a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2349087c-f19a-41df-a793-74da196a828a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d54d3c96-bb6e-4dc7-b460-58fc13558e77",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus can only have zero or one elements.",
                            "    req.credentialstatus = [",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"0\",",
                            "        },",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"1\",",
                            "        }",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "3bc694a8-f001-4a94-8e8c-aed865e47592"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d18dfabd-2baa-456d-bb83-5e7b3ea07f18",
                    "name": "credentials_status:credentialStatus:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a6ccaf83-b695-4933-975a-e9d0791f0012",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "28c48906-8c04-426b-826a-6a4dc87562f0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "35a54a87-85ea-4a4d-8e06-177be1f9abb9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not array",
                            "    req.credentialstatus = [[]];",
                            "}));"
                          ],
                          "_lastExecutionId": "44a7a948-daa4-44b4-944b-38f30f6d5c28"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eaab58e8-0250-444a-83bf-f3b210a78ba2",
                    "name": "credentials_status:credentialStatus:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "de080036-b74e-4b87-94dd-901d59bb2c6b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7b0da115-8f9f-4e1a-bb40-00b0a03c37f1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f021681c-01b2-4e33-826f-6c6b0e7f1914",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not boolean",
                            "    req.credentialstatus = [false];",
                            "}));"
                          ],
                          "_lastExecutionId": "0d80686c-186b-4a63-8471-675db7e35925"
                        }
                      }
                    ]
                  },
                  {
                    "id": "44638cfd-28cc-4c7f-a5aa-103afdfedcb4",
                    "name": "credentials_status:credentialStatus:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "aa805423-b88d-4df4-9cf3-5475e7eda3f2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "91fa6825-cb3c-483d-b709-3de574f7a670"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "248131a3-2480-41d0-a615-88cceda141bd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not integer",
                            "    req.credentialstatus = [42];",
                            "}));"
                          ],
                          "_lastExecutionId": "aaaa0755-db90-4a45-a529-3c4d4d68684b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5a5be615-e867-4a3c-a70c-4159defe58f1",
                    "name": "credentials_status:credentialStatus:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ef92f30e-bfa3-484a-a0e0-14ec80ed2fc2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0a1faae2-0c72-49f7-be56-85272240429d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a37638e1-8d97-4424-93b7-8fdd5e314335",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not null",
                            "    req.credentialstatus = [null];",
                            "}));"
                          ],
                          "_lastExecutionId": "35e746be-49fe-48a1-8732-309914bfc6fb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "95586337-f461-4db2-88e7-04abb242fa87",
                    "name": "credentials_status:credentialStatus:item:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d7949a58-8851-4bea-9410-26b06bd7bc0d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e2ea72eb-6f77-4358-bac3-e61d8c4861b3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fe7687d8-7af9-4afc-ad88-5c45a578a784",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not string",
                            "    req.credentialstatus = [\"RevocationList2020Status\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "38a777ba-9532-4e81-a0f3-3127af5c0ca0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a4b16d11-b14f-4901-8bfe-2ea95ceb20fa",
                    "name": "credentials_status:credentialStatus:item:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b38359be-7236-4c5b-8b2c-c11bcaf47930",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f9768c2d-e3b4-46da-963b-6228eac7c435"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "73ea1d38-412a-4630-938c-d244ab6a1646",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type is a required property",
                            "    req.credentialstatus = [{",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "d4de783a-7614-467a-b42d-6e92c2829318"
                        }
                      }
                    ]
                  },
                  {
                    "id": "79d152c7-b490-471d-8025-f7f9bd76425a",
                    "name": "credentials_status:credentialStatus:item:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ce98482e-f7ba-40e2-9f9f-0a3b895a6247",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b07f1993-97a2-462c-b031-6f89ebba1668"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eaa962ad-3f3e-4a41-b1b8-ee6911d0628b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": [\"RevocationList2020Status\"],",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "9770fa73-eb85-46a5-9d89-9ac142e59810"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3fa85a1f-8f40-46c5-8a2a-311573a4d7ed",
                    "name": "credentials_status:credentialStatus:item:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "72cce9a0-83a9-44f4-ad1a-a8d4f01b3d0c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "03eb9f46-f967-476c-9d2a-4cea022f8d0f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1501a50a-c777-4d97-9689-b191c77d4735",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": false,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "83b9951b-137f-499d-8a48-74410d4c970b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "37169579-eb48-4b10-9ef5-b01909305516",
                    "name": "credentials_status:credentialStatus:item:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ffeced04-5080-457d-b5f8-9ccae2df14f0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "07edf265-99a5-43ed-8797-060579d981f5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ee7609fe-3966-4d40-9561-0b53105820e5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": 42,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "e0f86809-641c-44a7-90e1-3e4fda08b9b7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3fec6819-7dac-46b0-a8f6-0dce04422c62",
                    "name": "credentials_status:credentialStatus:item:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f0bde014-6047-4626-bda5-21adf1df596e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "13c75f0b-12c3-4c83-8523-308d33f03acd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f7725c6f-0f26-4496-bc17-50c100c5d8ba",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": null,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "104b2fbf-53e7-479d-a4d4-f8fce8354f20"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f7dcc7f8-f5eb-420c-b4c6-ae34cd315afb",
                    "name": "credentials_status:credentialStatus:item:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0b567cc2-f8f1-4017-ae5c-888512a18771",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "485fa4d1-8645-41c1-afae-f4398073fc3d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dfd6cbe8-aec2-416d-a4bd-195a60cf0792",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": {},",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "2e9c996b-6a5b-4eb6-85b5-1f81bf318ac4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2fd30e3b-7005-47cb-88b4-d603bdce7428",
                    "name": "credentials_status:credentialStatus:item:type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "144ae9e1-afbe-4dd6-a378-08cda92dc1c6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e8eef7d9-0798-4785-ad68-7f7bdd495674"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f7b1876d-ebff-45f4-8a5b-110f7ab94f0d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"invalid value\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "bd6b6766-9e81-4076-9a6e-302de9d71283"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4c5a12f3-fd1e-4dc5-b405-521dfed90777",
                    "name": "credentials_status:credentialStatus:item:status:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b3d4945f-4c48-4b10-b089-c00bab422377",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4c99d45e-b01e-417c-9ed3-29d9cecbbaad"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "73f29b33-5834-4b50-9c4a-594ee44ed20b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "fa8744a5-7d5d-40ce-be28-cceaffb7d3e1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a26f6f29-fde3-4d00-a50b-f24c6f58632a",
                    "name": "credentials_status:credentialStatus:item:status:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5bea078b-a4af-498b-a0c9-e3831424fdfb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d85b6cd7-7609-4b9c-b667-96cfed8af43a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "56ec4304-8338-481e-a0bb-736df3bc4380",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": [\"0\"],",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "0b2bd3a8-2692-4f75-9aac-88504558ed6e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4cbd0593-3651-4b3e-aaa7-0c417b1a0d7b",
                    "name": "credentials_status:credentialStatus:item:status:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2f13bfc7-d800-444d-9c5f-dea6bbb638ff",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3a68acc0-e698-46d8-8840-e61dde33f501"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5392555a-8979-490e-89a3-86503872ab2c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": false,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "3638d2a0-02ca-4a2f-b7f3-6e11a32574bd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "002f299c-2958-4e78-88d0-71d8c03a15bd",
                    "name": "credentials_status:credentialStatus:item:status:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "70b14d96-1e34-4702-b7df-183fb612a226",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "03291b62-a37e-4f09-bb41-ec122a3f4f47"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ae5351a5-4758-408b-a30b-93bc538ed256",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": 1,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "e904b002-48d7-4e75-a1c2-b79d03f9a9f1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ef5aeef2-58f3-4f56-acff-86a28573e743",
                    "name": "credentials_status:credentialStatus:item:status:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3a028e20-3b26-4bd4-a9d5-196609156443",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4a3a25ce-9aba-4030-819d-79bdb03974e0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e0d8ef5c-1423-45a6-ab68-d8ed6d901afb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": null,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "024ee107-683a-44f0-85dd-20751c045d60"
                        }
                      }
                    ]
                  },
                  {
                    "id": "605c4936-1f01-4bea-aeb8-9acbc2d1aee4",
                    "name": "credentials_status:credentialStatus:item:status:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "86506c69-6ffc-4b57-8ad5-552b3b097f8f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c70e958b-f371-4074-a5a7-a29bf0d07653"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1031a23c-4048-4729-9830-09aeda9d366e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": {},",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "b5d250ba-7e21-4707-a1ec-a6ce28bdc6c6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4e5a361e-93d7-4695-b340-e865e25af78a",
                    "name": "credentials_status:credentialStatus:item:status:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "40385667-b488-4632-8c69-ae6879d2b95e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f5a02f49-855c-4933-bef5-f699767d219b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8dcc4bd5-2118-4047-9ece-bd5b62398d95",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"invalid value\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "2982bd3d-8049-4ce7-8728-b75c33ae2681"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "fab939bf-28eb-469e-8dde-33bbc6dbd6bf",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "e5e4a927-378a-44da-993a-63bb42a8b54f",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bb42b168-06c3-4cb6-9fad-a427302dd460",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6d1c13d3-9bab-48b1-967c-25dc0f78bcfd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "da5202d1-44b4-43fd-8de7-4e2faeb75bee",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "b1200781-e3a3-43a4-84e1-cd2a4c859d48"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8b817fd4-3f57-4f6e-905f-43e0d4907e99",
                    "name": "credentials_status:missing_scope:update_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4864ad9a-ba32-4c2b-8990-7314792726bf",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"update:credentials\" scope",
                            "utils(pm).getAccessToken('');",
                            ""
                          ],
                          "_lastExecutionId": "8ba0bfcd-632e-497c-bdd6-e512857b22a7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "111acbcb-ab90-4522-a4ef-a945e3a584fb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "0b9dc9a4-6468-4c79-bfa7-a3b501ffdb34"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "7a1f5fc0-7bfd-4a0d-a27c-f5809ade2cb2",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "f9e0df5d-a4a4-4d38-b4b1-ac2ed5016004"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "fdeed2dc-8a7e-4bd3-9e75-e61e2bd81c4a",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "ab64dc36-6996-405d-9c2c-b0a8b1e18418"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "9546ab58-2494-4212-9ba2-a9204cdeeccd",
              "type": "text/javascript",
              "exec": [
                "// Populate \"currentAccessToken\" with a bearer token that has the required",
                "// \"update:credentials\" scope.",
                "",
                "utils(pm).getAccessToken('update:credentials');",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credentialId\": pm.variables.get(\"credentialId\"),",
                "    \"credentialStatus\": [],",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "7006c5c3-b49d-4a02-9cf2-de59e997eea4"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "3764781a-a4f2-4a19-82f5-8becdeded5d6",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "957272e4-f1bd-4ef9-8c90-ac47ec7fc458"
            }
          }
        ]
      },
      {
        "id": "768a3c63-4b19-4bfb-94ba-df572c100ecb",
        "name": "Credentials - Verify",
        "item": [
          {
            "id": "22441178-c9c6-4e69-87f6-bc2ac9eea908",
            "name": "Negative Testing",
            "item": [
              {
                "id": "f274d807-9964-4bd6-b919-8093170d87c5",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "45a42532-0d94-4394-b05c-92b1a78c4f30",
                    "name": "credentials_verify:vc:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d4131f66-f496-4506-a217-dc6119313782",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ddd3438f-313f-4ab4-8d49-b030ab9f76d3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c635864b-d9c8-47d9-9dab-4fdbbc05760a",
                    "name": "credentials_verify:vc:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": \"string\"\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "417b22bf-bccb-4e41-a269-82ee7ab8d4fb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8f63e415-4552-47a4-8058-04efca3f2f02"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fac10f98-d60d-48ad-bba7-7f6e2cf0b2da",
                    "name": "credentials_verify:vc:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": null\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "67d6542a-f0e4-4c2d-8f29-748d30bec252",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3aaa8f03-b176-4621-97ed-4c2b6b9e8475"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7d567f94-1265-45d1-8fe0-9624c0c5518f",
                    "name": "credentials_verify:vc:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": 123\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e60e3486-694a-4083-be2a-4960e4e2f246",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f32f58b9-7ef9-416a-b60d-158e51d77353"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b01f4acb-a48e-4c1a-a74c-6ed23e828c59",
                    "name": "credentials_verify:vc:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": true\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "18e70e3f-b458-450d-8ee6-6876d27a00b8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2bb0f7ea-1cb9-446f-a1cc-1d5b1e769c7f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eb0c0434-feac-4c66-9052-913455225629",
                    "name": "credentials_verify:vc:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": []\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "30018ef5-0cfd-49c6-9329-86efe631af4b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c860877f-f044-4784-8baf-d7d7802fd15c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "98cf0ad9-f826-4ef2-aff6-3894ac91cf25",
                    "name": "credentials_verify:vc:@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..V5PnQzCWxrPiCYT-WAyKAnypebgwYeD7lX_hyIjFa_lbJje23pZAfFdgnlqBnXLd19Ksa8fZpCE9TN7kAjzxDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ad0467c4-0784-4564-a6e4-afbfd9b9c7c0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "413b737a-fe4d-4c2c-a96a-5554e1222d9f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "35e4a7b6-440c-4ed7-899c-24ce6f7d03e7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "518fb18c-8207-4fe1-9f2c-0c5b7724653b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d981c389-9ffe-4634-b8b1-df68fa873db1",
                    "name": "credentials_verify:vc:@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ed472ca9-b6f4-497d-b352-e410c41f07d9",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "53336961-d729-40e0-8a41-f0f49d3a4009"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6c7b054c-4e20-44b8-b168-f1e206383b1a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d34adcde-f415-442f-8142-2a5093c8ea4c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aae90061-d410-4829-b353-4f29e7cb64f0",
                    "name": "credentials_verify:vc:@context:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e34aecfb-ed09-4b35-8784-96b12f86b40c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "cb8339fb-f5f2-46c4-92d5-bfbf347ba554"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "80ca1d05-4ed8-4071-b421-0d1177f32d5d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d290cd3f-4595-405d-b608-a3fdd443b08a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c770002f-2172-4e99-8d2f-c87bb76ee6f5",
                    "name": "credentials_verify:vc:@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a48cd589-0db8-4c65-aff9-759857b97e7d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7c5bcc23-8fa4-46ad-a9eb-6e0db0ff060b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d96a80da-88cf-4582-bca5-3e65880d2cbc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fd1b1cfa-9a72-4c7d-8ff6-4a02c7fd5ccf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fdbb166c-8bd3-4d1f-a466-e4794fb67863",
                    "name": "credentials_verify:vc:@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": {\n            \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n        },\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..w4xJhf2l_4JzwE4kp8pD8dNJdWSaws5HiBgal8zFzB6i9p05tmPITdsrUttpUwopW5UAq9M_EZVqlz-kRfSFBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c11fe1d3-1ea8-4b72-bb14-d78a7b8f3009",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "259086ec-1e02-4b1c-9554-e3c214e5d41b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "91f9a3f0-fb15-4a5a-8b9e-51fe34dd2cc0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "68639bd7-80f7-47a8-ae13-a1a17b89ce4d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b4fb7eb8-4f91-4ca5-bbf0-8af7cf9cf011",
                    "name": "credentials_verify:vc:@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": \"https://www.w3.org/2018/credentials/v1\",\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d7b42c9e-9250-4426-af62-1fffa28ee822",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e53def4f-28c0-4ee4-8e30-78444c28d4b0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "60e7dbbd-ac17-4dc9-8656-bad6cf3747a5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6bc6c3d8-dc07-43f5-b888-a89888c6b8bc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "230df06d-8935-4025-83af-8c20eb9b6b44",
                    "name": "credentials_verify:vc:@context:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "37788037-be9f-4100-87fb-3d6a948237a4",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d6f90a24-edd0-4cbb-ba7b-e72c88db4d79"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7c685e7c-8ba9-46bf-b5e7-391bc3fcc8a8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7957668e-1843-4c0d-a326-c3add3522581"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6e5c1a9a-86da-469b-8624-f0c8868572a9",
                    "name": "credentials_verify:vc:@context:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8da71869-85f9-4828-a476-45eff5457d23",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "54cfbe01-b4dd-41bc-b353-c5356d7c0b5e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3191bfe5-8ba0-4edc-b329-32de0c372b0e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "83423aaf-24ff-4b6f-b80b-32eb23ceccb7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "98881233-1d3c-482c-a6e0-07fa6fc3885d",
                    "name": "credentials_verify:vc:@context:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "390036f0-f5ce-4519-96ba-e37054fc5c6c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "51044d66-2792-41b4-8343-454228ccddcc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "794b3580-90ca-40af-9f1f-c1479e238613",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e6a51c73-25b0-46e0-a563-43cc755aa5c2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3df0e815-29e4-4076-b6b6-c40c51dd975b",
                    "name": "credentials_verify:vc:@context:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "074f6378-6aa8-478b-8e46-e8a6161baac0",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a0f40d7a-2a85-428c-8a44-919c0361534a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "27aaac31-f5bc-4fde-b785-5f59673a524c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3dbbf366-91a6-48b4-a77b-70dd6ee5e719"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2b4061f0-1191-4370-8784-c5dda8a0f8e5",
                    "name": "credentials_verify:vc:@context:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            {\n                \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n            }\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6626fae6-8ad5-4d99-83be-224678d5304e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2a925322-28fb-461d-9be4-6d0a9aa968d6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f750787c-ad21-4c85-8afb-2abec072586c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ae9c5809-36a6-4774-8919-bd8691866af5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ae8dee89-d447-4a8c-a084-b2cb68c6691d",
                    "name": "credentials_verify:vc:id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d5cf6dd1-9f4d-4742-afa9-aa6aa7c3b51b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "693fddf9-03b8-4651-8585-57bfa961abda"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "052fecd5-e82f-4119-bd0d-b875e8b7f00f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "03153e78-fb04-4c0e-b0e0-7299db8bb018"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2af384a9-f28f-4e29-8538-b7d40d270751",
                    "name": "credentials_verify:vc:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": [\n            \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        ],\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..iom-sOLAz9-9FhadLRpqOYXXBhx4Rgwa3I3w1oh087xFQqIMhVTzcSpHCGdGWu2QT1KwrrgVAXPeTT2EthmxBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d6365469-83e5-4d3f-86b3-0499c9e0a2b8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "31b23ac6-5be3-4da6-adb8-dacb98f814ef"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9dc86b3e-758e-4ee2-bea6-23bfa200b871",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ea7aac8e-5265-4b7d-9a69-10fdf48f051f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "25cec9e3-50f1-48d1-a8e5-a9f4856ae1e7",
                    "name": "credentials_verify:vc:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": false,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..xftqB9cBFsSe226cWEZ4wr5sfxlAOJYYo6yjwPCVeHDdk6OoWGjZQGO7xXpSidrrr6e1imP18LiFK34xtRWADQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b4b28fb3-e43d-4abc-b937-95fe272aeb7a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fef718a1-1a12-4aef-936b-b541ce6d731b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d6e6d68c-036f-4279-a0ef-28a3869521bb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e2795d39-fa9c-47b3-8795-408d6c79c61e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a8c67c2e-e1e1-470a-bf15-42045c9d4e99",
                    "name": "credentials_verify:vc:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": 123,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ZqV-qqLOh_Kb4vAdXKBfmFdNyv3FzXJAIYV9JltcYGDAefU3OUOnoaAU2WSEufkuYkvczxfRLhrMKgkoVoIRAA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d3eb2d73-fd88-4a04-aaf1-88fafab8f763",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3ba78a45-40b0-4585-8873-a1ea33c11e6f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8165e793-5891-439f-867d-decdedb87846",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d3c14eb5-2d6c-4282-8758-d8328145adf3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e287bc43-360d-4580-9f02-2bfd0f1d8a53",
                    "name": "credentials_verify:vc:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": null,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1461a470-6f73-4d60-a426-4cb206b24e32",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8aad91f5-a33b-4b0c-a1ad-83abefdfd6bf"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6b51877a-d440-4b2b-9ebe-abe3bd7a734c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "06d307ee-1617-4de6-b285-b843479c23f3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d94ab817-58c6-4df2-ae5f-c4dc40920029",
                    "name": "credentials_verify:vc:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": {\n            \"key\": \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..0Nrj_srTLYyA-9ZVA_dkVGjUcKx6xELHjbbdppEMFPGEN5c2gPXgstNRjnrr8hhMMegSAbvGASKWseBXGR9uAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "82ddca18-6103-4a0d-9fa6-5e77f8a1644a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9241fed4-9801-4cc9-8ce5-e2a11006452e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "530274ab-92a9-475b-8839-2deccf32dd26",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d94021d4-17c4-432a-bd6e-02570d83bca9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "17236ac8-00a4-40d9-9974-11d9ac8d91a0",
                    "name": "credentials_verify:vc:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Bx6sv21fSmT7fCCxU3fDaLhEOhfRK8llXSiFTgApd4PHot00nVjhaKQyhBW9FfFmJljstlOV_Zff164cxOKiCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "82eeef7d-b58d-48f3-ae3f-76e9644b732b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "330c769d-7e36-4e41-8574-bd00d8eda43d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "38efc2a9-d904-4ef5-ae61-7814c6518eac",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "29356d7d-2b2d-4764-b25c-49b1dc682643"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d4a0ecfe-2f71-447b-9861-0f495c4d94bf",
                    "name": "credentials_verify:vc:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "17456f3d-d7c3-48e1-ad5f-cd3f72dfa2e2",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "04d9c6c8-207c-4952-abea-82668e07d1a3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a1a353b9-692f-4ba9-bf3a-e6b2b16991cb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a2d881f5-1f11-4471-b55c-89e121097871"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5de3f122-b85b-460f-94e5-d51362f079fd",
                    "name": "credentials_verify:vc:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "851c242a-8c18-42d7-852a-20a50e404357",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "99607c8e-acb7-46b4-81f4-5ace2084beae"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f0af7b2b-c628-4a49-88ab-25ffc77d8d2e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1a9a742a-dc38-4da6-95d8-b029d7282e5a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0dfa2ef5-4fb3-41a3-953e-721441f4e6d8",
                    "name": "credentials_verify:vc:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8e3064e1-8d34-4f06-aa3c-4d3486bad2f8",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e81914c2-b70b-49c0-bc04-048c98d7fb8d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "72157d35-52be-4735-99f6-790b579b7d65",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e335621d-94e5-4bc6-8731-3434e2be15f8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "50e7e882-3783-4449-acc0-0a4afecae150",
                    "name": "credentials_verify:vc:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6456a9ed-0663-49a0-8278-473d0eef0794",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = {\"key\": \"VerifiableCredential\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a5e8a3fb-4a66-44fd-a1a7-ef1f02c30f00"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f9927afc-c371-4b5f-bc41-dd7f8bc8b661",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "18dec9bf-97a7-4ebd-95f8-691d0cff74e6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "efdfa06f-f119-429d-a1e9-ff894449542c",
                    "name": "credentials_verify:vc:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": \"VerifiableCredential\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "23532f06-9e3c-4b20-9397-040377e040ae",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f307732c-8789-415c-bebc-cf832c0a0551"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fdbb3df6-fdb8-43df-b1d1-b9de2902a9be",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8dbc0027-89ad-4ce9-9f36-3f43fc366f58"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a907a602-6030-4afa-bf57-d9b0ff8310ef",
                    "name": "credentials_verify:vc:type:item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dc68cd11-402b-4434-8f15-6d7d35085e16",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must have at least one element",
                            "rawBody.type = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "33ffb3fc-d883-4f22-9a17-6b819708aff0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e3fef140-31c3-4713-bd73-52958b0cdccc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "88c434eb-947d-4a82-bb6b-5b73513ed72e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "181fee59-bb7a-46ee-b635-9c65336772b4",
                    "name": "credentials_verify:vc:type:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c13b8da2-0ddd-427f-a37c-910d84acece6",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "abc3ffe9-7685-4ad0-8ba3-8ea2be0e0276"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8b8083d2-85da-47b7-892f-35c3e1f796f1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "aa78d182-7f2e-4708-ba74-41667e0d210e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "52a0a49a-aa55-4f14-b9b9-8c8ee65f0f5b",
                    "name": "credentials_verify:vc:type:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d147f6f0-9264-4907-a52c-7b52aa02845e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "fab89d3f-fb2f-456c-b3ac-d79ae54a9b51"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f5cc684c-be3a-4a6c-8aae-d6ac42347128",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f00e4fcb-b170-4837-884a-9d4042e6e8fb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d1076791-8025-4946-923f-12c901f8e1f5",
                    "name": "credentials_verify:vc:type:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "48446ad1-f2c4-4921-9bdf-6cd3f2a787e4",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "679f68bb-2ea8-4c18-8482-78ce24bd1974"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "727e7c08-2018-4d72-b5d3-49d598ac20c3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "aea1f307-9d26-4ed4-bcb4-8115965ad6cd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0de19cc8-8f49-418a-b945-645bc1aec88d",
                    "name": "credentials_verify:vc:type:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "43cfc567-fd98-4352-886e-0708fa654c1b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6fbfdda1-1ac8-443e-bbec-a7eb81ff4636"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ae30aa49-43f5-43ec-86c9-00b686e1284a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9d2cfe19-69bc-4a2e-9784-0a5baf415888"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2848a268-b991-4dc7-891c-4d34bcbc3f57",
                    "name": "credentials_verify:vc:type:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0d4371fa-a6dc-42d7-b66b-e3c1079ac737",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", {\"key\": \"VerifiableCredential\"}];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "620fb947-81b8-48a1-b261-195b1f7e71a1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c1846d3c-e65d-4bd7-9c4d-c38b66c67b00",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7fdcce79-1e7e-4707-83b4-c2312dd4ed57"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ced6dfc0-999f-485d-b345-77d0ead27233",
                    "name": "credentials_verify:vc:issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2fdad2fb-3db0-4736-b7ca-fb4115a2e8ed",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "83b7d8b4-6618-41ef-ba07-a77f238ed6b0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ccc17735-f26b-435f-a221-3db73119cb16",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bbcd0ed3-1f69-4603-bc3e-b205a2e8d0b7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7582847a-cd6f-46b2-9f36-b05e957d663b",
                    "name": "credentials_verify:vc:issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": [\n            \"did:example:123\"\n        ],\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Mdpb0nbZLuHLqh6IBr6ouahKZNFB-cIKJXn-b-O6Pt6HyJaECfc399qgMTWovf-l04XYEpuYDmfZeYVThBeMDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6237c2ec-fc0a-4738-8ee1-288ce0c81681",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1a806c9f-ae1a-4cef-b337-d7b74082fca9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1cf6b1d3-da88-4b80-aced-32ac05a37eab",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3f204dbf-3b1a-4c62-848e-4f18ff6e4566"
                        }
                      }
                    ]
                  },
                  {
                    "id": "55bea0d8-5fb5-456e-a251-bb2af99c0a7c",
                    "name": "credentials_verify:vc:issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": false,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ryGzH1cVI0oyA0eBPKjIBDGJ8FYapvVnUEcovWWepoAASL3SzOOUvcQ9XOnQlclFU8dYhkEN2L8TQAj2OHlcBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3ae4e7f4-d8de-4507-9b11-885e95ad851f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "250c63bc-239f-473b-b948-8ec3ae2a1b09"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1583239a-dc78-405f-ab68-595ecfed681e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d7c9681c-6955-46a9-ace3-b0eb5c209f63"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9cb48e0e-9e40-473f-85de-12014ba5e3ee",
                    "name": "credentials_verify:vc:issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": 123,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..kEE8wQKYgVQlcBvJeVeV151aR_iD6vPrlW2bgXPW8NvJx9AOuW5eGtL3j_I3xIGR_JWDA5jGy6KDVkqJNEDHAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7e083044-b9a8-4856-af5e-42d2dd1cf85d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "63bea625-8b1c-4ca7-a8f3-64117c80525b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1d8c4ad3-081f-4f90-be4b-1e503d9b05cb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bed9e386-5190-4a92-ba2e-61d362cc7798"
                        }
                      }
                    ]
                  },
                  {
                    "id": "63212b4f-e26d-456a-8be9-b6d6aee9c269",
                    "name": "credentials_verify:vc:issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": null,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0e05dda4-aba8-4d53-a2d9-4c8e5982132c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c968d330-e01d-43b7-8540-d9891fbfddcf"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9af35d79-c345-4e3b-b328-95045fefecfa",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0f1dc79f-ba62-492b-b4b2-ca7f8be1bf7f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "23b3a6ff-07ea-43a7-a3c8-9bc8aa7f1237",
                    "name": "credentials_verify:vc:issuer:id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {},\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "82143c0f-ea73-47d0-ac67-768b698a3ff6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d5003ca3-8dcf-4338-b117-b9c0e7c35ae8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bd54171c-f533-48de-9566-a776ee3a2c3b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "96e945f7-2b5c-4ff1-83e3-c338da9269e6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "415a101c-16f8-4c73-96c8-42afb5049daa",
                    "name": "credentials_verify:vc:issuer:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TsN_31UJYzTTx1xh5CB9PjhnehJza3N5gAEFoNO55HLtQvoqGiEd-SI_4Xy7cpuYMbHdYf5CKHwP0eooyzjrAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5d793e40-8ae0-4a59-a7bf-47f65fa46af8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "743e5f34-806b-4c9b-9019-5416da5e3466"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "54d8753f-43f0-4195-944b-3de8f0cc2034",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e9decfe9-288a-4414-8b8a-71b74ec12b04"
                        }
                      }
                    ]
                  },
                  {
                    "id": "afa1414c-e511-427d-af95-e233c0bb4052",
                    "name": "credentials_verify:vc:issuer:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": false\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JOl3FF8mG94K8DDAtSYeirCtE5GRVHXYZcIbf3JRCquZ7obaBm1wh3rEzbG-t8kjdWMn7Zwy8q4zw7pMC2-gAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0065d46e-1a2a-4f92-b670-41526f89d2d6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "061536e5-6afb-4760-a7d9-a7620fc3881a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b8c1b772-f28d-4106-9ece-504750390fc3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a7218a46-8de9-40f1-aba9-5d7c3fe3797a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f318a7d1-256d-4784-a3cc-0c81d5e91c37",
                    "name": "credentials_verify:vc:issuer:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": 123\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Ibp_FWO5FwzfTfd_PeTgedqAEcbS7dtCOoREanyZP0yAg63ZGay4hjjd-NwZfmWG8LRbMSqtjX2_Cu5BbBEoAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d761d152-8f74-46c4-b4cd-ded8ec21427a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e77f8fa6-8fa2-475a-bccd-2ecb8ff56489"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "81850b81-3a90-4cdf-898f-4569cbddce3d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "26af38d0-544f-4551-b82a-2790c35d8c14"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f00b76ca-fe2d-41d0-b646-a476dc4c7620",
                    "name": "credentials_verify:vc:issuer:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": null\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7e6cf51b-61bb-409d-b6b5-55bc4daa0325",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c9189faa-2fc3-4a76-9851-af5fd25c70ce"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "881e585d-5e38-4550-9311-ee23ebf4c5b0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fdd27fde-28e0-4e81-ae47-1e9ec837acae"
                        }
                      }
                    ]
                  },
                  {
                    "id": "96716963-c03c-4e68-b643-cb36f1a6e08e",
                    "name": "credentials_verify:vc:issuer:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..n3pFfPx4jY7EjlOpLNJT4CAJYI1roVE6LoUgLQhJ1bMgS5xUKbsIhynp7xDW-vSGzIcu58w-Z8_d9--99NCDBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c8b10212-f233-4355-b955-2bdf4751e7f3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e76463f6-37a7-48fa-a348-9f1d4bd7491a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "84735fb1-13c4-4a3a-8c73-240c363125d2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9f440122-c881-4022-82c9-d6e1b784baa6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ac4381c9-fe3a-41f6-9901-188234641b3d",
                    "name": "credentials_verify:vc:issuanceDate:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eceb37f1-71d5-452d-8d94-a7507f15f3e6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a4750b09-7b97-483f-bf37-e98f4bf61e76"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2586aa1f-d539-4c7d-9d0a-69f537e98e77",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "31e1a789-f768-492a-8a06-830dd46bb46c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a08288ed-48d2-4696-b618-b7e56732100f",
                    "name": "credentials_verify:vc:issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": [\n            \"2010-01-01T19:23:24Z\"\n        ],\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..eJGt2anEVhR3qXrd8726C2a8PNJ-S4SnhIUB2YpAUiLJhTQ4FcY_nONpl-U0MbpWgwlpJ7xa1_uk4EMrGmOUBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8ff00499-7c37-47f2-983e-befdc7d44efc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "df5c0e39-4eac-4a47-a653-ec1fa4083d7c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ecf73347-0d66-4578-95db-a421236c3aed",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c2e6121f-5b81-4838-9452-c58d5afe0c53"
                        }
                      }
                    ]
                  },
                  {
                    "id": "62178441-94ba-418d-be8e-e6fd9d634a28",
                    "name": "credentials_verify:vc:issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": false,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8Ax_d8Yp8MIszSaGQa1WkiT4xktUk0Ltg7EF3QQ-GGY8JaV_jR6-zRUlEF2iW0HcK6C8ZoAt0KrllUUDdJkdDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3d7eef01-f7a9-4b76-bdb2-f2d7ebbfa4c7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "993c4c6c-3b9d-49cf-9d06-fbc55aeb5112"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a28fb848-1386-4e60-b87e-709d1f49aede",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "743443d5-fea8-41ef-8b26-523e0442f635"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2052a842-661b-4d72-aeb8-374117b03869",
                    "name": "credentials_verify:vc:issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": 123,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..x-sSX9vqc6977YPFhNbzjKdisDv4qD2mx-yBSH_EG-UQCpyH_ErCzoFWnpJzRJKIKbOLEvvZ5SO_fWbNWyNdCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "828dcb45-aaeb-498e-a6c9-9c5db4c7b093",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4534e881-ab8d-41cc-91ec-e747e0eb45ed"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ed6c0dc3-b9ed-4b0a-b518-4bca4b595c87",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "44f6b1f5-50e3-4089-bbdd-90588a971ab1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dbc993c0-e664-4f5f-b55a-edfd22fbfc9a",
                    "name": "credentials_verify:vc:issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": null,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1ffb712b-455b-42ee-b5c0-b734a26938dd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cde301ef-0923-4b69-9a0f-6e3becc3dda4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1b49e5cf-82d9-4edb-b4d8-88051c3da87f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5dd3273d-f9c7-4649-8580-f59aa2e9867b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a80b1a9b-b149-4b74-b4c8-615e1caaf44f",
                    "name": "credentials_verify:vc:issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": {\n            \"key\": \"2010-01-01T19:23:24Z\"\n        },\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Z1GVMKiJuJeJMpR_Ag4Wpv6940N3WUreYSxEsPaZgU_J1C_EDUj8ycRJitlJNEBBuGhibJ0GWyK-WW9RO2WCDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1d66602f-9a70-4883-a173-f5765f845bb3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8a67abe4-fe74-499a-81b0-a85aec744189"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f8016d12-bd27-4a8d-8303-f5702dd054c7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b679a5c6-2efc-4ede-a53b-76b913cd84f3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ede96cba-8f2f-40b4-9dc5-70785f531c0c",
                    "name": "credentials_verify:vc:issuanceDate:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"not a valid XML Date Time string\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ebrsCszvH6TQHw1QhA8laajPRWL_zGvQ96Up8A4TiJrY7ueFm3V-Suk-KNd6JKckpOxLoF-Cb24KG_g73AqHAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1288852f-3910-49ab-9a79-91dd0c9ef91a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "94955f09-3ba3-4581-9993-8da8912b986a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ad6ab646-be74-4420-b94e-9d84f8b795f5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "aeb51eb9-7e99-42a2-8618-b58f7b95e8e7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "00f43a5f-4f43-40e6-922f-5997e0e14df4",
                    "name": "credentials_verify:vc:credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c1d6138b-e616-4e75-89d9-6ffb7d56927c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fa338244-f943-4226-b797-88e467b81dec"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c191b055-6846-4213-b130-8c1475ee0124",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d09a5bae-7b86-42c6-9df2-8be3dc89828b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "29dd530c-b036-4a9d-a63a-6bb5e660e00e",
                    "name": "credentials_verify:vc:credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": [\n            \"did:example:123\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "27b033f1-f62a-489e-8589-1e99d2b6babe",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9c201d3e-e4ba-4c57-af3a-fb5005787402"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7b635205-ce8a-47ad-9eec-94134e600b13",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ccfd75f1-9231-4871-a243-17fd0b6bc68c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b6c8f8c5-688c-489d-9130-980dd7fcc737",
                    "name": "credentials_verify:vc:credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": false,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..VK75R0RpQX9g4E_vGExhb_aDUNycy1UlQYvhCL1Ydl9bWiT1oUPeHEUgJMRGzmRRvyByyj13oHI2yB3cOLWXCA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e5db4bb3-10c8-41a6-bf6c-a4d750ba6412",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b0a6fab5-34cd-431c-a60b-aa34c7fbc2cf"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "75b5fb0c-8f8b-4dcc-b39e-c2e0a4ef7ee6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "15f975e8-2982-4f37-bd1e-0905f4b3e4cb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "58d08dde-4d3a-457c-b066-5b1b07f04c5c",
                    "name": "credentials_verify:vc:credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": 123,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..dQnu8mT7YMECvDQPODQ1YUudQIO9Yx7WsZ07UWpHRqw0iV3ZvJOebbBoY0gFvsF9t6foFFEaaWcKi4vNgIdfCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e78119a1-fe9e-47cb-b919-6362db569438",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fc3ba875-36a3-4cce-97e6-fd1481355b3c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "065942a9-f176-43a7-abad-45339687dce2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8b8446df-a630-42b0-8789-a0a55ef80d17"
                        }
                      }
                    ]
                  },
                  {
                    "id": "db154d9c-320c-47a8-b7d5-be91490749c5",
                    "name": "credentials_verify:vc:credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": null,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5d755539-6238-46e8-a858-e1e13e94fdf5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9674c80e-d1e0-4381-bd8d-1c5afc7308c3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "34d926d4-89d5-483b-8d92-36cbb54829e3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bca4dd32-9aa8-498d-badd-46fa8ec41857"
                        }
                      }
                    ]
                  },
                  {
                    "id": "14fcca4f-5763-4867-b5d3-450b665bb364",
                    "name": "credentials_verify:vc:credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": \"did:example:123\",\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "742c6b64-3b42-49dc-a95b-8f198950e364",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e9209332-983c-4815-8efb-4d044960e8cb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c496550f-0aad-4e65-b083-6ddabcec0248",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "217354e3-fbd8-43dd-bae7-532077bbf7c7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e8c93342-3ef2-434d-9fc4-c7dfcdbd0f4f",
                    "name": "credentials_verify:vc:credentialSubject:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8KJ136ciaI5X01UO8dPG0KMcsxmd7qzxvrahflTNqsrjjd-vF8bBKpjVDLOOj7bUolO277JWFCPX1xvvAVAvAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e906a551-2bc4-4dfd-99a6-ebfaae22a223",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ba056ee3-4f39-40d6-bd01-9151b0b86435"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "22fed8f4-743e-4ee6-8388-5466c5e8f3fe",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c699919c-2ed4-4ba2-809e-4c33bcd3f090"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e9bfcd01-9fec-4df7-adeb-9e1011cd709b",
                    "name": "credentials_verify:vc:credentialSubject:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": false\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..1Tatn2a45JYHHvhGvCLNbO1VUDV_lkvRVosGzDXDF-DseqRorDTFmY7XSyYqrl5yc6B200ET0RBvgK2vyEC6BA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "38b975ec-323b-4028-8a3f-4dcbff575290",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cb20b4cc-47a0-46b8-9da7-fd8701157667"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c9ccf0d2-e1a2-48ca-8f3b-c2e33e640278",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5d31ceed-a8d0-4b3e-8015-26d15791af60"
                        }
                      }
                    ]
                  },
                  {
                    "id": "662207b5-a8c6-4ec5-b74d-fc1b4c93add2",
                    "name": "credentials_verify:vc:credentialSubject:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": 123\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..qPc7PrMuniibwI74A9ELPRd1YyUjNyeccnUFc4GCfj7I3oREDl0RT6PEt1pEY81mq7vlIsNG1myE86igC__qBA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "30d101de-84ec-4e81-8b0c-832a78e20b53",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ecc2378f-5554-4a79-8a62-a9e05928e69a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0e2e99e0-7288-4df7-aa37-486eabd86c74",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "46144755-8464-4997-ac09-1eca4ac4c11e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "80e9883d-cc28-4961-b666-ee828372f2ec",
                    "name": "credentials_verify:vc:credentialSubject:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": null\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..10vzNYPpxv6gZwVR-V23lgvIgseVOwxT6Tc1Zbn5T6pWGmUhrkur_O-OexNVjkVSf7Qu_6NDnIL1m0KcNKGBCg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4996fee6-43b0-4388-b63d-ebbd9823d9e0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a722e46d-e2b8-4720-968e-0650bdf4be44"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b3a647f1-856a-4e4a-87d8-e5021a32dead",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "80ab617d-ab6b-4a81-a5a2-94f7aa40086c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8713d42e-dcf9-4ee4-8111-370025a478fa",
                    "name": "credentials_verify:vc:credentialSubject:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..tQJMGZTsqt1RhpxKkq647EHc3pjQ183zd4KchfvD3dXWVfL9X1fUedMbj33l8eev6YWua2-6_4_sUTDr2MLEDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9d064191-eb43-40e8-b3f4-3384cffa0209",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8b137401-9969-4269-8be4-280958cd2a18"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8840fe8a-f497-44da-b9ee-cb94affabb46",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fbe9d1fa-4e7b-4317-8bdf-9b6046fd6cac"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a356f441-0a77-452a-90dc-a1f57d900145",
                    "name": "credentials_verify:proof:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6dba3738-eb06-441e-a1f6-ad797cee7dd5",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required for embedded proof VCs",
                            "delete rawBody.proof",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "846bc0a7-9173-452b-bfa6-9176dcbbf4e7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "69fe1d0b-c4b9-41d0-b47f-1a5e73abd64a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b8fabbce-7dbf-439d-9721-b1c580bbf4fd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "44905fba-3f7d-4540-8505-5794d8bcea89",
                    "name": "credentials_verify:proof:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ae9cc76f-595c-4050-88a1-1e4bfc213a4c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c1cb2a6f-48b2-4784-b71e-e572d8bd3a73"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "49875c57-ea3e-4bde-aa3c-b2e6aaa9ee3f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ce839c99-fea2-4f47-b950-3dfe20edcc4d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e5f2c85c-890d-4349-9909-b2ea937df7e1",
                    "name": "credentials_verify:proof:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "767b551d-8ae7-4c9d-979c-4469641063fa",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ccd77f07-1b54-4aae-88a0-58119d729dd5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "63a38246-1ee4-48a1-8c36-f73d5dde44a0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dbf5c0f3-4ad2-46f5-a8e5-48e378304092"
                        }
                      }
                    ]
                  },
                  {
                    "id": "85a6ec22-3e75-46d6-87b0-3b5f6411ee16",
                    "name": "credentials_verify:proof:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2eb4e2cf-e742-4312-a0dd-605adc9a977e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = 10;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a2e5e15a-f80b-4916-9fc5-2d2a4f839d67"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5392ce21-4eb8-4503-bb0a-9947e43d0071",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "83e1d003-0b69-4beb-824a-8e40e87a34f9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b06a86ac-d53f-4d44-80d9-89e3cb2b0fff",
                    "name": "credentials_verify:proof:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2347c8ee-a4b3-4736-912a-45033576a89f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "329e8748-0a9b-474d-a93d-4a502baa448a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "671d9f47-62bf-42af-8847-d948979bf9d2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "072e2298-95d9-48f1-a422-10c1675ac635"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2e1da37a-5aa5-4cd1-ae2b-ef8116c28a50",
                    "name": "credentials_verify:proof:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7578331d-76e9-4bfa-b749-4ecb7f85a72e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = \"string\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "90816cc2-03be-4370-b1d3-0b24a161a6e0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d302999d-d315-43ce-9910-bfa3bb373915",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "79e45d72-9a74-4886-b332-3ca1c32a3d9d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "75d3afb8-11e2-47e4-af19-b5d12b9098b1",
                    "name": "credentials_verify:proof:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5e4c50b6-ba22-41e7-80db-9d9bb20175b3",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required for embedded proof VCs",
                            "delete rawBody.proof.type",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "59e1b949-dd75-4694-a1d1-339fd87457be"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "74cb0bde-c9f2-49a8-94d4-11dd667150c0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a611b152-e45b-4cf9-88eb-aaf575142b56"
                        }
                      }
                    ]
                  },
                  {
                    "id": "83f116ae-c49e-47fa-ad29-1e96823deaec",
                    "name": "credentials_verify:proof:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2deab33d-c860-4a3c-8191-b3ebf0f28b35",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = [\"Ed25519Signature2018\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "66988e0c-7bb2-45df-b293-f9f4b3b8c8d5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "786c1686-e966-48dd-9e00-f617dd3b4b49",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "73cd0567-f667-4ede-952f-ca91016d4652"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4cfc720b-e127-4f60-93d4-2fb24c9faf29",
                    "name": "credentials_verify:proof:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f7035b58-6824-4044-a83e-b031d2aacb69",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1adeb963-0315-40ef-a1d9-23838a5460df"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c469b490-2cd3-4b7e-b750-765c1486737a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "472e7c2b-f77a-47f9-a30e-923bea36a56f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "144bf504-4969-498a-a409-bc38d9418123",
                    "name": "credentials_verify:proof:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f2b75816-faca-4acb-a5e7-267561268c36",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "727c81eb-4424-4cab-a393-b83d4be2ed02"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "769712a6-a407-456f-a1f9-7efdbe448efa",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9c7b07fc-e3f4-4d3f-ab65-50ae8eff8a92"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fadfde5d-2718-4a29-a770-eeff9e21014a",
                    "name": "credentials_verify:proof:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "33f5c85a-f641-47c4-8065-68cae83cb33a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d6db9d99-5cc8-4d81-8628-42b300c41a58"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "03053784-c5a1-4884-959f-548ca66bcd16",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "16f767cc-0e65-4911-aa8f-9c2a39f1fd89"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e35d9bb8-5ab4-4d04-9ee9-25b37c8047fe",
                    "name": "credentials_verify:proof:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d72b0992-53ba-4b67-aa13-613f26d20ca5",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = {\"key\": \"Ed25519Signature2018\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5765ed53-f828-48ce-aad9-69e5656c8462"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7c76a73f-793d-4962-b9dc-9c408f49fa2c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dd0d121e-e8c2-4190-9c12-cc7db2764012"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fabba10a-350c-4ca8-b6cb-802647dc05ec",
                    "name": "credentials_verify:proof:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4362ed76-008b-4259-b568-4b13f50d769c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = \"not one of the valid values\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6a9fa9b0-794b-4499-9987-572c49fd70e2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4010ceca-71bc-4eea-9232-288768b42edc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "45623893-3102-408c-85ca-1d6a067dcef3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b51aa416-e6fd-42f2-b1a0-fdc24ee540d4",
                    "name": "credentials_verify:proof:created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "79c6ee48-2719-4740-92cf-31d4b5bfbeaf",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = [\"2020-04-02T18:28:08Z\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "db00ad29-884f-4b46-ade7-a98de78a81e7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2bf2375b-ed26-4f8e-a0bc-88b619fdd457",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "443af91c-2aab-4ee3-9f8d-9fb465c34f65"
                        }
                      }
                    ]
                  },
                  {
                    "id": "66c19fb8-daab-42ff-9a17-aa7e68073067",
                    "name": "credentials_verify:proof:created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cd8dce20-5c74-4156-baee-e99b14c99640",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f176cc22-75b7-4fc2-a68d-47c075962be8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "39ec69a3-e4b1-44d9-8b44-7347d0b305fd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f5eb7153-7fb8-4524-be2b-b17a1fdedfb1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2be33011-8e41-4b34-b3d0-41a594a61788",
                    "name": "credentials_verify:proof:created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4b6cc86b-28e3-406d-94d6-78b7ed7fb068",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2205b009-c9af-4987-8fec-fd36f31819e9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e5e9936c-98ed-4afa-9fb0-3d9ef965cb35",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "227db55e-b918-43f7-8a0d-f79701bed6bc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f652765e-ea21-4dc8-9e01-b0e341785afa",
                    "name": "credentials_verify:proof:created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "32667657-9a1d-421d-b9e4-7b30973248a0",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "27f89e67-a03e-4e5c-a58c-45a5e2f8b8d2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a9e24c07-eea1-41a3-9958-01b3e3cad09c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "664707f6-deda-4567-a392-a4d6e0a3d6f0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a7df72bd-e386-44d1-bef6-e29158b9da3d",
                    "name": "credentials_verify:proof:created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "03625bd2-5a37-4ce6-939a-6dc966ac123d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = {\"key\": \"2020-04-02T18:28:08Z\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "bd52a06b-3608-4be6-917d-a93d438c8467"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bc59ed4e-942d-4e86-86f9-82cfa508db13",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0886fa0d-7ed8-49a6-acd3-1fbebe7fa5fc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1f0800eb-135f-4b0e-8550-b2138b751801",
                    "name": "credentials_verify:proof:verificationMethod:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "36ec12b0-4486-4554-a6e4-5171c590ce9e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = [\"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2930b294-7ff2-4804-8b66-0707ddb6e62c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c552e899-dea3-4da0-b6bf-69c0b49c611d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "79552d77-7579-4ad9-9b3e-a4978168de8c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "527035f0-dac1-463d-86e3-7635d757ed95",
                    "name": "credentials_verify:proof:verificationMethod:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f1a8995d-319f-4de4-a1df-42efe01f9093",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "04917ce7-3eea-4aac-acc3-968fb69552c3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "10111c57-fe67-4afe-9046-ba4be9885dbd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1452ac4d-d3d0-4ed2-afbb-4e5763d4cd8d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "95149266-e607-4761-bc5c-9fb3f2bf31d2",
                    "name": "credentials_verify:proof:verificationMethod:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8710d4bf-ad1d-4405-a34c-4411a217679d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b7aad076-4622-45bf-afcd-fd1774ed7930"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9d28ea49-aa0e-4bf2-b490-79e70b183273",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "399367b5-fca2-4bf3-9fbf-e3e12fe30588"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fc53737d-0db3-40ca-bf20-ebf3a91a4c5a",
                    "name": "credentials_verify:proof:verificationMethod:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "068144d0-b299-4686-bda7-cdf00504083b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "06938328-7009-472e-82ac-da552a852dca"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7e86e090-2e25-4773-8902-584b6a97102f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "089efd58-4560-4d30-82e8-d037cb80e2c0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "db6d9d68-07dc-427d-941b-27a26e82e361",
                    "name": "credentials_verify:proof:verificationMethod:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3211d549-a40a-4345-a9e8-342bcb293e58",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = {\"key\": \"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e85132a6-4706-4a7d-9aae-3fbbc6fe142d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "43c760e6-5d76-4b7c-855c-049fdb4af8ee",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1b9a617f-4337-4339-a038-ae9d3b9f12ef"
                        }
                      }
                    ]
                  },
                  {
                    "id": "53a4c94d-c4f4-4e6e-8e04-1e2d8524dba8",
                    "name": "credentials_verify:proof:jws:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f11e412a-32de-4f9c-95e3-9385afc20a3e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = [\"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d18cf684-a05b-4070-bc90-65f0e55b41f2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a49389c5-9268-4a64-adf9-871e6b87a509",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "96e71626-1fc6-495d-a655-4226959e933b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ef44ecfe-409c-4e76-b1ee-332468ccd05b",
                    "name": "credentials_verify:proof:jws:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "60e0e38b-cfcd-4c4d-a7e0-1f9e848f7b81",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7418604f-86ee-4907-90a0-8683541640a8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2f94b55e-8c8b-44b6-a3ac-bd6861b9c9c2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e9d437e0-0f35-4228-a29a-cdb27550705e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "493780af-3bd9-468c-8c35-8555b03efa2c",
                    "name": "credentials_verify:proof:jws:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "43016afe-0dff-4a27-acd2-367457facdef",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "66ac0f61-8e47-411d-b839-b9d5e3e7485e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ecbb8a43-40d3-441f-ae9f-2f6ef8f9bb40",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7ccd23f6-8ac3-49ee-a2c8-d384a1063ae6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3d8c782a-dc0f-4c6c-9554-b26a8bd3f255",
                    "name": "credentials_verify:proof:jws:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f2de8ebc-70e5-4af6-8af3-28c54a975f24",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "32996b36-6cdd-42bd-b2da-1e3bdbe4e25c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3e9ecbbd-82df-48ea-8070-51f0677c320c",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "33a0d22f-22ec-47ee-a727-cfa15f660d7b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eb9aa7eb-de0f-42ef-9a42-bb58ae8f9a0e",
                    "name": "credentials_verify:proof:jws:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a504c565-8f5e-4a62-8606-93623d802c1b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = {\"key\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5fd5941c-9e0b-4657-8f2c-c73a3c7d9ca7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4881c257-5f8c-4819-8760-618eace0637f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6b7b5fd4-f99e-492f-ad1e-b4ea3d423b19"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ab84e0d9-7272-4fdc-a92f-49a9b3e8266e",
                    "name": "credentials_verify:proof:proofPurpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dc30bd7a-8cf7-4b18-98eb-fb9dbc0630af",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = [\"assertionMethod\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1fcbfc1e-cc84-4565-9e98-ce3189df5543"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7adadba6-c594-4add-8070-0b2f32ac07c0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2562daed-43e5-4444-bed0-1e9fb91062a2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "98f8b604-e784-4174-a9d8-b6341e0567f7",
                    "name": "credentials_verify:proof:proofPurpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "03999aef-692d-43d6-be19-49541d714f96",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d862d9e3-4187-4217-876d-266e84bb8884"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bfff7499-f1a7-4456-b0d3-aed6c977f9b5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f2a06e3b-3d1f-4af8-a8da-e832524dd0a1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c908eaa9-6683-4433-ae29-3b3d6f00675c",
                    "name": "credentials_verify:proof:proofPurpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "646e45ae-80b8-4d22-a393-f3a1834fc156",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c58c0a88-f1c5-4912-8fb6-d709671b8625"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5a98270d-ca3a-4c03-ac65-4144a4148e93",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "baff4558-6ca3-4091-98b1-a15993850668"
                        }
                      }
                    ]
                  },
                  {
                    "id": "30aa8ffe-3f94-4cdb-b47f-8e97aa160fd5",
                    "name": "credentials_verify:proof:proofPurpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "133b4dea-dd7a-4d53-bba3-f8021779f455",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "89f9d31f-3f74-43ad-bb2f-a72fd3f7d5e1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5a1f92f4-5a10-493c-966e-b0f0dd875804",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1060e124-aef3-424b-8ab0-5374df72ce0f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cd063887-a93c-4e16-a54e-7c74e5993d42",
                    "name": "credentials_verify:proof:proofPurpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c239496f-4d0e-4225-8afc-a0b93d38d7ff",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = {\"key\": \"assertionMethod\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c79c3874-0b54-47d4-835c-8fdd42b0cb9e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "599aae8a-f127-4b33-b8f6-1a3b10b676d1",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fb20c75a-6da4-48ba-bf94-f492f09b1b50"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6b1ada5d-dfcf-41b4-9c19-0df2c23e52ac",
                    "name": "credentials_verify:proof:proofPurpose:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "28de3b58-7e60-49fd-970a-1b23173147f5",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = \"not a valid value\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "130e5cf5-f524-480f-859d-9d2963ea9c84"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "61494b42-dd27-48cd-85f9-873727ca197c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7ccef457-7d1c-4d63-8e95-4c36adcfaadd"
                        }
                      }
                    ]
                  }
                ],
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "ae0224b0-705a-4ffc-b393-579158aff499",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "e20065de-ac19-4750-974c-4aa6865f009f"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "4b8e8b81-3ea1-488b-a996-568972244286",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 400\", function () {",
                        " pm.response.to.have.status(400);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "3ddaf069-3e6f-4c16-a714-ad216a8cdf39"
                    }
                  }
                ]
              },
              {
                "id": "49c22c04-85bf-486c-a61f-b1c7a022797e",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "0983a92b-f90b-43ae-9b92-fa846c19eb62",
                    "name": "credentials_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0420168d-437d-4080-8bb4-7db5eec2e004",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"valid_vc\")));"
                          ],
                          "_lastExecutionId": "49735c88-bd7e-4595-ac74-85f909e87e95"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3af7bf40-875b-4ab8-9098-89400a966cd0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "36dd987b-fff6-4c98-a5f3-2ee96f5f6993"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d4b553b8-ea2c-49c6-9729-46b5de2a3185",
                    "name": "credentials_verify:missing_scope:verify_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eed81e34-c25a-46a5-8bae-5abdc8d5bb0d",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"verify:credentials\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"valid_vc\")));"
                          ],
                          "_lastExecutionId": "1b72c387-4a6b-44be-b78c-35fd42a2920c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "546539bd-1fcf-4c5f-a126-ef5eaaa69140",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "68e09412-4b3c-4fdf-a9fa-696d131305e9"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "64cddf14-dfde-494c-85b1-f20b74f9f901",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "aebf00d7-0fcc-4933-ba56-f505ef8bc829"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "e6843fca-2e58-4df3-aff8-d65b8380f94b",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "00e96a13-1dc7-42d1-a3bb-8781315556be"
                    }
                  }
                ]
              },
              {
                "id": "6dc9116b-1656-4a2c-9190-826a90c0bf86",
                "name": "Bad Signature",
                "item": [
                  {
                    "id": "06caccd9-3900-4336-9130-01f0502e79af",
                    "name": "credentials_verify:bad_signature",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..mvbcalofPOi7o7nxByyxXCuSOKXuGFM7_W9a8N62-EERarrH4p4T_0c2ZfGnGLiHOvY6Q-dyy38t9HPvXy-MBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c392e755-de50-45bd-9228-70c3d49ddd05",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 200\", function () {",
                            " pm.response.to.have.status(200);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            "pm.test(\"response verified is false\", function() {",
                            " const { verified } = pm.response.json();",
                            " pm.expect(verified).to.be.false;",
                            "});"
                          ],
                          "_lastExecutionId": "96c31c7e-74db-437d-b490-6db25b50cb0a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "27976577-ed33-403c-ad0e-fb05b8726ed3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "668fe867-fff9-4a2a-80fd-4a3d022edbb5"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "5d4403a3-1fe3-497c-84f3-24351e9fc220",
            "name": "Positive Testing",
            "item": [
              {
                "id": "0ea45b0e-6029-43c2-a90b-875e242fe0e2",
                "name": "credentials_verify",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "3b012d17-1b96-4e9d-91b1-14d7ba254384",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "aa9bd9b3-0288-4fd2-b118-e0c56ead9527"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "0160303e-6cc3-4f7e-9989-bd8aa1a2aa9e",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "a2da9f86-40b9-4664-ba29-565525caa6d7"
                    }
                  }
                ]
              },
              {
                "id": "276875a7-ce68-4ae3-adb1-a0bb5887949d",
                "name": "credentials_verify:issuer:object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\"\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "5720193c-a3e9-4984-b3ac-f7de1b5f6c11",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "79230e55-bddb-409b-ae06-8e268f9c09fd"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "0502b24e-5ea1-42e0-92f1-598a721c3884",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "0aee3185-ba31-42ee-b4a1-af91191ce716"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "d8a07498-303c-4967-aabf-34184b34ecb3",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"verify:credentials\" scope",
                "utils(pm).getAccessToken('verify:credentials');",
                "",
                "// Dummy VC issued for testing",
                "pm.variables.set(\"valid_vc\", {",
                "    \"@context\": [",
                "        \"https://www.w3.org/2018/credentials/v1\"",
                "    ],",
                "    \"credentialSubject\": {",
                "        \"id\": \"did:example:123\"",
                "    },",
                "    \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",",
                "    \"issuanceDate\": \"2006-01-02T15:04:05Z\",",
                "    \"issuer\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\",",
                "    \"proof\": {",
                "        \"created\": \"2020-04-02T18:48:36Z\",",
                "        \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..R618vVfGIF2jTe5dVkzMqQYIFKoIkyK_3_35z15tp_aFzew_4ruQt2DcaxdtkwsRff7bFsrVfigTl_XeE3tPDA\",",
                "        \"proofPurpose\": \"assertionMethod\",",
                "        \"type\": \"Ed25519Signature2018\",",
                "        \"verificationMethod\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV#z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\"",
                "    },",
                "    \"type\": \"VerifiableCredential\"",
                "});",
                ""
              ],
              "_lastExecutionId": "4f0db689-e6e8-4889-8f55-e2c10833068b"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "0b83bb4f-83d7-42d7-8bf9-5632ef00ee36",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "cd43bce8-0122-4e35-b4c2-66c360f37c05"
            }
          }
        ]
      },
      {
        "id": "a48c9c8a-b4f8-4038-966e-2557de6f0441",
        "name": "Presentations - Present",
        "item": [
          {
            "id": "889f473a-c289-4485-9324-140ad76b9531",
            "name": "Negative Testing",
            "item": [
              {
                "id": "a35ab370-597a-4cfe-8286-596c3e9e21ba",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "c4579561-e6c4-416a-84aa-7ecbbb84f35e",
                    "name": "presentations:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dc76fa9b-fe27-46e5-9141-d1b958837156",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "8ae3f034-ef8d-4f26-9349-9dc4734c57b4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c886eefd-a968-446b-abab-a7cafac9a371",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "9c617e9e-a44e-47b5-bb27-5bed32e169c5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "300ad764-33a6-4f31-96dd-1457733ea5ec",
                    "name": "presentations:missing_scope:submit_presentations",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cb14ae0d-fb31-4622-8641-f9bd2085b253",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"submit:presentations\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "18229885-967c-4d18-8219-d3f29a092cf9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0e5bba0a-1174-4b59-863f-4c604dcf73a2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "96c1908d-3063-49ee-a312-0465825d8df9"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "6f293498-b076-41a5-8ad6-11fcc66ccc50",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "746d1049-a4b0-4791-91ae-563d3135297a"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "9b343320-c8ed-4691-9822-5a418951817b",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "41c0a56e-110c-4799-84ed-31740d2c231e"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "44c12ff8-9c6d-4404-b4c0-e5f97a691321",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"submit:presentations\" scope.  This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).getAccessToken('submit:presentations');",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "d0e74952-7162-47ca-aea3-ffbac5fdc41c"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "f75ccc4a-1ad0-4344-9f60-fce211d5a1b6",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "5ef728df-ed17-47df-b6b2-fe3bd92a47c3"
            }
          }
        ]
      },
      {
        "id": "3cc78f21-09cc-468b-aca3-b33e89251d8d",
        "name": "Presentations - Create",
        "item": [
          {
            "id": "2622330d-5cf3-45e6-9b4f-6dd7a2718fcf",
            "name": "Negative Testing",
            "item": [
              {
                "id": "9b30b9b0-1ea3-4c8a-bc89-865f37bbd7f2",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "fd3ea6bd-2cf1-4e53-b58a-c8c327a72fa4",
                    "name": "presentations_prove:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "acad6986-5948-48f0-9cf4-a8fe1db396ae",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "1cf17eac-0d43-41b4-a409-07e7a3622271"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "19c53145-79b8-4171-81eb-148ebb827e02",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "4a68cecb-8e61-416f-9956-ea8739dd8148"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2df4a282-ea63-4c07-93e1-f9649591e2a2",
                    "name": "presentations_prove:missing_scope:prove_presentations",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eb0ea01d-06e1-4930-992c-ae1d4fc4c48a",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"prove:presentations\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "9d1851e3-ae9b-48ce-a298-e13e63ba07a6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "eefb8ef1-ad66-4467-bff3-2090795faebc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "1ff7a37b-e11e-4794-9277-54ef70da07f7"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "90e9f409-b52d-43a0-b293-44ad0fdca6f7",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "537838a9-bbdd-4870-b953-9b91a117120e"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "9cf93e1c-57bb-43d5-b42f-0ed5785c9a47",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "f484068b-d6ed-412b-a75e-8ca5b36bb42b"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "1c274ff8-79a4-4cab-8da4-22856956bc5a",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"prove:presentations\" scope.  This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).getAccessToken('prove:presentations');",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "5de12e6c-1eb5-444c-aefb-8dbc2ec5b06d"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "2857e8ef-c93e-4481-9632-17af5c46a66d",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "2b27a8f6-1a09-4750-ba6e-c32b18fc7552"
            }
          }
        ]
      },
      {
        "id": "cdce1bb8-1f14-41e3-b8ec-ce096079041c",
        "name": "Presentations - Verify",
        "item": [
          {
            "id": "61d1b664-aa98-4b30-ab61-b13f7f5e0a49",
            "name": "Negative Testing",
            "item": [
              {
                "id": "01e42528-7abf-4628-97b6-874739b84ac6",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "37848ef8-20ad-4d48-b1e3-32fb3fbfb0b4",
                    "name": "presentations_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "120fdea6-ad74-4f79-b91b-32626cef73ad",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "5ced9190-2cbf-4cf3-a54b-a91e73bd2918"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fc977854-3d85-4c91-8af1-9ce8d305315e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "68be0403-d211-4d7d-ac04-59d020686bae"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d07374c6-2e03-4d19-966b-a08f1d4b10f2",
                    "name": "presentations_verify:missing_scope:verify_presentations",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1044b2b8-a5d4-497e-9053-f009fabebd14",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"verify:presentations\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "649f0881-087e-4131-8130-dddcde0cb0c3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5f5733f7-9506-4df5-b69a-98100bf751ec",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "174b4e37-bc27-4563-b9bc-38bf2f836170"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "29a29615-9cf5-489e-8b9c-155e6a4d3ad5",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "821ba625-d76c-4492-b408-295e0290274e"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "bf1b4208-c3de-4b01-bcee-652f1e9bd926",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "6681e34d-b160-49e3-b7fc-2bd0023a49c8"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "22f9737d-670c-4d17-8f34-6d1144fecc01",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"verify:presentations\" scope.  This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).getAccessToken('verify:presentations');",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "b4bf4290-9757-4741-bf93-5e6aa483cf34"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "53bceb07-4950-4ecc-941b-1306a8a023e9",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "fb4ad91b-bf6c-4fe3-892b-5a3c2f8308cb"
            }
          }
        ]
      },
      {
        "id": "d2f12b05-d8fb-415b-968b-1f12000029cb",
        "name": "Presentations - Notify",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "19a9dab8-7965-4a9f-a5d9-39702a14bd4b",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "17403afc-03e3-471b-97c5-e705999e31b2",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      },
      {
        "id": "0dd08274-1f7c-463b-adaa-47c22d355776",
        "name": "Presentations - Submit",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "e6bafece-6d05-44bd-ae92-561c500a2a38",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "627943cc-86db-4985-a229-63e5bb1bd23a",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      }
    ]
  },
  "run": {
    "stats": {
      "iterations": {
        "total": 1,
        "pending": 0,
        "failed": 0
      },
      "items": {
        "total": 253,
        "pending": 0,
        "failed": 0
      },
      "scripts": {
        "total": 1925,
        "pending": 0,
        "failed": 0
      },
      "prerequests": {
        "total": 253,
        "pending": 0,
        "failed": 0
      },
      "requests": {
        "total": 262,
        "pending": 0,
        "failed": 6
      },
      "tests": {
        "total": 253,
        "pending": 0,
        "failed": 0
      },
      "assertions": {
        "total": 517,
        "pending": 0,
        "failed": 60
      },
      "testScripts": {
        "total": 967,
        "pending": 0,
        "failed": 0
      },
      "prerequestScripts": {
        "total": 958,
        "pending": 0,
        "failed": 0
      }
    },
    "timings": {
      "responseAverage": 28.91140023614974,
      "responseMin": 7,
      "responseMax": 3354,
      "responseSd": 210.54005368138573,
      "dnsAverage": 0,
      "dnsMin": 0,
      "dnsMax": 0,
      "dnsSd": 0,
      "firstByteAverage": 0,
      "firstByteMin": 0,
      "firstByteMax": 0,
      "firstByteSd": 0,
      "started": 1675125702323,
      "completed": 1675125721253
    },
    "executions": [
      {
        "id": "2d5fff10-5f3a-4013-8ce2-643c9464c3c4",
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 253,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "e383dbce-cc3a-44fa-bf5a-8e879d592ed7",
          "httpRequestId": "f2b487ad-d1f9-48ef-a7e1-72ad15d86df6"
        },
        "item": {
          "id": "2d5fff10-5f3a-4013-8ce2-643c9464c3c4",
          "name": "Clear Token Cache"
        },
        "response": {
          "id": "5f0ac472-4063-4938-b2f4-eb28267234b7",
          "status": "OK",
          "code": 200,
          "responseTime": 52,
          "responseSize": 0
        }
      },
      {
        "id": "0251c1ee-c37b-449c-866e-0924841de184",
        "cursor": {
          "ref": "d2ea1c73-bb73-4669-abea-d014f9c14cd9",
          "length": 253,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "73b9b4fc-73f9-4009-9ba8-a2366618393e"
        },
        "item": {
          "id": "0251c1ee-c37b-449c-866e-0924841de184",
          "name": "Clear DID Web Cache"
        },
        "response": {
          "id": "523d06b2-f2ec-47e4-961b-443bbf0bbdc3",
          "status": "OK",
          "code": 200,
          "responseTime": 7,
          "responseSize": 0
        }
      },
      {
        "id": "a94aa697-1148-49ae-a237-728c0277920d",
        "cursor": {
          "ref": "8ff3aab8-1535-42c0-9956-0327168e9f7b",
          "length": 253,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "66678fbe-b10f-4bf3-bda3-51ad3ea03574"
        },
        "item": {
          "id": "a94aa697-1148-49ae-a237-728c0277920d",
          "name": "did_json"
        },
        "response": {
          "id": "48d75c60-8913-44fd-baa7-e56d96926e62",
          "status": "OK",
          "code": 200,
          "responseTime": 49,
          "responseSize": 1211
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f69e5d87-8560-4ec6-aeea-0ef647eabce6",
        "cursor": {
          "ref": "662a7a2a-d127-4924-a7ad-c181e0ff25e7",
          "length": 253,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "90d7d344-a94f-43ad-aced-e511f9ad2727"
        },
        "item": {
          "id": "f69e5d87-8560-4ec6-aeea-0ef647eabce6",
          "name": "did:invalid"
        },
        "response": {
          "id": "950d8d59-2183-47be-9018-034b22a8f7da",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 11,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:4)"
            }
          }
        ]
      },
      {
        "id": "f69e5d87-8560-4ec6-aeea-0ef647eabce6",
        "cursor": {
          "ref": "662a7a2a-d127-4924-a7ad-c181e0ff25e7",
          "length": 253,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "90d7d344-a94f-43ad-aced-e511f9ad2727"
        },
        "item": {
          "id": "f69e5d87-8560-4ec6-aeea-0ef647eabce6",
          "name": "did:invalid"
        },
        "response": {
          "id": "950d8d59-2183-47be-9018-034b22a8f7da",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 11,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:4)"
            }
          }
        ]
      },
      {
        "id": "9223bf5b-4f9a-431f-b1b2-c67ef6366abe",
        "cursor": {
          "ref": "e0dff666-d3f4-4637-aea8-e095281d08ae",
          "length": 253,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "e1566725-812e-48a8-af9a-f3dbe2ef2626"
        },
        "item": {
          "id": "9223bf5b-4f9a-431f-b1b2-c67ef6366abe",
          "name": "did:not_found:did_web"
        },
        "response": {
          "id": "d6cb75ef-3b13-4500-b0ae-3968506195f3",
          "status": "Not Found",
          "code": 404,
          "responseTime": 49,
          "responseSize": 221
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "46f41711-0b0d-4046-8def-c24fd36cc783",
        "cursor": {
          "ref": "fa53fb2d-5748-4977-9b37-64d48ebcb955",
          "length": 253,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "b1976ef2-3796-4b32-8a7f-f95dbf37cd5a"
        },
        "item": {
          "id": "46f41711-0b0d-4046-8def-c24fd36cc783",
          "name": "did:not_found:urn"
        },
        "response": {
          "id": "cef6d982-221a-4491-ac8e-74ad71839d71",
          "status": "Not Found",
          "code": 404,
          "responseTime": 10,
          "responseSize": 211
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "965af0c7-09d7-4c20-ae2f-2b75a20d15ff",
        "cursor": {
          "ref": "3d628ba8-a5ed-47ed-9473-be4f62c9f0fb",
          "length": 253,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "9cd2997c-ad1a-4761-a466-d3b6b8ebf24c"
        },
        "item": {
          "id": "965af0c7-09d7-4c20-ae2f-2b75a20d15ff",
          "name": "identifiers:missing_auth"
        },
        "response": {
          "id": "e634c671-30c4-409b-a5ee-794eddf24bc4",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 10,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "762f1bf8-c2ba-4a5a-8e37-3c2e48086ce2",
        "cursor": {
          "ref": "5f94eb39-72be-438f-b18d-ffd19eacc8cd",
          "length": 253,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "59dd88a2-1373-414d-b811-890b134c56f5"
        },
        "item": {
          "id": "762f1bf8-c2ba-4a5a-8e37-3c2e48086ce2",
          "name": "identifiers:missing_scope:resolve:dids"
        },
        "response": {
          "id": "02ffad09-28a1-4130-a69c-4081e021e163",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 10,
          "responseSize": 157
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "762f1bf8-c2ba-4a5a-8e37-3c2e48086ce2",
        "cursor": {
          "ref": "5f94eb39-72be-438f-b18d-ffd19eacc8cd",
          "length": 253,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "59dd88a2-1373-414d-b811-890b134c56f5"
        },
        "item": {
          "id": "762f1bf8-c2ba-4a5a-8e37-3c2e48086ce2",
          "name": "identifiers:missing_scope:resolve:dids"
        },
        "response": {
          "id": "02ffad09-28a1-4130-a69c-4081e021e163",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 10,
          "responseSize": 157
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "83639f02-a94a-4433-8f56-1b1c05e41dce",
        "cursor": {
          "ref": "16410758-efda-45e3-860a-dfc80fffca97",
          "length": 253,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "6db5ead5-bea9-40ec-97cb-83bb339ed073"
        },
        "item": {
          "id": "83639f02-a94a-4433-8f56-1b1c05e41dce",
          "name": "identifiers"
        },
        "response": {
          "id": "3b25fdc2-4ec5-4e9d-a103-6797d75562e7",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 41,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 200",
              "message": "expected response to have status code 200 but got 500",
              "stack": "AssertionError: expected response to have status code 200 but got 500\n   at Object.eval sandbox-script.js:1:9)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'didDocument'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'didDocument'\n   at Object.eval sandbox-script.js:2:9)"
            }
          }
        ]
      },
      {
        "id": "58429586-de18-4805-a7ae-e5e678145184",
        "cursor": {
          "ref": "7a6b21d6-b3ce-414c-af47-8b610e8a3b11",
          "length": 253,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "7ec8d9f0-fdf1-41f7-beb9-7576c85a59d7"
        },
        "item": {
          "id": "58429586-de18-4805-a7ae-e5e678145184",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "a5714034-a20b-45b1-8ba1-e892d08897b7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 217
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "58429586-de18-4805-a7ae-e5e678145184",
        "cursor": {
          "ref": "7a6b21d6-b3ce-414c-af47-8b610e8a3b11",
          "length": 253,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "7ec8d9f0-fdf1-41f7-beb9-7576c85a59d7"
        },
        "item": {
          "id": "58429586-de18-4805-a7ae-e5e678145184",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "a5714034-a20b-45b1-8ba1-e892d08897b7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 217
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d5a979e4-6e3c-4a5c-a04c-89026a58be79",
        "cursor": {
          "ref": "732b949f-ed32-4036-8c27-964eac25bd3b",
          "length": 253,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "6b308593-489b-4254-9dd1-ed373e12f9e4"
        },
        "item": {
          "id": "d5a979e4-6e3c-4a5c-a04c-89026a58be79",
          "name": "credentials_issue:credential.@context:missing"
        },
        "response": {
          "id": "1e76f5d6-c532-4533-ad51-c00f6b302825",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a9cc23dd-286a-4026-9905-88fe3d02973f",
        "cursor": {
          "ref": "e962b4e4-3833-47c3-8df8-5da05ed26205",
          "length": 253,
          "cycles": 1,
          "position": 11,
          "iteration": 0,
          "httpRequestId": "c8ac4a47-36b7-4ce6-951a-c36f1c3a7412"
        },
        "item": {
          "id": "a9cc23dd-286a-4026-9905-88fe3d02973f",
          "name": "credentials_issue:credential.@context:invalid"
        },
        "response": {
          "id": "5a3199bf-bc98-4690-9264-60b52bbffddd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 176
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "21ea51d2-2ed7-4abc-9749-21dd14022068",
        "cursor": {
          "ref": "9542ca21-fc41-4b0e-986d-fbb70e6f0f1a",
          "length": 253,
          "cycles": 1,
          "position": 12,
          "iteration": 0,
          "httpRequestId": "fba6c002-1fa2-4a91-af17-101a67f7d957"
        },
        "item": {
          "id": "21ea51d2-2ed7-4abc-9749-21dd14022068",
          "name": "credentials_issue:credential.@context:boolean"
        },
        "response": {
          "id": "929a0cc7-3268-43d6-8831-8e9d727717f4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "93fdbac9-22e9-4bde-8db2-b2d0aac28345",
        "cursor": {
          "ref": "d22ebaae-86f2-4f78-a332-b713e9a78e4f",
          "length": 253,
          "cycles": 1,
          "position": 13,
          "iteration": 0,
          "httpRequestId": "63cf26f6-b487-4691-9ca4-08676b6bee7d"
        },
        "item": {
          "id": "93fdbac9-22e9-4bde-8db2-b2d0aac28345",
          "name": "credentials_issue:credential.@context:integer Copy"
        },
        "response": {
          "id": "2eb1d1bd-b6ba-4f5e-a4f4-fd247972aa21",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6dd423cf-bc65-41a4-997b-6a4866d0019c",
        "cursor": {
          "ref": "3b07af5e-40c2-4a31-9da1-11b83ab997c7",
          "length": 253,
          "cycles": 1,
          "position": 14,
          "iteration": 0,
          "httpRequestId": "8e408b01-38bb-4267-853d-8787e6e6fab1"
        },
        "item": {
          "id": "6dd423cf-bc65-41a4-997b-6a4866d0019c",
          "name": "credentials_issue:credential.@context:null"
        },
        "response": {
          "id": "509bcd14-1fec-4859-904d-3624848159f8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a22da739-6afe-46b8-8045-e48309b41064",
        "cursor": {
          "ref": "930e2258-d241-4d1f-b5a0-0212bb64277a",
          "length": 253,
          "cycles": 1,
          "position": 15,
          "iteration": 0,
          "httpRequestId": "d71305a3-64c0-4286-b053-f3f2d908f0cc"
        },
        "item": {
          "id": "a22da739-6afe-46b8-8045-e48309b41064",
          "name": "credentials_issue:credential.@context:object"
        },
        "response": {
          "id": "83a14d5c-fe65-42de-948f-d06ef2fe4402",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a16f03f4-54c6-4f3a-bc13-95640e3cbae7",
        "cursor": {
          "ref": "ab446aaa-ef10-4830-985e-ae7875fd25d0",
          "length": 253,
          "cycles": 1,
          "position": 16,
          "iteration": 0,
          "httpRequestId": "7541bb1c-8926-4b9e-b04a-d9629afbf338"
        },
        "item": {
          "id": "a16f03f4-54c6-4f3a-bc13-95640e3cbae7",
          "name": "credentials_issue:credential.@context:string"
        },
        "response": {
          "id": "c28a2fe4-6315-4a43-ba02-6281d380890d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 13,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f36dbf68-3d83-49b3-9935-4def498b002e",
        "cursor": {
          "ref": "afafbeb0-ba65-4839-98d6-22899d206cf9",
          "length": 253,
          "cycles": 1,
          "position": 17,
          "iteration": 0,
          "httpRequestId": "e3b8db9e-3bbf-4848-8438-b8db889e13b2"
        },
        "item": {
          "id": "f36dbf68-3d83-49b3-9935-4def498b002e",
          "name": "credentials_issue:credential.@context.item.array"
        },
        "response": {
          "id": "12826bc3-18b0-406d-bf90-399fc4d70248",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "26a8d3c1-9e68-4b79-ab08-a099ed04f8e7",
        "cursor": {
          "ref": "29d2baa8-89b8-47e8-9e0b-1f02529a1549",
          "length": 253,
          "cycles": 1,
          "position": 18,
          "iteration": 0,
          "httpRequestId": "9df1e61f-9d7d-4aca-a20b-805deb4a85d5"
        },
        "item": {
          "id": "26a8d3c1-9e68-4b79-ab08-a099ed04f8e7",
          "name": "credentials_issue:credential.@context.item.boolean"
        },
        "response": {
          "id": "dbade741-f4fc-4feb-bd21-8bbc997ab860",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 11,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3c32df45-c457-4a6f-98c3-57d7aea9241e",
        "cursor": {
          "ref": "263197b9-5cc1-4228-98a7-2b3421c8e94d",
          "length": 253,
          "cycles": 1,
          "position": 19,
          "iteration": 0,
          "httpRequestId": "ab454cdf-a870-47a1-8cfb-a626972ef4eb"
        },
        "item": {
          "id": "3c32df45-c457-4a6f-98c3-57d7aea9241e",
          "name": "credentials_issue:credential.@context.item.integer"
        },
        "response": {
          "id": "689793cf-3beb-4eef-8f5e-8b91b82b723d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 13,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "99fe8162-52ed-4148-957e-ed5799979f1a",
        "cursor": {
          "ref": "8e0ad6e3-bddc-4864-90dc-b23ea176f5d0",
          "length": 253,
          "cycles": 1,
          "position": 20,
          "iteration": 0,
          "httpRequestId": "5a6f410c-0997-453f-a15d-41f699e1f7f1"
        },
        "item": {
          "id": "99fe8162-52ed-4148-957e-ed5799979f1a",
          "name": "credentials_issue:credential.@context.item.null"
        },
        "response": {
          "id": "99138e2a-fc6e-4ca1-9a55-dbb361d6bcc3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2f67b7b3-dbd7-48ee-968c-487b805df46d",
        "cursor": {
          "ref": "2027ed5b-0ecd-4fc8-b9b2-10e15a0cfde4",
          "length": 253,
          "cycles": 1,
          "position": 21,
          "iteration": 0,
          "httpRequestId": "4ecd9d17-974b-4fc1-ab21-3d8a45df000e"
        },
        "item": {
          "id": "2f67b7b3-dbd7-48ee-968c-487b805df46d",
          "name": "credentials_issue:credential.@context.item.object"
        },
        "response": {
          "id": "1a298e7c-bd1d-4bcd-83a1-7d0b324fd225",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f20e3043-ae3b-4cc9-a047-811bd41093fa",
        "cursor": {
          "ref": "714d7b9d-4aa6-439c-9cbb-2a1d984c15a4",
          "length": 253,
          "cycles": 1,
          "position": 22,
          "iteration": 0,
          "httpRequestId": "e2d3e274-641d-4016-9272-3b91a4bb6fcf"
        },
        "item": {
          "id": "f20e3043-ae3b-4cc9-a047-811bd41093fa",
          "name": "credentials_issue:credential.id:missing"
        },
        "response": {
          "id": "dfa82f77-ff02-4b94-a493-f4920592304b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 12,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "66cc66d9-5f6e-45d3-8073-c7638f50006c",
        "cursor": {
          "ref": "231bec4a-ee7c-4b14-9b72-a7c03bb9369d",
          "length": 253,
          "cycles": 1,
          "position": 23,
          "iteration": 0,
          "httpRequestId": "14a86b1d-2c3e-4bc6-8879-e41a54f93741"
        },
        "item": {
          "id": "66cc66d9-5f6e-45d3-8073-c7638f50006c",
          "name": "credentials_issue:credential.id:array"
        },
        "response": {
          "id": "616d640a-f390-4d44-bfea-36839d99978d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9d2bb450-62af-4ee0-a555-0092430c63e2",
        "cursor": {
          "ref": "99cb0964-452f-401b-825b-a3f9d2ca684b",
          "length": 253,
          "cycles": 1,
          "position": 24,
          "iteration": 0,
          "httpRequestId": "e14e1616-a933-438a-b011-443a95e6ce76"
        },
        "item": {
          "id": "9d2bb450-62af-4ee0-a555-0092430c63e2",
          "name": "credentials_issue:credential.id:boolean"
        },
        "response": {
          "id": "5168ec42-d86f-4b17-b77f-2b139e4952a3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a9bb4ca2-a91f-41ea-a778-7315f84c0e00",
        "cursor": {
          "ref": "7ae09efa-32b0-48ed-ae1f-891a37233a1b",
          "length": 253,
          "cycles": 1,
          "position": 25,
          "iteration": 0,
          "httpRequestId": "92eb89ff-d872-468e-b1ad-b8516eb335a1"
        },
        "item": {
          "id": "a9bb4ca2-a91f-41ea-a778-7315f84c0e00",
          "name": "credentials_issue:credential.id:integer"
        },
        "response": {
          "id": "d2c40e31-8ece-47d6-8a20-4446226a5360",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dbc26a09-821d-411d-a2f1-d79fcba1f2f2",
        "cursor": {
          "ref": "acb1f3a8-414b-4ba5-8bfe-37acb3549a2a",
          "length": 253,
          "cycles": 1,
          "position": 26,
          "iteration": 0,
          "httpRequestId": "0428de7c-908a-4dcc-b6ac-ac62c3197806"
        },
        "item": {
          "id": "dbc26a09-821d-411d-a2f1-d79fcba1f2f2",
          "name": "credentials_issue:credential.id:null"
        },
        "response": {
          "id": "ae1f4872-cb6c-4ee1-b14d-12c8620b872f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 11,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "65087b6f-2e2e-4345-b383-160d601d4571",
        "cursor": {
          "ref": "3e67cf31-7590-4a99-b421-06a98dcfe951",
          "length": 253,
          "cycles": 1,
          "position": 27,
          "iteration": 0,
          "httpRequestId": "7aafca76-db23-4baf-aaee-ec5e0a7f882d"
        },
        "item": {
          "id": "65087b6f-2e2e-4345-b383-160d601d4571",
          "name": "credentials_issue:credential.id:object"
        },
        "response": {
          "id": "a77a9399-0bfe-47cc-acf7-0af277ffe489",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bf54c064-95e2-4b5c-9fa6-9bb58af02325",
        "cursor": {
          "ref": "8050b19f-7ee0-469c-b84a-a56e6f094987",
          "length": 253,
          "cycles": 1,
          "position": 28,
          "iteration": 0,
          "httpRequestId": "b9575cd7-dfd3-4c23-95f1-fcc117af7fa7"
        },
        "item": {
          "id": "bf54c064-95e2-4b5c-9fa6-9bb58af02325",
          "name": "credentials_issue:credential.type:missing"
        },
        "response": {
          "id": "0105a7b0-c49e-4475-b9e5-8ae4a8abaad5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 146
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "383398e5-47ff-48d3-a64b-46a3f908b34b",
        "cursor": {
          "ref": "70388d0b-d47a-4eeb-9dbb-fec493237476",
          "length": 253,
          "cycles": 1,
          "position": 29,
          "iteration": 0,
          "httpRequestId": "279a8799-08fc-40b4-810e-0b625f1f8e49"
        },
        "item": {
          "id": "383398e5-47ff-48d3-a64b-46a3f908b34b",
          "name": "credentials_issue:credential.type:boolean"
        },
        "response": {
          "id": "6b938725-a287-47d2-948f-f793a6f47e3c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bdd91435-3326-4bfe-bf67-634a64af228c",
        "cursor": {
          "ref": "133b2d83-69f2-4925-ae95-e145fa5afd52",
          "length": 253,
          "cycles": 1,
          "position": 30,
          "iteration": 0,
          "httpRequestId": "1269699f-98b3-46b3-9d66-db115a6f335b"
        },
        "item": {
          "id": "bdd91435-3326-4bfe-bf67-634a64af228c",
          "name": "credentials_issue:credential.type:integer"
        },
        "response": {
          "id": "de3e340a-b77b-443e-b8ef-d36965e061c8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "96e56b99-28fc-4120-9c79-de0e088a29ac",
        "cursor": {
          "ref": "65ed4432-aead-4b23-a233-6ebb7c453932",
          "length": 253,
          "cycles": 1,
          "position": 31,
          "iteration": 0,
          "httpRequestId": "aa77017b-4e0f-4372-bf13-06117e9638d6"
        },
        "item": {
          "id": "96e56b99-28fc-4120-9c79-de0e088a29ac",
          "name": "credentials_issue:credential.type:null"
        },
        "response": {
          "id": "07348d09-6715-4033-a5d7-87c1292fb78f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b223bedd-5dde-4101-a329-457c3fd4d699",
        "cursor": {
          "ref": "b0ab96dd-c4ff-4c84-9d5b-31c19b463879",
          "length": 253,
          "cycles": 1,
          "position": 32,
          "iteration": 0,
          "httpRequestId": "d476947d-7ee4-4055-a11b-1dc821a65ea0"
        },
        "item": {
          "id": "b223bedd-5dde-4101-a329-457c3fd4d699",
          "name": "credentials_issue:credential.type:object"
        },
        "response": {
          "id": "2a2b38a3-95e9-4167-bf82-615f499b24ee",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "443b4ea0-9d06-4339-bacf-24cf3075bebd",
        "cursor": {
          "ref": "d9e90164-4134-43a3-8814-2172fbc69473",
          "length": 253,
          "cycles": 1,
          "position": 33,
          "iteration": 0,
          "httpRequestId": "935bf9a2-a6c5-4591-8a79-0de4da6046ae"
        },
        "item": {
          "id": "443b4ea0-9d06-4339-bacf-24cf3075bebd",
          "name": "credentials_issue:credential.type:string"
        },
        "response": {
          "id": "8e07002c-3083-4f18-b052-1976aec71e8b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f9a2308f-a3b4-4832-8bf5-7fc31f95edbc",
        "cursor": {
          "ref": "b2440183-82c1-43da-8b91-485ef8ae631a",
          "length": 253,
          "cycles": 1,
          "position": 34,
          "iteration": 0,
          "httpRequestId": "22e1c51a-1093-469a-ac4e-32755e0f085d"
        },
        "item": {
          "id": "f9a2308f-a3b4-4832-8bf5-7fc31f95edbc",
          "name": "credentials_issue:credential.type.item:missing"
        },
        "response": {
          "id": "be9c9f64-2b90-49be-b3e5-c0595736faff",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "84d8f1ba-ac6a-4979-a690-a24a3b0b500e",
        "cursor": {
          "ref": "fa5b55b8-8c1f-4828-a9ee-89a4d5c3908a",
          "length": 253,
          "cycles": 1,
          "position": 35,
          "iteration": 0,
          "httpRequestId": "9bfc46c7-7620-4dfd-80fd-8a98735562d1"
        },
        "item": {
          "id": "84d8f1ba-ac6a-4979-a690-a24a3b0b500e",
          "name": "credentials_issue:credential.type.item:array"
        },
        "response": {
          "id": "5924f814-1b05-4ae8-85cd-2d03ff005cf6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "47dccd7d-8acc-439e-b13e-587a6024070b",
        "cursor": {
          "ref": "060f1c8a-2841-40a4-90f4-b78bda5efcbd",
          "length": 253,
          "cycles": 1,
          "position": 36,
          "iteration": 0,
          "httpRequestId": "6aa7914f-fba4-4941-8ab9-09b80aabec0c"
        },
        "item": {
          "id": "47dccd7d-8acc-439e-b13e-587a6024070b",
          "name": "credentials_issue:credential.type.item:boolean"
        },
        "response": {
          "id": "44306294-f677-42f8-a373-7d8e780a515e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c74c028b-73e1-4cd5-9a1b-26e29bfc2945",
        "cursor": {
          "ref": "334be96c-ff28-458f-86eb-d4726dba6dcb",
          "length": 253,
          "cycles": 1,
          "position": 37,
          "iteration": 0,
          "httpRequestId": "00dd7fdc-2ce2-415d-95c2-fdd01fab649b"
        },
        "item": {
          "id": "c74c028b-73e1-4cd5-9a1b-26e29bfc2945",
          "name": "credentials_issue:credential.type.item:integer"
        },
        "response": {
          "id": "0697febb-d57c-46ba-8d48-9eeb413de3c5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "edaeaec3-1afb-4f63-86af-785aa1335056",
        "cursor": {
          "ref": "d6bbbacb-dde9-4d54-bbec-f9e093c3d5aa",
          "length": 253,
          "cycles": 1,
          "position": 38,
          "iteration": 0,
          "httpRequestId": "71499ede-8535-4666-b28d-860a6187c23e"
        },
        "item": {
          "id": "edaeaec3-1afb-4f63-86af-785aa1335056",
          "name": "credentials_issue:credential.type.item:null"
        },
        "response": {
          "id": "ed55067a-758c-4591-8a31-c65ee5f37e92",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4c56b0a1-0f70-4eea-b7eb-ca138caab743",
        "cursor": {
          "ref": "0075145a-dd75-426c-8da2-3c82b3366f5a",
          "length": 253,
          "cycles": 1,
          "position": 39,
          "iteration": 0,
          "httpRequestId": "b813e898-e0c7-4987-8f06-78fb33a20c70"
        },
        "item": {
          "id": "4c56b0a1-0f70-4eea-b7eb-ca138caab743",
          "name": "credentials_issue:credential.type.item:object"
        },
        "response": {
          "id": "9a062d08-2a2f-4381-ad81-4b09f4f6c59c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "25d1b6b0-4744-4b7a-8612-a9a07f5ecc49",
        "cursor": {
          "ref": "2073529e-bfe6-47ab-b18a-dc5fdbc06814",
          "length": 253,
          "cycles": 1,
          "position": 40,
          "iteration": 0,
          "httpRequestId": "3381a8f7-e677-49df-8e31-03d53c4ab50e"
        },
        "item": {
          "id": "25d1b6b0-4744-4b7a-8612-a9a07f5ecc49",
          "name": "credentials_issue:credential.issuer:missing"
        },
        "response": {
          "id": "73e75923-51e6-4bc0-9f1b-1a70da620295",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "30b4cd2b-0f2b-4293-8b0a-d58d1879cc50",
        "cursor": {
          "ref": "83757d4d-ad57-4868-9045-71a7c4c0a592",
          "length": 253,
          "cycles": 1,
          "position": 41,
          "iteration": 0,
          "httpRequestId": "df4d153b-5aba-4be0-84fc-542a30249115"
        },
        "item": {
          "id": "30b4cd2b-0f2b-4293-8b0a-d58d1879cc50",
          "name": "credentials_issue:credential.issuer:array"
        },
        "response": {
          "id": "68602b36-691c-4829-b375-94bc37f5b823",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 14,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4dc69180-4806-4a74-9080-e9787f4dc475",
        "cursor": {
          "ref": "800b2106-232e-482e-9bf9-d853ff7d9bc7",
          "length": 253,
          "cycles": 1,
          "position": 42,
          "iteration": 0,
          "httpRequestId": "e63c1ccb-7572-4709-a872-3683aacc0af8"
        },
        "item": {
          "id": "4dc69180-4806-4a74-9080-e9787f4dc475",
          "name": "credentials_issue:credential.issuer:boolean"
        },
        "response": {
          "id": "3e6dcf8d-dd22-4e9b-af34-8b77edac2f11",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 11,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9b57db5c-4357-48c3-8e9a-ba704454e667",
        "cursor": {
          "ref": "a7b735ad-3c98-445f-8e8e-957fdbedc98f",
          "length": 253,
          "cycles": 1,
          "position": 43,
          "iteration": 0,
          "httpRequestId": "3e0797f2-b713-446a-806f-469317ef22ae"
        },
        "item": {
          "id": "9b57db5c-4357-48c3-8e9a-ba704454e667",
          "name": "credentials_issue:credential.issuer:integer"
        },
        "response": {
          "id": "50791447-e080-4b3f-b969-028f622983c3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0d0f666a-e383-4d15-bee9-d2ed9f3daa9c",
        "cursor": {
          "ref": "9501048b-d8d1-4a7f-ae86-c55aef276590",
          "length": 253,
          "cycles": 1,
          "position": 44,
          "iteration": 0,
          "httpRequestId": "fa25d937-e9ee-4ca1-be4a-11ec19a23bf7"
        },
        "item": {
          "id": "0d0f666a-e383-4d15-bee9-d2ed9f3daa9c",
          "name": "credentials_issue:credential.issuer:null"
        },
        "response": {
          "id": "73aa0831-843c-4a42-8075-5987b2c50208",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "98c6ee77-a82b-499b-9b88-3017633a6536",
        "cursor": {
          "ref": "78b2d279-26a6-48bf-ab1f-0d36224b278b",
          "length": 253,
          "cycles": 1,
          "position": 45,
          "iteration": 0,
          "httpRequestId": "be1f7443-5066-4c43-939a-5d67388a9ea9"
        },
        "item": {
          "id": "98c6ee77-a82b-499b-9b88-3017633a6536",
          "name": "credentials_issue.credential.issuer:invalid"
        },
        "response": {
          "id": "f3f358e0-0305-4600-ae57-7f10d4e16985",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b7edd075-9e0d-4363-9686-127f7fc67724",
        "cursor": {
          "ref": "9d539cc6-af7e-4d45-ae50-65dde6ce0887",
          "length": 253,
          "cycles": 1,
          "position": 46,
          "iteration": 0,
          "httpRequestId": "8addb7b3-d1f4-4711-a83b-1701e530323a"
        },
        "item": {
          "id": "b7edd075-9e0d-4363-9686-127f7fc67724",
          "name": "credentials_issue.credential.issuer:unknown"
        },
        "response": {
          "id": "b7606820-67f5-483e-b62d-e25ef0c30316",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 18,
          "responseSize": 95
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 400",
              "stack": "AssertionError: expected response to have status code 422 but got 400\n   at Object.eval sandbox-script.js:1:47)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:47)"
            }
          }
        ]
      },
      {
        "id": "6956dd36-012f-4049-94ae-28744e6b5e5b",
        "cursor": {
          "ref": "b447dc61-6c51-4012-85f8-912762b1bc47",
          "length": 253,
          "cycles": 1,
          "position": 47,
          "iteration": 0,
          "httpRequestId": "5ba296f6-2a63-4ded-922e-0c3663989994"
        },
        "item": {
          "id": "6956dd36-012f-4049-94ae-28744e6b5e5b",
          "name": "credentials_issue:credential.issuer.id:missing"
        },
        "response": {
          "id": "52d73c29-c691-4cde-a9b6-afc85cdba402",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "79662284-0bfb-42b0-a361-52aa5a30c5d4",
        "cursor": {
          "ref": "ff0dc1cf-747e-4019-80b4-f67b109d93b7",
          "length": 253,
          "cycles": 1,
          "position": 48,
          "iteration": 0,
          "httpRequestId": "df9220d9-65e8-4b69-8714-0e87b3bb0720"
        },
        "item": {
          "id": "79662284-0bfb-42b0-a361-52aa5a30c5d4",
          "name": "credentials_issue:credential.issuer.id:array"
        },
        "response": {
          "id": "755136e1-b2e3-4da6-b26b-4ea391130d30",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ca066ed3-8100-45fd-a327-1054b837a1e0",
        "cursor": {
          "ref": "2ae17019-a20d-4da5-aaa6-dbbe47fc292c",
          "length": 253,
          "cycles": 1,
          "position": 49,
          "iteration": 0,
          "httpRequestId": "5245af4e-26ac-4ffa-a8dd-b9f66a4fc7d5"
        },
        "item": {
          "id": "ca066ed3-8100-45fd-a327-1054b837a1e0",
          "name": "credentials_issue:credential.issuer.id:boolean"
        },
        "response": {
          "id": "8350ca1e-ad9b-4013-ac71-7814c93b0d9f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a49d5b01-3839-41da-bae3-2d9211098bb7",
        "cursor": {
          "ref": "5a273ba0-e2cb-485e-8ab5-36339e6e3f14",
          "length": 253,
          "cycles": 1,
          "position": 50,
          "iteration": 0,
          "httpRequestId": "6f6202ce-fa43-48d7-9d81-c66422270d85"
        },
        "item": {
          "id": "a49d5b01-3839-41da-bae3-2d9211098bb7",
          "name": "credentials_issue:credential.issuer.id:integer"
        },
        "response": {
          "id": "e05dd707-8d8c-4401-a396-d0d28fbe183c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0df0c0ca-34ce-4fee-bb4d-68606f1c5e5d",
        "cursor": {
          "ref": "48ae960d-7c19-4808-8563-2c6ef41ecc00",
          "length": 253,
          "cycles": 1,
          "position": 51,
          "iteration": 0,
          "httpRequestId": "78249634-26cc-421c-84ed-bb8c50db83a4"
        },
        "item": {
          "id": "0df0c0ca-34ce-4fee-bb4d-68606f1c5e5d",
          "name": "credentials_issue:credential.issuer.id:null"
        },
        "response": {
          "id": "1a09befa-1e4b-493a-afd8-ac0a40522cc0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3e8c5e61-7055-430f-95da-58e28ad2e7e9",
        "cursor": {
          "ref": "59df2803-aa12-474d-b50e-f2d0b8909c12",
          "length": 253,
          "cycles": 1,
          "position": 52,
          "iteration": 0,
          "httpRequestId": "c492f392-acf0-449c-8418-c1e3e416aeeb"
        },
        "item": {
          "id": "3e8c5e61-7055-430f-95da-58e28ad2e7e9",
          "name": "credentials_issue.credential.issuer.id:invalid"
        },
        "response": {
          "id": "26b43aaa-e624-4e9d-84ef-19a9ede0c146",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "04ed0cfa-0fe3-4bec-b643-054716cebe01",
        "cursor": {
          "ref": "3ec1eeab-9001-4c4a-86a6-7f0115754422",
          "length": 253,
          "cycles": 1,
          "position": 53,
          "iteration": 0,
          "httpRequestId": "0e1f9b61-e282-443d-be2a-1b6432170940"
        },
        "item": {
          "id": "04ed0cfa-0fe3-4bec-b643-054716cebe01",
          "name": "credentials_issue.credential.issuer.id:unknown"
        },
        "response": {
          "id": "f73779be-ae54-43f6-80d0-b4a18b30956f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 19,
          "responseSize": 95
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 400",
              "stack": "AssertionError: expected response to have status code 422 but got 400\n   at Object.eval sandbox-script.js:1:54)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:54)"
            }
          }
        ]
      },
      {
        "id": "7b014699-5054-4157-a51d-832fdaad25e8",
        "cursor": {
          "ref": "78950b8f-ebd2-42c4-a6b4-ece161877cbf",
          "length": 253,
          "cycles": 1,
          "position": 54,
          "iteration": 0,
          "httpRequestId": "f373a803-9117-4763-aaff-72fc0c78e2c8"
        },
        "item": {
          "id": "7b014699-5054-4157-a51d-832fdaad25e8",
          "name": "credentials_issue:credential.issuanceDate.missing"
        },
        "response": {
          "id": "f423c0ad-e040-41ab-a37c-ec518ea97a41",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a89dd2be-473f-49de-b861-38ed31f0badd",
        "cursor": {
          "ref": "ec52704c-9c4a-49f1-95df-42ea5d2d73bf",
          "length": 253,
          "cycles": 1,
          "position": 55,
          "iteration": 0,
          "httpRequestId": "e43a0826-5fec-486a-abda-d359aa84b56b"
        },
        "item": {
          "id": "a89dd2be-473f-49de-b861-38ed31f0badd",
          "name": "credentials_issue:credential.issuanceDate:array"
        },
        "response": {
          "id": "64be88e0-07f9-47c4-836c-a51168638ce5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "da8313ca-468f-40a7-93c2-0d6a7cba03a8",
        "cursor": {
          "ref": "60a67f15-1c0c-4db8-bd9c-83cb270d017f",
          "length": 253,
          "cycles": 1,
          "position": 56,
          "iteration": 0,
          "httpRequestId": "21f964ec-ded0-4ad8-9876-4655b8e9890c"
        },
        "item": {
          "id": "da8313ca-468f-40a7-93c2-0d6a7cba03a8",
          "name": "credentials_issue:credential.issuanceDate:boolean"
        },
        "response": {
          "id": "8bc6da70-1908-45da-b47d-7865d910f7c3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3ed255fa-797b-46b9-81bf-e9a92a34d03b",
        "cursor": {
          "ref": "b0f98dae-8f4f-4381-9933-936881b6ba66",
          "length": 253,
          "cycles": 1,
          "position": 57,
          "iteration": 0,
          "httpRequestId": "123a4376-1ba7-4a6c-a953-43855432660e"
        },
        "item": {
          "id": "3ed255fa-797b-46b9-81bf-e9a92a34d03b",
          "name": "credentials_issue:credential.issuanceDate:integer"
        },
        "response": {
          "id": "1ac604ea-92f1-4aa3-8dc3-7e16ff06be80",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a5f2dc7a-0ba7-4885-945b-73ab6548bbf0",
        "cursor": {
          "ref": "a99f3c9d-3ff7-4b37-af43-42848a1f0016",
          "length": 253,
          "cycles": 1,
          "position": 58,
          "iteration": 0,
          "httpRequestId": "dfd2dadc-b88d-49c0-8390-d69dac857db1"
        },
        "item": {
          "id": "a5f2dc7a-0ba7-4885-945b-73ab6548bbf0",
          "name": "credentials_issue:credential.issuanceDate:null"
        },
        "response": {
          "id": "0e6e329a-9ce3-4ddc-8d5f-09b5ad87787d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7df80cd8-bc97-4152-bdb4-4dabcddf3054",
        "cursor": {
          "ref": "c18f89a6-846f-4bab-94a5-e8f98424f0c1",
          "length": 253,
          "cycles": 1,
          "position": 59,
          "iteration": 0,
          "httpRequestId": "271bec69-eb77-4169-b3bc-13a895d93c68"
        },
        "item": {
          "id": "7df80cd8-bc97-4152-bdb4-4dabcddf3054",
          "name": "credentials_issue:credential.issuanceDate:object"
        },
        "response": {
          "id": "bc1982cd-762d-41c5-95ee-7a2a2876969e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dc3c7beb-4ea2-4a45-b6d6-e6463d0c79a1",
        "cursor": {
          "ref": "3bfcfa19-d8eb-426b-80cc-c6bae11b6fb8",
          "length": 253,
          "cycles": 1,
          "position": 60,
          "iteration": 0,
          "httpRequestId": "f3c1607f-1a8d-44e3-9d62-158e1d9d697c"
        },
        "item": {
          "id": "dc3c7beb-4ea2-4a45-b6d6-e6463d0c79a1",
          "name": "credentials_issue:credential.issuanceDate:invalid_value"
        },
        "response": {
          "id": "a93c6b24-5c8f-47eb-94c9-aacba6dca44b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4b73c588-fcdb-4250-ba70-0f52a2ad8e2b",
        "cursor": {
          "ref": "322728c2-2262-4a52-b075-675b73098b13",
          "length": 253,
          "cycles": 1,
          "position": 61,
          "iteration": 0,
          "httpRequestId": "0850908a-1701-4bae-8ada-493a1b47c94a"
        },
        "item": {
          "id": "4b73c588-fcdb-4250-ba70-0f52a2ad8e2b",
          "name": "credentials_issue:credential.credentialSubject:missing"
        },
        "response": {
          "id": "ae8884f6-e3c7-42a9-a78b-7d194179dfb3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5f0dbfb8-efb0-4716-bc67-b79d7b7e5b42",
        "cursor": {
          "ref": "68f2f0ec-da6e-4cee-ba9d-953aa9e8385f",
          "length": 253,
          "cycles": 1,
          "position": 62,
          "iteration": 0,
          "httpRequestId": "04134884-d4e7-49e2-b9cf-ae6412b3d1f1"
        },
        "item": {
          "id": "5f0dbfb8-efb0-4716-bc67-b79d7b7e5b42",
          "name": "credentials_issue:credential.credentialSubject:array"
        },
        "response": {
          "id": "40e3336a-58a7-4884-aee3-13f684c17af7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 11,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "50be42ce-dd99-4b5c-88e0-49816ee0f253",
        "cursor": {
          "ref": "5a26c252-8417-4940-aa55-8a84117a8e9f",
          "length": 253,
          "cycles": 1,
          "position": 63,
          "iteration": 0,
          "httpRequestId": "14af0745-e986-42b0-8f2f-7616c59b544d"
        },
        "item": {
          "id": "50be42ce-dd99-4b5c-88e0-49816ee0f253",
          "name": "credentials_issue:credential.credentialSubject:boolean"
        },
        "response": {
          "id": "8490c195-82d4-44d0-86ea-021bd21f5efb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5d2def8e-b250-4108-b9e7-f36906ae51bc",
        "cursor": {
          "ref": "49ad9d95-5d61-43e1-b89b-20d8c9291bb3",
          "length": 253,
          "cycles": 1,
          "position": 64,
          "iteration": 0,
          "httpRequestId": "e0f5e253-2bac-4880-a0b4-60d40636b0c1"
        },
        "item": {
          "id": "5d2def8e-b250-4108-b9e7-f36906ae51bc",
          "name": "credentials_issue:credential.credentialSubject:integer"
        },
        "response": {
          "id": "cfaab924-ba16-4273-b7da-bea289f54330",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8dd74f1c-8df9-43c2-b882-f36ca2ccef0c",
        "cursor": {
          "ref": "a00fafa8-79f2-4108-9c8a-d4ce66648884",
          "length": 253,
          "cycles": 1,
          "position": 65,
          "iteration": 0,
          "httpRequestId": "6960d159-5251-404f-bb01-5c7ec2eec446"
        },
        "item": {
          "id": "8dd74f1c-8df9-43c2-b882-f36ca2ccef0c",
          "name": "credentials_issue:credential.credentialSubject:null"
        },
        "response": {
          "id": "27d440ab-5be8-42ff-ac07-2d000892fb27",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "13fd6acf-778d-4899-ab66-28d9288d30c5",
        "cursor": {
          "ref": "875fbcc6-7d2b-4608-80d9-6945f7d9f952",
          "length": 253,
          "cycles": 1,
          "position": 66,
          "iteration": 0,
          "httpRequestId": "9c458e8b-9d82-4efc-b19c-c77f85a2d2f9"
        },
        "item": {
          "id": "13fd6acf-778d-4899-ab66-28d9288d30c5",
          "name": "credentials_issue:credential.credentialSubject:string"
        },
        "response": {
          "id": "c09e6e72-e5ba-401e-90ec-20ba3f99f527",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dd4276c0-857e-4f85-8353-4a24d9938574",
        "cursor": {
          "ref": "e659f14c-01c2-4097-8fb6-ba870a964bde",
          "length": 253,
          "cycles": 1,
          "position": 67,
          "iteration": 0,
          "httpRequestId": "c1b9aaa7-3095-406a-ab6e-e9d8de3a258e"
        },
        "item": {
          "id": "dd4276c0-857e-4f85-8353-4a24d9938574",
          "name": "credentials_issue:credential.credentialSubject.id:array"
        },
        "response": {
          "id": "fb170f4b-99b8-46b9-98dc-0045fd86eb13",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 11,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1f9f7885-f591-4603-b947-cc746fdad4ec",
        "cursor": {
          "ref": "1ff7e7c0-d3dd-4a30-87b2-b36fe5ee4e80",
          "length": 253,
          "cycles": 1,
          "position": 68,
          "iteration": 0,
          "httpRequestId": "23c9ec15-1f56-48ca-9008-d3597c19845a"
        },
        "item": {
          "id": "1f9f7885-f591-4603-b947-cc746fdad4ec",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy"
        },
        "response": {
          "id": "41f98d43-5d87-442b-bfc3-1c2121dc8257",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 11,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c979963c-b4da-40a9-acb3-17da9a889d5f",
        "cursor": {
          "ref": "451fa60e-34c5-47a1-a18d-0c4a38885ced",
          "length": 253,
          "cycles": 1,
          "position": 69,
          "iteration": 0,
          "httpRequestId": "12e3b8e8-798e-41a5-b6a1-7e116eb8ce0d"
        },
        "item": {
          "id": "c979963c-b4da-40a9-acb3-17da9a889d5f",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 2"
        },
        "response": {
          "id": "de66b3be-5e1d-47c7-9e62-bc2c4a09d8cd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7063c0cb-d714-4452-998d-5b65592008ba",
        "cursor": {
          "ref": "15b10b39-55da-4b91-bf8b-fa383db8be8b",
          "length": 253,
          "cycles": 1,
          "position": 70,
          "iteration": 0,
          "httpRequestId": "4ac4360c-00b8-4ef1-abb3-87f35f618695"
        },
        "item": {
          "id": "7063c0cb-d714-4452-998d-5b65592008ba",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 3"
        },
        "response": {
          "id": "601b9388-880e-4d7e-9d75-e2ff6f507373",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 14,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "70b288fb-6e34-448a-aa18-335b059f7843",
        "cursor": {
          "ref": "6d260653-9916-4e20-8f9c-61d6d4e55c8c",
          "length": 253,
          "cycles": 1,
          "position": 71,
          "iteration": 0,
          "httpRequestId": "91a56a04-cfcb-4636-879a-77344f66b665"
        },
        "item": {
          "id": "70b288fb-6e34-448a-aa18-335b059f7843",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 4"
        },
        "response": {
          "id": "228569e7-dfdf-4708-9551-2d3c1b03f608",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "58c114f5-9750-4b6a-b333-d567d468b321",
        "cursor": {
          "ref": "06a37c9c-203f-4345-bab9-f606d70e983a",
          "length": 253,
          "cycles": 1,
          "position": 72,
          "iteration": 0,
          "httpRequestId": "cc0ea4e4-9a20-4cc4-876b-ff5771cb0f40"
        },
        "item": {
          "id": "58c114f5-9750-4b6a-b333-d567d468b321",
          "name": "credentials_issue:options:missing"
        },
        "response": {
          "id": "057d11ab-0cd8-452e-a706-a12734e2f5b5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 211
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f9bae2ea-b1b3-4672-8b13-b8ec405c9f58",
        "cursor": {
          "ref": "4c0a5224-a51d-43b2-b7be-742a4368852d",
          "length": 253,
          "cycles": 1,
          "position": 73,
          "iteration": 0,
          "httpRequestId": "e0170267-4253-46f5-9eed-6eb26bcce9e7"
        },
        "item": {
          "id": "f9bae2ea-b1b3-4672-8b13-b8ec405c9f58",
          "name": "credentials_issue:options:array"
        },
        "response": {
          "id": "ed9c2b6e-2c26-46a0-b1ea-1a606655afe1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 684
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7697ab22-5a5a-4efb-8329-8920dd101e4f",
        "cursor": {
          "ref": "3e2c40e1-ecf4-47ee-8205-4e7ed76eeed4",
          "length": 253,
          "cycles": 1,
          "position": 74,
          "iteration": 0,
          "httpRequestId": "50073101-2897-49ac-a642-612f76a62321"
        },
        "item": {
          "id": "7697ab22-5a5a-4efb-8329-8920dd101e4f",
          "name": "credentials_issue:options:boolean"
        },
        "response": {
          "id": "5a35d7ea-02f8-44ea-be15-8635d3085acb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 683
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "11a1d680-b1c1-42be-9ab8-c0f85386b5e7",
        "cursor": {
          "ref": "f782ab13-1c4d-47eb-9bf6-1d56127d64f7",
          "length": 253,
          "cycles": 1,
          "position": 75,
          "iteration": 0,
          "httpRequestId": "c2a0fa71-4010-41a1-b3d1-a0da0453b64f"
        },
        "item": {
          "id": "11a1d680-b1c1-42be-9ab8-c0f85386b5e7",
          "name": "credentials_issue:options:integer"
        },
        "response": {
          "id": "321c301b-3bce-444d-a5b7-e624afcadd3d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 685
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3a6f002e-f4d4-45e0-80c1-cc6de28fadc9",
        "cursor": {
          "ref": "169ce171-b191-4221-9b03-15704a7d4f70",
          "length": 253,
          "cycles": 1,
          "position": 76,
          "iteration": 0,
          "httpRequestId": "5cc15edc-d845-4cd3-a0a6-d82f48e04d03"
        },
        "item": {
          "id": "3a6f002e-f4d4-45e0-80c1-cc6de28fadc9",
          "name": "credentials_issue:options:null"
        },
        "response": {
          "id": "d477d182-be1d-4c9e-9337-51b18a6634a5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 211
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "676d56d9-22c4-42bb-b0ac-fe27cd8db135",
        "cursor": {
          "ref": "66f23985-9c29-4cb3-8d7e-60443c19db1f",
          "length": 253,
          "cycles": 1,
          "position": 77,
          "iteration": 0,
          "httpRequestId": "c3923b51-9517-4d1c-a56c-dd7302dd3908"
        },
        "item": {
          "id": "676d56d9-22c4-42bb-b0ac-fe27cd8db135",
          "name": "credentials_issue:options:string"
        },
        "response": {
          "id": "7a1eab8f-a693-4157-9da9-18a27f076322",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 685
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "043dce02-6163-4736-8e48-ba264c5daf97",
        "cursor": {
          "ref": "53e2771d-e7e6-47b3-816b-04d21d869254",
          "length": 253,
          "cycles": 1,
          "position": 78,
          "iteration": 0,
          "httpRequestId": "40e632c1-3d30-4d4b-b827-ade11192d401"
        },
        "item": {
          "id": "043dce02-6163-4736-8e48-ba264c5daf97",
          "name": "credentials_issue:options.type:missing"
        },
        "response": {
          "id": "bb741ff9-0ee1-4ec0-8b76-50c8dbf7cc92",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 12,
          "responseSize": 213
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5430d1e4-64c6-486d-aa8c-ae0ead7f3c27",
        "cursor": {
          "ref": "05dd6779-dccf-4bca-beca-4a1e96f28238",
          "length": 253,
          "cycles": 1,
          "position": 79,
          "iteration": 0,
          "httpRequestId": "a26ede4d-482b-4492-8258-c42f9e26b9e0"
        },
        "item": {
          "id": "5430d1e4-64c6-486d-aa8c-ae0ead7f3c27",
          "name": "credentials_issue:options.type:array"
        },
        "response": {
          "id": "ef0df91a-8dbc-46bb-b8df-d344fb3e7f46",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 284
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d4f40f45-fb5d-4c72-b5ae-f7db91708053",
        "cursor": {
          "ref": "5eceae33-e035-4054-9632-74ada637b63d",
          "length": 253,
          "cycles": 1,
          "position": 80,
          "iteration": 0,
          "httpRequestId": "4f3b8d71-3dbb-4ddd-b159-59d1d843c4eb"
        },
        "item": {
          "id": "d4f40f45-fb5d-4c72-b5ae-f7db91708053",
          "name": "credentials_issue:options.type:boolean"
        },
        "response": {
          "id": "819ca433-d1e1-4c96-9662-3447afc975d5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 283
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a178a93a-6033-4311-8dfc-9bf9ad368980",
        "cursor": {
          "ref": "aa261dc0-da53-4474-81c7-2324b852e5c2",
          "length": 253,
          "cycles": 1,
          "position": 81,
          "iteration": 0,
          "httpRequestId": "59d7949d-3d01-4b70-a0a1-9d0fdb1333a4"
        },
        "item": {
          "id": "a178a93a-6033-4311-8dfc-9bf9ad368980",
          "name": "credentials_issue:options.type:integer"
        },
        "response": {
          "id": "ec47a24e-18a3-4652-a0a6-915b1d2b3117",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 285
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "79a0c148-4c68-4ba0-84fd-1a24779cfecb",
        "cursor": {
          "ref": "f16402bf-7774-42ae-991c-5d23eb4ad95d",
          "length": 253,
          "cycles": 1,
          "position": 82,
          "iteration": 0,
          "httpRequestId": "9067a5a0-3a4d-49d6-9635-dff5f4ee079b"
        },
        "item": {
          "id": "79a0c148-4c68-4ba0-84fd-1a24779cfecb",
          "name": "credentials_issue:options.type:null"
        },
        "response": {
          "id": "d7a4f7d8-2e2d-4736-a690-7be27bc2af5d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 213
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "54ad57cc-8e3c-4837-ac29-d4f6507c0bea",
        "cursor": {
          "ref": "5f2b07d8-283d-4be8-b54b-8beffef45772",
          "length": 253,
          "cycles": 1,
          "position": 83,
          "iteration": 0,
          "httpRequestId": "b10166dd-f337-4d7d-8478-1ce999775be4"
        },
        "item": {
          "id": "54ad57cc-8e3c-4837-ac29-d4f6507c0bea",
          "name": "credentials_issue:options.type:object"
        },
        "response": {
          "id": "b273fc88-463e-476d-b510-008e5b9c901e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 285
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c68e3de8-a17d-4cf1-bcf1-4de9886e5ff2",
        "cursor": {
          "ref": "31f7b151-2279-4909-a7a8-317b292f0e80",
          "length": 253,
          "cycles": 1,
          "position": 84,
          "iteration": 0,
          "httpRequestId": "1a198eb1-3cf1-4121-99bc-b30fe9b55232"
        },
        "item": {
          "id": "c68e3de8-a17d-4cf1-bcf1-4de9886e5ff2",
          "name": "credentials_issue:options.type:invalid_value"
        },
        "response": {
          "id": "be7fd6d7-bcba-4a0e-9377-ad7343dab35e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 18,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "916c49cc-4123-495a-952d-d3a959d463e3",
        "cursor": {
          "ref": "da36ef8d-d5d8-4827-b35e-64108f03dc80",
          "length": 253,
          "cycles": 1,
          "position": 85,
          "iteration": 0,
          "httpRequestId": "6722b5d2-5324-43fe-9be3-a68b947e8e79"
        },
        "item": {
          "id": "916c49cc-4123-495a-952d-d3a959d463e3",
          "name": "credentials_issue:options.created:array"
        },
        "response": {
          "id": "1e61caa7-a378-4362-a60a-69d35b81653f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 355
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4f533473-a8e4-47cb-b575-bfba5b4b706d",
        "cursor": {
          "ref": "87006634-3561-4c08-a56d-a81feb5de3b5",
          "length": 253,
          "cycles": 1,
          "position": 86,
          "iteration": 0,
          "httpRequestId": "2103a987-fedd-4441-b53b-cee5958ecffc"
        },
        "item": {
          "id": "4f533473-a8e4-47cb-b575-bfba5b4b706d",
          "name": "credentials_issue:options.created:boolean"
        },
        "response": {
          "id": "62d9efe3-7812-4b55-bdc7-8eb0dc116a97",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 305
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3511b924-d3c1-453b-a8b8-4a43a5d42517",
        "cursor": {
          "ref": "540a4a2a-f5b1-44e0-ab08-7bb12a062acb",
          "length": 253,
          "cycles": 1,
          "position": 87,
          "iteration": 0,
          "httpRequestId": "1c6146e7-78c6-401c-a1c5-180c0ccb8432"
        },
        "item": {
          "id": "3511b924-d3c1-453b-a8b8-4a43a5d42517",
          "name": "credentials_issue:options.created:integer"
        },
        "response": {
          "id": "14532617-c6e9-4e48-9af3-237c340ed78e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 299
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cc7df153-6f46-4755-ab49-5e8690baeaa7",
        "cursor": {
          "ref": "1d549346-3e93-4576-bcf1-57e07a64a960",
          "length": 253,
          "cycles": 1,
          "position": 88,
          "iteration": 0,
          "httpRequestId": "3e14fcb0-7b3c-48e3-badc-c2dff7462f69"
        },
        "item": {
          "id": "cc7df153-6f46-4755-ab49-5e8690baeaa7",
          "name": "credentials_issue:options.created:null"
        },
        "response": {
          "id": "36403a2c-2e26-43e8-88eb-908741411d8d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 20,
          "responseSize": 95
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "df333bbf-9780-4e83-901d-a06818ee1ac3",
        "cursor": {
          "ref": "091cf603-e540-42f2-8df0-42b529969be0",
          "length": 253,
          "cycles": 1,
          "position": 89,
          "iteration": 0,
          "httpRequestId": "2641fdb0-959d-41df-a704-876fceaf842f"
        },
        "item": {
          "id": "df333bbf-9780-4e83-901d-a06818ee1ac3",
          "name": "credentials_issue:options.created:object"
        },
        "response": {
          "id": "fb2a7dc4-ee3b-4876-9bed-5f2238e70138",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 299
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f267b167-90d4-4258-a87f-83740f2cfe61",
        "cursor": {
          "ref": "53a28992-696e-4a9b-baf7-ad3ca95634b6",
          "length": 253,
          "cycles": 1,
          "position": 90,
          "iteration": 0,
          "httpRequestId": "d647d404-73fc-42d6-b076-b76d60303d47"
        },
        "item": {
          "id": "f267b167-90d4-4258-a87f-83740f2cfe61",
          "name": "credentials_issue:options.created:invalid"
        },
        "response": {
          "id": "64d60b32-8a43-4299-adda-7ad699b92c87",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 361
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8a1ad3dc-07d0-40c0-88ba-d4e06f24d9ec",
        "cursor": {
          "ref": "b86ff92a-6cce-47e6-b87b-9a3005573a5e",
          "length": 253,
          "cycles": 1,
          "position": 91,
          "iteration": 0,
          "httpRequestId": "68973200-0faa-4308-9def-e29485fd6835"
        },
        "item": {
          "id": "8a1ad3dc-07d0-40c0-88ba-d4e06f24d9ec",
          "name": "credentials_issue:options.credentialStatus:array"
        },
        "response": {
          "id": "06c55a97-7be5-42b9-a310-cb5dd2bbe07b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 515
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8e955a52-bed8-41ed-8c0f-3462ee5fc14a",
        "cursor": {
          "ref": "47ad3d0b-0313-4cc9-92fb-b0c110748c9e",
          "length": 253,
          "cycles": 1,
          "position": 92,
          "iteration": 0,
          "httpRequestId": "c559b135-d087-4c53-a34c-7262b5e333a3"
        },
        "item": {
          "id": "8e955a52-bed8-41ed-8c0f-3462ee5fc14a",
          "name": "credentials_issue:options.credentialStatus:boolean"
        },
        "response": {
          "id": "fd2aebd1-aa81-49b4-9b3e-fe400ba80a79",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 514
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d37243a2-ca5b-4d8e-86cd-62df70f0b5cf",
        "cursor": {
          "ref": "3231323d-3fa0-4299-a7a0-a0dd3ed034f1",
          "length": 253,
          "cycles": 1,
          "position": 93,
          "iteration": 0,
          "httpRequestId": "6dccbf2b-46ec-4c8f-83ad-c4c930543657"
        },
        "item": {
          "id": "d37243a2-ca5b-4d8e-86cd-62df70f0b5cf",
          "name": "credentials_issue:options.credentialStatus:integer"
        },
        "response": {
          "id": "c9a58fa2-f8f4-4fe8-9ca3-d36b9c219b11",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 516
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "73e137ff-cf96-475c-94a0-d8f7f2dc4ac8",
        "cursor": {
          "ref": "aa5ea321-618e-4cd7-aeee-a515813c5d1c",
          "length": 253,
          "cycles": 1,
          "position": 94,
          "iteration": 0,
          "httpRequestId": "0aab9533-2c8d-4c35-a919-96296a1bfdc6"
        },
        "item": {
          "id": "73e137ff-cf96-475c-94a0-d8f7f2dc4ac8",
          "name": "credentials_issue:options.credentialStatus:null"
        },
        "response": {
          "id": "71b8ffc1-8d53-40cd-8535-ea90ff6e7cd1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 20,
          "responseSize": 95
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "588b0aa0-d67e-41a5-8d31-6172301d6ff4",
        "cursor": {
          "ref": "788ed95a-5d9b-49bb-adfa-ce5dac8a3f54",
          "length": 253,
          "cycles": 1,
          "position": 95,
          "iteration": 0,
          "httpRequestId": "69086c45-3536-473c-8233-bb6d2cd3f27f"
        },
        "item": {
          "id": "588b0aa0-d67e-41a5-8d31-6172301d6ff4",
          "name": "credentials_issue:options.credentialStatus:string"
        },
        "response": {
          "id": "d51bb722-11ef-4bd1-989d-4e986a235993",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 516
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b8ff9032-c889-492d-b827-9201e509a74e",
        "cursor": {
          "ref": "6c672a89-c375-437b-8304-cd05bd0f594f",
          "length": 253,
          "cycles": 1,
          "position": 96,
          "iteration": 0,
          "httpRequestId": "0a0ba135-0978-4397-a460-afbe321cb303"
        },
        "item": {
          "id": "b8ff9032-c889-492d-b827-9201e509a74e",
          "name": "credentials_issue:options.credentialStatus.type:missing"
        },
        "response": {
          "id": "2cf41600-9da1-4caa-ae9e-8530e4a23d15",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 480
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2c83fdfc-5f51-44a3-8c51-8cfbc32a2f06",
        "cursor": {
          "ref": "4caad478-bddd-45f6-8c89-ffb1a34935b6",
          "length": 253,
          "cycles": 1,
          "position": 97,
          "iteration": 0,
          "httpRequestId": "b9174cc0-c1cd-4d58-9681-3cfbdfa6ba2c"
        },
        "item": {
          "id": "2c83fdfc-5f51-44a3-8c51-8cfbc32a2f06",
          "name": "credentials_issue:options.credentialStatus.type:array"
        },
        "response": {
          "id": "644b8986-eac7-435d-94a3-45cdfc9a1405",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 301
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6b1d83e6-ba43-44d0-bf9d-9a8bd17802c0",
        "cursor": {
          "ref": "be36ad75-991c-48e6-b9dc-62745d60da50",
          "length": 253,
          "cycles": 1,
          "position": 98,
          "iteration": 0,
          "httpRequestId": "f5caa79a-ba1c-498a-9ea3-c6a6c774702a"
        },
        "item": {
          "id": "6b1d83e6-ba43-44d0-bf9d-9a8bd17802c0",
          "name": "credentials_issue:options.credentialStatus.type:boolean"
        },
        "response": {
          "id": "b17b3aad-3ba1-4ed5-aff6-731887a55579",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 300
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1a111e44-6d7a-49a6-a9fe-697f41910b5f",
        "cursor": {
          "ref": "58557c97-8ad3-4200-a0c5-7d7adf6fd474",
          "length": 253,
          "cycles": 1,
          "position": 99,
          "iteration": 0,
          "httpRequestId": "a59d29dd-fcf2-462e-87b0-12c02941388a"
        },
        "item": {
          "id": "1a111e44-6d7a-49a6-a9fe-697f41910b5f",
          "name": "credentials_issue:options.credentialStatus.type:integer"
        },
        "response": {
          "id": "048f3efc-28f2-40ea-833e-f9cf27e4f8a9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 302
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2a58bcd6-cbed-4739-855b-1392ae335df3",
        "cursor": {
          "ref": "96497599-3af3-46af-b12b-88406fd20477",
          "length": 253,
          "cycles": 1,
          "position": 100,
          "iteration": 0,
          "httpRequestId": "fe153783-6549-4a37-9c44-68fff6189192"
        },
        "item": {
          "id": "2a58bcd6-cbed-4739-855b-1392ae335df3",
          "name": "credentials_issue:options.credentialStatus.type:null"
        },
        "response": {
          "id": "6ee923ef-0649-42e6-985e-c27c6a30dac4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 480
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c0cd9a66-b9f7-48de-aa30-493c9038f30c",
        "cursor": {
          "ref": "7b56c925-3aa1-41e8-8278-db0c50df8683",
          "length": 253,
          "cycles": 1,
          "position": 101,
          "iteration": 0,
          "httpRequestId": "b2a611dc-a290-4952-a062-a9daf8f778c4"
        },
        "item": {
          "id": "c0cd9a66-b9f7-48de-aa30-493c9038f30c",
          "name": "credentials_issue:options.credentialStatus.type:null Copy"
        },
        "response": {
          "id": "f292b010-42ec-4fc0-8423-a1da430822a7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 302
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a61f768e-8ac2-4b1c-8480-834599dd2993",
        "cursor": {
          "ref": "88830c14-9a87-4c26-a997-979d4cd5e99c",
          "length": 253,
          "cycles": 1,
          "position": 102,
          "iteration": 0,
          "httpRequestId": "1eefbda4-5506-4ad0-82cd-ea4fe8fce5d0"
        },
        "item": {
          "id": "a61f768e-8ac2-4b1c-8480-834599dd2993",
          "name": "credentials_issue:options.credentialStatus.type:invalid"
        },
        "response": {
          "id": "9085005b-a14e-42cb-a7a9-bba9d35b04d4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 54,
          "responseSize": 480
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "93c30d4d-58db-4c0f-8b9d-fd97e578c6df",
        "cursor": {
          "ref": "a500e099-c225-4444-a651-ba0899bf2021",
          "length": 253,
          "cycles": 1,
          "position": 103,
          "iteration": 0,
          "httpRequestId": "840c3396-a699-4a15-b39d-e51778987fc9"
        },
        "item": {
          "id": "93c30d4d-58db-4c0f-8b9d-fd97e578c6df",
          "name": "credentials_issue:missing_auth"
        },
        "response": {
          "id": "7a4aeaff-2735-4a7f-9ab9-2e2ac4196054",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 17,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 400",
              "stack": "AssertionError: expected response to have status code 401 but got 400\n   at Object.eval sandbox-script.js:1:104)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:104)"
            }
          }
        ]
      },
      {
        "id": "8a0505ed-6916-4dba-86df-8aebb30b9c5a",
        "cursor": {
          "ref": "626d6e03-c761-484a-bc53-011e4546492e",
          "length": 253,
          "cycles": 1,
          "position": 104,
          "iteration": 0,
          "httpRequestId": "900a1689-a1dc-4609-a921-1b1ea501a338"
        },
        "item": {
          "id": "8a0505ed-6916-4dba-86df-8aebb30b9c5a",
          "name": "credentials_issue:missing_scope:issue_credentials"
        },
        "response": {
          "id": "cdf6028b-c302-45f2-bf02-dedab63c9dc3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 400",
              "stack": "AssertionError: expected response to have status code 403 but got 400\n   at Object.eval sandbox-script.js:1:105)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:105)"
            }
          }
        ]
      },
      {
        "id": "8fa789a4-c605-4d75-a48f-bf7bd1ec5106",
        "cursor": {
          "ref": "2b358697-ede5-4b81-b2ec-af22fd1b2c97",
          "length": 253,
          "cycles": 1,
          "position": 105,
          "iteration": 0,
          "httpRequestId": "6119c840-dfd0-4d07-a69a-67cfbcfd6c34"
        },
        "item": {
          "id": "8fa789a4-c605-4d75-a48f-bf7bd1ec5106",
          "name": "credentials_issue"
        },
        "response": {
          "id": "8838521d-0e6b-43e3-a4a9-26363ddea663",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 19,
          "responseSize": 95
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 400",
              "stack": "AssertionError: expected response to have status code 201 but got 400\n   at Object.eval sandbox-script.js:1:106)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:2:106)"
            }
          },
          {
            "assertion": "response @context contains traceability/v1",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 2,
              "test": "response @context contains traceability/v1",
              "message": "Cannot read properties of undefined (reading '@context')",
              "stack": "TypeError: Cannot read properties of undefined (reading '@context')\n   at Object.eval sandbox-script.js:3:106)"
            }
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 3,
              "test": "response issuer matches request credential.issuer",
              "message": "Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.",
              "stack": "TypeError: Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.\n   at Object.eval sandbox-script.js:4:106)"
            }
          },
          {
            "assertion": "response credentialSubject matches request credential.credentialSubject",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 4,
              "test": "response credentialSubject matches request credential.credentialSubject",
              "message": "Cannot destructure property 'credentialSubject' of 'pm.response.json(...).verifiableCredential' as it is undefined.",
              "stack": "TypeError: Cannot destructure property 'credentialSubject' of 'pm.response.json(...).verifiableCredential' as it is undefined.\n   at Object.eval sandbox-script.js:5:106)"
            }
          },
          {
            "assertion": "response issuanceDate matches request credential.issuanceDate",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 5,
              "test": "response issuanceDate matches request credential.issuanceDate",
              "message": "Cannot destructure property 'issuanceDate' of 'pm.response.json(...).verifiableCredential' as it is undefined.",
              "stack": "TypeError: Cannot destructure property 'issuanceDate' of 'pm.response.json(...).verifiableCredential' as it is undefined.\n   at Object.eval sandbox-script.js:6:106)"
            }
          },
          {
            "assertion": "response proof.created is close to 'now'",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 6,
              "test": "response proof.created is close to 'now'",
              "message": "Cannot destructure property 'proof' of 'pm.response.json(...).verifiableCredential' as it is undefined.",
              "stack": "TypeError: Cannot destructure property 'proof' of 'pm.response.json(...).verifiableCredential' as it is undefined.\n   at Object.eval sandbox-script.js:7:106)"
            }
          }
        ]
      },
      {
        "id": "f83d9f9d-2e53-4cc6-b75b-f334884384cb",
        "cursor": {
          "ref": "1262cec0-98c6-4d9d-a634-9630fba426b8",
          "length": 253,
          "cycles": 1,
          "position": 106,
          "iteration": 0,
          "httpRequestId": "29c2c6aa-bfc4-4ee6-b28d-46c565caa1f4"
        },
        "item": {
          "id": "f83d9f9d-2e53-4cc6-b75b-f334884384cb",
          "name": "credentials_issue:credential:alt.issuer.object"
        },
        "response": {
          "id": "2517607b-52b6-4162-9b45-22108a2889ee",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 24,
          "responseSize": 95
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 400",
              "stack": "AssertionError: expected response to have status code 201 but got 400\n   at Object.eval sandbox-script.js:1:107)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:2:107)"
            }
          },
          {
            "assertion": "response @context contains traceability/v1",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 2,
              "test": "response @context contains traceability/v1",
              "message": "Cannot read properties of undefined (reading '@context')",
              "stack": "TypeError: Cannot read properties of undefined (reading '@context')\n   at Object.eval sandbox-script.js:3:107)"
            }
          },
          {
            "assertion": "response issuer matches request credential.issuer.id",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 3,
              "test": "response issuer matches request credential.issuer.id",
              "message": "Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.",
              "stack": "TypeError: Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.\n   at Object.eval sandbox-script.js:4:107)"
            }
          }
        ]
      },
      {
        "id": "cb95b3c6-1aba-4ba9-8a64-bfd62d548a86",
        "cursor": {
          "ref": "ec768277-438c-4a05-82a8-c23a17ed1fbb",
          "length": 253,
          "cycles": 1,
          "position": 107,
          "iteration": 0,
          "httpRequestId": "ae595df1-a01f-42e4-8b5b-508f4e4f4ed5"
        },
        "item": {
          "id": "cb95b3c6-1aba-4ba9-8a64-bfd62d548a86",
          "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id"
        },
        "response": {
          "id": "c784c213-a8bd-4279-aefd-c42f9c52c34e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 18,
          "responseSize": 95
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 400",
              "stack": "AssertionError: expected response to have status code 201 but got 400\n   at Object.eval sandbox-script.js:1:108)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:2:108)"
            }
          },
          {
            "assertion": "response @context contains traceability/v1",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 2,
              "test": "response @context contains traceability/v1",
              "message": "Cannot read properties of undefined (reading '@context')",
              "stack": "TypeError: Cannot read properties of undefined (reading '@context')\n   at Object.eval sandbox-script.js:3:108)"
            }
          },
          {
            "assertion": "response credentialSubject.id matches request credential.credentialSubject.id",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 3,
              "test": "response credentialSubject.id matches request credential.credentialSubject.id",
              "message": "Cannot destructure property 'credentialSubject' of 'pm.response.json(...).verifiableCredential' as it is undefined.",
              "stack": "TypeError: Cannot destructure property 'credentialSubject' of 'pm.response.json(...).verifiableCredential' as it is undefined.\n   at Object.eval sandbox-script.js:4:108)"
            }
          }
        ]
      },
      {
        "id": "7c5954b5-9c1b-4b45-ae4b-bb3defb07553",
        "cursor": {
          "ref": "ce7c0728-26fe-4f97-95fd-782c31d12ed5",
          "length": 253,
          "cycles": 1,
          "position": 108,
          "iteration": 0,
          "httpRequestId": "2294b394-2f83-4002-bf58-715e31cbdef0"
        },
        "item": {
          "id": "7c5954b5-9c1b-4b45-ae4b-bb3defb07553",
          "name": "credentials_issue:options:opt.created"
        },
        "response": {
          "id": "04a52bac-2cf2-4cf3-9526-cfd1c2034d7b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 18,
          "responseSize": 95
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 400",
              "stack": "AssertionError: expected response to have status code 201 but got 400\n   at Object.eval sandbox-script.js:1:109)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:2:109)"
            }
          },
          {
            "assertion": "response @context contains traceability/v1",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 2,
              "test": "response @context contains traceability/v1",
              "message": "Cannot read properties of undefined (reading '@context')",
              "stack": "TypeError: Cannot read properties of undefined (reading '@context')\n   at Object.eval sandbox-script.js:3:109)"
            }
          },
          {
            "assertion": "response proof.created matches request options.created",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 3,
              "test": "response proof.created matches request options.created",
              "message": "Cannot read properties of undefined (reading 'proof')",
              "stack": "TypeError: Cannot read properties of undefined (reading 'proof')\n   at Object.eval sandbox-script.js:4:109)"
            }
          }
        ]
      },
      {
        "id": "3a11d219-9b6a-40d8-bb34-f0b3cae0ec8b",
        "cursor": {
          "ref": "506f9270-b7a9-4027-af65-efb95aa439b2",
          "length": 253,
          "cycles": 1,
          "position": 109,
          "iteration": 0,
          "httpRequestId": "b69b467f-0542-4599-bcc1-7f371563ff78"
        },
        "item": {
          "id": "3a11d219-9b6a-40d8-bb34-f0b3cae0ec8b",
          "name": "credentials_issue:options:opt.credentialStatus"
        },
        "response": {
          "id": "2da983df-e489-4cdd-9834-1315c7bc9eb2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 480
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 400",
              "stack": "AssertionError: expected response to have status code 201 but got 400\n   at Object.eval sandbox-script.js:1:110)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:2:110)"
            }
          },
          {
            "assertion": "response @context contains traceability/v1",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 2,
              "test": "response @context contains traceability/v1",
              "message": "Cannot read properties of undefined (reading '@context')",
              "stack": "TypeError: Cannot read properties of undefined (reading '@context')\n   at Object.eval sandbox-script.js:3:110)"
            }
          }
        ]
      },
      {
        "id": "44954586-2b63-46ee-a315-6cfcd2aba995",
        "cursor": {
          "ref": "3ffa31fd-3234-4579-95a6-f9ff5701eb26",
          "length": 253,
          "cycles": 1,
          "position": 110,
          "iteration": 0,
          "httpRequestId": "a9038e98-08c1-4093-85d8-dc1e64deaa5b"
        },
        "item": {
          "id": "44954586-2b63-46ee-a315-6cfcd2aba995",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "fe226f66-9cc4-4cce-b847-2c5ba717ee52",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "44954586-2b63-46ee-a315-6cfcd2aba995",
        "cursor": {
          "ref": "3ffa31fd-3234-4579-95a6-f9ff5701eb26",
          "length": 253,
          "cycles": 1,
          "position": 110,
          "iteration": 0,
          "httpRequestId": "a9038e98-08c1-4093-85d8-dc1e64deaa5b"
        },
        "item": {
          "id": "44954586-2b63-46ee-a315-6cfcd2aba995",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "fe226f66-9cc4-4cce-b847-2c5ba717ee52",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0db605fe-a7b3-4229-98c9-4f7160f34629",
        "cursor": {
          "ref": "d9d11d0f-ea29-4995-8814-3304495cc4d1",
          "length": 253,
          "cycles": 1,
          "position": 111,
          "iteration": 0,
          "httpRequestId": "672649ee-bdca-4465-b053-7c9d121f5689"
        },
        "item": {
          "id": "0db605fe-a7b3-4229-98c9-4f7160f34629",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "48c3aedc-b575-4fe2-8351-be65a4011144",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 12,
          "responseSize": 307
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "40b9177a-9914-40a9-bb86-5affc23f7141",
        "cursor": {
          "ref": "cdd80669-be35-462f-b223-7b278678f8c1",
          "length": 253,
          "cycles": 1,
          "position": 112,
          "iteration": 0,
          "httpRequestId": "192d144c-e343-49ca-a645-f3dc018a1ef2"
        },
        "item": {
          "id": "40b9177a-9914-40a9-bb86-5affc23f7141",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "17512226-bf98-4927-a1ef-a46e33dd7023",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 306
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0ef427e3-6256-4ea6-b2e6-d4eeaa3d8b66",
        "cursor": {
          "ref": "7e0a30fa-e8de-4c6e-91ff-44194179fbf7",
          "length": 253,
          "cycles": 1,
          "position": 113,
          "iteration": 0,
          "httpRequestId": "f68d39d6-9cbe-4965-b114-cb9f05856ba8"
        },
        "item": {
          "id": "0ef427e3-6256-4ea6-b2e6-d4eeaa3d8b66",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "9414b499-e867-47d5-8126-6d63de17cbc8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 308
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "848847a6-8b6e-4206-b5f8-40e1ceaee86d",
        "cursor": {
          "ref": "3bb7264d-0847-4ccc-b011-35217400d1f8",
          "length": 253,
          "cycles": 1,
          "position": 114,
          "iteration": 0,
          "httpRequestId": "7c49c5b1-241c-415d-8d62-acc302839488"
        },
        "item": {
          "id": "848847a6-8b6e-4206-b5f8-40e1ceaee86d",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "6702a168-b241-41a4-8aaf-6277c60e5474",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "81b9f691-d89d-49e2-a69d-c5abe065af2a",
        "cursor": {
          "ref": "3e460390-a568-4851-944c-f2222b1a1c0a",
          "length": 253,
          "cycles": 1,
          "position": 115,
          "iteration": 0,
          "httpRequestId": "f07b2740-4cee-40fa-84f1-5349f9b7866d"
        },
        "item": {
          "id": "81b9f691-d89d-49e2-a69d-c5abe065af2a",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "cc836b27-4c77-4dac-bfca-f9c6214129e1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 308
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "369b9dfc-0547-40e0-bebb-b49c7f09baec",
        "cursor": {
          "ref": "10297e85-4984-4ecc-87f7-f4a069df5756",
          "length": 253,
          "cycles": 1,
          "position": 116,
          "iteration": 0,
          "httpRequestId": "8783e3ff-0960-4cde-ba5d-ee5aaa60a6ed"
        },
        "item": {
          "id": "369b9dfc-0547-40e0-bebb-b49c7f09baec",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "b8fe74bd-c44c-4de9-ba1d-757c4efeabf5",
          "status": "OK",
          "code": 200,
          "responseTime": 9,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:117)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:117)"
            }
          }
        ]
      },
      {
        "id": "17aeb145-6c31-42d3-b109-f857eba165ea",
        "cursor": {
          "ref": "2f6e3652-db34-4967-aac4-d74fef4751f1",
          "length": 253,
          "cycles": 1,
          "position": 117,
          "iteration": 0,
          "httpRequestId": "ba8f6581-61e8-4cd7-b26d-803c90a60f62"
        },
        "item": {
          "id": "17aeb145-6c31-42d3-b109-f857eba165ea",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "5abf73fa-1b44-4953-b568-60dc3ec78148",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "021143c1-ea53-4d1d-8099-506c41b5d931",
        "cursor": {
          "ref": "6ad4ccba-8cdf-4812-ac16-867f3f0e6032",
          "length": 253,
          "cycles": 1,
          "position": 118,
          "iteration": 0,
          "httpRequestId": "640317b0-2f55-4637-9168-f375ba8cc350"
        },
        "item": {
          "id": "021143c1-ea53-4d1d-8099-506c41b5d931",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "101c406f-38bc-41cc-a0d8-a175c1d4c1fe",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 11,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3deb0437-57d5-45ff-a2dd-0cab42499edb",
        "cursor": {
          "ref": "e086d1a0-d227-4ee4-bbc4-d001552e664a",
          "length": 253,
          "cycles": 1,
          "position": 119,
          "iteration": 0,
          "httpRequestId": "cf246bd3-d245-44a5-a7c5-88b324fd8c26"
        },
        "item": {
          "id": "3deb0437-57d5-45ff-a2dd-0cab42499edb",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "364a98c8-8808-455c-971b-0c144bfec5f0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "40d6795b-23fe-457a-a17a-731b39bf3fb2",
        "cursor": {
          "ref": "64a7d2ed-7fa5-4bf7-bfb9-83564ea61c57",
          "length": 253,
          "cycles": 1,
          "position": 120,
          "iteration": 0,
          "httpRequestId": "c4e768c8-665b-4c7e-a95e-0fc569524b05"
        },
        "item": {
          "id": "40d6795b-23fe-457a-a17a-731b39bf3fb2",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "fa9117e4-27e1-4dfc-adba-91c80bc1a124",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4483e4b3-7f9d-4db9-b891-e0ac2d97d75a",
        "cursor": {
          "ref": "97e225b6-b71d-40ca-9862-cf8830d0e93f",
          "length": 253,
          "cycles": 1,
          "position": 121,
          "iteration": 0,
          "httpRequestId": "eb3cd2ff-8789-43e0-96d4-f80c3368bb6a"
        },
        "item": {
          "id": "4483e4b3-7f9d-4db9-b891-e0ac2d97d75a",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "e2d0816c-5a68-404d-9699-13c1b66aad82",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "50fbba48-b74d-40b5-b769-f55809bca75f",
        "cursor": {
          "ref": "8e232548-4eb4-4ced-b804-32e96551664b",
          "length": 253,
          "cycles": 1,
          "position": 122,
          "iteration": 0,
          "httpRequestId": "6970dcbc-6463-453c-b57f-ed6838e1962f"
        },
        "item": {
          "id": "50fbba48-b74d-40b5-b769-f55809bca75f",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "f3b144bf-f396-46f8-9281-2a4c3ea7cb9d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d18dfabd-2baa-456d-bb83-5e7b3ea07f18",
        "cursor": {
          "ref": "7dbcbfd8-3caa-45ac-aadb-9c8def33e0fb",
          "length": 253,
          "cycles": 1,
          "position": 123,
          "iteration": 0,
          "httpRequestId": "24e34689-5dab-4fa9-b5bc-8ecfee5ff982"
        },
        "item": {
          "id": "d18dfabd-2baa-456d-bb83-5e7b3ea07f18",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "8a1db6bd-e115-4844-a4c1-580099b66966",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "eaab58e8-0250-444a-83bf-f3b210a78ba2",
        "cursor": {
          "ref": "2947f418-8a58-494f-b2d6-751b2d7e3d3b",
          "length": 253,
          "cycles": 1,
          "position": 124,
          "iteration": 0,
          "httpRequestId": "121c38fd-c169-4c79-b3a3-cddf06c312c7"
        },
        "item": {
          "id": "eaab58e8-0250-444a-83bf-f3b210a78ba2",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "8115a65e-500d-427f-9522-4f3c4ca53309",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "44638cfd-28cc-4c7f-a5aa-103afdfedcb4",
        "cursor": {
          "ref": "451df877-f5d0-4b31-a201-36d433f508e4",
          "length": 253,
          "cycles": 1,
          "position": 125,
          "iteration": 0,
          "httpRequestId": "cde0d449-8dc3-43bc-9a26-6464a4dd8956"
        },
        "item": {
          "id": "44638cfd-28cc-4c7f-a5aa-103afdfedcb4",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "9c2bd4a6-e643-419e-bd5a-8d8662708e9e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5a5be615-e867-4a3c-a70c-4159defe58f1",
        "cursor": {
          "ref": "f0c8c12b-212a-46fe-a7a0-0cbcc91c71d8",
          "length": 253,
          "cycles": 1,
          "position": 126,
          "iteration": 0,
          "httpRequestId": "0dd0174f-3173-4424-91ef-7a0ad040f3e0"
        },
        "item": {
          "id": "5a5be615-e867-4a3c-a70c-4159defe58f1",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "20791a27-1c2b-4ab4-9afa-ff156489cb69",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "95586337-f461-4db2-88e7-04abb242fa87",
        "cursor": {
          "ref": "64ddb2e9-8d8d-40b8-8f93-de3ebffaf085",
          "length": 253,
          "cycles": 1,
          "position": 127,
          "iteration": 0,
          "httpRequestId": "c117000c-d7e3-40c1-b748-eb3086da1275"
        },
        "item": {
          "id": "95586337-f461-4db2-88e7-04abb242fa87",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "9488d40c-835e-4b2d-bae7-dce9945d2883",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a4b16d11-b14f-4901-8bfe-2ea95ceb20fa",
        "cursor": {
          "ref": "39ed9d91-6df7-4fcf-9a8c-f6336ae06374",
          "length": 253,
          "cycles": 1,
          "position": 128,
          "iteration": 0,
          "httpRequestId": "3c5ebf25-8739-4761-b7e7-f02b7fa92c5d"
        },
        "item": {
          "id": "a4b16d11-b14f-4901-8bfe-2ea95ceb20fa",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "27ef5594-ade0-462b-959f-ff29ceb3c33b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "79d152c7-b490-471d-8025-f7f9bd76425a",
        "cursor": {
          "ref": "0630cf1c-0c33-4e61-83c8-dee1253d3ab1",
          "length": 253,
          "cycles": 1,
          "position": 129,
          "iteration": 0,
          "httpRequestId": "7b467ca9-dd1e-4e62-b1bf-a8cec46292a0"
        },
        "item": {
          "id": "79d152c7-b490-471d-8025-f7f9bd76425a",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "ba1e7f19-2bcc-4c03-9077-a9eb42115ffd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3fa85a1f-8f40-46c5-8a2a-311573a4d7ed",
        "cursor": {
          "ref": "312d374b-3f0f-4928-be7b-7964fef5b032",
          "length": 253,
          "cycles": 1,
          "position": 130,
          "iteration": 0,
          "httpRequestId": "0adec100-6686-4661-80d4-3114bcec597d"
        },
        "item": {
          "id": "3fa85a1f-8f40-46c5-8a2a-311573a4d7ed",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "06de2fc6-b376-4cf4-9ba3-3fc0d20eb805",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "37169579-eb48-4b10-9ef5-b01909305516",
        "cursor": {
          "ref": "c5409f2f-c68c-42ab-b622-504caa1c911a",
          "length": 253,
          "cycles": 1,
          "position": 131,
          "iteration": 0,
          "httpRequestId": "d6c8b32d-fdcd-482f-aa81-91137712b736"
        },
        "item": {
          "id": "37169579-eb48-4b10-9ef5-b01909305516",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "3e7077e0-8b3d-47dd-8abb-5c42f0a34870",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3fec6819-7dac-46b0-a8f6-0dce04422c62",
        "cursor": {
          "ref": "11e41d06-b966-4e75-8bfb-2546a7680ab2",
          "length": 253,
          "cycles": 1,
          "position": 132,
          "iteration": 0,
          "httpRequestId": "e5628367-2661-4a8e-93ea-606254858756"
        },
        "item": {
          "id": "3fec6819-7dac-46b0-a8f6-0dce04422c62",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "65e973b0-13f6-4946-a9ed-dad276436328",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f7dcc7f8-f5eb-420c-b4c6-ae34cd315afb",
        "cursor": {
          "ref": "732403cc-ef1a-4070-9656-fa10307a9591",
          "length": 253,
          "cycles": 1,
          "position": 133,
          "iteration": 0,
          "httpRequestId": "28a8eb86-d2fe-440f-9f70-e06e28231433"
        },
        "item": {
          "id": "f7dcc7f8-f5eb-420c-b4c6-ae34cd315afb",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "5eb12a01-25a1-49c1-b619-54ed2edad144",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2fd30e3b-7005-47cb-88b4-d603bdce7428",
        "cursor": {
          "ref": "9804789e-a7a0-42c2-8507-d3fe45223357",
          "length": 253,
          "cycles": 1,
          "position": 134,
          "iteration": 0,
          "httpRequestId": "824f962d-bb8d-4ab3-a086-1a2423049e87"
        },
        "item": {
          "id": "2fd30e3b-7005-47cb-88b4-d603bdce7428",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "c3498f07-4af6-48c6-bfbc-c4fc9192b329",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4c5a12f3-fd1e-4dc5-b405-521dfed90777",
        "cursor": {
          "ref": "33118161-21cd-4b34-a88e-97683845694d",
          "length": 253,
          "cycles": 1,
          "position": 135,
          "iteration": 0,
          "httpRequestId": "952fe0ef-616c-4a7a-afce-eca5f63cfdb7"
        },
        "item": {
          "id": "4c5a12f3-fd1e-4dc5-b405-521dfed90777",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "4c9c67a4-a9c4-411f-9edf-b5479d49ced1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a26f6f29-fde3-4d00-a50b-f24c6f58632a",
        "cursor": {
          "ref": "f2fea489-5b40-4bfb-90c3-36371a29a231",
          "length": 253,
          "cycles": 1,
          "position": 136,
          "iteration": 0,
          "httpRequestId": "7a869c6d-314d-4da3-94ca-db331f9655e7"
        },
        "item": {
          "id": "a26f6f29-fde3-4d00-a50b-f24c6f58632a",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "70121566-c27b-4567-b56c-1aa54adb79db",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4cbd0593-3651-4b3e-aaa7-0c417b1a0d7b",
        "cursor": {
          "ref": "6a8cdf1f-1d40-421d-bc57-ff16188353ed",
          "length": 253,
          "cycles": 1,
          "position": 137,
          "iteration": 0,
          "httpRequestId": "b70f5c88-07cf-48fb-b637-43cbb2c6b030"
        },
        "item": {
          "id": "4cbd0593-3651-4b3e-aaa7-0c417b1a0d7b",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "01723e79-2503-4740-8af0-fb2dc82e6374",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "002f299c-2958-4e78-88d0-71d8c03a15bd",
        "cursor": {
          "ref": "fa448fac-0d77-477e-ab5c-f1c592993b45",
          "length": 253,
          "cycles": 1,
          "position": 138,
          "iteration": 0,
          "httpRequestId": "127629c4-58b5-4035-9862-b6d0b631f874"
        },
        "item": {
          "id": "002f299c-2958-4e78-88d0-71d8c03a15bd",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "52d18d8f-06c3-4348-b18b-d19b9b1f9de5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ef5aeef2-58f3-4f56-acff-86a28573e743",
        "cursor": {
          "ref": "de62b32c-2c4c-4d0b-adcf-2b105fa780f4",
          "length": 253,
          "cycles": 1,
          "position": 139,
          "iteration": 0,
          "httpRequestId": "3508cae0-d4b7-4870-a09b-54e560ba0bbc"
        },
        "item": {
          "id": "ef5aeef2-58f3-4f56-acff-86a28573e743",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "9f682430-bf92-4fa2-8d2a-e9304c3aefde",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "605c4936-1f01-4bea-aeb8-9acbc2d1aee4",
        "cursor": {
          "ref": "00d9b43e-dbb2-4ecd-b6e6-c95d1d7dc163",
          "length": 253,
          "cycles": 1,
          "position": 140,
          "iteration": 0,
          "httpRequestId": "eaf7682e-455a-498d-aaec-8ad657827e29"
        },
        "item": {
          "id": "605c4936-1f01-4bea-aeb8-9acbc2d1aee4",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "078c76ff-575a-4393-84c0-817801d03eb1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 17,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4e5a361e-93d7-4695-b340-e865e25af78a",
        "cursor": {
          "ref": "a5b80a44-df18-4dca-af63-0cecae012620",
          "length": 253,
          "cycles": 1,
          "position": 141,
          "iteration": 0,
          "httpRequestId": "294e09db-33af-4d54-923e-6281ec06d24d"
        },
        "item": {
          "id": "4e5a361e-93d7-4695-b340-e865e25af78a",
          "name": "credentials_status:credentialStatus:item:status:invalid"
        },
        "response": {
          "id": "10b4c39b-3da1-4d8d-aa6d-4a1e6044fa87",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e5e4a927-378a-44da-993a-63bb42a8b54f",
        "cursor": {
          "ref": "55ce477e-fb8a-47d2-914b-08551bb40118",
          "length": 253,
          "cycles": 1,
          "position": 142,
          "iteration": 0,
          "httpRequestId": "ff4475ae-d8ba-420f-9e11-8c450a6ce18a"
        },
        "item": {
          "id": "e5e4a927-378a-44da-993a-63bb42a8b54f",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "a969f1ee-165e-4599-a7e3-6102a2e9b5a9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 400",
              "stack": "AssertionError: expected response to have status code 401 but got 400\n   at Object.eval sandbox-script.js:1:143)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:143)"
            }
          }
        ]
      },
      {
        "id": "8b817fd4-3f57-4f6e-905f-43e0d4907e99",
        "cursor": {
          "ref": "f7e04244-6786-4d3b-8eb2-93f2eb8d4750",
          "length": 253,
          "cycles": 1,
          "position": 143,
          "iteration": 0,
          "httpRequestId": "7057f47a-4876-4590-abf5-87ff292185e2"
        },
        "item": {
          "id": "8b817fd4-3f57-4f6e-905f-43e0d4907e99",
          "name": "credentials_status:missing_scope:update_credentials"
        },
        "response": {
          "id": "12b70096-0a6f-452f-8339-09d62038586e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 400",
              "stack": "AssertionError: expected response to have status code 403 but got 400\n   at Object.eval sandbox-script.js:1:144)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:144)"
            }
          }
        ]
      },
      {
        "id": "45a42532-0d94-4394-b05c-92b1a78c4f30",
        "cursor": {
          "ref": "b8299ced-58be-44f3-8231-0d3a7bd7c420",
          "length": 253,
          "cycles": 1,
          "position": 144,
          "iteration": 0,
          "httpRequestId": "ded90348-6939-463d-81e4-c55ed2dde842"
        },
        "item": {
          "id": "45a42532-0d94-4394-b05c-92b1a78c4f30",
          "name": "credentials_verify:vc:missing"
        },
        "response": {
          "id": "065613a2-ac39-4f66-b7f4-283015086a4c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 11,
          "responseSize": 238
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "45a42532-0d94-4394-b05c-92b1a78c4f30",
        "cursor": {
          "ref": "b8299ced-58be-44f3-8231-0d3a7bd7c420",
          "length": 253,
          "cycles": 1,
          "position": 144,
          "iteration": 0,
          "httpRequestId": "ded90348-6939-463d-81e4-c55ed2dde842"
        },
        "item": {
          "id": "45a42532-0d94-4394-b05c-92b1a78c4f30",
          "name": "credentials_verify:vc:missing"
        },
        "response": {
          "id": "065613a2-ac39-4f66-b7f4-283015086a4c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 11,
          "responseSize": 238
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c635864b-d9c8-47d9-9dab-4fdbbc05760a",
        "cursor": {
          "ref": "a6e6d8a8-1bdd-4046-a72c-e18a9b32c56f",
          "length": 253,
          "cycles": 1,
          "position": 145,
          "iteration": 0,
          "httpRequestId": "f2d92a3c-3894-45d6-aa2e-2794d4029289"
        },
        "item": {
          "id": "c635864b-d9c8-47d9-9dab-4fdbbc05760a",
          "name": "credentials_verify:vc:string"
        },
        "response": {
          "id": "09b99edb-a123-4277-bbcb-f6fa11111a5a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fac10f98-d60d-48ad-bba7-7f6e2cf0b2da",
        "cursor": {
          "ref": "eddccfe6-6492-4f9a-8008-952f73f9ba64",
          "length": 253,
          "cycles": 1,
          "position": 146,
          "iteration": 0,
          "httpRequestId": "3439d1b9-fa8b-41a9-b390-ceed6f5f35ed"
        },
        "item": {
          "id": "fac10f98-d60d-48ad-bba7-7f6e2cf0b2da",
          "name": "credentials_verify:vc:null"
        },
        "response": {
          "id": "6cb2e9fa-ea4b-4beb-86f9-87b1a89f5e07",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7d567f94-1265-45d1-8fe0-9624c0c5518f",
        "cursor": {
          "ref": "9d4c7e2b-6a59-4229-a48c-cbaa011a4783",
          "length": 253,
          "cycles": 1,
          "position": 147,
          "iteration": 0,
          "httpRequestId": "5c85bbf0-cbf1-4f2c-9942-f17033d6185f"
        },
        "item": {
          "id": "7d567f94-1265-45d1-8fe0-9624c0c5518f",
          "name": "credentials_verify:vc:integer"
        },
        "response": {
          "id": "03354184-4139-43cd-923f-ab7ba12ebeeb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b01f4acb-a48e-4c1a-a74c-6ed23e828c59",
        "cursor": {
          "ref": "b226cd1a-92ab-45eb-93e5-e0759a216b52",
          "length": 253,
          "cycles": 1,
          "position": 148,
          "iteration": 0,
          "httpRequestId": "d691786a-06a9-4d38-9da8-f9ac87d63067"
        },
        "item": {
          "id": "b01f4acb-a48e-4c1a-a74c-6ed23e828c59",
          "name": "credentials_verify:vc:boolean"
        },
        "response": {
          "id": "54ac53c8-1974-4305-a57b-5496ba49396a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "eb0c0434-feac-4c66-9052-913455225629",
        "cursor": {
          "ref": "adce811a-3894-485c-8755-d2904464f8ed",
          "length": 253,
          "cycles": 1,
          "position": 149,
          "iteration": 0,
          "httpRequestId": "9779c316-1caa-4249-aae9-015ec68c16d2"
        },
        "item": {
          "id": "eb0c0434-feac-4c66-9052-913455225629",
          "name": "credentials_verify:vc:array"
        },
        "response": {
          "id": "8c574a17-446a-42d6-a901-76d8f2c70d1a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "98cf0ad9-f826-4ef2-aff6-3894ac91cf25",
        "cursor": {
          "ref": "d6b9e791-0f32-4973-b50a-d2b66fc9f67d",
          "length": 253,
          "cycles": 1,
          "position": 150,
          "iteration": 0,
          "httpRequestId": "2e7d02b7-6fd0-4ad7-a593-68f45e38770a"
        },
        "item": {
          "id": "98cf0ad9-f826-4ef2-aff6-3894ac91cf25",
          "name": "credentials_verify:vc:@context:missing"
        },
        "response": {
          "id": "c9548813-5ecc-4b17-ac19-ff3d57dea873",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d981c389-9ffe-4634-b8b1-df68fa873db1",
        "cursor": {
          "ref": "0657c12b-6dfc-431f-9799-46e96f15fb79",
          "length": 253,
          "cycles": 1,
          "position": 151,
          "iteration": 0,
          "httpRequestId": "d0829c93-36d6-49f4-8295-3aa5e8b353a1"
        },
        "item": {
          "id": "d981c389-9ffe-4634-b8b1-df68fa873db1",
          "name": "credentials_verify:vc:@context:boolean"
        },
        "response": {
          "id": "6dd7fe75-f380-4127-8fe7-4ebd5b1c8105",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "aae90061-d410-4829-b353-4f29e7cb64f0",
        "cursor": {
          "ref": "3748e78c-237b-4586-89c1-80b8ba67cd38",
          "length": 253,
          "cycles": 1,
          "position": 152,
          "iteration": 0,
          "httpRequestId": "34d3979c-a0fa-4099-b02f-fdc13278c94a"
        },
        "item": {
          "id": "aae90061-d410-4829-b353-4f29e7cb64f0",
          "name": "credentials_verify:vc:@context:integer"
        },
        "response": {
          "id": "0054b825-9daa-4b24-a575-7dd650832901",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c770002f-2172-4e99-8d2f-c87bb76ee6f5",
        "cursor": {
          "ref": "47d7656e-3087-49ae-8d7d-c88e2f070f13",
          "length": 253,
          "cycles": 1,
          "position": 153,
          "iteration": 0,
          "httpRequestId": "fb682a2b-1747-4217-8e09-2ca8a41dbc68"
        },
        "item": {
          "id": "c770002f-2172-4e99-8d2f-c87bb76ee6f5",
          "name": "credentials_verify:vc:@context:null"
        },
        "response": {
          "id": "89dafe2c-8f8a-421c-9f59-52f59a8587a4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fdbb166c-8bd3-4d1f-a466-e4794fb67863",
        "cursor": {
          "ref": "138cae88-44c5-4ce9-98bd-05b1e15bf527",
          "length": 253,
          "cycles": 1,
          "position": 154,
          "iteration": 0,
          "httpRequestId": "bd85548c-d256-48ab-90cf-97c698029690"
        },
        "item": {
          "id": "fdbb166c-8bd3-4d1f-a466-e4794fb67863",
          "name": "credentials_verify:vc:@context:object"
        },
        "response": {
          "id": "f5618993-5419-44cd-a679-5bd5d53342f6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b4fb7eb8-4f91-4ca5-bbf0-8af7cf9cf011",
        "cursor": {
          "ref": "e3bea061-91f2-46e6-98d1-d4278dabb685",
          "length": 253,
          "cycles": 1,
          "position": 155,
          "iteration": 0,
          "httpRequestId": "100eeff0-1479-478b-9956-5d80c8c7d2e7"
        },
        "item": {
          "id": "b4fb7eb8-4f91-4ca5-bbf0-8af7cf9cf011",
          "name": "credentials_verify:vc:@context:string"
        },
        "response": {
          "id": "2c0c8b71-8e1c-4561-a6ad-a6e8770ceac3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "230df06d-8935-4025-83af-8c20eb9b6b44",
        "cursor": {
          "ref": "2302f8e0-5515-4ba9-8f26-95cbdba86454",
          "length": 253,
          "cycles": 1,
          "position": 156,
          "iteration": 0,
          "httpRequestId": "6b11ab4a-c180-4202-9796-143ac7f594e3"
        },
        "item": {
          "id": "230df06d-8935-4025-83af-8c20eb9b6b44",
          "name": "credentials_verify:vc:@context:item:array"
        },
        "response": {
          "id": "cb75446c-3823-48f8-ab5a-181f52561179",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6e5c1a9a-86da-469b-8624-f0c8868572a9",
        "cursor": {
          "ref": "a7b7383f-1e37-486d-96d1-3f6c5a8a848b",
          "length": 253,
          "cycles": 1,
          "position": 157,
          "iteration": 0,
          "httpRequestId": "eb3ad50f-c29c-497f-9386-fa97de6839e8"
        },
        "item": {
          "id": "6e5c1a9a-86da-469b-8624-f0c8868572a9",
          "name": "credentials_verify:vc:@context:item:boolean"
        },
        "response": {
          "id": "36699f4d-13a5-4e86-a622-7b74277e203f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "98881233-1d3c-482c-a6e0-07fa6fc3885d",
        "cursor": {
          "ref": "99820f13-9759-43bf-a641-560ae8543ee7",
          "length": 253,
          "cycles": 1,
          "position": 158,
          "iteration": 0,
          "httpRequestId": "35f0d5a8-25ca-4946-bca4-3e3f6d77807a"
        },
        "item": {
          "id": "98881233-1d3c-482c-a6e0-07fa6fc3885d",
          "name": "credentials_verify:vc:@context:item:integer"
        },
        "response": {
          "id": "b2d448f3-17f3-4d28-b96c-30ceebf7a6ca",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3df0e815-29e4-4076-b6b6-c40c51dd975b",
        "cursor": {
          "ref": "1076df8b-7fbf-45ba-affc-67edd2367bb4",
          "length": 253,
          "cycles": 1,
          "position": 159,
          "iteration": 0,
          "httpRequestId": "71dbf5de-27e5-4753-b679-cb6e3b800c2b"
        },
        "item": {
          "id": "3df0e815-29e4-4076-b6b6-c40c51dd975b",
          "name": "credentials_verify:vc:@context:item:null"
        },
        "response": {
          "id": "c913a735-d369-4be8-8c14-bfc8a6d3135f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2b4061f0-1191-4370-8784-c5dda8a0f8e5",
        "cursor": {
          "ref": "79342f9b-a8d2-4d66-b338-7194753b1ca7",
          "length": 253,
          "cycles": 1,
          "position": 160,
          "iteration": 0,
          "httpRequestId": "9da3f6a7-414d-472d-91c2-f137e352276f"
        },
        "item": {
          "id": "2b4061f0-1191-4370-8784-c5dda8a0f8e5",
          "name": "credentials_verify:vc:@context:item:object"
        },
        "response": {
          "id": "d8b3b4f4-1767-4c2d-8401-bd94721c81b7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ae8dee89-d447-4a8c-a084-b2cb68c6691d",
        "cursor": {
          "ref": "7a704cab-9134-44b2-8e1c-20b9c4f9bd5c",
          "length": 253,
          "cycles": 1,
          "position": 161,
          "iteration": 0,
          "httpRequestId": "22d28684-5432-42f5-81fd-d9aa7d1cc630"
        },
        "item": {
          "id": "ae8dee89-d447-4a8c-a084-b2cb68c6691d",
          "name": "credentials_verify:vc:id:missing"
        },
        "response": {
          "id": "803bd3a4-02e1-4a05-ba1f-7a2c66920f58",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2af384a9-f28f-4e29-8538-b7d40d270751",
        "cursor": {
          "ref": "d9fc2351-0e5b-4863-b523-010c3c085560",
          "length": 253,
          "cycles": 1,
          "position": 162,
          "iteration": 0,
          "httpRequestId": "8c983c9e-4dda-47e1-83a5-7044e85cda0a"
        },
        "item": {
          "id": "2af384a9-f28f-4e29-8538-b7d40d270751",
          "name": "credentials_verify:vc:id:array"
        },
        "response": {
          "id": "931b943f-cc83-43e0-a359-c1f2943441b3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "25cec9e3-50f1-48d1-a8e5-a9f4856ae1e7",
        "cursor": {
          "ref": "77f88b9e-7fa0-4576-832a-9a3f7e4d345b",
          "length": 253,
          "cycles": 1,
          "position": 163,
          "iteration": 0,
          "httpRequestId": "e6dac6b3-6c8b-439d-bdd1-8d696c1e4d78"
        },
        "item": {
          "id": "25cec9e3-50f1-48d1-a8e5-a9f4856ae1e7",
          "name": "credentials_verify:vc:id:boolean"
        },
        "response": {
          "id": "c588a650-6a35-44e8-bbc7-d9419d3877aa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a8c67c2e-e1e1-470a-bf15-42045c9d4e99",
        "cursor": {
          "ref": "8a5a2725-1486-4f76-823e-2ecfc0330f9d",
          "length": 253,
          "cycles": 1,
          "position": 164,
          "iteration": 0,
          "httpRequestId": "6676caa4-6f22-47ec-a187-a4075ce0ecaa"
        },
        "item": {
          "id": "a8c67c2e-e1e1-470a-bf15-42045c9d4e99",
          "name": "credentials_verify:vc:id:integer"
        },
        "response": {
          "id": "89dedda4-e6db-4211-b704-35204500176d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e287bc43-360d-4580-9f02-2bfd0f1d8a53",
        "cursor": {
          "ref": "28df306d-a220-47be-b9dc-b4d76be78a78",
          "length": 253,
          "cycles": 1,
          "position": 165,
          "iteration": 0,
          "httpRequestId": "d0a7a8ed-ab49-4549-bddc-6afc7df084dc"
        },
        "item": {
          "id": "e287bc43-360d-4580-9f02-2bfd0f1d8a53",
          "name": "credentials_verify:vc:id:null"
        },
        "response": {
          "id": "b6d94a29-5bfc-48b0-bc3f-6649bd9f873f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d94ab817-58c6-4df2-ae5f-c4dc40920029",
        "cursor": {
          "ref": "8d9a73db-9b00-4650-9a73-e87d8283bf90",
          "length": 253,
          "cycles": 1,
          "position": 166,
          "iteration": 0,
          "httpRequestId": "bda614dc-7ca6-48de-b778-915caad115f9"
        },
        "item": {
          "id": "d94ab817-58c6-4df2-ae5f-c4dc40920029",
          "name": "credentials_verify:vc:id:object"
        },
        "response": {
          "id": "2d21c6cf-9b8d-4fb1-8faf-3a685d3c50e5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "17236ac8-00a4-40d9-9974-11d9ac8d91a0",
        "cursor": {
          "ref": "4d53fb39-8623-4e4c-b945-d53e76da278a",
          "length": 253,
          "cycles": 1,
          "position": 167,
          "iteration": 0,
          "httpRequestId": "ee3d370b-3d36-46dd-9c36-ae5bb65d50bc"
        },
        "item": {
          "id": "17236ac8-00a4-40d9-9974-11d9ac8d91a0",
          "name": "credentials_verify:vc:type:missing"
        },
        "response": {
          "id": "c5f1e2d5-9827-49d4-a745-6f1b008af5c1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d4a0ecfe-2f71-447b-9861-0f495c4d94bf",
        "cursor": {
          "ref": "451ea54d-5cef-44d3-ac7e-48e07f6cebd2",
          "length": 253,
          "cycles": 1,
          "position": 168,
          "iteration": 0,
          "httpRequestId": "b2fc5756-ecc8-442b-bd28-9fa2cd9870ec"
        },
        "item": {
          "id": "d4a0ecfe-2f71-447b-9861-0f495c4d94bf",
          "name": "credentials_verify:vc:type:boolean"
        },
        "response": {
          "id": "dde68206-7480-449b-bfb9-1ae6369368e4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5de3f122-b85b-460f-94e5-d51362f079fd",
        "cursor": {
          "ref": "e971e2b9-56f1-48e0-ad8c-1d7efae0256b",
          "length": 253,
          "cycles": 1,
          "position": 169,
          "iteration": 0,
          "httpRequestId": "64485996-f8fc-4c67-93db-2858454b230b"
        },
        "item": {
          "id": "5de3f122-b85b-460f-94e5-d51362f079fd",
          "name": "credentials_verify:vc:type:integer"
        },
        "response": {
          "id": "22e53c72-247e-4779-bf79-c687beacfb50",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0dfa2ef5-4fb3-41a3-953e-721441f4e6d8",
        "cursor": {
          "ref": "6e2ffedd-78d3-44ce-9957-bc4122faa615",
          "length": 253,
          "cycles": 1,
          "position": 170,
          "iteration": 0,
          "httpRequestId": "eda2e89a-3dc5-4ddf-8002-f601fd9436dd"
        },
        "item": {
          "id": "0dfa2ef5-4fb3-41a3-953e-721441f4e6d8",
          "name": "credentials_verify:vc:type:null"
        },
        "response": {
          "id": "a068de16-b687-40aa-99e9-30754c22aab1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "50e7e882-3783-4449-acc0-0a4afecae150",
        "cursor": {
          "ref": "165e1466-5758-4012-b481-c44621271b67",
          "length": 253,
          "cycles": 1,
          "position": 171,
          "iteration": 0,
          "httpRequestId": "5725decc-11f4-4ff2-9405-34737a12310a"
        },
        "item": {
          "id": "50e7e882-3783-4449-acc0-0a4afecae150",
          "name": "credentials_verify:vc:type:object"
        },
        "response": {
          "id": "a47bf944-af7c-4850-a0fa-6e2bc4650ce3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "efdfa06f-f119-429d-a1e9-ff894449542c",
        "cursor": {
          "ref": "2553ece5-cec9-4485-831a-49eaff211315",
          "length": 253,
          "cycles": 1,
          "position": 172,
          "iteration": 0,
          "httpRequestId": "5aeec824-fc84-4925-a1e5-0c13f8c9319b"
        },
        "item": {
          "id": "efdfa06f-f119-429d-a1e9-ff894449542c",
          "name": "credentials_verify:vc:type:string"
        },
        "response": {
          "id": "32ba6fbe-562c-44ac-b66d-d45d8d359692",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a907a602-6030-4afa-bf57-d9b0ff8310ef",
        "cursor": {
          "ref": "b8aed23b-0f0d-4009-9e73-41bc768d7372",
          "length": 253,
          "cycles": 1,
          "position": 173,
          "iteration": 0,
          "httpRequestId": "fa0e219c-2892-4a61-a1e6-8b7ca15c5d1a"
        },
        "item": {
          "id": "a907a602-6030-4afa-bf57-d9b0ff8310ef",
          "name": "credentials_verify:vc:type:item:missing"
        },
        "response": {
          "id": "1800ca71-7e64-41dc-85bf-dbaa6950c215",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "181fee59-bb7a-46ee-b635-9c65336772b4",
        "cursor": {
          "ref": "6f42717f-3542-4bc8-9071-21b8b40f0421",
          "length": 253,
          "cycles": 1,
          "position": 174,
          "iteration": 0,
          "httpRequestId": "a446898c-d8a6-4005-aba3-663ba774a653"
        },
        "item": {
          "id": "181fee59-bb7a-46ee-b635-9c65336772b4",
          "name": "credentials_verify:vc:type:item:array"
        },
        "response": {
          "id": "7a6384a3-7dae-46f3-9989-40981630fb51",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "52a0a49a-aa55-4f14-b9b9-8c8ee65f0f5b",
        "cursor": {
          "ref": "3ca38da6-2326-4132-bdb0-762cc7a53b9c",
          "length": 253,
          "cycles": 1,
          "position": 175,
          "iteration": 0,
          "httpRequestId": "e1e7155f-3270-4259-88a8-521e5dbfb7ce"
        },
        "item": {
          "id": "52a0a49a-aa55-4f14-b9b9-8c8ee65f0f5b",
          "name": "credentials_verify:vc:type:item:boolean"
        },
        "response": {
          "id": "127e3ad9-4e35-4d28-8560-54c44798e27a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d1076791-8025-4946-923f-12c901f8e1f5",
        "cursor": {
          "ref": "c96cbc6c-00c0-4c1a-bc2a-11622ffab53d",
          "length": 253,
          "cycles": 1,
          "position": 176,
          "iteration": 0,
          "httpRequestId": "d3969c90-cf8d-46f4-9000-2ad5a0d2510c"
        },
        "item": {
          "id": "d1076791-8025-4946-923f-12c901f8e1f5",
          "name": "credentials_verify:vc:type:item:integer"
        },
        "response": {
          "id": "e12ffe6c-477f-425e-a209-7665de607335",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0de19cc8-8f49-418a-b945-645bc1aec88d",
        "cursor": {
          "ref": "37700335-a7d8-40e9-86bd-db18616aecd9",
          "length": 253,
          "cycles": 1,
          "position": 177,
          "iteration": 0,
          "httpRequestId": "13800055-8aa7-456f-a0b2-127b433ea1eb"
        },
        "item": {
          "id": "0de19cc8-8f49-418a-b945-645bc1aec88d",
          "name": "credentials_verify:vc:type:item:null"
        },
        "response": {
          "id": "a9b6df08-0dc1-4f83-99e8-7bf9a5612a48",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2848a268-b991-4dc7-891c-4d34bcbc3f57",
        "cursor": {
          "ref": "9b49db8d-6058-4852-9275-2151f0ace803",
          "length": 253,
          "cycles": 1,
          "position": 178,
          "iteration": 0,
          "httpRequestId": "d28cc446-2bf1-45c3-b6bb-4bbc233445f4"
        },
        "item": {
          "id": "2848a268-b991-4dc7-891c-4d34bcbc3f57",
          "name": "credentials_verify:vc:type:item:object"
        },
        "response": {
          "id": "f7e79fb9-0274-4cf5-b35f-c2699b2e32e6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ced6dfc0-999f-485d-b345-77d0ead27233",
        "cursor": {
          "ref": "21046be5-e61a-4a39-9cbc-1f957a4efebd",
          "length": 253,
          "cycles": 1,
          "position": 179,
          "iteration": 0,
          "httpRequestId": "2a4ba3e3-937e-4682-95c6-fb08d2f1c629"
        },
        "item": {
          "id": "ced6dfc0-999f-485d-b345-77d0ead27233",
          "name": "credentials_verify:vc:issuer:missing"
        },
        "response": {
          "id": "9a16222a-e807-4a1a-8844-e4e3c4ec19ec",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7582847a-cd6f-46b2-9f36-b05e957d663b",
        "cursor": {
          "ref": "4e2b6a58-7e7b-4426-a3b0-f2e004cd5cd9",
          "length": 253,
          "cycles": 1,
          "position": 180,
          "iteration": 0,
          "httpRequestId": "c01f0d5a-64df-4c25-9580-10c744572c5d"
        },
        "item": {
          "id": "7582847a-cd6f-46b2-9f36-b05e957d663b",
          "name": "credentials_verify:vc:issuer:array"
        },
        "response": {
          "id": "5b83fd34-4e96-4c42-bd73-6236e2ef8073",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "55bea0d8-5fb5-456e-a251-bb2af99c0a7c",
        "cursor": {
          "ref": "5afcc9e8-5eb2-4437-889e-42fd29622902",
          "length": 253,
          "cycles": 1,
          "position": 181,
          "iteration": 0,
          "httpRequestId": "cdc62bc2-9208-49be-b3f3-5da2fc7dc5cc"
        },
        "item": {
          "id": "55bea0d8-5fb5-456e-a251-bb2af99c0a7c",
          "name": "credentials_verify:vc:issuer:boolean"
        },
        "response": {
          "id": "79628f9e-a2e4-44df-8b67-15981a7bcf3e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9cb48e0e-9e40-473f-85de-12014ba5e3ee",
        "cursor": {
          "ref": "9a148c0e-95a0-4c9f-8d2a-37801a2c4cea",
          "length": 253,
          "cycles": 1,
          "position": 182,
          "iteration": 0,
          "httpRequestId": "da54c297-5e17-4874-8494-f9a89912811f"
        },
        "item": {
          "id": "9cb48e0e-9e40-473f-85de-12014ba5e3ee",
          "name": "credentials_verify:vc:issuer:integer"
        },
        "response": {
          "id": "5425d939-15fe-4a6d-846e-5b1c21d7b9a4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "63212b4f-e26d-456a-8be9-b6d6aee9c269",
        "cursor": {
          "ref": "b0885f07-6bce-4ec9-9736-72000c4d7c6e",
          "length": 253,
          "cycles": 1,
          "position": 183,
          "iteration": 0,
          "httpRequestId": "8c9efa80-72f2-43ab-a870-dc9a97bca59d"
        },
        "item": {
          "id": "63212b4f-e26d-456a-8be9-b6d6aee9c269",
          "name": "credentials_verify:vc:issuer:null"
        },
        "response": {
          "id": "9ae9373d-2f68-462b-8584-b0e256c7b123",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "23b3a6ff-07ea-43a7-a3c8-9bc8aa7f1237",
        "cursor": {
          "ref": "7870b710-14ae-4fe6-acc2-649140026d3c",
          "length": 253,
          "cycles": 1,
          "position": 184,
          "iteration": 0,
          "httpRequestId": "738c6a5b-92d3-4f8d-9976-d2acf5c1d313"
        },
        "item": {
          "id": "23b3a6ff-07ea-43a7-a3c8-9bc8aa7f1237",
          "name": "credentials_verify:vc:issuer:id:missing"
        },
        "response": {
          "id": "22fdf12b-7678-4651-8db8-b70a863b6594",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "415a101c-16f8-4c73-96c8-42afb5049daa",
        "cursor": {
          "ref": "63f93b97-3da1-422c-9aba-3eb0555512ab",
          "length": 253,
          "cycles": 1,
          "position": 185,
          "iteration": 0,
          "httpRequestId": "558f4320-0aba-45d1-b2cb-ab8f3f0bbfda"
        },
        "item": {
          "id": "415a101c-16f8-4c73-96c8-42afb5049daa",
          "name": "credentials_verify:vc:issuer:id:array"
        },
        "response": {
          "id": "5eca39a9-40e9-4956-a8c3-b8a590f08e72",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "afa1414c-e511-427d-af95-e233c0bb4052",
        "cursor": {
          "ref": "54e17bbb-a19b-423e-9750-23866ba5afd5",
          "length": 253,
          "cycles": 1,
          "position": 186,
          "iteration": 0,
          "httpRequestId": "3b6bce21-2930-4b01-a341-74d54c890cd4"
        },
        "item": {
          "id": "afa1414c-e511-427d-af95-e233c0bb4052",
          "name": "credentials_verify:vc:issuer:id:boolean"
        },
        "response": {
          "id": "6971d00f-d82a-49bc-9530-1bd0e8aaa931",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f318a7d1-256d-4784-a3cc-0c81d5e91c37",
        "cursor": {
          "ref": "10e2870d-7eca-46ed-9ac9-de737e9b5594",
          "length": 253,
          "cycles": 1,
          "position": 187,
          "iteration": 0,
          "httpRequestId": "57745440-c41d-453c-bbb2-54cc07da8522"
        },
        "item": {
          "id": "f318a7d1-256d-4784-a3cc-0c81d5e91c37",
          "name": "credentials_verify:vc:issuer:id:integer"
        },
        "response": {
          "id": "b0cad9cb-9a68-4b39-908a-b04b6354aa39",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f00b76ca-fe2d-41d0-b646-a476dc4c7620",
        "cursor": {
          "ref": "e8304fb7-e7f2-412c-83b2-d793e153a19c",
          "length": 253,
          "cycles": 1,
          "position": 188,
          "iteration": 0,
          "httpRequestId": "2d99a5f6-73ad-4a6c-a224-43700a222792"
        },
        "item": {
          "id": "f00b76ca-fe2d-41d0-b646-a476dc4c7620",
          "name": "credentials_verify:vc:issuer:id:null"
        },
        "response": {
          "id": "a09b481e-e062-476f-a54d-bec7d6ace5b5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "96716963-c03c-4e68-b643-cb36f1a6e08e",
        "cursor": {
          "ref": "9d5a495e-f76d-46bb-b309-2a12d323b418",
          "length": 253,
          "cycles": 1,
          "position": 189,
          "iteration": 0,
          "httpRequestId": "942a12f6-4efd-421b-a827-fd0355cf95e5"
        },
        "item": {
          "id": "96716963-c03c-4e68-b643-cb36f1a6e08e",
          "name": "credentials_verify:vc:issuer:id:object"
        },
        "response": {
          "id": "35e2bbc6-4ab8-4561-95bb-48406d34fc8d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ac4381c9-fe3a-41f6-9901-188234641b3d",
        "cursor": {
          "ref": "dccd6059-6849-48c4-9306-408f31a04013",
          "length": 253,
          "cycles": 1,
          "position": 190,
          "iteration": 0,
          "httpRequestId": "9b66dc0d-1dcb-4307-9d29-ecb279f3a0d2"
        },
        "item": {
          "id": "ac4381c9-fe3a-41f6-9901-188234641b3d",
          "name": "credentials_verify:vc:issuanceDate:missing"
        },
        "response": {
          "id": "2241170e-90a1-46b6-ad00-d44b40f8a1b1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a08288ed-48d2-4696-b618-b7e56732100f",
        "cursor": {
          "ref": "9433c52d-6597-461b-ad00-ea1601510480",
          "length": 253,
          "cycles": 1,
          "position": 191,
          "iteration": 0,
          "httpRequestId": "f5e37753-fa17-4d41-9f34-bb2ec60f92a2"
        },
        "item": {
          "id": "a08288ed-48d2-4696-b618-b7e56732100f",
          "name": "credentials_verify:vc:issuanceDate:array"
        },
        "response": {
          "id": "6f2b6ba7-7947-44e5-b037-45f307cadcb9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "62178441-94ba-418d-be8e-e6fd9d634a28",
        "cursor": {
          "ref": "3aff156a-d463-41b9-8601-7c5b865c9839",
          "length": 253,
          "cycles": 1,
          "position": 192,
          "iteration": 0,
          "httpRequestId": "db8371d2-e657-4754-88b4-4e76c0c54d9a"
        },
        "item": {
          "id": "62178441-94ba-418d-be8e-e6fd9d634a28",
          "name": "credentials_verify:vc:issuanceDate:boolean"
        },
        "response": {
          "id": "f251df03-715b-456a-b8a5-3e732a572109",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2052a842-661b-4d72-aeb8-374117b03869",
        "cursor": {
          "ref": "6215d0be-64ab-4ad5-9d78-dbcd9a861cb9",
          "length": 253,
          "cycles": 1,
          "position": 193,
          "iteration": 0,
          "httpRequestId": "2f456e95-622a-494e-9cd2-616ee29b54b2"
        },
        "item": {
          "id": "2052a842-661b-4d72-aeb8-374117b03869",
          "name": "credentials_verify:vc:issuanceDate:integer"
        },
        "response": {
          "id": "c9283019-79fc-4fee-9a2c-b40cc9a104ee",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dbc993c0-e664-4f5f-b55a-edfd22fbfc9a",
        "cursor": {
          "ref": "c640a818-9042-457e-ab66-73dd7b2d35ce",
          "length": 253,
          "cycles": 1,
          "position": 194,
          "iteration": 0,
          "httpRequestId": "98749390-68cc-4a38-badf-512ba3ed9d34"
        },
        "item": {
          "id": "dbc993c0-e664-4f5f-b55a-edfd22fbfc9a",
          "name": "credentials_verify:vc:issuanceDate:null"
        },
        "response": {
          "id": "fb60c5b3-d670-450a-ad6a-a70daf29c566",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a80b1a9b-b149-4b74-b4c8-615e1caaf44f",
        "cursor": {
          "ref": "e76eab7d-ae87-46af-a6d1-049ee3b09b56",
          "length": 253,
          "cycles": 1,
          "position": 195,
          "iteration": 0,
          "httpRequestId": "37341ab1-1ff0-4b26-afe1-8821276e4815"
        },
        "item": {
          "id": "a80b1a9b-b149-4b74-b4c8-615e1caaf44f",
          "name": "credentials_verify:vc:issuanceDate:object"
        },
        "response": {
          "id": "320f532f-b590-4a2f-b708-dc5d7d2e3e64",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ede96cba-8f2f-40b4-9dc5-70785f531c0c",
        "cursor": {
          "ref": "be158754-3be1-4d77-9c4d-5ee34283579f",
          "length": 253,
          "cycles": 1,
          "position": 196,
          "iteration": 0,
          "httpRequestId": "ac6ac42b-1e68-42bf-922a-90520feece78"
        },
        "item": {
          "id": "ede96cba-8f2f-40b4-9dc5-70785f531c0c",
          "name": "credentials_verify:vc:issuanceDate:string"
        },
        "response": {
          "id": "90658713-0397-4a20-a547-ac981fc4f732",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 14,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "00f43a5f-4f43-40e6-922f-5997e0e14df4",
        "cursor": {
          "ref": "65e91a1e-9dfc-4c21-886b-b699ce7bd35f",
          "length": 253,
          "cycles": 1,
          "position": 197,
          "iteration": 0,
          "httpRequestId": "f2828394-5986-46f6-8101-10d1af185aaa"
        },
        "item": {
          "id": "00f43a5f-4f43-40e6-922f-5997e0e14df4",
          "name": "credentials_verify:vc:credentialSubject:missing"
        },
        "response": {
          "id": "9b59a118-40e4-457a-9f4b-15cf17571b72",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "29dd530c-b036-4a9d-a63a-6bb5e660e00e",
        "cursor": {
          "ref": "47919a88-2e58-45da-95a8-73323cc393ab",
          "length": 253,
          "cycles": 1,
          "position": 198,
          "iteration": 0,
          "httpRequestId": "042aa8be-b9c3-4bc1-acbb-cfe69d828ecb"
        },
        "item": {
          "id": "29dd530c-b036-4a9d-a63a-6bb5e660e00e",
          "name": "credentials_verify:vc:credentialSubject:array"
        },
        "response": {
          "id": "fd98916e-c734-4650-b04d-8b6603e96e87",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b6c8f8c5-688c-489d-9130-980dd7fcc737",
        "cursor": {
          "ref": "f5eea245-58c8-4191-8973-b3736ffd1ce0",
          "length": 253,
          "cycles": 1,
          "position": 199,
          "iteration": 0,
          "httpRequestId": "975922de-8fde-4cf3-9d09-f4e1cc3cab18"
        },
        "item": {
          "id": "b6c8f8c5-688c-489d-9130-980dd7fcc737",
          "name": "credentials_verify:vc:credentialSubject:boolean"
        },
        "response": {
          "id": "2441cf4f-be77-4756-a43c-5ce2b1bec09d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "58d08dde-4d3a-457c-b066-5b1b07f04c5c",
        "cursor": {
          "ref": "c0bc6cc7-295f-4e0e-8d3c-994eb6736b44",
          "length": 253,
          "cycles": 1,
          "position": 200,
          "iteration": 0,
          "httpRequestId": "34ec9a0d-af67-485b-9fcf-a11a93009ce4"
        },
        "item": {
          "id": "58d08dde-4d3a-457c-b066-5b1b07f04c5c",
          "name": "credentials_verify:vc:credentialSubject:integer"
        },
        "response": {
          "id": "97beb348-2c26-4cb5-9515-475569f0f6dd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "db154d9c-320c-47a8-b7d5-be91490749c5",
        "cursor": {
          "ref": "f4dc438b-c3cc-47ee-8e11-6895f6118529",
          "length": 253,
          "cycles": 1,
          "position": 201,
          "iteration": 0,
          "httpRequestId": "d8c79b72-c4d2-4d1c-8fa9-168f439c9579"
        },
        "item": {
          "id": "db154d9c-320c-47a8-b7d5-be91490749c5",
          "name": "credentials_verify:vc:credentialSubject:null"
        },
        "response": {
          "id": "c83d746b-fb2a-4214-81ce-4ce91c7cb0e5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "14fcca4f-5763-4867-b5d3-450b665bb364",
        "cursor": {
          "ref": "4880fa33-6dd7-4e95-865a-7b212cd88801",
          "length": 253,
          "cycles": 1,
          "position": 202,
          "iteration": 0,
          "httpRequestId": "73365280-8384-46cb-b5bd-78e1e00d7e73"
        },
        "item": {
          "id": "14fcca4f-5763-4867-b5d3-450b665bb364",
          "name": "credentials_verify:vc:credentialSubject:string"
        },
        "response": {
          "id": "582fc991-5daf-40eb-8cde-61422aff695f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 25,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e8c93342-3ef2-434d-9fc4-c7dfcdbd0f4f",
        "cursor": {
          "ref": "9ecb3859-a086-4c56-bf89-1afe81ed8a24",
          "length": 253,
          "cycles": 1,
          "position": 203,
          "iteration": 0,
          "httpRequestId": "dbf796ef-9c20-41b9-bc53-09a17db57fba"
        },
        "item": {
          "id": "e8c93342-3ef2-434d-9fc4-c7dfcdbd0f4f",
          "name": "credentials_verify:vc:credentialSubject:id:array"
        },
        "response": {
          "id": "e966db4a-239c-4e83-ab6c-d4c0ba66b836",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e9bfcd01-9fec-4df7-adeb-9e1011cd709b",
        "cursor": {
          "ref": "58566635-a772-45a0-a865-30398e4abe5a",
          "length": 253,
          "cycles": 1,
          "position": 204,
          "iteration": 0,
          "httpRequestId": "31d15d89-a1a4-4cef-9bd5-9ef0313b80b4"
        },
        "item": {
          "id": "e9bfcd01-9fec-4df7-adeb-9e1011cd709b",
          "name": "credentials_verify:vc:credentialSubject:id:boolean"
        },
        "response": {
          "id": "193b7c26-41c9-46ac-955d-1eb7e131c758",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "662207b5-a8c6-4ec5-b74d-fc1b4c93add2",
        "cursor": {
          "ref": "3ed7f359-40f8-488c-ac53-2c824a91d58a",
          "length": 253,
          "cycles": 1,
          "position": 205,
          "iteration": 0,
          "httpRequestId": "aab421f8-c40a-46ce-8759-3eed07f66b19"
        },
        "item": {
          "id": "662207b5-a8c6-4ec5-b74d-fc1b4c93add2",
          "name": "credentials_verify:vc:credentialSubject:id:integer"
        },
        "response": {
          "id": "24a62eed-1033-4138-a839-5bf7f7dc7160",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "80e9883d-cc28-4961-b666-ee828372f2ec",
        "cursor": {
          "ref": "89c9b380-a330-47f8-9ced-4feaf0af5691",
          "length": 253,
          "cycles": 1,
          "position": 206,
          "iteration": 0,
          "httpRequestId": "2dc0ac70-a7c9-4985-a1da-87298d293132"
        },
        "item": {
          "id": "80e9883d-cc28-4961-b666-ee828372f2ec",
          "name": "credentials_verify:vc:credentialSubject:id:null"
        },
        "response": {
          "id": "e7e3011b-4879-4d0f-bfb4-74f28a8a7101",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8713d42e-dcf9-4ee4-8111-370025a478fa",
        "cursor": {
          "ref": "d5ce8fea-1a3a-4707-a957-eec2650a9c24",
          "length": 253,
          "cycles": 1,
          "position": 207,
          "iteration": 0,
          "httpRequestId": "f84136a8-e81b-4bd7-ab65-e93a9594c63b"
        },
        "item": {
          "id": "8713d42e-dcf9-4ee4-8111-370025a478fa",
          "name": "credentials_verify:vc:credentialSubject:id:object"
        },
        "response": {
          "id": "90eabbe5-7449-4f25-8407-6b6dd28bede1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a356f441-0a77-452a-90dc-a1f57d900145",
        "cursor": {
          "ref": "652ab557-dee4-4e24-ac57-2298aaa1834e",
          "length": 253,
          "cycles": 1,
          "position": 208,
          "iteration": 0,
          "httpRequestId": "97dbf946-0dc6-4fb1-9bde-bffc95e2c8e3"
        },
        "item": {
          "id": "a356f441-0a77-452a-90dc-a1f57d900145",
          "name": "credentials_verify:proof:missing"
        },
        "response": {
          "id": "2eaff01d-a8de-4e68-9698-4d8545035e30",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "44905fba-3f7d-4540-8505-5794d8bcea89",
        "cursor": {
          "ref": "feec643a-1236-466c-9914-73788a5ea29d",
          "length": 253,
          "cycles": 1,
          "position": 209,
          "iteration": 0,
          "httpRequestId": "b3af7e12-375b-4ebc-b2db-d97cbc94d7a9"
        },
        "item": {
          "id": "44905fba-3f7d-4540-8505-5794d8bcea89",
          "name": "credentials_verify:proof:array"
        },
        "response": {
          "id": "1baf3bee-0a30-4afd-baed-e12f2be7a23e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 8,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e5f2c85c-890d-4349-9909-b2ea937df7e1",
        "cursor": {
          "ref": "05252cc8-6375-4f4a-8e78-3e0bc5909c7d",
          "length": 253,
          "cycles": 1,
          "position": 210,
          "iteration": 0,
          "httpRequestId": "e283d466-7599-4d2a-88e4-9c30910ca251"
        },
        "item": {
          "id": "e5f2c85c-890d-4349-9909-b2ea937df7e1",
          "name": "credentials_verify:proof:boolean"
        },
        "response": {
          "id": "a17c7e80-44f2-49e7-a426-1879be270e8c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "85a6ec22-3e75-46d6-87b0-3b5f6411ee16",
        "cursor": {
          "ref": "8cea2c9f-9c34-4406-8289-5950c7d01dd8",
          "length": 253,
          "cycles": 1,
          "position": 211,
          "iteration": 0,
          "httpRequestId": "3dcb57a7-6ce7-4e87-b48c-8117c37f2131"
        },
        "item": {
          "id": "85a6ec22-3e75-46d6-87b0-3b5f6411ee16",
          "name": "credentials_verify:proof:integer"
        },
        "response": {
          "id": "bc7e49f6-eaeb-46a2-bd33-471f50700e1d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b06a86ac-d53f-4d44-80d9-89e3cb2b0fff",
        "cursor": {
          "ref": "3112b8f3-3476-431d-8efc-1e5351ce59ea",
          "length": 253,
          "cycles": 1,
          "position": 212,
          "iteration": 0,
          "httpRequestId": "9fd3280a-5feb-4958-a63e-bb03b5777e4b"
        },
        "item": {
          "id": "b06a86ac-d53f-4d44-80d9-89e3cb2b0fff",
          "name": "credentials_verify:proof:null"
        },
        "response": {
          "id": "79b6a37a-4cb7-423d-b34a-e12597febb00",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2e1da37a-5aa5-4cd1-ae2b-ef8116c28a50",
        "cursor": {
          "ref": "b501b7e6-45ef-474b-bc27-273417d80724",
          "length": 253,
          "cycles": 1,
          "position": 213,
          "iteration": 0,
          "httpRequestId": "12de3211-d1cc-4a76-ab58-58ca0b3f5daf"
        },
        "item": {
          "id": "2e1da37a-5aa5-4cd1-ae2b-ef8116c28a50",
          "name": "credentials_verify:proof:string"
        },
        "response": {
          "id": "ca948bb0-62f6-4fc1-96d8-eb701e03ecd7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "75d3afb8-11e2-47e4-af19-b5d12b9098b1",
        "cursor": {
          "ref": "09a141eb-ef95-49c6-baed-a807624491b5",
          "length": 253,
          "cycles": 1,
          "position": 214,
          "iteration": 0,
          "httpRequestId": "172a0f8e-4393-41c9-9c30-ffb3448414ce"
        },
        "item": {
          "id": "75d3afb8-11e2-47e4-af19-b5d12b9098b1",
          "name": "credentials_verify:proof:type:missing"
        },
        "response": {
          "id": "cf3a3cb6-ee47-4896-a685-820e593bdbf3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "83f116ae-c49e-47fa-ad29-1e96823deaec",
        "cursor": {
          "ref": "957523ef-f6b3-45c0-adc6-3eaf7b0dd6d8",
          "length": 253,
          "cycles": 1,
          "position": 215,
          "iteration": 0,
          "httpRequestId": "38d62f24-7337-46f8-aaad-16d2e52e61aa"
        },
        "item": {
          "id": "83f116ae-c49e-47fa-ad29-1e96823deaec",
          "name": "credentials_verify:proof:type:array"
        },
        "response": {
          "id": "ea94c88b-a101-4ffa-90b8-85904e2ec88b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4cfc720b-e127-4f60-93d4-2fb24c9faf29",
        "cursor": {
          "ref": "2e4d2c3f-324f-48be-acfa-f7bff29cf802",
          "length": 253,
          "cycles": 1,
          "position": 216,
          "iteration": 0,
          "httpRequestId": "34f234ba-a4be-4bf9-bb6c-3824d01b1bec"
        },
        "item": {
          "id": "4cfc720b-e127-4f60-93d4-2fb24c9faf29",
          "name": "credentials_verify:proof:type:boolean"
        },
        "response": {
          "id": "27088bd6-c634-425a-8df5-afeed6698480",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "144bf504-4969-498a-a409-bc38d9418123",
        "cursor": {
          "ref": "e5368ce8-d08d-43d0-a379-d8bf030a5482",
          "length": 253,
          "cycles": 1,
          "position": 217,
          "iteration": 0,
          "httpRequestId": "46e74623-4388-447c-8ec9-6681452fc90e"
        },
        "item": {
          "id": "144bf504-4969-498a-a409-bc38d9418123",
          "name": "credentials_verify:proof:type:integer"
        },
        "response": {
          "id": "820d1bdb-5baf-4a9a-a043-b291df106f7c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fadfde5d-2718-4a29-a770-eeff9e21014a",
        "cursor": {
          "ref": "a77fbb17-7b8b-4142-914d-e40100848054",
          "length": 253,
          "cycles": 1,
          "position": 218,
          "iteration": 0,
          "httpRequestId": "07e6eb20-c964-4d50-9627-564d5acb7ca1"
        },
        "item": {
          "id": "fadfde5d-2718-4a29-a770-eeff9e21014a",
          "name": "credentials_verify:proof:type:null"
        },
        "response": {
          "id": "15a28320-5d26-400f-9019-c4891c7646f8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e35d9bb8-5ab4-4d04-9ee9-25b37c8047fe",
        "cursor": {
          "ref": "195181d9-ce8e-47da-bf17-5b12a9bef4ee",
          "length": 253,
          "cycles": 1,
          "position": 219,
          "iteration": 0,
          "httpRequestId": "0defcbd2-4de1-4d00-9134-7c7b4e4328c0"
        },
        "item": {
          "id": "e35d9bb8-5ab4-4d04-9ee9-25b37c8047fe",
          "name": "credentials_verify:proof:type:object"
        },
        "response": {
          "id": "73ce258f-7428-4bd5-82fa-7e8648d4132f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fabba10a-350c-4ca8-b6cb-802647dc05ec",
        "cursor": {
          "ref": "fffb34f3-d152-4557-a2ca-be3364da74e2",
          "length": 253,
          "cycles": 1,
          "position": 220,
          "iteration": 0,
          "httpRequestId": "727ba1ee-485a-49a6-8f66-0a96638d4152"
        },
        "item": {
          "id": "fabba10a-350c-4ca8-b6cb-802647dc05ec",
          "name": "credentials_verify:proof:type:string"
        },
        "response": {
          "id": "1a7be086-f1c6-4330-a31d-d287e6e120f1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b51aa416-e6fd-42f2-b1a0-fdc24ee540d4",
        "cursor": {
          "ref": "5b7afa85-8037-487e-ace9-685d4f856b0b",
          "length": 253,
          "cycles": 1,
          "position": 221,
          "iteration": 0,
          "httpRequestId": "dd236a30-f994-4352-9c0a-edffaa2f3ff5"
        },
        "item": {
          "id": "b51aa416-e6fd-42f2-b1a0-fdc24ee540d4",
          "name": "credentials_verify:proof:created:array"
        },
        "response": {
          "id": "4e2a1769-1680-447e-bc9f-19157627891e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "66c19fb8-daab-42ff-9a17-aa7e68073067",
        "cursor": {
          "ref": "6da6375c-e1e6-4866-af6d-8e2b0cd098fe",
          "length": 253,
          "cycles": 1,
          "position": 222,
          "iteration": 0,
          "httpRequestId": "0f2ebb6f-de19-4ad2-9294-ab7b16f6940b"
        },
        "item": {
          "id": "66c19fb8-daab-42ff-9a17-aa7e68073067",
          "name": "credentials_verify:proof:created:boolean"
        },
        "response": {
          "id": "20963eef-869c-4ee1-9427-6e5add858c36",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2be33011-8e41-4b34-b3d0-41a594a61788",
        "cursor": {
          "ref": "eefe5ff2-d96b-4802-a773-7b7f84afece1",
          "length": 253,
          "cycles": 1,
          "position": 223,
          "iteration": 0,
          "httpRequestId": "3a4d9006-6789-4af0-b4b1-5698cf5fead9"
        },
        "item": {
          "id": "2be33011-8e41-4b34-b3d0-41a594a61788",
          "name": "credentials_verify:proof:created:integer"
        },
        "response": {
          "id": "d8ef534b-91b4-4071-8fc9-fbeec212948d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f652765e-ea21-4dc8-9e01-b0e341785afa",
        "cursor": {
          "ref": "112636bc-7792-49fd-b427-ee65539930ca",
          "length": 253,
          "cycles": 1,
          "position": 224,
          "iteration": 0,
          "httpRequestId": "a6adff47-46e9-4c26-8b35-2cd33c1fb70f"
        },
        "item": {
          "id": "f652765e-ea21-4dc8-9e01-b0e341785afa",
          "name": "credentials_verify:proof:created:null"
        },
        "response": {
          "id": "c5547c4c-8e8a-45a6-bddd-9b363964d5ab",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a7df72bd-e386-44d1-bef6-e29158b9da3d",
        "cursor": {
          "ref": "485d2aef-7fcf-4b4e-bc06-d8bd589c8e81",
          "length": 253,
          "cycles": 1,
          "position": 225,
          "iteration": 0,
          "httpRequestId": "f8f2659d-5c7f-4f0e-ba2c-76a3814a6bed"
        },
        "item": {
          "id": "a7df72bd-e386-44d1-bef6-e29158b9da3d",
          "name": "credentials_verify:proof:created:object"
        },
        "response": {
          "id": "db4618b0-0241-4c79-90fc-760220eaae48",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1f0800eb-135f-4b0e-8550-b2138b751801",
        "cursor": {
          "ref": "a9b29fab-c9f5-4c29-9653-bb46ec2c242e",
          "length": 253,
          "cycles": 1,
          "position": 226,
          "iteration": 0,
          "httpRequestId": "18c81432-a85f-4be4-9246-81fcb0a3aff9"
        },
        "item": {
          "id": "1f0800eb-135f-4b0e-8550-b2138b751801",
          "name": "credentials_verify:proof:verificationMethod:array"
        },
        "response": {
          "id": "f42e2c5b-a622-4dae-8fd5-c5495991f65a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 11,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "527035f0-dac1-463d-86e3-7635d757ed95",
        "cursor": {
          "ref": "565be6f4-9609-493c-9335-17d19d777b04",
          "length": 253,
          "cycles": 1,
          "position": 227,
          "iteration": 0,
          "httpRequestId": "ae44eda1-9efd-4f4d-9029-683dea9f23f1"
        },
        "item": {
          "id": "527035f0-dac1-463d-86e3-7635d757ed95",
          "name": "credentials_verify:proof:verificationMethod:boolean"
        },
        "response": {
          "id": "7ebe1102-05f5-4dcc-9ad5-def6b5fcc6e0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 17,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "95149266-e607-4761-bc5c-9fb3f2bf31d2",
        "cursor": {
          "ref": "1dfe13f8-62e2-45af-95f8-23756080e054",
          "length": 253,
          "cycles": 1,
          "position": 228,
          "iteration": 0,
          "httpRequestId": "1f9143e6-764d-4895-9b8d-9cd483e04c75"
        },
        "item": {
          "id": "95149266-e607-4761-bc5c-9fb3f2bf31d2",
          "name": "credentials_verify:proof:verificationMethod:integer"
        },
        "response": {
          "id": "171c172e-aada-49fc-b73b-3d6ad3c83631",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fc53737d-0db3-40ca-bf20-ebf3a91a4c5a",
        "cursor": {
          "ref": "919bb04e-fd74-40e7-b7c3-39dee48dd9cf",
          "length": 253,
          "cycles": 1,
          "position": 229,
          "iteration": 0,
          "httpRequestId": "17f22aff-2618-4ebb-b55c-02617732129e"
        },
        "item": {
          "id": "fc53737d-0db3-40ca-bf20-ebf3a91a4c5a",
          "name": "credentials_verify:proof:verificationMethod:null"
        },
        "response": {
          "id": "a53f1dbc-343a-46fe-9c5d-d1c52af1a844",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 12,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "db6d9d68-07dc-427d-941b-27a26e82e361",
        "cursor": {
          "ref": "d7a485a3-640a-485b-916d-89fb81af5de7",
          "length": 253,
          "cycles": 1,
          "position": 230,
          "iteration": 0,
          "httpRequestId": "46f91d83-8313-451c-a980-feead22a6b5e"
        },
        "item": {
          "id": "db6d9d68-07dc-427d-941b-27a26e82e361",
          "name": "credentials_verify:proof:verificationMethod:object"
        },
        "response": {
          "id": "03f08cd2-1fa9-432a-8c7d-73c053b21d21",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "53a4c94d-c4f4-4e6e-8e04-1e2d8524dba8",
        "cursor": {
          "ref": "45c580c6-e0a8-4c76-aa8c-515d3c6f9b56",
          "length": 253,
          "cycles": 1,
          "position": 231,
          "iteration": 0,
          "httpRequestId": "7565fb37-dc45-42bb-a8c9-b5af41c3f233"
        },
        "item": {
          "id": "53a4c94d-c4f4-4e6e-8e04-1e2d8524dba8",
          "name": "credentials_verify:proof:jws:array"
        },
        "response": {
          "id": "efd235e3-2eb5-4a86-a972-9af09b4dd70d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ef44ecfe-409c-4e76-b1ee-332468ccd05b",
        "cursor": {
          "ref": "a8cfdb3c-eb37-4adf-b8e0-8f79d6bd6ffd",
          "length": 253,
          "cycles": 1,
          "position": 232,
          "iteration": 0,
          "httpRequestId": "8fc38a59-8297-4410-a2f1-c6381998ffe0"
        },
        "item": {
          "id": "ef44ecfe-409c-4e76-b1ee-332468ccd05b",
          "name": "credentials_verify:proof:jws:boolean"
        },
        "response": {
          "id": "74dedf7d-5b35-4eca-a87a-9ea121bbf61a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "493780af-3bd9-468c-8c35-8555b03efa2c",
        "cursor": {
          "ref": "086ad978-c15d-4de2-be42-e4f85b56fe3a",
          "length": 253,
          "cycles": 1,
          "position": 233,
          "iteration": 0,
          "httpRequestId": "cf4060ee-3d4e-41b0-9e09-4ab851fd0025"
        },
        "item": {
          "id": "493780af-3bd9-468c-8c35-8555b03efa2c",
          "name": "credentials_verify:proof:jws:integer"
        },
        "response": {
          "id": "17a1af64-4d1e-46b8-a7f9-be1a48d96e5d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3d8c782a-dc0f-4c6c-9554-b26a8bd3f255",
        "cursor": {
          "ref": "9f2c78dc-e15c-4f93-8db0-4f419158b0c2",
          "length": 253,
          "cycles": 1,
          "position": 234,
          "iteration": 0,
          "httpRequestId": "362697a1-7649-4f00-add5-afd694ef9281"
        },
        "item": {
          "id": "3d8c782a-dc0f-4c6c-9554-b26a8bd3f255",
          "name": "credentials_verify:proof:jws:null"
        },
        "response": {
          "id": "e0717563-57f6-42f5-a4aa-d5ef9351a85d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "eb9aa7eb-de0f-42ef-9a42-bb58ae8f9a0e",
        "cursor": {
          "ref": "0fa3fa34-50d1-4949-b553-da904490108c",
          "length": 253,
          "cycles": 1,
          "position": 235,
          "iteration": 0,
          "httpRequestId": "8878831f-e186-410c-ba8e-dfb95901f3d2"
        },
        "item": {
          "id": "eb9aa7eb-de0f-42ef-9a42-bb58ae8f9a0e",
          "name": "credentials_verify:proof:jws:object"
        },
        "response": {
          "id": "c6b1aac2-41d7-4460-a0e1-6471f0f478c7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ab84e0d9-7272-4fdc-a92f-49a9b3e8266e",
        "cursor": {
          "ref": "772a1623-a303-46b3-ab99-8f21938967c7",
          "length": 253,
          "cycles": 1,
          "position": 236,
          "iteration": 0,
          "httpRequestId": "f2059333-f030-44e2-82b3-2f20b55deb53"
        },
        "item": {
          "id": "ab84e0d9-7272-4fdc-a92f-49a9b3e8266e",
          "name": "credentials_verify:proof:proofPurpose:array"
        },
        "response": {
          "id": "6998b034-7449-4e10-92ab-09437f889ceb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 8,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "98f8b604-e784-4174-a9d8-b6341e0567f7",
        "cursor": {
          "ref": "df50f4af-24df-4d45-9e9d-053879092d64",
          "length": 253,
          "cycles": 1,
          "position": 237,
          "iteration": 0,
          "httpRequestId": "26dba393-08ea-4550-b310-115bcc9a9228"
        },
        "item": {
          "id": "98f8b604-e784-4174-a9d8-b6341e0567f7",
          "name": "credentials_verify:proof:proofPurpose:boolean"
        },
        "response": {
          "id": "d2e6914d-f0db-48c1-b56c-ab00f889385b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c908eaa9-6683-4433-ae29-3b3d6f00675c",
        "cursor": {
          "ref": "01298e05-c7f4-4759-b10f-4fecce008228",
          "length": 253,
          "cycles": 1,
          "position": 238,
          "iteration": 0,
          "httpRequestId": "646f317a-e88d-4fd1-b9ea-70ae512ad4d6"
        },
        "item": {
          "id": "c908eaa9-6683-4433-ae29-3b3d6f00675c",
          "name": "credentials_verify:proof:proofPurpose:integer"
        },
        "response": {
          "id": "21d06be4-f233-4dff-bc5f-27e346497ca7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "30aa8ffe-3f94-4cdb-b47f-8e97aa160fd5",
        "cursor": {
          "ref": "d9a5041f-e879-49f0-892b-d8a086b3ec77",
          "length": 253,
          "cycles": 1,
          "position": 239,
          "iteration": 0,
          "httpRequestId": "e5c7d484-db16-446b-995c-00396038128a"
        },
        "item": {
          "id": "30aa8ffe-3f94-4cdb-b47f-8e97aa160fd5",
          "name": "credentials_verify:proof:proofPurpose:null"
        },
        "response": {
          "id": "0ab092c2-8c7c-460a-b3f6-b5848a37b0fc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cd063887-a93c-4e16-a54e-7c74e5993d42",
        "cursor": {
          "ref": "c7e7641e-5c39-4678-9e7c-21f34203f65e",
          "length": 253,
          "cycles": 1,
          "position": 240,
          "iteration": 0,
          "httpRequestId": "d3f2a623-63a0-4d97-8a4c-71a6e3ee8621"
        },
        "item": {
          "id": "cd063887-a93c-4e16-a54e-7c74e5993d42",
          "name": "credentials_verify:proof:proofPurpose:object"
        },
        "response": {
          "id": "b75c4fac-1f4e-4ed1-9187-172700e4a9f1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6b1ada5d-dfcf-41b4-9c19-0df2c23e52ac",
        "cursor": {
          "ref": "13fab8ab-7f66-4490-b460-33c353949815",
          "length": 253,
          "cycles": 1,
          "position": 241,
          "iteration": 0,
          "httpRequestId": "fe13f5fc-390e-432c-9571-e11ae44b13ef"
        },
        "item": {
          "id": "6b1ada5d-dfcf-41b4-9c19-0df2c23e52ac",
          "name": "credentials_verify:proof:proofPurpose:string"
        },
        "response": {
          "id": "3d0c3a20-e26b-427d-bfa0-88456553ab40",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0983a92b-f90b-43ae-9b92-fa846c19eb62",
        "cursor": {
          "ref": "257522f5-c801-4916-bcca-bbd8ca3c4e2b",
          "length": 253,
          "cycles": 1,
          "position": 242,
          "iteration": 0,
          "httpRequestId": "208414c6-e73a-41ce-91a1-3771f0136c43"
        },
        "item": {
          "id": "0983a92b-f90b-43ae-9b92-fa846c19eb62",
          "name": "credentials_verify:missing_auth"
        },
        "response": {
          "id": "75dc7dba-b276-42d1-9cc7-5f8f10b82515",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 9,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d4b553b8-ea2c-49c6-9729-46b5de2a3185",
        "cursor": {
          "ref": "b9467927-4315-4ac2-9289-6ae7a87c3ec4",
          "length": 253,
          "cycles": 1,
          "position": 243,
          "iteration": 0,
          "httpRequestId": "7ef113fa-e6cc-4fd2-b2b5-cc7dc30def3e"
        },
        "item": {
          "id": "d4b553b8-ea2c-49c6-9729-46b5de2a3185",
          "name": "credentials_verify:missing_scope:verify_credentials"
        },
        "response": {
          "id": "baadb1f8-0748-417c-927c-547ae1a32f63",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 9,
          "responseSize": 163
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "06caccd9-3900-4336-9130-01f0502e79af",
        "cursor": {
          "ref": "13a10e61-d7e4-4b6d-90e3-724b54639193",
          "length": 253,
          "cycles": 1,
          "position": 244,
          "iteration": 0,
          "httpRequestId": "c1dadc3c-3162-4b15-b1a5-4dd928cd1a3f"
        },
        "item": {
          "id": "06caccd9-3900-4336-9130-01f0502e79af",
          "name": "credentials_verify:bad_signature"
        },
        "response": {
          "id": "00c54b1d-ac6c-4a2f-a95e-2f794cffed8b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 200",
              "message": "expected response to have status code 200 but got 400",
              "stack": "AssertionError: expected response to have status code 200 but got 400\n   at Object.eval sandbox-script.js:1:245)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verified', data should have required property 'verifications'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verified', data should have required property 'verifications'\n   at Object.eval sandbox-script.js:2:245)"
            }
          },
          {
            "assertion": "response verified is false",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response verified is false",
              "message": "expected undefined to be false",
              "stack": "AssertionError: expected undefined to be false\n   at Object.eval sandbox-script.js:3:245)"
            }
          }
        ]
      },
      {
        "id": "0ea45b0e-6029-43c2-a90b-875e242fe0e2",
        "cursor": {
          "ref": "e339989a-5604-45cf-8600-304e70274c12",
          "length": 253,
          "cycles": 1,
          "position": 245,
          "iteration": 0,
          "httpRequestId": "df83d9f9-000c-4981-b9c9-8c8949602a23"
        },
        "item": {
          "id": "0ea45b0e-6029-43c2-a90b-875e242fe0e2",
          "name": "credentials_verify"
        },
        "response": {
          "id": "c338141f-2ad4-4f84-8a1b-c954fab9735e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 200",
              "message": "expected response to have status code 200 but got 400",
              "stack": "AssertionError: expected response to have status code 200 but got 400\n   at Object.eval sandbox-script.js:1:246)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verified', data should have required property 'verifications'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verified', data should have required property 'verifications'\n   at Object.eval sandbox-script.js:2:246)"
            }
          },
          {
            "assertion": "response verified is true",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response verified is true",
              "message": "expected undefined to be true",
              "stack": "AssertionError: expected undefined to be true\n   at Object.eval sandbox-script.js:3:246)"
            }
          }
        ]
      },
      {
        "id": "276875a7-ce68-4ae3-adb1-a0bb5887949d",
        "cursor": {
          "ref": "63f651e5-616c-409d-9556-e35443a9dbcc",
          "length": 253,
          "cycles": 1,
          "position": 246,
          "iteration": 0,
          "httpRequestId": "e46ef950-1fce-4de3-9148-a5560511a02f"
        },
        "item": {
          "id": "276875a7-ce68-4ae3-adb1-a0bb5887949d",
          "name": "credentials_verify:issuer:object"
        },
        "response": {
          "id": "5f256002-1ee7-4c9a-9d92-ae04f1f4ce2c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 200",
              "message": "expected response to have status code 200 but got 400",
              "stack": "AssertionError: expected response to have status code 200 but got 400\n   at Object.eval sandbox-script.js:1:247)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verified', data should have required property 'verifications'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verified', data should have required property 'verifications'\n   at Object.eval sandbox-script.js:2:247)"
            }
          },
          {
            "assertion": "response verified is true",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response verified is true",
              "message": "expected undefined to be true",
              "stack": "AssertionError: expected undefined to be true\n   at Object.eval sandbox-script.js:3:247)"
            }
          }
        ]
      },
      {
        "id": "c4579561-e6c4-416a-84aa-7ecbbb84f35e",
        "cursor": {
          "ref": "d8dec8b2-d7e4-401c-8655-be2dde953f2e",
          "length": 253,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "90d36d70-77a6-4ffa-8acb-0ea195519449"
        },
        "item": {
          "id": "c4579561-e6c4-416a-84aa-7ecbbb84f35e",
          "name": "presentations:missing_auth"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:248)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:248)"
            }
          }
        ]
      },
      {
        "id": "c4579561-e6c4-416a-84aa-7ecbbb84f35e",
        "cursor": {
          "ref": "d8dec8b2-d7e4-401c-8655-be2dde953f2e",
          "length": 253,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "90d36d70-77a6-4ffa-8acb-0ea195519449"
        },
        "item": {
          "id": "c4579561-e6c4-416a-84aa-7ecbbb84f35e",
          "name": "presentations:missing_auth"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:248)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:248)"
            }
          }
        ]
      },
      {
        "id": "c4579561-e6c4-416a-84aa-7ecbbb84f35e",
        "cursor": {
          "ref": "d8dec8b2-d7e4-401c-8655-be2dde953f2e",
          "length": 253,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "90d36d70-77a6-4ffa-8acb-0ea195519449"
        },
        "item": {
          "id": "c4579561-e6c4-416a-84aa-7ecbbb84f35e",
          "name": "presentations:missing_auth"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:248)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:248)"
            }
          }
        ]
      },
      {
        "id": "300ad764-33a6-4f31-96dd-1457733ea5ec",
        "cursor": {
          "ref": "9e735e10-28fb-4f74-8b4d-4ee09c859eeb",
          "length": 253,
          "cycles": 1,
          "position": 248,
          "iteration": 0,
          "httpRequestId": "983551ca-0b98-4c32-814c-19d1e9d9a4ab"
        },
        "item": {
          "id": "300ad764-33a6-4f31-96dd-1457733ea5ec",
          "name": "presentations:missing_scope:submit_presentations"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:249)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:249)"
            }
          }
        ]
      },
      {
        "id": "fd3ea6bd-2cf1-4e53-b58a-c8c327a72fa4",
        "cursor": {
          "ref": "5be6312e-0283-4598-b568-41caf494a417",
          "length": 253,
          "cycles": 1,
          "position": 249,
          "iteration": 0,
          "httpRequestId": "728ae3f4-aed1-46d4-b567-f12ac74d7f85"
        },
        "item": {
          "id": "fd3ea6bd-2cf1-4e53-b58a-c8c327a72fa4",
          "name": "presentations_prove:missing_auth"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:250)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:250)"
            }
          }
        ]
      },
      {
        "id": "fd3ea6bd-2cf1-4e53-b58a-c8c327a72fa4",
        "cursor": {
          "ref": "5be6312e-0283-4598-b568-41caf494a417",
          "length": 253,
          "cycles": 1,
          "position": 249,
          "iteration": 0,
          "httpRequestId": "728ae3f4-aed1-46d4-b567-f12ac74d7f85"
        },
        "item": {
          "id": "fd3ea6bd-2cf1-4e53-b58a-c8c327a72fa4",
          "name": "presentations_prove:missing_auth"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:250)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:250)"
            }
          }
        ]
      },
      {
        "id": "2df4a282-ea63-4c07-93e1-f9649591e2a2",
        "cursor": {
          "ref": "c093dcf3-e7c0-4c8d-9e0e-f1236e4fcb25",
          "length": 253,
          "cycles": 1,
          "position": 250,
          "iteration": 0,
          "httpRequestId": "834af487-c3f5-4dcf-93f1-ce938ab6fca7"
        },
        "item": {
          "id": "2df4a282-ea63-4c07-93e1-f9649591e2a2",
          "name": "presentations_prove:missing_scope:prove_presentations"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:251)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:251)"
            }
          }
        ]
      },
      {
        "id": "37848ef8-20ad-4d48-b1e3-32fb3fbfb0b4",
        "cursor": {
          "ref": "aa9a08d8-9de7-48d9-9d93-d92951f82c06",
          "length": 253,
          "cycles": 1,
          "position": 251,
          "iteration": 0,
          "httpRequestId": "050bb576-a8c9-413e-bf0c-8c9464b7b067"
        },
        "item": {
          "id": "37848ef8-20ad-4d48-b1e3-32fb3fbfb0b4",
          "name": "presentations_verify:missing_auth"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:252)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:252)"
            }
          }
        ]
      },
      {
        "id": "37848ef8-20ad-4d48-b1e3-32fb3fbfb0b4",
        "cursor": {
          "ref": "aa9a08d8-9de7-48d9-9d93-d92951f82c06",
          "length": 253,
          "cycles": 1,
          "position": 251,
          "iteration": 0,
          "httpRequestId": "050bb576-a8c9-413e-bf0c-8c9464b7b067"
        },
        "item": {
          "id": "37848ef8-20ad-4d48-b1e3-32fb3fbfb0b4",
          "name": "presentations_verify:missing_auth"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:252)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:252)"
            }
          }
        ]
      },
      {
        "id": "d07374c6-2e03-4d19-966b-a08f1d4b10f2",
        "cursor": {
          "ref": "0e1ffab0-9e86-42df-ad4f-75a9dd0ed56e",
          "length": 253,
          "cycles": 1,
          "position": 252,
          "iteration": 0,
          "httpRequestId": "ce62e3ad-3c87-4ad4-b5fb-3689d072357a"
        },
        "item": {
          "id": "d07374c6-2e03-4d19-966b-a08f1d4b10f2",
          "name": "presentations_verify:missing_scope:verify_presentations"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:253)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:253)"
            }
          }
        ]
      }
    ]
  }
}