{
  "collection": {
    "info": {
      "_postman_id": "0b8a4a7f-f952-4403-a9a4-909b37b8fa24",
      "name": "Conformance Suite",
      "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
    },
    "item": [
      {
        "id": "8ca8b9d8-e6db-4a3e-86ea-cd567426279a",
        "name": "Clear Cache",
        "item": [
          {
            "id": "dfe13424-e06e-4e12-91d3-40feea9ec1f3",
            "name": "Clear Token Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "fa720702-aab3-4e06-af07-2c6b2f52dd2e",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"tokenCache\");",
                    ""
                  ],
                  "_lastExecutionId": "72ff088a-4662-449e-b406-58fcddcb0efb"
                }
              }
            ]
          },
          {
            "id": "88356fa1-10fd-44aa-a01b-0dbd13ee9895",
            "name": "Clear DID Web Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "b6654107-4cdf-4b3a-b7b0-cf326fa074aa",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"didWebCache\");",
                    ""
                  ],
                  "_lastExecutionId": "d6c05a16-27f3-42d7-b9df-154654f75d45"
                }
              }
            ]
          }
        ],
        "event": []
      },
      {
        "id": "9928169b-03ea-4261-bc4d-fcd6b52a9210",
        "name": "Discovery - API Configuration",
        "item": [
          {
            "id": "54120f2f-d21b-44d2-9ea1-33ff5f2e46f1",
            "name": "Positive Testing",
            "item": [
              {
                "id": "de2ca0ab-bea0-40ba-902a-0b84656178a1",
                "name": "did_json",
                "request": {
                  "url": {
                    "host": [
                      "{{did_web_endpoint}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "83602a81-5a27-41f6-881f-40b773d5f453",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200ApiConfiguration\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "d531f893-7ef5-4d65-bd38-689e47f121c1"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "6d73cd82-dc7b-4e31-a728-d6c60d83eb1b",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "e83545fb-8f24-4ba0-82a3-77661f0a5cf3"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "2442cd79-e196-4c04-843e-c8b4b10ad903",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "8d0517e6-9a91-4cb4-82cf-dcad1b0a556c"
                }
              }
            ]
          }
        ],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "853d07db-e9df-4ba9-be13-fb9aac06a6dc",
              "type": "text/javascript",
              "exec": [
                "// Discovery requires a multi-tenant aware did web endpoint",
                "const did_web = pm.environment.get(\"ORGANIZATION_DID_WEB\");",
                "const did_web_endpoint = utils(pm).convertDidWebToEndpoint(did_web);",
                "pm.variables.set('did_web_endpoint', did_web_endpoint);",
                ""
              ],
              "_lastExecutionId": "c7038a5e-b471-4d88-8104-4691fff42db3"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "b23c18dc-0a56-40a2-acef-44ce8d572f47",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "1214ae3d-9100-486b-82c8-df04ab013f4f"
            }
          }
        ]
      },
      {
        "id": "5f147928-6cea-4c36-8077-45fa4f9ff59b",
        "name": "Identifiers - Resolve",
        "item": [
          {
            "id": "a70f63f2-e7ea-44d7-b633-a6582a8f0ca4",
            "name": "Negative Testing",
            "item": [
              {
                "id": "9f3da65b-401e-450d-baa7-1aeee5974192",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "2db350e3-70b7-4c10-abf9-b9d938a3d5fd",
                    "name": "did:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "invalid_did"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9f7245e9-2e98-42f7-a012-95f2e879dfe8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400Identifiers\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "2c03d46e-7865-433c-8571-77934b585544"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a87d6abf-f7cb-41a1-883a-26b372a4a709",
                    "name": "did:not_found:did_web",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "did:web:example.com"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "64e8f1e6-68ba-41eb-a9db-9390f597a660",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "45cf5698-d095-4b4a-a300-823e4f7a8fc4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ecca2e0c-8657-4c03-9308-dae76d6451fc",
                    "name": "did:not_found:urn",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "urn:uuid:{{$randomUUID}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "47218cf9-bb3f-46c2-9da5-ee848f28f1fb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "d5a529c0-8ef6-441c-a96d-360bed641e62"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "50ce3084-a0ee-4af5-88da-4af9c0fba4dd",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "5daf88a2-0f3f-44dd-b9ab-c744fe06db01",
                    "name": "identifiers:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET",
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ae2da0ab-4f85-4de0-9518-320a17b3d7e4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "9ab9f8f6-ebe0-4f82-9418-7c0335030343"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c0d78dc9-bd47-486b-9a71-15e8b6e684c4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8e38a99e-de39-4049-bf98-5389fad16d67"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "cdb1ffeb-3f10-4d79-ba52-9474e6148d7d",
            "name": "Positive Testing",
            "item": [
              {
                "id": "6c6dff1c-9826-402a-9efc-7c9d8f60b856",
                "name": "identifiers",
                "request": {
                  "url": {
                    "path": [
                      "identifiers",
                      "{{ORGANIZATION_DID_WEB}}"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "7dc0c42a-b7ef-46f4-8e3e-fba04083b9a0",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200Identifiers\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString), {",
                        "     strict: true,",
                        "     strictSchema: true,",
                        " });",
                        "});"
                      ],
                      "_lastExecutionId": "c241068d-5cab-4034-86ac-16e6861f714c"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "7d9840e1-0c8f-437c-b9a2-dd8a78b8ea1d",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                ""
              ],
              "_lastExecutionId": "bf096f4d-c891-4f04-a1f2-20920141ac32"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "f806dd2f-a5bf-42b7-b808-2761367b9068",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "85115c79-1266-4799-b9ae-e565b88876e4"
            }
          }
        ]
      },
      {
        "id": "b8363cf8-dab6-4c14-8f8c-c3a65c927c46",
        "name": "Credentials - Create",
        "item": [
          {
            "id": "338a39b6-c56d-4f00-9753-f07ec42517bf",
            "name": "Negative Testing",
            "item": [
              {
                "id": "7d7eb204-74c9-4149-a859-4bf2bade9671",
                "name": "Bad Request",
                "description": {
                  "content": "This folder contains requests which mutate a valid request body in a way that should provoke a \"400 Bad Request\" response from the server.",
                  "type": "text/plain"
                },
                "item": [
                  {
                    "id": "138105d7-8c1f-4be0-a782-fc7666881bd8",
                    "name": "credentials_issue:credential:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "da985f88-4672-46d5-a1ed-1b945c74f154",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a9779780-9484-464e-9096-31783299528e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "56606440-62b0-438b-935d-312cf4fcd9c3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential\" is a required field",
                            "    delete req.credential;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "dd050f15-3878-42ce-b3cf-dd54a51b2fc6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cbec044b-1461-4040-baa5-95263cf1e385",
                    "name": "credentials_issue:credential.@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7daad30f-a10f-42d8-ac1b-05a688b3ed75",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "190c31a0-07ac-4c7b-b323-bc577c7149a6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "446f3ffe-2f50-4ebb-ab17-485824cd9013",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" is a required field",
                            "    delete req.credential[\"@context\"];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "3ef6f4cd-19ee-40a4-b6d9-fb774228548c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "87f4c702-e858-4074-b690-cb780bcbe6da",
                    "name": "credentials_issue:credential.@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "71f70d31-33f4-42f6-8349-3c12d1eaf442",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "07a54f7a-0671-4022-ac25-d47d0e902d4c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2b4cdb5a-26be-4cba-86d1-e1e040518d99",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a boolean",
                            "    req.credential[\"@context\"] = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "f6aa9739-6b41-466a-ae05-636391197dfd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7935e3fe-b6ea-4049-bddf-2c04e46c6800",
                    "name": "credentials_issue:credential.@context:integer Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a0447b6b-b549-4236-b52b-a050dd5c388a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "affec022-f72d-4094-8b1b-0d98f6f378ae"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "aa7fb082-8687-416a-9c6e-4ab82958967f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an integer",
                            "    req.credential[\"@context\"] = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "a5022664-a61c-4544-af74-702e90f7abdb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "93c24148-3189-4d4b-a964-f92d4713096e",
                    "name": "credentials_issue:credential.@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "75391cc8-ac3e-43b0-a805-81569cc2f11a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fd73f11c-542d-47e2-a9d6-efa0a2da527d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ba76114c-1c89-4593-89c4-e8423be8415c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not null",
                            "    req.credential[\"@context\"] = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "416de294-d1d4-4aba-8e5e-6c5b0610f161"
                        }
                      }
                    ]
                  },
                  {
                    "id": "df157402-483c-469d-a7b0-b289e3fbe3ac",
                    "name": "credentials_issue:credential.@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "af40c8b6-421c-4cb0-b4d4-1945c15bb257",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5aa78522-777b-4188-b441-dbd7321f3777"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2655edce-f4e1-4a58-8021-5286aa064b27",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an object",
                            "    req.credential[\"@context\"] = {\"@vocab\": \"https://www.w3.org/2018/credentials/v1\"};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "05d537ba-c6b9-4ffb-be30-5d1c6f90c430"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aa80c5eb-ecd2-4b98-8833-4eae929821b6",
                    "name": "credentials_issue:credential.@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8d70a85e-391c-4600-a11b-952817d65c53",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5284f61f-031b-4b83-9872-85872e88ff7b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6eb35f04-e7b9-48a6-a4e9-610b8651ba51",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a string",
                            "    req.credential[\"@context\"] = \"https://www.w3.org/2018/credentials/v1\";",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "8afd1fff-0a5d-48cd-b382-9ddd9259d5bf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ee377e93-d21e-46ca-8ec8-252f1da9fbf6",
                    "name": "credentials_issue:credential.@context.item.array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dc52a30d-eea1-4cc1-9905-b3bdb1e42814",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9d04a14b-c661-446c-abbd-a7aed6d90d3a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "89dd4267-523e-4bce-ae2f-e17fb137c520",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not array",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        [\"https://w3id.org/traceability/v1\"],",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "c33c48a4-792a-4521-89e4-df656971bf1d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "68957b8d-f9f5-4669-8469-6343ac230020",
                    "name": "credentials_issue:credential.@context.item.boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fdf68a73-4d28-4983-bb44-31d0a730aeed",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c3ebe1f7-5bec-4efa-809d-547e377960a9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1d0b250a-101e-4805-8b9f-b657301c0fd7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not boolean",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        false,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "3ae54f44-9572-4be0-b709-ec0b8457f177"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a2a71fb8-2339-44c2-9696-4769a3302b01",
                    "name": "credentials_issue:credential.@context.item.integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "31394286-7c62-4861-b736-7df82e198e9d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "63925a8c-c05b-4a9e-931e-99d9d60fdd4a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "85fef9be-b3dc-4b19-ae8c-a76964543e6b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        42,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "6f97da5d-78af-4f6a-82a7-613b04543030"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9cc44650-5f8c-4677-ac04-64fb54461194",
                    "name": "credentials_issue:credential.@context.item.null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "81021e31-5c28-4586-baf5-c4df650b850e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "93315d3a-c5ba-46ea-b3bb-b733a05c0083"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "30367175-612f-44ac-ac9d-4b46c9f1b058",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        null,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "05cab66e-5546-44cf-acb8-80bed60bdb12"
                        }
                      }
                    ]
                  },
                  {
                    "id": "816b1bb5-4f83-4c58-a0bb-4f421e59125a",
                    "name": "credentials_issue:credential.@context.item.object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "08ade6eb-40b1-44e1-a9c9-ff499f41e547",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "16744bbc-0746-4bfb-b53c-58c0e97eeaf7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5b64e0c9-9e57-4751-aff9-d62c4c36ff4b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not object",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        {\"@vocab\": \"https://w3id.org/traceability/v1\"},",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "80b67506-5f2c-44a1-b5e5-462040f3e06d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a6177874-631c-4a60-8975-7ba7410f6893",
                    "name": "credentials_issue:credential.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f2d7f7f7-7c18-4246-83fd-40cdda0fcb0d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a1d4cb95-17c0-4e4f-893f-e464253ce9dc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5e3d3375-4107-413b-bd6f-ebe0f151301d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not array",
                            "    req.credential.id = [pm.variables.get(\"credentialId\")];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "1f43d76c-c7b1-4195-b460-7e7a3853a216"
                        }
                      }
                    ]
                  },
                  {
                    "id": "736b3412-2b53-4d55-b914-6444db6c7293",
                    "name": "credentials_issue:credential.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fb3b15f9-536d-4b04-873a-d18105965d78",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7a3776aa-7647-47ae-8ef5-918b473f0282"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "07ce61e6-c5ed-420e-99b7-c003624c45af",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not boolean",
                            "    req.credential.id = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "701803df-b1ff-4a70-a2f3-76466a47b35f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "264471e5-d03c-4fe2-b0ad-beafaeee2489",
                    "name": "credentials_issue:credential.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "da73e96d-64a2-4887-a387-d35f0aa30bf7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dc427843-fcf7-4e27-9e19-546951ffd482"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e9c20d0c-0ed5-4ac0-946f-0888feec2937",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not integer",
                            "    req.credential.id = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "af27938d-aab3-4a0d-a2b9-db9aaaf8f7d8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c04c4ead-7709-436c-a9d4-d5833516bcb6",
                    "name": "credentials_issue:credential.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6dcaa9b3-6e8e-4575-95ac-0f9ea9f1a58f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "59694641-8d53-4bd8-97b4-b2866e3b0893"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c4c746f7-92d9-408e-bfb8-242c10c897c5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not null",
                            "    req.credential.id = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "37ffdd7a-a1db-47b3-ac5f-4aa3d8e12061"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1edc032b-2501-4838-8c86-f4031b683c97",
                    "name": "credentials_issue:credential.id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "62a5a6bf-81a9-4c80-b8ee-77004ac7b6b5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f5b89514-4a04-481e-800a-2d59afb00f47"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cb7dbdbb-eeb0-467b-a9ae-6ee465eb4e2f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not object",
                            "    req.credential.id = {\"id\": pm.variables.get(\"credentialId\")};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "cec9a759-414b-4cbe-aebf-38d16a467792"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a7a8c665-ec1a-4774-9faf-92a91f29bcc9",
                    "name": "credentials_issue:credential.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f912f248-ffbe-42f5-8e8a-1934ea03c853",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f4409745-975a-4e8f-9b34-b6103a6ad445"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7611492f-d3d0-42db-ad2a-6df8046905d5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type is a required property",
                            "    delete req.credential.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "de475c70-0044-465e-9d00-80e01f4245e0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9ace6dd4-052f-4aea-9150-a564a242755d",
                    "name": "credentials_issue:credential.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "119f0bb9-677c-4a22-85ff-f8e56961e932",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9a554340-6e06-4802-bf3d-f5747d2d44b0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "56522014-336e-4cca-8719-42bd8a5e3dbe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not boolean",
                            "    req.credential.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "6a0f76d6-2fe4-4b06-b795-dccec653d23a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "82f5cb41-3a8b-47e0-8ff4-4edd68cd9f63",
                    "name": "credentials_issue:credential.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8458af60-4893-444a-8727-24b68d5f91b1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "143f3296-2f58-40c1-b3ef-e3589f863fce"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "015729c2-9dcd-4ab8-a32a-4c3a7ae9209b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not integer",
                            "    req.credential.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "8098df32-6573-4414-9aba-42a10f559511"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f1412ce4-2859-4955-8d4c-d2e7e016fd52",
                    "name": "credentials_issue:credential.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d15c9c0e-b143-4928-9884-53ef1fa4447a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2cbe1571-0289-4a19-a856-b488a5785d9b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1f4e5127-8025-448a-8025-1571fedae389",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not null",
                            "    req.credential.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "f3743e89-7cb5-46ab-be90-0b2e5dd33414"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ef873c0b-ec7f-4acb-9427-0c4d16155765",
                    "name": "credentials_issue:credential.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e7341417-276d-4bb3-9d20-be42d4664d2f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f6c9cf0e-8e5d-4a8d-b950-3544b3be676b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "71ae97a1-a6f6-4f08-8f3a-fade14db0df2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not object",
                            "    req.credential.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "82c6abe0-5298-4ec7-8124-74afb4dd8d9a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "41c045e2-d8d4-4de2-987b-bcbddc62714b",
                    "name": "credentials_issue:credential.type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c57c7561-9c2e-4d0c-9da7-89a07382fffb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f5a4f682-2e4e-4381-aa9c-7de0b6928be3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6735cbb8-4a7d-4849-b335-0c6606414245",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not string",
                            "    req.credential.type = \"VerifiableCredential\";",
                            "}));"
                          ],
                          "_lastExecutionId": "fa610da5-4aad-4283-bbdf-c1ee9d78e96b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aad68f44-48a3-4014-b462-67122a257055",
                    "name": "credentials_issue:credential.type.item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f4e8dafc-2018-4574-b586-b73971369d24",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bcc93dfe-7435-4a20-a6c1-87e3750b470a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c1807548-9625-4f2c-bb95-4881e4a5d807",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must have at least one element",
                            "    req.credential.type = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "824f518c-a3e6-4fb7-a7e6-4b1c094816e1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "70ae738c-2072-4699-ad3f-767a0564bb32",
                    "name": "credentials_issue:credential.type.item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3868bac2-e58e-454d-b2d3-ca6ce1a31ba9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bf2f7b45-d446-4c92-9f98-e9749e1a883e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "be8b6619-718f-4d44-b56a-879f78aab8d0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not array",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        [\"AnotherType\"],",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "3672108e-7985-4e20-9880-23fa8e7e9ef1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fe472178-fe23-4c00-b460-c00a8e928f75",
                    "name": "credentials_issue:credential.type.item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c075c1ce-ae83-4d87-8e13-a351c78dc931",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f472276b-9c65-4523-b8f1-6613a65c1fe5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "860cf7ff-717d-4b56-ae0d-b6b825b11017",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not boolean",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        false,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "6d5cd668-654e-40f2-95e7-2f07da50f2a0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0e38af4e-b66a-49a2-848c-5681102ce1d3",
                    "name": "credentials_issue:credential.type.item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d83cafc4-82f6-4d03-a024-266729ec9d89",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b0b76a60-2c3d-4ef6-9ff0-277102f3e109"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6f369b1d-e7a4-45b6-832e-532a3f712e65",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not integer",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        42,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "17f50af5-284b-420f-ab7d-dead8a8c66ec"
                        }
                      }
                    ]
                  },
                  {
                    "id": "277935f4-fce3-4765-92c8-5be010d9098e",
                    "name": "credentials_issue:credential.type.item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "805b2d94-6583-42ca-ad6f-030b92ca8202",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0e836a6b-6a04-4673-bf53-02bef0fdf707"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a59c4334-b366-4e1c-b2fa-76ebd5fb0d55",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not null",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        null,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "4f4e657a-1bfd-4309-9926-e9b0b8cd73be"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9b66c76a-a402-4f78-b7af-ff34c73bf543",
                    "name": "credentials_issue:credential.type.item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c662dcb1-381a-4c8d-af02-0b27b20fc51a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b1369e16-4fda-48a3-a67d-15ee124563d8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3d56f2c8-3eb1-4ce6-88f2-36fdfd571c6c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not object",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        {},",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "b5debc96-7e44-4e63-a834-6c302d7c4bf9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b23acd9e-4db1-49c7-8293-c1761a7db3ba",
                    "name": "credentials_issue:credential.issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ea65aa11-9dbb-4f38-b870-96523cef8105",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4b11c3cb-b41a-434c-8136-e046fe9bb23b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7edd59da-84f4-4b70-9afc-ce583b2cdcde",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer is a required property",
                            "    delete req.credential.issuer;",
                            "}));"
                          ],
                          "_lastExecutionId": "4059c850-6704-4db3-a318-03668b870adf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2f1a7373-51a4-4052-9171-cb1767878e4d",
                    "name": "credentials_issue:credential.issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "55f4ed2b-2410-45e8-84c6-215faa079b52",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e5df0f67-21c0-4285-bfcb-01355706f8dc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f6aa4420-29d2-4530-b746-3864f6b7e7c3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not array",
                            "    req.credential.issuer = [pm.variables.get(\"issuer\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "f80accf0-03ab-4a6e-a67a-c61edc24a783"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8d777aba-1bcb-4225-8dc2-f63a216de18a",
                    "name": "credentials_issue:credential.issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ccafc323-6eac-43d2-b7cd-a82ed38e0817",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a97aff1c-fae9-429a-8595-441ad6434cae"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cd16ba52-a8f2-4a6a-bbf5-0d38449d43ed",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not boolean",
                            "    req.credential.issuer = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "a6fb01fa-29a1-4a57-884b-162da70489fd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e8dc1308-d7a9-40bf-8d3b-bfc6b0519cfe",
                    "name": "credentials_issue:credential.issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ead8b8d0-841f-4680-b67b-36cc1af72a7c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "42b7eea4-e13a-4fd3-a77a-e0152d2858fc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5253a489-b99a-4c3e-bc67-cb9af1acef26",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not integer",
                            "    req.credential.issuer = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "4e79aa1c-fe39-4e48-8882-9a94cb066f2e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ade10cbd-6d11-40e9-a5bc-df41e6094272",
                    "name": "credentials_issue:credential.issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "117285c6-2d3e-4d4c-9974-f7d2e43af93d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e962009a-5ead-478a-8153-52aacb9bdbbd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4bc60ba2-b77a-431b-a2c3-439e86a0670d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not null",
                            "    req.credential.issuer = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "d33ac565-4373-441c-9b90-eac160587a08"
                        }
                      }
                    ]
                  },
                  {
                    "id": "27eb3743-3a2a-4b55-8f55-7deb6365d5f3",
                    "name": "credentials_issue.credential.issuer:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cca1bac5-a25e-472e-b0d7-c181e2860e8c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "539be318-edfb-423b-b5ca-b5dcff20e398"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0f030a07-a12a-42fe-b7c0-f4d2d431301a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be a valid URI",
                            "    req.credential.issuer = \"not.a.uri\"",
                            "}));"
                          ],
                          "_lastExecutionId": "5925d3a0-132c-4210-8106-7c2489e18751"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4902f75f-445d-4f58-b6f0-b4110d402c00",
                    "name": "credentials_issue.credential.issuer:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9e519b95-3204-4a04-83f5-bedf31238562",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "a14081d7-f956-49f9-b4e5-0b3ad8929ef2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "343fdfa2-588e-45fe-a055-e4705f023997",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be known to the endpoint.",
                            "    req.credential.issuer = \"urn:uuid:{{$randomUUID}}\";",
                            "}));"
                          ],
                          "_lastExecutionId": "790dfdf8-261e-4b56-8c66-e15a2347d901"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6fd8b07a-eff9-40ac-8685-88a595803cff",
                    "name": "credentials_issue:credential.issuer.id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "adc8fbb0-f526-46a9-ba3e-987811b5b5a9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8130734b-0cba-4cc9-bda1-6bdc12a78f2b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b3f30ab0-b58a-4916-a5ae-bb53384eafca",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id is required when issuer is in object format",
                            "    req.credential.issuer = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "a473811e-a712-4fe9-b0df-fd3890e3ce1e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4bf9551c-f697-434b-a1c5-255a1a70d993",
                    "name": "credentials_issue:credential.issuer.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8f35df4e-92d2-4425-bd3b-2aaae8507489",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "70c57029-341e-47cc-a43b-900ebc035b4a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e5515c12-45df-41f5-a524-1e051e6e16c7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not array",
                            "    req.credential.issuer = {\"id\": [pm.variables.get(\"issuer\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "b48e680c-c2ec-491d-8a96-f55c7324c350"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6d37de76-16f0-44ac-a43f-a76fed2d9eb2",
                    "name": "credentials_issue:credential.issuer.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "45d343e1-fcb6-43d8-870a-d29ca3028ec7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b3d89f0e-fc2b-441a-8a88-ef71b8104fcd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f8ed1d7c-6f40-40de-8f56-84a27cf4a8c8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not boolean",
                            "    req.credential.issuer = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "bfed953f-973e-47f8-9db4-d7bbed4faf78"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5f968d5a-ed6b-4d64-bf92-1413a206e29e",
                    "name": "credentials_issue:credential.issuer.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8c3a8957-c9ae-429a-85ef-9369349aeb3c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "60349309-2b61-4aa7-862a-ccb82943a009"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8929873f-b94a-430b-8f09-cac9038bc8a3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not integer",
                            "    req.credential.issuer = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "ec9d0667-3332-4154-a2df-2866db1a617a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "06bbd6b7-2eaa-4824-a3a9-0b1bd7c43598",
                    "name": "credentials_issue:credential.issuer.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "81ab0d2e-10e9-4966-b844-2fc4fc21e95a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0dd6b7dc-4b46-4a45-a0f1-8f5e13941e9c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ea7fc6b7-b81b-47e5-9382-46177ac31b16",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not null",
                            "    req.credential.issuer = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "d76ebc18-5667-4cb9-a33c-9d2e15f58068"
                        }
                      }
                    ]
                  },
                  {
                    "id": "44824a08-1bb2-4669-b998-edd658059768",
                    "name": "credentials_issue.credential.issuer.id:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0948a4dd-a0d1-4e45-ad66-14274303beb1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "172731a1-1cce-49a0-99ae-b204589ed2e2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c9d896dd-6af3-49bb-aa70-423ce449c746",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be a valid URI",
                            "    req.credential.issuer = {\"id\": \"not.a.uri\"}",
                            "}));"
                          ],
                          "_lastExecutionId": "aad16ea3-b7f3-48f6-ace6-c3821ac47f56"
                        }
                      }
                    ]
                  },
                  {
                    "id": "350e68aa-5930-426a-8bb5-f5a162531c42",
                    "name": "credentials_issue.credential.issuer.id:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bb702cef-b4c8-480c-b528-9fa93b986b25",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "650b1744-0c77-4818-8373-7608102d18d7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7281ffc9-a8d6-4792-9d32-0431c4d76e52",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be known to the endpoint.",
                            "    req.credential.issuer = {\"id\": \"urn:uuid:{{$randomUUID}}\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "c2cd5362-33dc-48bc-bc57-b1a87f698042"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5c5cb18c-8bfb-477a-98f5-cb4eeeb6ae98",
                    "name": "credentials_issue:credential.issuanceDate.missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "df44c33a-ae40-4aa5-bc36-efffe9bfaf8e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bbf72a66-d48d-4a9d-8fa3-fb2f191ec6e4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "26578be3-c292-4612-b30e-19ded5387e10",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate is a required property",
                            "    delete req.credential.issuanceDate;",
                            "}));"
                          ],
                          "_lastExecutionId": "f2d9fc4a-96a8-409e-b0db-f216584e24e2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a3be6480-ca9a-40d2-ad24-b275b6cc6e81",
                    "name": "credentials_issue:credential.issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "14db2961-5228-4797-a9c6-739c8ca0f72b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9ef8db9d-8b2a-4ad0-9b96-f0178fffc289"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "aecef1ee-33a5-4d76-9186-b9d5dcbefa10",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not array",
                            "    req.credential.issuanceDate = [pm.variables.get(\"issuanceDate\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "756dcca9-cbe5-4349-a023-fd69e42cce8c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "68d08e6b-0df1-462b-af18-e15d8ad7d450",
                    "name": "credentials_issue:credential.issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2d793265-e330-46f9-81e5-d4373c03bd5d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1844fc12-a6bf-4cc6-88cf-6e9ae86944a7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "92c8c846-705a-4d64-a8cd-038eb883c861",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not boolean",
                            "    req.credential.issuanceDate = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "ea70562d-0437-4e76-8313-a5bd7d423b87"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4ffaf55f-959a-496b-a2bf-3262deecf24f",
                    "name": "credentials_issue:credential.issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fed1283f-c4b9-4d7d-9af2-930e19b0020d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8d60590a-6fdc-4918-badf-953a7fbe89b3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eba5dadb-39eb-4056-9b40-744f0dff1471",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not integer",
                            "    req.credential.issuanceDate = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "0f6388c3-e006-4863-b390-876dbd285267"
                        }
                      }
                    ]
                  },
                  {
                    "id": "68bbfdd4-f719-41de-88c0-df6b1ee9f022",
                    "name": "credentials_issue:credential.issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "800c8752-9401-484d-b8b7-17fad9ecf626",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a36f6fff-8f50-46a4-a411-0ebd22664a16"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0f32c05b-a9e7-40fc-bfe5-066db4e0d749",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not null",
                            "    req.credential.issuanceDate = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "ec3ca1a1-1559-4c9a-98d4-75d244088b6d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b01c5471-78ca-4a5d-bdf1-5cb7e7ad0b0d",
                    "name": "credentials_issue:credential.issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ff932502-fde4-44d8-bacd-a7edbaf1ab1e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "240ff4c6-74f0-4c7c-9031-3675c677fe4b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4452380e-de2b-47eb-a9d0-59beb2091baa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not object",
                            "    req.credential.issuanceDate = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "29e31930-aec0-4810-839b-23ac0bc275f4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ead3eeb0-00ad-489b-ba8c-a861aa059fac",
                    "name": "credentials_issue:credential.issuanceDate:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "96ab667c-b128-4678-90ce-ef16843980e6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "277d0c6f-950c-4053-b4da-e68522dac5b5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "06736edd-6436-4244-8832-cd7f8973120d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be a valid XML date time string",
                            "    req.credential.issuanceDate = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "5a87d1aa-3e56-4650-877a-e62402b8ad1f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "06c2d660-72a0-49b1-9d24-68354255d84b",
                    "name": "credentials_issue:credential.credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "82eead5e-68f5-4668-9b8c-6584f9fb357d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "93d73dcd-0bb7-4266-9e91-feb85eb026c9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "20d187a7-079c-4472-acb4-83e03c9c0f66",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject is a required property",
                            "    delete req.credential.credentialSubject;",
                            "}));"
                          ],
                          "_lastExecutionId": "210a095f-7435-4963-a3bd-7836b31dbabc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f3792255-3014-41e0-bde9-93ab054f3149",
                    "name": "credentials_issue:credential.credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6b226bb3-effa-4a6f-95ce-8152c2e25a77",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "683a3050-1de0-466e-9028-6ba90f732242"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6b33ca58-a1fd-49de-9f61-640f77511cbd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not array",
                            "    req.credential.credentialSubject = [pm.variables.get(\"credentialSubject\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "3992f4f5-9bdb-41dc-86f7-25719d0bb4d8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1a757890-a660-4ab5-93da-98a17680ac59",
                    "name": "credentials_issue:credential.credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a25e7c5e-ed45-445d-8dbe-30f49cd0c792",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1870823d-c261-42ef-9e11-0562ff5db1cf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c22fff19-cdd9-4ea8-94a9-53e9a2544486",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not boolean",
                            "    req.credential.credentialSubject = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "0b5078b2-437a-407c-ac64-615814d5555a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e1d11ef6-f13e-4f7a-875b-36a96c1b0f41",
                    "name": "credentials_issue:credential.credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "13b27901-cb1c-4626-b097-e98a0886d8fa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "67570d1f-e757-443f-bdbf-f285af3e720e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0878b742-27fb-4abb-8615-edf545217603",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not integer",
                            "    req.credential.credentialSubject = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "30d17d77-7923-4dda-b0ec-e4d3db98c6a3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9ce3e1a5-c975-4972-8250-7eb1d45dbd7f",
                    "name": "credentials_issue:credential.credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "30103a0b-ac5a-405f-bcd7-981becd909cb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5a26bf0a-a97e-4aaa-a9ed-42fcbecc5ba3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1da23f13-98bc-40eb-9ff3-9028697745b3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not null",
                            "    req.credential.credentialSubject = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "09733a56-8680-4856-aa38-05770c069ed0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9f2eb4ad-1201-4a1c-882e-760e0ef09a44",
                    "name": "credentials_issue:credential.credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2a50212e-a048-4bed-af64-fbf68ac53f6d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a08cf47e-5cbd-42f2-87d8-e70beb51c8c6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eee804a4-b128-4a4f-a718-234fc1acba3e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not string.",
                            "    req.credential.credentialSubject = pm.variables.get(\"credentialSubject\");",
                            "}));"
                          ],
                          "_lastExecutionId": "85d12d2d-6727-4262-8dee-b93768286787"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c1acae1f-dc72-4087-b597-13aece477b26",
                    "name": "credentials_issue:credential.credentialSubject.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0a23bb6b-6c2d-4c82-b922-02117bbce19c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1bb5fdd3-0e54-44d5-add3-2b5a37a28a24"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cba7e504-9936-4092-8a00-9a5a4f7f3425",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not array",
                            "    req.credential.credentialSubject = {\"id\": [pm.variables.get(\"credentialSubject\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "c60181bb-9ad6-4847-909d-7c00bb23bc4a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "01ae0e53-4d54-462c-aeef-c16c4f5eb4f4",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6b0ea9cb-157a-4986-82b3-b260d6a92c47",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "51b647ee-343c-49fe-a06b-6a3c29176353"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "39f652fa-de33-4af9-ad22-d0957b69137d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not boolean",
                            "    req.credential.credentialSubject = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "3dfdb274-e7b9-4658-a53e-2300a908b4d3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8f9a2737-c47f-4bb9-87b5-73ef8ed2e961",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 2",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2f954c20-8bc8-4ed9-9a15-539c62b6d990",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "08a96f5a-8c7e-4c17-9062-be97eb98a6c0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "78713a9a-7a0c-4eaa-8a1c-bf111691fb12",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not integer",
                            "    req.credential.credentialSubject = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "ac4cefa5-21b1-4f8f-8cff-cabf7a921218"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4de10755-761b-4b89-939b-7701ab7a5b87",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 3",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9255f177-89e1-4ea2-80e8-5bef083002a1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fc5c3133-f03a-40b0-9449-16686452468c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "77d61e97-ee7d-4122-a83d-f649fb67d7d0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not null",
                            "    req.credential.credentialSubject = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "a4951a65-d9ed-4ba3-ba5d-3d50fe776026"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4295a0c1-5da7-4e2a-8fd4-14bc9ecb848c",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 4",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "caeca225-89f3-4f17-b3d3-9646eb4f269b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "665782cd-1df4-42f9-b97c-6290f1c3ebeb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9dbb0437-46cf-44fa-a8a3-728b441e21f0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not object",
                            "    req.credential.credentialSubject = {\"id\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "e1e98c25-da3e-4c7b-9397-4c5208dae59c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e0207517-304e-4f22-a401-6c043bdd7b16",
                    "name": "credentials_issue:options:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0e67ce5f-b267-4454-8feb-a2dbd372fd46",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1dde658c-c050-4c7f-a9f1-4c8896293d65"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3dd6b31f-1c3b-4404-9931-d4e66b9923ff",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options is a required property",
                            "    delete req.options;",
                            "}));"
                          ],
                          "_lastExecutionId": "7de4c1c9-1e5f-4a14-b0ad-2c5d9191ccb1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "64f3de4d-c4a8-4176-9e18-d4216136f966",
                    "name": "credentials_issue:options:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5d8d5c17-fa78-4b48-b036-86b3bcd4e124",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4c3d2aa3-21c9-4f5f-bdb9-6e90911a882d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1d39a0e4-1064-4324-b082-6955785295bf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not array",
                            "    req.options = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "980b6752-9384-458f-9007-072d40317076"
                        }
                      }
                    ]
                  },
                  {
                    "id": "84d040c8-85cf-430f-a64d-42c9ccd1df8d",
                    "name": "credentials_issue:options:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ae95e3de-0690-4988-9162-3ad84b41c0f8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2da53ec1-25b7-4480-8297-a8ae259c7d73"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "37a01ceb-57f7-476d-a954-fcd8f6e10c0b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not boolean",
                            "    req.options = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "713621bd-fac3-41e6-8a52-83b0454dcc8d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "38f28d25-a102-4537-bb19-25e6b231cec7",
                    "name": "credentials_issue:options:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fde90c45-cccb-4c6a-9735-5ce147eb75e0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1830dce4-0518-4047-ad8a-e1819ab1b921"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8b23aa2d-0285-4793-bcd2-20d863dafdd3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not integer",
                            "    req.options = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "b42855ad-8f61-4112-b8cc-f331c7a43582"
                        }
                      }
                    ]
                  },
                  {
                    "id": "48365a8a-65e0-4458-bee8-1f42e0a94def",
                    "name": "credentials_issue:options:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d215e82a-0fdb-484b-82e1-741b8a5da5d9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b5292a28-60ac-4ff0-9cc2-2f3d5d0502c7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e36320f8-ff2e-4e6d-bc5a-5958b3325764",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not null",
                            "    req.options = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "a1a40042-c967-4176-b40e-14a0ec020a08"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bde0eae5-d58e-4ad8-8a79-b58c7c4ea63a",
                    "name": "credentials_issue:options:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ff6be35e-8f96-4445-8879-4c3e32636636",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "46dbeb0d-8cb9-455c-a7fb-6ee59524c74a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5e58af51-7f3a-4eab-8caa-fae854b3bfe6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not string",
                            "    req.options = \"\";",
                            "}));"
                          ],
                          "_lastExecutionId": "391a44fc-d666-4c41-bdbe-5d2cd1cb78d7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c57afa5d-58b0-4127-addf-e7c30614cf8f",
                    "name": "credentials_issue:options.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b9590936-8bd1-4070-a16d-f09bb76fbaae",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "73858653-4aab-487e-a301-84dad2a2defd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6c3c3a51-5acc-4345-8107-e5eb06a3028d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type is a required property",
                            "    delete req.options.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "8393aa53-03aa-44fd-8a70-4234b01bd2f6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "863ea588-89da-4e0a-95ed-5e06414a772a",
                    "name": "credentials_issue:options.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3cfc199a-680a-4402-a7aa-589bc4eeb20f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bc21b2ed-5352-4297-893c-e103c7364aab"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "65a042d0-004d-44bf-81b7-013b46bb6cbb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not array",
                            "    req.options.type = [\"Ed25519Signature2018\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "cf4fce5c-00d1-41b7-ba71-7888d4f84e31"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b6e28daa-29a0-4b70-b65a-5de9835cdc3d",
                    "name": "credentials_issue:options.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b0852798-87b2-4fa0-9824-0a26c943855c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8b5d297a-a14c-49ff-be71-fd7dc177d157"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a291f2f5-9340-489c-9ab9-1c3424108346",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not boolean",
                            "    req.options.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "75d2e129-f1e6-4cd7-a108-c415613e0b9f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a095a260-89c2-48d7-9c2f-844caad6bcae",
                    "name": "credentials_issue:options.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0d79d6c9-3967-4dd5-890d-da5b6009c135",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "02e316fc-7ce1-4be4-afaf-f2debfe307cb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e8260205-c243-4bdc-852d-a9f695c6e09d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not integer",
                            "    req.options.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "d470ada2-83b4-43ae-9d00-ba14ad205877"
                        }
                      }
                    ]
                  },
                  {
                    "id": "af0b31de-0592-4e64-9782-21e67e312adf",
                    "name": "credentials_issue:options.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fd83a71d-45fe-49fa-96dd-7fed3cc8d70b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a47434f1-7c30-43b8-9687-c4b3a9e05078"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "18d99e08-c5e0-451f-8810-bcace67461a6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not null",
                            "    req.options.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "ac61f227-8114-4e35-b6f0-521e25a566f3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "507a9769-4b4c-4072-a1ca-1b8bc672dfef",
                    "name": "credentials_issue:options.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bffa492b-f067-4278-a836-a64caff5c080",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e2026ef4-85bb-4c2a-b3ca-e2858508e268"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9a4b1498-be5e-454b-b2a9-5de6d53ee5be",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not object",
                            "    req.options.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "42607008-b9d9-46cb-a38a-821233072244"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ccd691fc-323a-4190-a177-37ee6eca6231",
                    "name": "credentials_issue:options.type:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7e102353-b83f-4956-b0df-80df0e08e110",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2b47064d-193d-4d7a-b55b-cdc03c907c28"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9715f30a-8b95-4171-ae64-62a11425eaaf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be one of the valid values",
                            "    req.options.type = \"invalid value\";",
                            "}));"
                          ],
                          "_lastExecutionId": "c5307212-ea0c-4cf7-9fba-3096f93ea627"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ec455ef2-21f5-43bd-881d-db92e350aebf",
                    "name": "credentials_issue:options.created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8b769d34-81bd-462b-bfa9-c19ee4af34ea",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ee9103fb-becc-49ef-88b4-2e341e018a18"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9502588f-256a-4a80-8439-3f48a7993ca5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not array",
                            "    req.options.created = [pm.variables.get(\"created\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "a3c61216-ed3e-4091-a396-e62d33974013"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f4cc5310-c4a3-4bc5-af14-a4ec914625a0",
                    "name": "credentials_issue:options.created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7e6295fc-6620-4eb1-a6f6-08598fc574f8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "645b9ec7-4e70-4eff-834c-c6a849111d1d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7c1e3dab-77e2-4025-b0e3-e3b0cd130f62",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not boolean",
                            "    req.options.created = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "510e3ee3-5cbb-484b-9927-27681ea39b97"
                        }
                      }
                    ]
                  },
                  {
                    "id": "de2dd808-e80b-472c-81df-1582a6d224d5",
                    "name": "credentials_issue:options.created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "aae28770-34f7-4ef4-9b4e-a0cef5769aae",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "94bc9a38-d8aa-4fe8-a98c-c49e0095e31b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "36d88c95-9907-4de4-8c41-01240871a224",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not integer",
                            "    req.options.created = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "a8b4f50a-5106-4a06-a625-bd5042594d1a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5b865ac6-c712-493a-8e61-e69fd4b20523",
                    "name": "credentials_issue:options.created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9470da92-03fd-4e42-b6cd-05c518aa7691",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2c3289e2-d646-4b77-9841-05cf4bd20412"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e76746d0-d80a-4845-8f79-62a52e2f1164",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not null",
                            "    req.options.created = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "4ba0b146-75a1-47e8-9ed1-0c360cfa09b1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e0644510-d51f-4ef9-8805-882f0a0e25dd",
                    "name": "credentials_issue:options.created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3163e565-61ef-4336-82eb-189fe780e62b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8d626b4d-f4ce-4197-9818-58f2575dd28d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c0e100e8-d1c1-4da5-9577-ef84d016c7f2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not object",
                            "    req.options.created = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "9346683a-e86d-4227-b594-d9cbf8644ae8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a872a9ce-aaa7-4687-a4a1-93007e154343",
                    "name": "credentials_issue:options.created:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "033459c7-ca2d-46c9-8846-e5d9ae83aba6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9c374c39-5161-4ea7-b520-13e666a00f3c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "76be1111-aa21-43aa-9ed2-3e9fbfc66173",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be a valid XML date time string",
                            "    req.options.created = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "9a3300da-440f-46ed-bfad-584bfc8da869"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3801e567-89cb-43b4-a684-58528c997dd9",
                    "name": "credentials_issue:options.credentialStatus:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "235ee0e5-de31-45be-ad40-2a5fdb90880d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f02e7c86-7436-41bb-9ba0-f1c4e33b14e0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7e9be265-126e-4523-a321-3979c36700a4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not array",
                            "    req.options.credentialStatus = [\"StatusList2021Entry\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "eabab013-bbf1-4096-8dcf-4167cffe631d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "632ae0f0-5229-487a-80b0-4098bc706dc8",
                    "name": "credentials_issue:options.credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0cd12211-069f-4155-97c6-fd3d4577a050",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "74b66a3b-44ca-4ab6-99eb-329ae8595d74"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d8133f66-3f43-48a3-8fbf-1db7754c472f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not boolean",
                            "    req.options.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "d8cbb46c-991a-4262-8323-011d28bc28db"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b48b2db6-125b-4981-9c1a-f5c6bf4c905f",
                    "name": "credentials_issue:options.credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "29ef246b-410d-41f0-bf59-69697dc4e098",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3b9c800f-1740-48b7-a09b-f6fec76a2cc8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d7529223-2a3e-4f87-b058-e87ade0671f7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not integer",
                            "    req.options.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "f5b12edd-dbcc-4356-b85c-424b46e80ddb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "871bfe1a-c5c3-47c0-8370-f649b7b27ab3",
                    "name": "credentials_issue:options.credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ca452aab-0f38-4256-a451-1a35f0e28229",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6f79bb35-ac32-47b6-8745-6f3b32b59912"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "077a0b27-14ac-4bce-931a-e5a1397738ff",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not null",
                            "    req.options.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "b0df254f-3d17-4451-8a23-dcec95bc7208"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4dca16fc-6a12-4c21-a2d0-db753e9e9190",
                    "name": "credentials_issue:options.credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "22979fcc-74a1-4e92-980f-a93593a1c956",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "efa3dad4-9ff3-4439-9e33-3148ad817605"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "22030cdf-728e-480b-a2cf-edc834f782c3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not string",
                            "    req.options.credentialStatus = \"StatusList2021Entry\";",
                            "}));"
                          ],
                          "_lastExecutionId": "7a9e7d5b-d2f3-4a51-8328-514922018de4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9d64f1d4-de3a-405f-ad8e-2d628f7d6c0f",
                    "name": "credentials_issue:options.credentialStatus.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d8a0fc33-c7b1-408f-ac53-5eda781d2346",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "093744bc-475c-46b5-a52d-d8dbdbdb98c1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c65ac30f-6477-4b94-b7b7-f97ee5a7631e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must contain \"type\" when present    ",
                            "    req.options.credentialStatus = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "a0b64b17-878e-4a89-88f4-8988760deeb2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3ff21609-d2a0-4d3b-8ecc-da3029219b72",
                    "name": "credentials_issue:options.credentialStatus.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bf3b1d14-31cc-4d47-a2b5-68b09c85e190",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "88f3095a-2dd8-4278-8d50-09871fe1f671"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e1167dc6-4fe3-4482-9f43-2d8701e50df5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not array",
                            "    req.options.credentialStatus = {\"type\": [\"StatusList2021Entry\"]};",
                            "}));"
                          ],
                          "_lastExecutionId": "a7954f2b-6b98-4905-ab91-3b617103d109"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5e945250-6dd8-4902-9496-e2d73752fd3c",
                    "name": "credentials_issue:options.credentialStatus.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d3256f5a-e9e1-45fd-9be8-7863ab677902",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7f305976-7a54-4b66-acef-7d2146dadf1d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a706aa72-737a-45a3-a297-225df1f9f89e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not boolean",
                            "    req.options.credentialStatus = {\"type\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "cffb7c76-8a92-4b95-bfd6-9c786eb75cb7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "46b8c235-04ba-438d-ba8f-fe5d4c1498c6",
                    "name": "credentials_issue:options.credentialStatus.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e0270021-80a8-4673-9d0b-0b44e7072f51",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b5554209-6c79-4c39-a6f7-6ef69bacdaba"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2dd6a81a-333a-45f5-91d2-64edcb35f303",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not integer",
                            "    req.options.credentialStatus = {\"type\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "a4aa7acf-3fc5-4528-a496-8021d41baaed"
                        }
                      }
                    ]
                  },
                  {
                    "id": "08da35f3-fdbc-4f39-af22-1bd6c620f814",
                    "name": "credentials_issue:options.credentialStatus.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "db91ab00-59c5-4786-8a64-21bdd0c23545",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cc2e0a93-f635-46b2-beb6-a58d8901d175"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6f4fe6d5-92bd-40eb-a4d5-966710d94c01",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not null",
                            "    req.options.credentialStatus = {\"type\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "d767609d-d1bd-464b-be30-4bc9620a8ef0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e5bed5e1-ecff-41e3-ae98-eb576dc32f33",
                    "name": "credentials_issue:options.credentialStatus.type:null Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6e014d59-2c06-4700-933c-5f816fd2fd05",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7650e1f6-8a79-447c-813e-1b8a7310b659"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e1070bf5-4758-40e9-87d6-d569eb1bf8eb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not object",
                            "    req.options.credentialStatus = {\"type\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "7a0a9211-3680-40f4-8c68-2f4ff224200b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2bb3159c-25e9-4af7-9550-b82f37cd09f7",
                    "name": "credentials_issue:options.credentialStatus.type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "46d636ec-2065-43a3-9514-24f89926b550",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "b86b6d02-be9a-4d61-84ed-cc6e29bc542c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "26fcc939-6c3f-43d4-938f-3d9fa4264c36",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be a valid value",
                            "    req.options.credentialStatus = {\"type\": \"invalid value\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "3f5bae51-bb60-4a9a-984d-ae0a09e638d9"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "722832f7-29ef-4baf-9eba-af901cf01300",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "9a5e496e-6457-417e-acdd-f47fc1db3656",
                    "name": "credentials_issue:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fffc5cb7-53e1-4d6c-8780-6952347c69ca",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "1aafab5c-c5b0-4ae4-ba70-4badb69325f9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4f8b4093-c747-4a6b-9bab-81807285895e",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "a8545dbe-94a8-480d-ac55-43d7f2f01f4e"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "d80c19ee-7834-4079-8841-7b878e8a5b0f",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "904886cb-a916-4efc-8774-55dc7686f22c"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "b73b448f-d81c-4992-8ef9-2c6875b5427c",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "d05544e1-2d81-4b17-acfd-41575bec08c8"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "5977c689-ed2f-4ccc-a886-8e5d30319288",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "242b7765-8abf-471b-b779-3f4fc7ed2ea8"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "425851b5-98f7-4520-b83b-f6f70df022cf",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "c8ab0c67-87cb-4071-b31a-d1bad39e069f"
                }
              }
            ]
          },
          {
            "id": "8ba65c7f-375c-45ba-85c4-3564457e1b24",
            "name": "Positive Testing",
            "item": [
              {
                "id": "69295c6c-c14e-4a0c-8a5f-6b61086cf2f7",
                "name": "Duplicate Keys",
                "item": [
                  {
                    "id": "e8d45054-59e5-48fb-b2b9-4503ec0ba3c0",
                    "name": "credentials_issue.credential.issuer:dup",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"credential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"issuer\": \"{{issuer}}-ignored\",\n        \"issuer\": \"{{issuer}}\",\n        \"issuanceDate\": \"{{issuanceDate}}\",\n        \"credentialSubject\": {\"foo\": \"bar\"}\n    },\n    \"options\": {\n        \"type\": \"Ed25519Signature2018\"\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "text"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f71fbd78-da76-47de-b03c-cc28a0b2aeae",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 201\", function () {",
                            " pm.response.to.have.status(201);",
                            "});",
                            "",
                            "pm.test(\"response issuer matches request credential.issuer\", function() {",
                            " const { issuer } = pm.response.json().verifiableCredential;",
                            " pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "337949f7-d867-491d-a7ce-3ae5f1376a2f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "74e5b152-225c-46d6-8ac7-4d3862640a0c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "42ed2585-dd38-4fef-94d3-3678278ef55d"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "60682699-cabd-4cd9-9922-9f72b7424f22",
                "name": "credentials_issue",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "a2cf528d-65e0-4ef7-b495-01f584bf5fb8",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        "});",
                        "",
                        "pm.test(\"response issuanceDate matches request credential.issuanceDate\", function() {",
                        " const { issuanceDate } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuanceDate).to.equal(pm.variables.get(\"issuanceDate\"))",
                        "});",
                        "",
                        "pm.test(\"response proof.created is close to 'now'\", function() {",
                        " const { proof } = pm.response.json().verifiableCredential;",
                        " const delta = Math.abs(Date.parse(proof.created) - Date.now());",
                        " const tenSecondsInMs = 10000;",
                        " pm.expect(delta).to.be.lessThan(tenSecondsInMs);",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "f2e9082a-b27d-4aa7-8a75-24a8220953a4"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "dc4c0447-9056-4cd4-ac6a-d0852b3c210a",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // noop",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "d49345cf-5bc8-44ab-8de4-a34d8b48bca5"
                    }
                  }
                ]
              },
              {
                "id": "efe28d77-60f5-4f06-9a8b-f582b3955122",
                "name": "credentials_issue:credential.opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "4a9dcc7c-524c-4a5a-bbf7-efbfece2c8b2",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verifiableCredential.id matches request credential.id\", function() {",
                        " const { id } = pm.response.json().verifiableCredential.id;",
                        " pm.expect(id).to.equal(pm.variables.get(\"id\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "a64c5036-e2f5-4a56-b53b-93ccfefe35d0"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "0b55449c-961d-4fb6-8d38-20fe14b8c374",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.credential.id = pm.variables.get(\"credentialId\");",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "b82edfbc-d9bf-4f56-90f6-133b342a980b"
                    }
                  }
                ]
              },
              {
                "id": "92f03a8b-1795-4c27-9337-780a225b14c9",
                "name": "credentials_issue:credential:alt.issuer.object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "458e0850-6800-4a8b-bb1d-4a03c293d906",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer.id\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " // Implementations may reduce object with just \"id\" property to a bare string",
                        " if (typeof issuer === 'string') {",
                        "  pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        " } else {",
                        "  pm.expect(issuer.id).to.equal(pm.variables.get(\"issuer\"))",
                        " }",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "7c01648c-b8da-4a4a-8261-ec03eaeda766"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "d3f38461-0085-4547-b7f8-624760091cb0",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.issuer can be an object with required 'id' element",
                        "    req.credential.issuer = {\"id\": pm.variables.get(\"issuer\") };",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "8c80b435-fb44-495c-a8b3-d5a6a3610ca2"
                    }
                  }
                ]
              },
              {
                "id": "049163a7-069a-44a8-b3dc-986b35f869a4",
                "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "ff1765b7-5666-4ac5-8916-3fe0ea21c03c",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject.id matches request credential.credentialSubject.id\", function() {",
                        " const { credentialSubject } = pm.response.json().verifiableCredential;",
                        " pm.expect(credentialSubject.id).to.equal(pm.variables.get(\"credentialSubject\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "fd7aef79-9831-4654-837f-f5f671c91084"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "20fdc97a-0b70-445c-8cc5-a4a71e81c3ae",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.credentialSubject can be an object with optional 'id' element",
                        "    req.credential.credentialSubject = {\"id\": pm.variables.get(\"credentialSubject\") };",
                        "}));"
                      ],
                      "_lastExecutionId": "e38e59c0-2d4d-4725-a4a3-5a6a2a4bfb1d"
                    }
                  }
                ]
              },
              {
                "id": "ef762d6c-a306-4b9d-abc4-42be0e394ee2",
                "name": "credentials_issue:options:opt.created",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "931090a3-276c-4272-9ab1-1efe1ab0055b",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response proof.created matches request options.created\", function() {",
                        " const { created } = pm.response.json().verifiableCredential.proof;",
                        " pm.expect(created).to.equal(pm.variables.get(\"created\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "03e2b593-d2d3-45c6-adbf-ba8c671b6f1e"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "8e22fca4-b05b-4547-96d5-44ad116d5f5d",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.options.created = pm.variables.get(\"created\");",
                        "}));"
                      ],
                      "_lastExecutionId": "2d3ae3ec-607f-4092-876c-e82111e4c7d2"
                    }
                  }
                ]
              },
              {
                "id": "d7e6427a-4487-4b7d-b418-2a597a7ebaa9",
                "name": "credentials_issue:options:opt.credentialStatus",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "c0c3ec8a-e129-4eb3-9265-f58944f3a257",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "75967dde-9000-45e6-9554-d2e64be86bd0"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "b9670815-1c7b-47f7-9435-c55b9ea5d93c",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // options.credentialStatus can be an optional object",
                        "    req.options.credentialStatus = {\"type\": \"StatusList2021Entry\"};",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "6f363e24-0714-4361-86c5-0829d3a9afbb"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "4408cf75-c686-485e-9c5f-cc4a3743698b",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "9b26b07e-242d-4ad7-baba-1dd0448f578b"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "a4b1c137-a706-432c-ad70-eb4995bb9e05",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "21cad65b-e084-4e5c-8e91-58f0594b471d"
                }
              }
            ]
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "deb4dac9-e929-490b-9803-c1303d3e91a8",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "pm.variables.set(\"credentialSubject\", \"did:example:123\")",
                "pm.variables.set(\"issuanceDate\", \"2006-01-02T15:04:05Z\");",
                "pm.variables.set(\"issuer\", pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "pm.variables.set(\"created\", \"2006-01-02T15:04:05Z\");",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credential\": {",
                "        \"@context\": [",
                "            \"https://www.w3.org/2018/credentials/v1\",",
                "            \"https://w3id.org/traceability/v1\"",
                "        ],",
                "        \"type\": [",
                "            \"VerifiableCredential\"",
                "        ],",
                "        \"issuer\": pm.variables.get(\"issuer\"),",
                "        \"issuanceDate\": pm.variables.get(\"issuanceDate\"),",
                "        \"credentialSubject\": {\"foo\": \"bar\"}",
                "    },",
                "    \"options\": {",
                "        \"type\": \"Ed25519Signature2018\"",
                "    }",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};",
                ""
              ],
              "_lastExecutionId": "4a20e856-eb6f-44b1-9446-78cdd5dbb478"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "191373d9-a520-4b10-b406-e6347517a115",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "76ae7d69-a1a0-4483-99a0-8b2b8c004ac7"
            }
          }
        ]
      },
      {
        "id": "5b951aaa-c6b7-4369-bfe9-722a23b87304",
        "name": "Credentials - Update Status",
        "item": [
          {
            "id": "80d15ddb-f6d5-49f2-ae81-c565a6817a93",
            "name": "Negative Testing",
            "item": [
              {
                "id": "e53fe7f2-506b-4425-8ea8-2b45417eebc5",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "ea5893e7-e503-4f81-bd97-d1977bbcef9e",
                    "name": "credentials_status:credentialId:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4ff0560d-e01f-42c5-9884-0cfca3d44dc4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "299df799-d3fb-4313-a9aa-77e8cabb528e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e9c27865-68ab-4284-a951-e7262c853676",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId is a required property",
                            "    delete req.credentialId;",
                            "}));"
                          ],
                          "_lastExecutionId": "9f01b625-ccd5-4306-8a0a-1876991be879"
                        }
                      }
                    ]
                  },
                  {
                    "id": "30347284-212b-43d1-8e4e-4b21b1008eb4",
                    "name": "credentials_status:credentialId:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fd645bd6-5fc5-4d0a-a543-213dd060aaf1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4ce56779-5cf3-41e1-889a-2e24f2f51098"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "76db9fc0-0f43-49f7-89a3-6aaac98aa6be",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not array",
                            "    req.credentialId = [pm.variables.get(\"credentialId\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "3d4d02af-20ca-4a12-861d-4e501ee4553d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a33094ab-e787-4a93-ab47-b90445f602c2",
                    "name": "credentials_status:credentialId:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "73a2d6f1-807d-4749-8541-195bdd89ac4e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7cf22bb7-2f7f-4438-bcb0-323ba129b969"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6a4e9e05-cc0b-4e04-b85a-9a28f4d9a8a3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not boolean",
                            "    req.credentialId = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "adfaa4fb-c4b2-4f52-8461-c00de704f63c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fb9093d8-ff7b-425d-93e8-effa6d092709",
                    "name": "credentials_status:credentialId:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "81f7ec43-b346-42ff-8fb1-3674d3978f04",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "92297efd-56a0-48e9-b5c4-6825d6c122c7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "11881f0f-a49b-43b2-916b-853cf3b9b70b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not integer",
                            "    req.credentialId = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "74e98004-3141-4e3c-aea3-189e150f11b1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f403649f-37cd-44f4-9c19-3af23442dc01",
                    "name": "credentials_status:credentialId:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "20d6c366-7a46-43f7-958d-51246d5486c8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f0d1b9e8-ba02-4c85-a543-301190bde605"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bd2d46e5-2a6c-4be5-b9af-9b42d27decb6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not null",
                            "    req.credentialId = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "7e747be6-078b-4fd6-bc4b-d5f6390378d0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "486c2cda-5858-4cfd-92e7-293f0d88324f",
                    "name": "credentials_status:credentialId:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4181c2b9-0017-4ed2-9471-228308a0058a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d2f17bdd-5039-41fd-8230-2b6621268f4e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "21ca75cb-e687-49e4-b4ac-be9f745b4191",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not object",
                            "    req.credentialId = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "cb561eb1-a013-4cf2-a7be-4a9e1b5d50e9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4839c9e3-3c39-4d39-8f3f-56fd6365f660",
                    "name": "credentials_status:credentialStatus:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3d91104f-1337-4afe-bc95-ad3cf7836e1e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fa9eac92-998b-4626-8f1e-e63807d531be"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a1fde6e9-7df1-4e3d-8f78-a0f38cf03e70",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus is a required property",
                            "    delete req.credentialStatus;",
                            "}));"
                          ],
                          "_lastExecutionId": "8e99425e-5820-4079-b275-7cb571bc4ed6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a8f5b467-04b4-4752-b0a6-d3d9b6a28ea5",
                    "name": "credentials_status:credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "271d86a2-f044-43e4-948a-99bdd88ed4aa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7dcd7145-9914-49e1-827d-cbc627909b11"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a6a9bd32-35d3-42ea-9038-924b6e8c744a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not boolean",
                            "    req.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "4a443bbe-0d10-471a-961b-5d4155fd94aa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f7f33cfd-b8e9-4a81-bcad-be900faa77f5",
                    "name": "credentials_status:credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ace3ed28-390e-41f5-8c8e-d78f45631970",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4585aa23-ba42-4dc2-af7f-22f964ff0356"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "31561e14-e5f5-4ad6-bc5c-82ba4edd339a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not integer",
                            "    req.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "477e82ed-d1b8-4d12-a38b-372b7145ba31"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6bdd9fef-7590-4862-9b74-dbd223700d17",
                    "name": "credentials_status:credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7601720f-9fdd-4e8a-8d46-66621b54557e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bbdae2bc-793e-4b2e-9ecc-ec88954890f0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a590dbba-36f0-4308-8574-b03d94cf2881",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not null",
                            "    req.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "6b37b467-7505-4291-a05a-fb0576bc7d43"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4ea5ccfc-0021-4c05-9ad1-9881914cad7b",
                    "name": "credentials_status:credentialStatus:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a4fc0d28-78ac-4e58-842d-d02d255ceecc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "772dec2d-c2bc-4243-82d5-6315d5d9f800"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ab2d22c7-be9d-434c-a785-c4507c823d65",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not object",
                            "    req.credentialStatus = {",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"0\"",
                            "    };",
                            "}));"
                          ],
                          "_lastExecutionId": "c9805ed9-25ec-4466-acd4-9cc4e63b0e2a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4bad755b-b4d3-4ba5-984e-0585437b30eb",
                    "name": "credentials_status:credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d67f8a91-0a1c-4568-8c9e-45979948e6f9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c02588a2-375f-42df-b24c-70d7f6251c0e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6308d742-6067-4e47-bf66-5807de3fe843",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not string",
                            "    req.credentialStatus = \"RevocationList2020Status\";",
                            "}));"
                          ],
                          "_lastExecutionId": "4d78b9c4-b0b5-4311-95da-0fbac6bd6d8e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d3538cef-c6b3-4551-bd0d-c6523336019c",
                    "name": "credentials_status:credentialStatus:too_long",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f8bfb6fd-c2c5-4ce1-a238-1f82542ff8d1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "63f2687b-606b-4b97-b080-cfcdf38a9d6e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e5de6ac1-8a4a-4eb4-8d1a-0830d06ef618",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus can only have zero or one elements.",
                            "    req.credentialStatus = [",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"0\",",
                            "        },",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"1\",",
                            "        }",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "8cc34ecb-6963-4e4c-b93c-f859dab52ee8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a9e41061-a7d0-4cdf-98c7-2884b1fe586b",
                    "name": "credentials_status:credentialStatus:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2e8a4daa-d08d-4dde-ba37-d15e55074659",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dd214769-dbf8-4e15-972f-12ccfd60280f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ea0b58cb-489d-4a9f-8836-f73b4133c677",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not array",
                            "    req.credentialStatus = [[]];",
                            "}));"
                          ],
                          "_lastExecutionId": "8a3c4931-b811-4205-bee0-a81e6e71b1b4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c1b63fce-964e-465e-8737-610348359088",
                    "name": "credentials_status:credentialStatus:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e2f33d1c-201e-4362-b621-6308da2fda4e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3789f2e8-aa9e-479b-8d07-841dab7535af"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b50ce12b-6c3f-46f1-849c-03b7cef8c2cb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not boolean",
                            "    req.credentialStatus = [false];",
                            "}));"
                          ],
                          "_lastExecutionId": "745e6fc2-30ba-4b03-b632-bab2414eb1c5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "808bd54c-9726-442d-8a97-ef7fa21ba2d2",
                    "name": "credentials_status:credentialStatus:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "82316937-8581-468d-a176-67fb7968b9c9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "60daa5ae-7a54-4930-adcd-f169e17397bd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "873d1d4f-4a3f-4b82-98c2-3ab62e56eb1a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not integer",
                            "    req.credentialStatus = [42];",
                            "}));"
                          ],
                          "_lastExecutionId": "d7f22523-c8dd-4796-b582-1f4aa41cc841"
                        }
                      }
                    ]
                  },
                  {
                    "id": "389b6713-ae50-473c-af4e-d95d89045d19",
                    "name": "credentials_status:credentialStatus:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "649b91d4-ec1a-451c-ab0f-e858fa14d034",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1d44f8d4-ca09-40bd-8125-18e3e0677bef"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2ff78791-2283-4a45-b7ac-0fda2a16b131",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not null",
                            "    req.credentialStatus = [null];",
                            "}));"
                          ],
                          "_lastExecutionId": "7030c8d2-df78-4500-a642-a7f549461568"
                        }
                      }
                    ]
                  },
                  {
                    "id": "424c38dc-c435-4539-aa87-4ea5b0cf50fa",
                    "name": "credentials_status:credentialStatus:item:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5fc53875-6438-40c8-9115-6d9131f777c4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "83fcc260-d830-431a-b28e-00b46e59eee5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "74b4b66b-a0af-4fe3-b0cb-fdd9668574bc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not string",
                            "    req.credentialStatus = [\"RevocationList2020Status\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "39732408-1870-4ae8-87f0-b47b1c4a4956"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fdf24cd2-d194-4513-ae2c-a2d48cf08312",
                    "name": "credentials_status:credentialStatus:item:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6f9cc410-ea3b-4769-a87f-5b85c2686d7c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f12bfaff-1971-460c-a5c2-c9958d876620"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "67eb7d27-2c1f-41cf-b09a-0d9e13847d06",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type is a required property",
                            "    req.credentialStatus = [{",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "8dfb90f5-58ef-42c1-93ff-c294e241fd02"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e110df7e-95eb-4888-8f4c-d0ebfd1f4097",
                    "name": "credentials_status:credentialStatus:item:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0ef3a035-8844-44c8-9bdd-ec403cada736",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ff310509-47ce-4cda-bda8-a5bf46741328"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5f0e3497-517b-4fc9-9a56-282b73062ef7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not array",
                            "    req.credentialStatus = [{",
                            "        \"type\": [\"RevocationList2020Status\"],",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "12314f61-ffe6-4bbe-8325-982e07d15f09"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b1e339aa-808a-4cfe-82e1-f18317d5bd96",
                    "name": "credentials_status:credentialStatus:item:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dc3e1ac0-aec3-4291-a950-03af6dc1926b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e3b5444c-7635-4205-8ede-0cb7e87f9fda"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "89f49619-8883-4f12-98db-d0e69916f0cd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not boolean",
                            "    req.credentialStatus = [{",
                            "        \"type\": false,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "4c6e551f-488d-4d08-8c1d-b7d7b932c260"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a735c5b1-7bb9-4140-b02f-5e9f0d23459e",
                    "name": "credentials_status:credentialStatus:item:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d447cbdf-c8af-41d6-9c54-4360673f8f3d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "31a5eafc-b9dd-4c82-847a-74e71258267d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2b04653f-0040-4c18-aecb-d3682a95c9b7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not integer",
                            "    req.credentialStatus = [{",
                            "        \"type\": 42,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "3b965b5e-40f7-4d41-bb49-9e770df8952e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "966759cf-badb-474b-8672-63587d3923a5",
                    "name": "credentials_status:credentialStatus:item:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "883f8a11-e03f-438a-bf8d-1a6163251266",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "05d94252-d563-4b53-b1bc-73adb7eb3286"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fbce7f55-9f55-4676-90c4-0faa78f20eee",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not null",
                            "    req.credentialStatus = [{",
                            "        \"type\": null,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "e358602e-9759-40ea-a20c-1fbd8f81f692"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b5b31519-e67f-4ff2-bf03-a22c5ff3f45d",
                    "name": "credentials_status:credentialStatus:item:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d3a3b6dc-3871-486b-8624-fbf0c116da66",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2c287290-0740-4ae9-afef-3b3524e9bf34"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8f54dfea-72bb-45a6-8a9e-cda82317a2c2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not object",
                            "    req.credentialStatus = [{",
                            "        \"type\": {},",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "6e1f6b6c-b5c6-4df7-a2d3-1b9c593dd674"
                        }
                      }
                    ]
                  },
                  {
                    "id": "199ec701-e40e-4ceb-b992-64d290ef2dbb",
                    "name": "credentials_status:credentialStatus:item:type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "43add130-08ce-4976-9ed4-c88c87b9e946",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3258866d-d712-4a3f-87f4-a10ca6d20c49"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "21e95002-caaa-448f-bd20-e50184054da1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be a valid value",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"invalid value\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "33bdbfab-a0c3-4dc0-bd1a-bdb32414869a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "42675ca3-7487-44de-a9b4-7173b040d09a",
                    "name": "credentials_status:credentialStatus:item:status:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0849472a-736f-47ad-b969-ddcdac5a3d29",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e4b93251-b8de-44f5-8663-f8a0059e87ad"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8c160d22-9529-4ab8-a399-7825999e55db",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "39b596e4-6edb-4cc6-a557-5e4b5e813739"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d825632c-03bd-4de4-a6b6-782b0ca27ba8",
                    "name": "credentials_status:credentialStatus:item:status:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7d0bfdc1-488d-49b4-b143-21c64206f926",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5c21594d-6baf-48d4-a35c-c5adfcd2f320"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2475f9bd-d079-4a56-900d-7f481d02e1d3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": [\"0\"],",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "18a98098-1660-40e3-a00b-acb676681266"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1adad85a-7088-4f75-bbdb-8a768d8942b1",
                    "name": "credentials_status:credentialStatus:item:status:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2460b30a-183d-493a-bb40-dd18b6d0eac4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9c1266b3-a1dd-46b6-b76f-7bb50893831b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "13c125bc-2c09-4aa4-aa0a-2c70c3de9c58",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": false,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "53448c31-156e-4ee4-a3f0-421af0abc13c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "11256798-98b3-4a19-9fd2-04e8d12cda24",
                    "name": "credentials_status:credentialStatus:item:status:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "93a0f34d-3894-40ec-8ddf-3de0a13bddfb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "856a1e87-40af-47b7-b812-987afc244a9d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a4036f00-56c8-482d-8014-0a65f93b6674",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": 1,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "233248f2-437c-4fdc-ba11-37508f7d2483"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6650cdb4-54d3-45f7-9362-a17169f84f3d",
                    "name": "credentials_status:credentialStatus:item:status:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "53cb7d06-1c0d-42a1-b6f9-77f95418bffe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f95b459d-e31b-48a8-a762-b1259c04c5d9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b2deb3c2-7e2a-43a3-b7aa-023e6d07958a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": null,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "890cdec8-83f7-4bf3-a272-3128cccf155e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8fc9c6b0-5d6d-463f-ab2c-5d002b2b39cf",
                    "name": "credentials_status:credentialStatus:item:status:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1ab5d58c-a03e-4b25-add8-e75326496eab",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4a2b716b-9783-446a-99fd-d903dc2be46f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "600134e8-c00d-49f0-a635-be477d78e5b3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": {},",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "4a2637e5-06fe-4364-b390-e1e7ced93dce"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7164f278-3c67-45cb-a492-33752efbac65",
                    "name": "credentials_status:credentialStatus:item:status:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1a7fe65e-bae1-4284-adce-ad0f8910c7aa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b97c39bf-2736-42c8-af89-20ac7b5e4754"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "53d05787-58fb-4198-85f9-9ea86af94e65",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be a valid value",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"invalid value\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "9e89fc4d-738f-479e-a74c-dff5aad6851a"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "324ca6f8-131d-4338-a6ac-663c14bc01f0",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "80a00f97-9a0e-4dae-b5c1-4af9fbe90447",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a43b428f-ad2c-498e-86ba-5ff7a628eb5a",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "bfc30f4b-c064-4908-9204-0d746fbb2829"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bbf368e1-b7d2-4285-ac31-fa4c001ffd75",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "33c82295-c02e-462b-b7f0-5c274681daee"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "4352f6cd-2bd2-4ed1-afea-d6a7556dde11",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "d228cd13-b69e-4dcd-9b8b-41556e20ced4"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "e7dc1253-6af1-47c6-a122-a77cfd2de70c",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "43409f17-b545-46ed-8c8e-85c0be8c3471"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "5973ce1f-79a6-4d7e-baed-1b54ef022aa0",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credentialId\": pm.variables.get(\"credentialId\"),",
                "    \"credentialStatus\": [],",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "30f86985-ac70-466b-b376-66b6ce8501aa"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "72cd5bff-75e8-4780-95d3-96a5be180f95",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "9d34adce-e28b-4392-88fe-a7f07d0e0a89"
            }
          }
        ]
      },
      {
        "id": "42415319-0f36-4fa5-a00f-18b6e72a997b",
        "name": "Credentials - Update Status (StatusList2021)",
        "item": [
          {
            "id": "fe971436-a878-4d50-9462-a50ec55c4746",
            "name": "Negative Testing",
            "item": [
              {
                "id": "50e6ddba-f448-440a-a89f-8b60242d6adc",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "755e6491-deb5-4e88-8853-26ceab3a3c9e",
                    "name": "credentials_status:credentialId:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a94d29e5-3812-4d08-bff9-400a5ca4dbe6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "682b698c-d35a-4965-95f0-f51d6de5d0dd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "416dc086-0ff6-4539-af2f-c5456d4fc18a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId is a required property",
                            "    delete req.credentialId;",
                            "}));"
                          ],
                          "_lastExecutionId": "9a0501e4-8efb-47e7-9b15-d3ab16f665d2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "93e4a843-01a4-4ad9-9f69-a566fe090450",
                    "name": "credentials_status:credentialId:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "97b083c6-faab-478e-addb-8f2ecdd2b754",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "604afe0a-16a5-452d-8d3f-6d3bc7056016"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c5b4b989-fed3-4e44-b400-528dfd70bbf1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not array",
                            "    req.credentialId = [pm.variables.get(\"credentialId\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "c43d21cc-8055-414c-9846-e1324fb96fcc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "68fe3718-c06f-495f-8b85-9ff2899bc8d0",
                    "name": "credentials_status:credentialId:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c08baa1f-0e3d-479f-988c-ca36e194700c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cf232782-c2c9-4961-b56a-4f4930f8355b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "88093a60-8514-4b4a-81d1-514fc1315d72",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not boolean",
                            "    req.credentialId = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "8968a7aa-7928-415e-9ae4-8a1f78d400b2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b1a447df-a2ea-484f-939f-ccb76a754f54",
                    "name": "credentials_status:credentialId:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b8be04ef-90c2-4553-a91d-6a325890a474",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c7e32728-941e-4cfe-babd-07daa612de2d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f2ec1e54-b3c7-488a-b049-2028c2d7016e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not integer",
                            "    req.credentialId = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "67ba0b63-85a7-4079-8e9b-759d2c7b882a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "04ee55d0-5225-4b17-8a28-5fe7579bd030",
                    "name": "credentials_status:credentialId:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b35c3979-5e49-44c7-a035-0f83d178c9db",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "de6ac8af-03ce-4422-8fe7-9218a4f8fb83"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cd6f9089-359c-4de8-accf-74fd1cceb460",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not null",
                            "    req.credentialId = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "f1de72f5-201b-494a-accb-265f1b68e5e4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "93fda3f7-0785-4b93-a44e-d4128f170797",
                    "name": "credentials_status:credentialId:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9371c371-539a-463b-860f-b2bf5aad3baa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "035a3c06-5688-475b-844f-4713f14e2606"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "87e9a319-91f9-4a54-9000-32087141ae7c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not object",
                            "    req.credentialId = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "c2dcbf02-4934-4b0c-a85f-a6dc7e3b2b78"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4aaa1dd4-52fa-4cca-9a0a-4be9c9259217",
                    "name": "credentials_status:credentialStatus:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f1adfd3a-2f1a-433c-b4e5-168985ced8c4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0127f20b-47c9-40de-9c64-cc351ed178bf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "decc798d-267d-4bd6-b9d8-07decbe5f6c8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus is a required property",
                            "    delete req.credentialStatus;",
                            "}));"
                          ],
                          "_lastExecutionId": "127b3e99-bbc3-49be-9f6f-00e8849666f2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "187a22df-d45f-4aff-ac66-732ffd5fad84",
                    "name": "credentials_status:credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "74326142-b73f-4ff2-9e21-c4fea3ab1f76",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a6d38069-b035-49d7-955c-b0b865c26698"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "db491347-2978-419d-88d4-9c0914702972",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not boolean",
                            "    req.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "869f812e-509a-43fa-b9e6-5f6a87568086"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d2e9c3d5-af56-48e2-b90f-e55deb56d25a",
                    "name": "credentials_status:credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "87018a46-0573-4e5b-a249-9166f4a81b16",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4358a0ea-6337-4766-88d4-aefa6b5e63ee"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e35266b5-2768-480e-bb14-12c70e13067a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not integer",
                            "    req.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "e4c3e668-11b4-4ca4-a7fb-f708704617ef"
                        }
                      }
                    ]
                  },
                  {
                    "id": "089169b2-0d0d-40f0-9c1c-4f77128e3401",
                    "name": "credentials_status:credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c4cb5f2b-76af-44fe-b706-3b1998164085",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "10ef6c9b-65f5-4323-8247-58624309a6e0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "57d769b4-4337-457b-851a-57a8aee6b3e4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not null",
                            "    req.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "9960ba74-614a-436d-b359-1286b5471d0b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "033de3cb-9786-424a-b193-61792263baa0",
                    "name": "credentials_status:credentialStatus:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c187d9ca-290d-4361-9209-eae4ed238963",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2f5f11f8-3228-4ebb-8bb0-5cdf1b7197b0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6aeb8e08-db58-46cf-86aa-09e2f3bd62ad",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not object",
                            "    req.credentialStatus = {",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"statusPurpose\": \"revocation\",",
                            "        \"status\": \"0\"",
                            "    };",
                            "}));"
                          ],
                          "_lastExecutionId": "8ea2b377-d012-4b34-a3c3-4bc788e877cf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6699a15c-2fcf-4c3b-bfdc-22cfeb4d7825",
                    "name": "credentials_status:credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "26909704-0560-42eb-8bc1-d33ff8d5b355",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d28d299c-258a-4d86-ac98-a5f6110a5d23"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dbcfa0c8-158a-4918-a4e6-2122e4833e66",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not string",
                            "    req.credentialStatus = \"StatusList2021Entry\";",
                            "}));"
                          ],
                          "_lastExecutionId": "253ed2c0-6862-4b04-8ffa-bd864d6b64e0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3719fb1a-3127-4226-8742-f0f935b74ef0",
                    "name": "credentials_status:credentialStatus:too_long",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1f8be766-b709-4ddc-b5f7-25d1f38ecb3b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a06b9970-b17f-4703-9bbb-fff307f763b4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e73045f6-de59-4ee9-b6d5-4bdb4a79c8a0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus can only have zero or one elements.",
                            "    req.credentialStatus = [",
                            "        {",
                            "            \"type\": \"StatusList2021Entry\",",
                            "            \"statusPurpose\": \"revocation\",",
                            "            \"status\": \"0\",",
                            "        },",
                            "        {",
                            "            \"type\": \"StatusList2021Entry\",",
                            "            \"statusPurpose\": \"revocation\",",
                            "            \"status\": \"1\",",
                            "        }",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "96363f43-7123-4289-8b21-a3e0987a7f12"
                        }
                      }
                    ]
                  },
                  {
                    "id": "969f2ecf-2e29-46a6-8805-cc50c4799b8c",
                    "name": "credentials_status:credentialStatus:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6d79f185-bc17-47b6-a577-0d5b73852453",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5e6f08f5-a26e-4324-a697-4e07f4a99574"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8795976f-560c-4370-bb91-560018852f82",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not array",
                            "    req.credentialStatus = [[]];",
                            "}));"
                          ],
                          "_lastExecutionId": "7a5390a0-ebf5-4313-a468-7465e2b72b21"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b77186f6-34b3-4de6-96f2-87f2d14eff66",
                    "name": "credentials_status:credentialStatus:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f6cdc7b4-9385-427a-970f-a1ceaecfe9ec",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0e68c964-e388-455f-a2b1-bbb173ccdf00"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bdbdf4c6-4163-4d7a-bab8-5eca99d4b43b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not boolean",
                            "    req.credentialStatus = [false];",
                            "}));"
                          ],
                          "_lastExecutionId": "5cbadb1f-978f-4dcf-8730-6ff3d188cc25"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7143139d-298f-41fa-8cb4-df296086d04e",
                    "name": "credentials_status:credentialStatus:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "680b50b7-4c25-4ae2-9867-f039621302d6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "36d14251-1047-42b8-9ec9-37e3e6d51372"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cef44882-26eb-4029-9093-a8ef15773a85",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not integer",
                            "    req.credentialStatus = [42];",
                            "}));"
                          ],
                          "_lastExecutionId": "2094eb34-2b95-4ca0-8c47-6ffc308dbe40"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fdb46b22-dd0d-494a-9a56-d4133e8f48b5",
                    "name": "credentials_status:credentialStatus:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "68222b13-cac8-4912-9ed5-dafe7e9c12b6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "50f67bc5-8e9a-4327-858b-9c2088b65932"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4d1b6b35-1e31-46aa-81ec-098c4130a0ae",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not null",
                            "    req.credentialStatus = [null];",
                            "}));"
                          ],
                          "_lastExecutionId": "a1c07a10-f7db-4e02-bc9e-f385d124075d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f8cef008-1a9d-48b5-b0e1-a2f2aa9c0732",
                    "name": "credentials_status:credentialStatus:item:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "26db3aad-28c1-4be7-a4bc-a4b9b63668c5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3767367b-7837-446b-ab4c-ddf20502e7d0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a1443e69-fa7d-4810-926e-e88e9f893dcb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not string",
                            "    req.credentialStatus = [\"StatusList2021Entry\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "ff6fa761-bd71-4dca-87d9-ebef24a285f6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "78e82f5b-56d5-41e3-9fa4-b28a0296ad25",
                    "name": "credentials_status:credentialStatus:item:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "07e2685f-21f1-4d4d-83ca-e5ea72d93799",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4a6cac89-b23e-416d-bf55-dbb33d32ae2d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "28deaf2a-ca2c-4d38-a918-2ecba7100226",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type is a required property",
                            "    req.credentialStatus = [{",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "6e3e6f52-ddc5-426b-9bc6-2d92b632343d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b38e9538-bcd9-4906-b002-b763f1002b66",
                    "name": "credentials_status:credentialStatus:item:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b1e2ea13-2071-4272-9ff4-6d1ddf737f44",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "106882b6-1253-492d-bd34-bc680e967ff7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b482d153-a2b3-452c-a2b9-74ac7bd3b33d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not array",
                            "    req.credentialStatus = [{",
                            "        \"type\": [\"StatusList2021Entry\"],",
                            "        \"statusPurpose\": \"revocation\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "6810f320-da8e-4973-b630-d0ed938c72ff"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cfa507b3-cf48-43e8-89c9-2af3b0d68fb5",
                    "name": "credentials_status:credentialStatus:item:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "df043792-f09d-4fa6-9cb3-ff47521464fd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cbb6a73c-9d92-437d-bfba-63fbd96a4f89"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6316475f-966b-4c7e-8d47-ae7479d976b2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not boolean",
                            "    req.credentialStatus = [{",
                            "        \"type\": false,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "33f56981-cbe9-4608-9b77-4aa882715b7d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c9d3359f-88f1-41f0-b12d-6e3455077ae6",
                    "name": "credentials_status:credentialStatus:item:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4b1c7407-ffbd-488d-9885-616b0e4f7c40",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8a9722c3-e834-4184-8fec-c84c8c839940"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "aeb40795-b44c-4b4e-b91a-c61aba7d18be",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not integer",
                            "    req.credentialStatus = [{",
                            "        \"type\": 42,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "fb379a3c-07b8-4669-9e75-7823cc297076"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a992dcbc-b66a-417d-b2d5-3d99f8f3d595",
                    "name": "credentials_status:credentialStatus:item:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "852affbf-9aaa-47ff-af9d-1a9a11376402",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "91345c3b-562e-4cf2-8b8e-9f0cbc8f8c4b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fb3c810b-7c70-4542-ad2e-c5769dc9eac2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not null",
                            "    req.credentialStatus = [{",
                            "        \"type\": null,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "bce82786-cf11-40f9-9e3b-ceacfdd2b085"
                        }
                      }
                    ]
                  },
                  {
                    "id": "77c8474e-8aba-4daf-9f53-5facdaa1e74e",
                    "name": "credentials_status:credentialStatus:item:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7911db7b-33d2-46d7-9b62-526cdedc3917",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "383e77e9-f120-487e-9a45-5e2ff16e0371"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "df273e36-6a6f-4067-9442-c55be1b11baf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not object",
                            "    req.credentialStatus = [{",
                            "        \"type\": {},",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "47e20b2a-7a23-42f8-87c7-d3800d91e6f8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e75b11ae-d031-48bb-81c4-3ea5d3139123",
                    "name": "credentials_status:credentialStatus:item:type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9f0b7305-71f0-43f1-b2dc-e38e5193b12f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "78454af3-7df4-44f5-93c6-789596f30b11"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fee4d592-930e-47ea-aad9-f9635e6b402d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be a valid value",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"invalid value\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "263c132c-5f97-4dbf-b7cc-9f5a85da5dad"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7f3f6eff-fb22-4d92-b676-f46304b10dbf",
                    "name": "credentials_status:credentialStatus:item:status:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1f2734f1-16c5-439b-b766-e762d032c4dc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7c0ec50b-98c9-4cd0-bd66-ea9968c8f4b7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "904bd847-ac9b-4204-b51f-9575f0ad2379",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "69e67ef6-967c-46bd-93e4-e81f1a4ba168"
                        }
                      }
                    ]
                  },
                  {
                    "id": "692699ff-d427-47a1-bc6f-ed8a7c0042ea",
                    "name": "credentials_status:credentialStatus:item:status:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "00672d02-d046-4e5a-9de3-d032edab8afb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4938b9cb-b9e2-4c88-85c1-a60c3f4f5544"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "797fad09-b574-4681-8406-dc151c3112a4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": [\"0\"],",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "20e6b191-7b27-47ed-9e58-ed2bc3dc3771"
                        }
                      }
                    ]
                  },
                  {
                    "id": "96ea1dd0-5a3c-4520-be2c-9eac8386de80",
                    "name": "credentials_status:credentialStatus:item:status:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a8cc1fb4-19d1-478d-8777-f4e4b644eafd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "731a8c3f-0f6a-4074-8e28-2f6fd434faa5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "63f63bd1-2f45-4bbf-a238-bc91557f01e7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": false,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "63026de2-1bc6-4e9b-a6ca-6d57b389900c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "44029629-6c05-41eb-8fd0-6668eee64eb1",
                    "name": "credentials_status:credentialStatus:item:status:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bc282d36-2d2b-4fe6-9184-1d0484979583",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "179442fa-6707-414e-aab4-8c8bda8b274f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e67d934b-07df-4242-90a2-d4b1b7f713f3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": 1,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "da4bac83-8adc-4e19-a092-2b34e226607c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3895041f-9adf-45f1-ae23-6f61d186502a",
                    "name": "credentials_status:credentialStatus:item:status:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c5ec941c-cd7b-4fe2-84d5-4c3cc7da5f20",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "45b59339-4a7d-4739-bac8-592a2ae4f7ac"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1c16381c-1616-428e-bbbe-718baa288b0b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": null,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "2a232ceb-3a95-4b17-8466-f1e4dc9c83c8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "41f53519-5fd7-4e91-a6f0-7c58258a1dd5",
                    "name": "credentials_status:credentialStatus:item:status:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c887a88e-6a5f-4e4f-bdd8-024ef036902a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "488e7027-6b9b-4a28-8c22-14979b0e1c7f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9c975dbb-8713-4592-be4d-13af7b10ca66",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": {},",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "ecb8c6ce-78df-452c-b13b-db5e06e25ba1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a8e76583-0c2a-430a-bbb7-e331efd08a6e",
                    "name": "credentials_status:credentialStatus:item:purpose:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3d3975de-f1c3-4f8f-b1a9-ca5aa3f5b48f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6631cb22-e7ad-464c-b9da-fe9000bac021"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5640547b-ce05-4613-9dca-8d89c91d8294",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "7aa47d14-6eb9-43b3-9824-640ca87343cd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "42680188-dcf5-4036-855d-43e3b8de4d52",
                    "name": "credentials_status:credentialStatus:item:purpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "de4c63a3-f571-4036-9ad2-5359cd5fd91a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3f6164c0-a084-4602-bd9c-34457427e4e9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b9c1237d-f49b-4199-9af7-8b398e099710",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": [\"revocation\"],",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "84ff03dc-f871-4e8e-8754-f8ffa7c46b73"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1d641f30-27f7-4113-a00f-7c77ded87458",
                    "name": "credentials_status:credentialStatus:item:purpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d73181dc-e7c6-4702-85f7-118a217e0f56",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7aaaf17b-86a5-4765-9427-c4c98c810d48"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "53b3daac-a74a-42ab-89e2-e1c690755602",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": false,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "63babd1b-3ff7-4be5-8f40-4d3d452467f0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "176b88d8-dbc0-4214-b3d0-13ad4fa6d900",
                    "name": "credentials_status:credentialStatus:item:purpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ffd4e482-48a7-4c09-9d54-bf981f43a8cc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6be9dff7-a006-48a3-b472-c1d106b9fd11"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "65142688-3c36-434e-962d-404ebaca2815",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": 42,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "1d9d1a5f-b2f9-44f6-9f62-3ad408cbcd2c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ee0d7c43-b2d4-4a0f-b4c9-d418eb4dac6c",
                    "name": "credentials_status:credentialStatus:item:purpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dcce52be-0fed-46b6-b04d-c5a9717674a2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d52a3a52-ffae-49c7-90c1-b61d19e9dc9b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5e5e659a-7919-4b05-b0e9-c4dcab95aa78",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": null,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "f07c3955-7ac0-45cd-8da7-fd1adf4bbf8f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dbd4e8f8-1d1e-4187-a3b3-9fff8eceeb6e",
                    "name": "credentials_status:credentialStatus:item:purpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "de899be1-bbdd-4015-bb56-91222050c5c6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "07c47bfd-a152-4d61-9732-0764fbd01bcb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "675da78a-bea3-464b-bd90-860564ba9b08",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": {},",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "b36344ba-86f7-4ba0-bf65-1985b3aede60"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "d52f0d97-1c3b-4680-b3a5-3b9719c7af1d",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "16209ad2-097b-41db-b300-9cb6186dcc3f",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6a012ee6-5cbf-4dd6-8d8f-58165545733e",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "4588f6f9-0f0b-457d-8b0a-6988a3e8dd4f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3f47c72e-18b8-458d-a87a-80062ce98b18",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "9676e464-8559-465a-b8be-69d073f59a92"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "8d04e81f-76a3-4fc2-8e7b-1d231a522b43",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "94550e5e-eec7-43fa-ab90-99721dd20620"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "0865b1dd-8126-4e30-a906-59da2fe083d1",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "599d8c17-f0b6-41b9-9c1f-ed64d3179e99"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "640b8ee0-b9a6-40ad-bfeb-95aba2edd986",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credentialId\": pm.variables.get(\"credentialId\"),",
                "    \"credentialStatus\": [],",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "9c5ec91d-24ca-4838-ad1b-a5ea1a4388df"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "0c19271d-537c-4482-9ba2-e65031583ae1",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "0726802f-6b1e-47dc-9504-fef77c50d0a6"
            }
          }
        ]
      },
      {
        "id": "484648eb-83ef-4e3d-bb18-07d3065c79e9",
        "name": "Credentials - Verify",
        "item": [
          {
            "id": "479f257e-2008-44c3-8bd0-4fb81ace8f61",
            "name": "Negative Testing",
            "item": [
              {
                "id": "907b19d0-73a5-4016-9ee6-5c69963f0f96",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "213f735d-50e5-4547-942a-20eb86a1f8c5",
                    "name": "credentials_verify:vc:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "007e03eb-abcc-4332-86a4-4584b3f6668e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "829f2378-abc9-46c0-b9b7-fbae17d7ede9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2f3fa926-d6bf-405d-94e4-3a216b6cd94e",
                    "name": "credentials_verify:vc:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": \"string\"\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "acae6845-ce96-4366-b625-92cfc4a42002",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "daa74243-f46e-45fa-991c-65e54bbe2950"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e0d222d8-30ad-4fd6-8dbb-7b30a9d33846",
                    "name": "credentials_verify:vc:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": null\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9d8778ea-b956-43cb-88ad-8957a471a994",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "62d99e30-3f75-4b6a-9ab0-624abf62d423"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b7ea0913-544d-40ee-8aff-5beee95b4965",
                    "name": "credentials_verify:vc:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": 123\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ab563b44-9c7e-4a12-b504-3c6381e48ae7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "76fde2da-e455-4d98-bff1-4b097e38003d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bf52b58f-db4c-489d-aed3-fddb3922ce8f",
                    "name": "credentials_verify:vc:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": true\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b85f96a9-2f87-4ea6-bdf4-6f2bf5a96921",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9554eb47-9ee8-41c0-82f2-2871521439e1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8e1c45dd-3391-4596-871f-7429ec797f77",
                    "name": "credentials_verify:vc:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": []\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "94b8c764-1036-4e43-bbf8-d6dc3349a2ad",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "84f48895-e97e-4f7c-8e8f-3190d1e9185c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "81350a15-0b15-4300-9edd-c5591168ebd3",
                    "name": "credentials_verify:vc:@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..V5PnQzCWxrPiCYT-WAyKAnypebgwYeD7lX_hyIjFa_lbJje23pZAfFdgnlqBnXLd19Ksa8fZpCE9TN7kAjzxDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "45bb9f52-c6d7-44b6-8c49-9a427e15cf78",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fe83fd40-f20e-4c61-9d72-f1e4eb329abf"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cab4a1a5-cb94-4307-bde6-b8d3b55317ea",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "90daedb7-8712-4c54-b593-f3e244cdb760"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ae83f2e4-0968-4007-a9d0-1c655af7d759",
                    "name": "credentials_verify:vc:@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c867cf3a-4c1e-4407-92a6-7727ccff1402",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "110db4b8-0abb-4c8f-b6c0-5e87db023389"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "14559bd8-f89e-49a7-8253-0155bf508e62",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c82a50e7-9e60-4fee-aad2-c8ebdafcd59e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a04a4da4-bad2-4aae-87cf-27064d2dd398",
                    "name": "credentials_verify:vc:@context:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e5070d7f-96e1-4e4d-bf21-3bf27a466449",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "adc4455d-eea3-4480-9a51-f7135bc02645"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "307be744-64c3-475e-9f7c-d95d6ea8c281",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c8edb8ec-12f9-422a-9abe-65753dac0b73"
                        }
                      }
                    ]
                  },
                  {
                    "id": "29422522-9fb0-4138-a55b-58cce359eeec",
                    "name": "credentials_verify:vc:@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "711561c8-0ce9-45ec-b676-7468eebfd503",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "82351319-1875-4508-a50b-a92e87247206"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "998c8b9e-32da-4125-9e44-ab00d9b32254",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a9c65d20-e769-401f-9fd0-e175b5bba413"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4406bf8f-3e08-48a6-a60b-8efd95e297c2",
                    "name": "credentials_verify:vc:@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": {\n            \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n        },\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..w4xJhf2l_4JzwE4kp8pD8dNJdWSaws5HiBgal8zFzB6i9p05tmPITdsrUttpUwopW5UAq9M_EZVqlz-kRfSFBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "992d47e4-5730-4471-b3b2-f1ad365114f1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ae6137dc-645e-4fce-8480-dd30d3dbb686"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "06b54841-d90d-4f19-be44-d395a6898ba3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "215c29b3-d337-4f15-96d0-ce905d9f4180"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4d4568dc-52e7-44ec-899b-6ad603156452",
                    "name": "credentials_verify:vc:@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": \"https://www.w3.org/2018/credentials/v1\",\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4898f9ea-701a-440a-ac78-4563eb7f2327",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ec255ea9-4a82-4970-879a-a42c6ef4b0fd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "53310b08-7401-4cf7-9681-b9122d3ac5ee",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9f211ae5-255e-4cf0-865d-001cf271cb3f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8fd2a904-6c0a-4493-99b4-278def4596cc",
                    "name": "credentials_verify:vc:@context:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "284c0ad9-ccad-4871-a8c3-5c81404c52d5",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5198dcc7-d31b-4188-a03e-1304e09782d0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fa31634c-f0f0-4ce9-9473-abf4bb416fdc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "31bfbc90-8961-4099-a80b-9fbbb1b07407"
                        }
                      }
                    ]
                  },
                  {
                    "id": "963e294f-6d7c-4b12-a8fd-a87f807382b7",
                    "name": "credentials_verify:vc:@context:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1e27255f-8577-4ed6-afe8-37e7ced87ae7",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "dcb139db-e027-483a-be39-fdb7a4c3a170"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3e8b6bda-9775-47d2-ae70-17cff777ed6f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bc688e25-2b80-4173-849b-69d662775ac6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2d71866b-b9b9-4a6e-af91-6f09ed8fd6f4",
                    "name": "credentials_verify:vc:@context:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2f798844-9b3d-409e-bb33-060cadf7418b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6d350f31-26cc-41af-9cd6-5d55a3eac224"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5cdd7977-daa3-4dfd-a583-b23265c833d5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d5115faa-a48c-4a36-b66e-00a92a7870de"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4b3de4c2-796a-4db3-aae5-ea188f102b59",
                    "name": "credentials_verify:vc:@context:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b8fd7d96-2f02-447a-a3da-6c83294954b7",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "451791f8-73c2-442c-834e-530e38a591c0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "103968eb-2c3a-4a89-aab9-0833bc070057",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a60ff00c-e105-4956-b863-8a40b6dc2039"
                        }
                      }
                    ]
                  },
                  {
                    "id": "84cf2a90-7e65-433b-bd37-8ea8f316d27b",
                    "name": "credentials_verify:vc:@context:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            {\n                \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n            }\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7366c12c-34e3-40ae-bc2e-64c6757e0224",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a7e467b3-e7f9-43b8-8aad-b9e86500c5ca"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b995b7ba-410d-4dba-9340-7e6eb5572a27",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4bd249de-c5e3-4a6f-b18a-f0e426668312"
                        }
                      }
                    ]
                  },
                  {
                    "id": "59b5bda9-e872-467c-91e6-43fb459f6567",
                    "name": "credentials_verify:vc:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": [\n            \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        ],\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..iom-sOLAz9-9FhadLRpqOYXXBhx4Rgwa3I3w1oh087xFQqIMhVTzcSpHCGdGWu2QT1KwrrgVAXPeTT2EthmxBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5d879fd4-7ef8-4180-a5f9-99fede5e455f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "019d72be-8ebd-4d58-b17c-e4d52a4e232c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b22f2656-bf1b-4a4f-9a07-8db6a0ac8cf4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "31be2662-382e-4905-b61c-c3ed488b4ea1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "00185d50-fc80-41c7-b978-3d360714ba62",
                    "name": "credentials_verify:vc:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": false,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..xftqB9cBFsSe226cWEZ4wr5sfxlAOJYYo6yjwPCVeHDdk6OoWGjZQGO7xXpSidrrr6e1imP18LiFK34xtRWADQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ccfcc713-cce0-4197-a1f0-8b39f2f1f552",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c44d581b-3bc1-4003-a98d-c7eb75f99103"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9922f9bf-d010-48cc-ad52-35a99189935f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ad07859d-2a20-4b0e-811f-cf35d2cbeca7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "933bde1c-8856-4c9d-90f0-5525a2c9ccab",
                    "name": "credentials_verify:vc:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": 123,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ZqV-qqLOh_Kb4vAdXKBfmFdNyv3FzXJAIYV9JltcYGDAefU3OUOnoaAU2WSEufkuYkvczxfRLhrMKgkoVoIRAA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a7f5140f-1bb3-404e-9528-da0ffe90b010",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cace2abb-bbc7-4ad3-8eac-54175c97c8b5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "05a296af-ef69-40a1-824c-c3329502fd26",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6d911078-7ce0-4845-bb21-4fd9f65588e5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9fdfad77-bff2-4cd9-90bd-110481da48ec",
                    "name": "credentials_verify:vc:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": null,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "caa7c9f1-d0aa-4d19-9098-863811aee4ee",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d166126b-cbc7-42b4-b722-bed45edac0e1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5387522f-3f97-4d7c-b8d5-013f5acce351",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c6d8e5a8-2fe5-40c1-b7a2-c0f586b07d8f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c6732d77-6491-4440-ab19-7065d17622c8",
                    "name": "credentials_verify:vc:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": {\n            \"key\": \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..0Nrj_srTLYyA-9ZVA_dkVGjUcKx6xELHjbbdppEMFPGEN5c2gPXgstNRjnrr8hhMMegSAbvGASKWseBXGR9uAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "48d1b444-e58a-462c-8a61-ab08afab1fc6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f78b958d-8809-4539-9e31-fe6bf257c558"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "850a4ca2-8149-4f44-890a-2ae98da20066",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "55d53beb-3f86-4b18-b43f-7b0cf2aca822"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d206f345-2896-4a64-803d-44afc7b4ec3a",
                    "name": "credentials_verify:vc:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Bx6sv21fSmT7fCCxU3fDaLhEOhfRK8llXSiFTgApd4PHot00nVjhaKQyhBW9FfFmJljstlOV_Zff164cxOKiCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "03b8fc41-daf2-4f20-8b93-635015e54ade",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bf32f195-83ab-4e60-9895-8f58c6b7f8f2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "63c184a0-9f9c-485c-aaed-f139a04ec341",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3f8b0f39-aff7-4336-ae68-0425f5451e10"
                        }
                      }
                    ]
                  },
                  {
                    "id": "87c50ce3-618e-4f77-9143-70c041e8bbd0",
                    "name": "credentials_verify:vc:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b2014710-6225-48b5-a7fa-fda6475cfd42",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b2ed6258-1854-4355-a829-ac5c72f76766"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c17dbf60-39e0-40fc-9dd1-d06ff58656f3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6d8301b7-fcdf-4e9c-bb75-9c389041d3cd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2ccefadc-93b7-4e42-8346-3c15c12f95da",
                    "name": "credentials_verify:vc:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cfa47893-b95f-42d6-9646-aa6eb52c9040",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "11585dad-3949-4f04-a2bd-c7e60ee0ded7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7430f039-7966-4398-9ad0-1ed932c80205",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "467f2ba0-4b90-45b3-9566-2be471e4b19e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2a73f89d-7912-459f-8c0b-1ff09b9e4886",
                    "name": "credentials_verify:vc:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0ee16617-2ee0-4467-8c29-eabc4242ed36",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "85da8393-13f1-407f-992b-03de9da2a95d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9bf42b5a-2379-4291-820d-d2aad2046ef8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b065c0f4-b0b9-499b-8f2b-4daa2573dec5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b8da002b-4932-4992-9f7c-1c0573e2d256",
                    "name": "credentials_verify:vc:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "34e69325-6429-4a60-9bd7-989e446beb0d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = {\"key\": \"VerifiableCredential\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f9fe6725-e8b6-4e83-95b4-e723298fdf79"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b7da73d9-2d52-42b6-baee-0e49c1f236e1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ae0e4b58-60ea-4b32-ac24-0dff53b87f65"
                        }
                      }
                    ]
                  },
                  {
                    "id": "36ec8b8a-d207-46f9-93e9-13b56ce60dea",
                    "name": "credentials_verify:vc:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": \"VerifiableCredential\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b70fbad4-b07c-488c-b6bc-f36ae05f1105",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7115cce7-e63b-45a7-beb8-46df215c3625"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6bf0fe3e-f2f0-4d86-9d02-273f0e074bcf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d4d99758-89d1-4ad4-84d4-16afeca358bc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7cdf4f84-26ff-4d44-be58-6b9f78830803",
                    "name": "credentials_verify:vc:type:item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5fd5e9d0-8eeb-4be6-961b-1f681b0c978c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must have at least one element",
                            "rawBody.type = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "aafd0846-4fba-48a6-ad27-0b9cbc2a7c8c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4b556859-5151-446e-9767-198bb0926169",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "872e3df4-5c97-4b3c-98f4-af96c170fa21"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ba51aeb3-e373-4f38-992c-4181b2d1ebd2",
                    "name": "credentials_verify:vc:type:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1a627e64-1a6e-4b21-847c-2e9523fca9b0",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "aa4b0d32-30a8-48de-8943-74492ab18609"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f0e70733-d48f-4251-9f5c-205cff40b3c6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3602cfd2-c516-455d-a8c1-494437d9aeae"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5a21d872-718e-44ad-a833-5bbdb3095bf5",
                    "name": "credentials_verify:vc:type:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "55f9be89-cbc1-4f1d-8a9d-b139dc07b473",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a9227577-c5e6-4176-8e38-360c5cf776cc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "80c02729-985f-491d-a3e6-2485d992499f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9a58ad64-0e0e-41f1-b171-514c37ae6be6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ab6b2749-fdf1-4508-9e97-fed003dbd999",
                    "name": "credentials_verify:vc:type:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1c3bd506-8231-4066-9fd0-845756daf613",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e98b4404-22c9-4ea2-9eca-372442858f15"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "59fa4169-824e-451a-b2c0-53d2eb5ddb08",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "92209c62-589a-4f4c-bb1f-3aa7c233ff85"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ed8e327c-f600-4cb2-ab29-2f26299e25da",
                    "name": "credentials_verify:vc:type:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ea01f4d6-3c65-455e-85e2-51998832fc04",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2af96dae-d311-4c1e-b8b4-d1cff7a7b3d3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b490574e-575d-4b02-b966-32b521ccd3f7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "004e5b78-b644-49a3-93f5-19e2ed3b58f1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9834f2d0-ba49-4530-9d1c-48f019525d0f",
                    "name": "credentials_verify:vc:type:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3bbb7fbd-a432-41cb-a57a-9aff933291aa",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", {\"key\": \"VerifiableCredential\"}];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e4dccb2a-fee6-455b-bc1d-67d87cafb3b5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e59e5a52-5208-4435-95a6-3c42db4120af",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "45226fd9-cf04-4c4c-9c8e-6a7bc9463d34"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a7bb1717-7032-416d-9507-af1ea71c4f9c",
                    "name": "credentials_verify:vc:issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "baeab19e-a952-41ac-a9d6-bcbf7ab53220",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "26fb5b4c-25d8-4e71-8c15-0735ab43c3d9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "58ff35ea-3376-4f51-a758-a8ba95cb3798",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "762e5ccd-1091-4a43-8181-26d18f635757"
                        }
                      }
                    ]
                  },
                  {
                    "id": "934f969e-02e2-4eb0-b3d4-80077ef9bd3a",
                    "name": "credentials_verify:vc:issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": [\n            \"did:example:123\"\n        ],\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Mdpb0nbZLuHLqh6IBr6ouahKZNFB-cIKJXn-b-O6Pt6HyJaECfc399qgMTWovf-l04XYEpuYDmfZeYVThBeMDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "21bb83d5-43cf-4a36-9072-3dbc6c873338",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2fd95264-e344-43a8-9bf9-c52dede5ce9c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "49bad94c-1201-4890-9c7f-0e2c1a561439",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a34f6711-1e5d-4aa8-b35c-3d57ff09337b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4fff18e5-7283-453c-89cb-ed4f018ec4b3",
                    "name": "credentials_verify:vc:issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": false,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ryGzH1cVI0oyA0eBPKjIBDGJ8FYapvVnUEcovWWepoAASL3SzOOUvcQ9XOnQlclFU8dYhkEN2L8TQAj2OHlcBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a756a736-4090-41ab-a6f8-55e9934a40c5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "245c4edf-1cca-479b-b291-682c5b841de6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "687b8f5a-8260-4749-b6f5-a6b75f299451",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2086f449-f41f-4094-935b-0e383e77f025"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2622b6c2-73d7-409e-acc8-8d1479af4c63",
                    "name": "credentials_verify:vc:issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": 123,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..kEE8wQKYgVQlcBvJeVeV151aR_iD6vPrlW2bgXPW8NvJx9AOuW5eGtL3j_I3xIGR_JWDA5jGy6KDVkqJNEDHAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b76aed64-1e4f-4f04-9a87-579250595616",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c325e264-9e14-4369-82e7-e3489fe09010"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6f4fcd71-2c9f-4374-933d-460206a52596",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dd61e8d7-2b27-4753-8391-c5eeb2d0d189"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0acefb39-f369-462b-8cde-bc1f9c4de294",
                    "name": "credentials_verify:vc:issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": null,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cd51a787-aa97-41c7-8891-b0bc569f33a2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "258b4293-653d-49a3-a4c6-840a03b2b0d8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "748db6b9-96f6-4470-bb62-a4d94496769c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3232fedf-c9ba-4c3e-9480-d49f23bbd04c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "20a6d57f-5ef8-44c1-ad7f-76113e002016",
                    "name": "credentials_verify:vc:issuer:id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {},\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c1239f80-739c-4955-b10a-872eb3eebe91",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "89d7945f-4ce4-41b3-bd8a-05d1f04c8e76"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8205418f-731d-4ca4-a02b-74444fdc0592",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d926344b-5581-4c1a-98d0-8e935edc865c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3e062e9c-15d7-419b-8a49-59a9b88486d9",
                    "name": "credentials_verify:vc:issuer:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TsN_31UJYzTTx1xh5CB9PjhnehJza3N5gAEFoNO55HLtQvoqGiEd-SI_4Xy7cpuYMbHdYf5CKHwP0eooyzjrAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "596cb1db-8087-4693-8289-3fcd58420361",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c55bf09e-cf79-41d3-bfd6-e23275cac646"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4c490e0f-9bec-4e51-9c05-fde69e996a97",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "98181a40-8c9f-489c-9ba8-ee5bbb663649"
                        }
                      }
                    ]
                  },
                  {
                    "id": "db5ac9e2-1ea7-4d63-88a6-44658e35d6ab",
                    "name": "credentials_verify:vc:issuer:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": false\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JOl3FF8mG94K8DDAtSYeirCtE5GRVHXYZcIbf3JRCquZ7obaBm1wh3rEzbG-t8kjdWMn7Zwy8q4zw7pMC2-gAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4a27b2a0-f58e-428a-bfca-0cfbb9c46fe0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "21e1a9f3-3809-4fcd-bf65-ea7636b328c0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "54e14faa-f77b-491f-9568-d7701a1136c3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0d26806a-a769-4113-8df1-48aa7da291bd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fe35f864-4cd8-481d-834e-c23a89c174c2",
                    "name": "credentials_verify:vc:issuer:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": 123\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Ibp_FWO5FwzfTfd_PeTgedqAEcbS7dtCOoREanyZP0yAg63ZGay4hjjd-NwZfmWG8LRbMSqtjX2_Cu5BbBEoAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2aff0270-bde5-444b-93af-b30ec50d84e1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6c877a6d-42e1-4b8e-beaa-e73f397c65ac"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a95336c1-7357-4bd8-96db-fcc7e739b059",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "08271698-b19f-44ba-b40a-394607e263e9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "71504323-2897-4a7e-ac2f-26c2957b5b4f",
                    "name": "credentials_verify:vc:issuer:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": null\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5c6adc2f-904f-4f4c-b8d7-4989c254bf10",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b95613be-e152-47dc-8863-7d1b683146b2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "54a2151d-0317-4535-b0dd-0506e0959e13",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "97a8faf0-e464-4d0b-9f5d-a3ecb1784b21"
                        }
                      }
                    ]
                  },
                  {
                    "id": "312b741d-245a-417a-b87d-de469361c25c",
                    "name": "credentials_verify:vc:issuer:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..n3pFfPx4jY7EjlOpLNJT4CAJYI1roVE6LoUgLQhJ1bMgS5xUKbsIhynp7xDW-vSGzIcu58w-Z8_d9--99NCDBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cb3e20d4-66f6-4e32-8fd8-a22c4a23fc22",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "85234b07-3327-4e01-8138-3121bdae4d5c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ae81c2d3-33a8-4f6c-a061-4358ba8dd7b7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b90406ba-bc6e-4e2e-9731-5a301428103a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8f4ceb5d-9f18-4d62-a608-b5a121e73be8",
                    "name": "credentials_verify:vc:issuanceDate:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "59674bf3-2541-4b86-bc0f-bf5778c030b4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b83e06c2-40c1-43a1-aebc-daf0f1162238"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "eaf02a03-fe8a-4856-92ed-dba169c53dac",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7add2392-602b-496b-b863-d6e64de10e46"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a9ecdb0f-b7a2-4391-9e1a-a55c2b59ca05",
                    "name": "credentials_verify:vc:issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": [\n            \"2010-01-01T19:23:24Z\"\n        ],\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..eJGt2anEVhR3qXrd8726C2a8PNJ-S4SnhIUB2YpAUiLJhTQ4FcY_nONpl-U0MbpWgwlpJ7xa1_uk4EMrGmOUBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7e6d44bc-9793-483c-ac1d-0439e752c77a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cdaaf33d-b2c4-4330-be58-137a66522124"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5d3b3f6f-9063-4f92-820f-43cbdfb74327",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6d2604c6-7b8c-4e2b-91e3-26ee5c805094"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1b9f21d2-c98c-403f-9f48-8945d5809f0f",
                    "name": "credentials_verify:vc:issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": false,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8Ax_d8Yp8MIszSaGQa1WkiT4xktUk0Ltg7EF3QQ-GGY8JaV_jR6-zRUlEF2iW0HcK6C8ZoAt0KrllUUDdJkdDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f8f9f09f-4362-4e45-ad03-43e36920d201",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1a7a3c6f-145e-4487-85af-05531bdb4998"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "df483962-1885-4375-8485-e135a030abd2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d0502cd1-e2c8-440f-9b49-42d687ea5098"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ff6f57c4-32f8-48db-a3a8-f3d808318130",
                    "name": "credentials_verify:vc:issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": 123,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..x-sSX9vqc6977YPFhNbzjKdisDv4qD2mx-yBSH_EG-UQCpyH_ErCzoFWnpJzRJKIKbOLEvvZ5SO_fWbNWyNdCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5e26af7b-32f9-44af-a1d9-4f69546d05d2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f141cc4e-c703-4452-b567-42b241dc49c2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d054738e-b5fa-4623-a0cf-3eba3a37883b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "25c7fcd4-4e00-4867-8367-bba770d8ab32"
                        }
                      }
                    ]
                  },
                  {
                    "id": "90b635fd-8b07-416c-a104-f3c087b0246a",
                    "name": "credentials_verify:vc:issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": null,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "738af401-197b-46e6-8aec-d0ddec06b14d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dca49889-7285-479b-8c6d-9a9600735621"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "812271e8-ede4-4e27-9032-d4727dc7b585",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "af4690dd-fa76-487f-8d7f-d4c42b3b8d7f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "645fcb87-362f-415e-aea6-880bbdb3c526",
                    "name": "credentials_verify:vc:issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": {\n            \"key\": \"2010-01-01T19:23:24Z\"\n        },\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Z1GVMKiJuJeJMpR_Ag4Wpv6940N3WUreYSxEsPaZgU_J1C_EDUj8ycRJitlJNEBBuGhibJ0GWyK-WW9RO2WCDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2e9b21bb-02e6-4834-9933-d625cde3f8a9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b5412abd-bb61-4783-95a4-7243976e5f95"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "304fe7a8-ed40-4827-9727-923499a1de48",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c422404e-ea22-451e-827b-9a63aad2a4e3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "48986266-2657-44d9-abd7-9b571fa370a3",
                    "name": "credentials_verify:vc:issuanceDate:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"not a valid XML Date Time string\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ebrsCszvH6TQHw1QhA8laajPRWL_zGvQ96Up8A4TiJrY7ueFm3V-Suk-KNd6JKckpOxLoF-Cb24KG_g73AqHAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "65a3aa3f-e3f1-415d-b0fd-869963815e18",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "85a71020-2b57-4e72-bf26-55967d57251f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3f858e42-0cd9-4de7-b1db-5b596abfce61",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "da410530-d981-4cda-9c44-4262178cb2c4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ee462200-1164-47da-957a-846d373992f2",
                    "name": "credentials_verify:vc:credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5e4a8237-1f23-4203-a95c-e6e412962afc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0f743e18-84a4-42da-ae4c-a498b1dbff72"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "53e74776-07b3-4d5a-9ba6-24571253dfb1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bb189f87-5f92-4515-8823-8c2fc8db57c7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3055a9c8-551c-47b8-a6f2-4f095723991e",
                    "name": "credentials_verify:vc:credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": [\n            \"did:example:123\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fee5a788-1a3a-488e-acd4-75075f6edd7c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "14f8e6b5-d999-4f8e-b665-b521a4d1fd52"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c4bd83db-6315-48ae-937d-c044bb2e3649",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "557be718-6e45-4aaa-9e41-e3bafe07d6f3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "801119f7-cd82-49ff-b5a2-11cacec41d7e",
                    "name": "credentials_verify:vc:credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": false,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..VK75R0RpQX9g4E_vGExhb_aDUNycy1UlQYvhCL1Ydl9bWiT1oUPeHEUgJMRGzmRRvyByyj13oHI2yB3cOLWXCA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ba30a884-e5c0-4fcc-9dab-872e0596a25c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2daab136-8987-40ff-9ce5-016307fcca25"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "23dcc656-f5b2-4799-8f75-8fd5b828392a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "17458134-5c22-43b7-b6dc-f39912377526"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b7795ba4-dcc3-47c3-99e4-51ce196de687",
                    "name": "credentials_verify:vc:credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": 123,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..dQnu8mT7YMECvDQPODQ1YUudQIO9Yx7WsZ07UWpHRqw0iV3ZvJOebbBoY0gFvsF9t6foFFEaaWcKi4vNgIdfCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "67c24d70-f40a-4c69-83ee-285819a01c4b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3b55664c-c5b9-4a57-82dd-25ed8c9efd0a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "34040a00-b5a9-46d5-aa78-0cae121ec2c2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0e053045-3ace-43a8-9492-2e9d9db537a5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ad4d3e2b-e4cf-4de7-a788-393c6db2925f",
                    "name": "credentials_verify:vc:credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": null,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "65326841-f0b1-4d92-bfe6-b8fc0919255c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5a5ea9bd-aca6-4ee1-8ab4-4791f095b13f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "afac4bb4-3426-46d2-b8ab-3a74e6fb1a09",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a2465512-2e7e-4064-be0c-6c6a83ddc01f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7b24f69f-85a0-4800-b194-3c0fc212f899",
                    "name": "credentials_verify:vc:credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": \"did:example:123\",\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "119522d8-5de7-43fd-bf45-613044caa771",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "86024e61-0a15-45ae-b7d1-36fd51306a2c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8634d779-383b-44b8-b43b-9d775bfdbfff",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c9b3a84e-19bb-43ce-8449-02f4cab58713"
                        }
                      }
                    ]
                  },
                  {
                    "id": "815f3af6-4cf8-4986-87de-7d905e90eacf",
                    "name": "credentials_verify:vc:credentialSubject:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8KJ136ciaI5X01UO8dPG0KMcsxmd7qzxvrahflTNqsrjjd-vF8bBKpjVDLOOj7bUolO277JWFCPX1xvvAVAvAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6475219e-7b4f-4da5-b681-96df80372132",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2e98216c-3154-4f2d-9ae9-42ccdbe7d602"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a0cf2224-9fe8-4c24-aeba-5627bc4907af",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "73eceed9-d4cd-496b-8c7b-785fd80f348c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "da0ea641-fd85-4777-bfd9-eee07afc3ccb",
                    "name": "credentials_verify:vc:credentialSubject:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": false\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..1Tatn2a45JYHHvhGvCLNbO1VUDV_lkvRVosGzDXDF-DseqRorDTFmY7XSyYqrl5yc6B200ET0RBvgK2vyEC6BA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4cabb0f3-bdc7-43ee-ad14-bea128af0292",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c69f88a4-63f9-4d8d-b923-6f996d661cec"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1594e49c-9921-42fc-8fd6-caece1952164",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "52602f29-c8be-4e35-95fb-3479c39ce9c2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "86ff7dc5-e424-4e6d-9993-94757fc1bf4d",
                    "name": "credentials_verify:vc:credentialSubject:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": 123\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..qPc7PrMuniibwI74A9ELPRd1YyUjNyeccnUFc4GCfj7I3oREDl0RT6PEt1pEY81mq7vlIsNG1myE86igC__qBA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bfa23b90-e3af-4856-beab-a44a42cb37b9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0d303065-f635-4c05-a2e2-865ae4768b43"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "527f31a7-6e19-494e-8073-73091fa87ebb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "05fd2ad0-b4d1-4fc9-b352-9a924ead37c1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7592ca9e-a030-4fa1-abfd-d6ac6a23b9b1",
                    "name": "credentials_verify:vc:credentialSubject:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": null\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..10vzNYPpxv6gZwVR-V23lgvIgseVOwxT6Tc1Zbn5T6pWGmUhrkur_O-OexNVjkVSf7Qu_6NDnIL1m0KcNKGBCg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b56f32d3-056b-4fc3-9df4-55cf493bfe98",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "92808f64-c014-4ba4-ad6e-fbdb4a087163"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5680c828-9460-4c71-8c3c-3dca1f7ea116",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d6599532-7601-47f7-858e-403f9888b10b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1211d53f-aa07-4a58-b82f-f0b6956bc71c",
                    "name": "credentials_verify:vc:credentialSubject:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..tQJMGZTsqt1RhpxKkq647EHc3pjQ183zd4KchfvD3dXWVfL9X1fUedMbj33l8eev6YWua2-6_4_sUTDr2MLEDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "98ea65c0-4049-4dd2-b9a6-9cfe81b82b66",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3dfb24bb-6476-49ea-8fe6-f68e8c99af33"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a6bee666-3752-47e8-8ceb-0883f1098f2e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "da4617ed-6307-486e-b2a7-6190bd27ed9a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ead516c8-ccb7-459a-ae14-f64aba229d88",
                    "name": "credentials_verify:proof:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "470ac869-fa42-40e9-b858-e5b6f7f5a3a2",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required for embedded proof VCs",
                            "delete rawBody.proof",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d70179d1-86fb-4d68-807c-d34ef38ce820"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e5679eca-62ae-43d9-a4be-3402ee369a28",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9ffca056-2465-4285-a4b8-b5d45d5b6c3a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5f9cd02d-72ee-4fe8-ac85-ea0f63f351b9",
                    "name": "credentials_verify:proof:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "54a69878-dec3-4c5e-9000-548251f6c28c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b441bcd0-f0d1-47a6-83ce-66389a20f03b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6b009599-a626-4185-a632-5a503260fa64",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "82ff49b6-dab6-480a-a6ba-7d33eedc7c33"
                        }
                      }
                    ]
                  },
                  {
                    "id": "db6b4150-2ed8-47fd-9add-8e6132b3ec44",
                    "name": "credentials_verify:proof:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fccf12b1-ccb9-467e-9cf0-619fbcca8ad2",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f26a6b2e-041b-4781-904e-20e079b3f1e1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a9efecbd-2f08-411a-b659-b4a8e84e5ce7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "268e5ff8-d6c1-42aa-95c0-aa698fb70e91"
                        }
                      }
                    ]
                  },
                  {
                    "id": "47217cdb-8a64-4db0-b019-915d63e9d071",
                    "name": "credentials_verify:proof:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "90fd6123-0543-4e82-b44e-0169aa1cc548",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = 10;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "593e830f-f1dc-42ce-b698-86958bf5009b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7a4325ea-48c8-4e67-a55a-560e787abd63",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "23c15566-dc03-47a9-af02-180b80eea475"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a1e3b0ff-d962-4473-b58b-1d6884eb707a",
                    "name": "credentials_verify:proof:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6e180f95-d4a4-46cb-a378-65dfd5fcbf79",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ec353458-cfea-46ee-b7e5-dceabf2877cd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5bcd4285-56e2-412d-bea9-c48fb6a5e28b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ef8446b7-78a4-4639-98c4-9ea7803d511f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a7342112-358f-4e26-aeff-30ead7209fed",
                    "name": "credentials_verify:proof:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "96a2532b-4800-42ae-be9b-5c3d5029cd20",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = \"string\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9346d97d-44a5-423b-972c-de01f59c44df"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8b8d6a36-4805-45af-9c3b-4460adca492d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "26ab68a4-9b67-47dd-b42f-5ff9947ba418"
                        }
                      }
                    ]
                  },
                  {
                    "id": "69d90a26-e593-464b-9db3-d225f2af36db",
                    "name": "credentials_verify:proof:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5def7d97-9b38-4c19-aabb-417404acf026",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required for embedded proof VCs",
                            "delete rawBody.proof.type",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "417192be-9c9c-48c1-9afb-f8fbee60fe71"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8689a65e-f982-4502-9dd0-2a998d98d005",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ec2e3e5c-4741-4712-bf6f-ff907ceeadde"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f7bda5ee-c2d0-4781-bb0c-a22decb25b33",
                    "name": "credentials_verify:proof:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "10110357-ec55-45a4-b789-144917702c3c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = [\"Ed25519Signature2018\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "82220a63-8c48-4cdd-a427-5264baf64142"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9a92a91e-2a10-4d77-a43f-75150e000e1f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "68d08365-5f1d-43c0-a95e-47b96ceb9c5d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "03e91787-930c-4eda-8e5b-9a51398fd64d",
                    "name": "credentials_verify:proof:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a9054290-c25b-4be6-bf5c-2f71fa2620a2",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f6b6dd44-73e0-4e1f-9795-eff19146795a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "01c143d2-bad1-4824-8647-0aea81588db1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "96a772d9-922f-4fa1-98ec-3f0b3455feb1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c95c2106-39d6-4713-af48-7344a306f1da",
                    "name": "credentials_verify:proof:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dfe3814a-8aca-4bb6-a10b-5ff2d70c69f4",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9ef370f9-31da-4b6d-b759-263bcdc281e7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6495ff79-7002-4467-acbd-014419033868",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8069afba-2c7d-4762-b82c-a586822dd130"
                        }
                      }
                    ]
                  },
                  {
                    "id": "89e6c64a-9bdd-435f-af31-1fc98b2939ef",
                    "name": "credentials_verify:proof:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a5a96a93-55a9-4d1c-9820-1c3c16213287",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a002b752-9f83-42af-8742-aed106050575"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2c981e82-ff34-462a-878d-355832d89ada",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8d5b1394-743b-4ce7-b44a-76716554bcae"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0d24be9c-3d50-40f7-9932-5a6ba9fc8773",
                    "name": "credentials_verify:proof:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3876f4b9-761c-4354-85b1-25003b4a6af7",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = {\"key\": \"Ed25519Signature2018\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8ff5ce72-4553-44f6-b981-10991904a32f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a994a55e-df4c-4678-9729-ff9c64ba2729",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9dbd74d9-1d08-4946-9bad-75824766de9e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "65b919f6-90cc-4051-9b4e-6b1f73434043",
                    "name": "credentials_verify:proof:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3abf7029-4096-4c0f-b377-dd29c902ea50",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = \"not one of the valid values\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e1f485b9-cbb7-4725-a95a-7a707571516d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1046bfaa-897d-42ce-9c38-d25cc368290c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "acaa7560-127c-4a42-b63b-426e899bb360"
                        }
                      }
                    ]
                  },
                  {
                    "id": "21d910b1-6251-4b34-9964-dd33c7644795",
                    "name": "credentials_verify:proof:created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "14d2f07f-2a23-4858-bd19-082c26f0cb0b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = [\"2020-04-02T18:28:08Z\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9f9caa0f-78ed-4b09-8d5a-956f2541a558"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ae4d5e84-b23c-4192-b00f-9fffe0dbc825",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0f376b2f-c0e3-4561-9eea-c63d9d5f72ca"
                        }
                      }
                    ]
                  },
                  {
                    "id": "452e3e70-d8f7-4e4b-8ff2-d19e4677a426",
                    "name": "credentials_verify:proof:created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f8868f87-7d23-4d2c-83c9-c6c6ee723b5b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9096ff5e-2d8d-4b62-91c0-86d28dc2ea55"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e5421cb4-d286-40d1-89f7-1e137e501f8b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cb481ffc-b321-4e36-990b-7e3747e75096"
                        }
                      }
                    ]
                  },
                  {
                    "id": "336f542d-9047-47dc-a506-c862d41d5647",
                    "name": "credentials_verify:proof:created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ca48050e-b3d2-49e1-be58-f08e942651c1",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2d6daa08-06a3-4a30-9993-d68a54072678"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6a55a9eb-b332-44e2-aeb4-d104ee4f0029",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1c915653-2a16-475d-9c06-1c625d1f0e92"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6ddd7eb4-53d5-4757-8577-899d92fdccd0",
                    "name": "credentials_verify:proof:created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b85f4c78-c07b-40dc-a3a5-6490198439c1",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "859e09ff-0fc6-4f95-9c32-700a79b51d56"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4d4a2bdd-2f4e-47ae-aaf6-f85a94d36e62",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "82d87801-91d9-45b7-aacb-43b6a9a48098"
                        }
                      }
                    ]
                  },
                  {
                    "id": "06e4c1eb-4182-44e1-af62-425333f80448",
                    "name": "credentials_verify:proof:created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1f4a835b-43ca-4d0a-a620-4872944abef2",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = {\"key\": \"2020-04-02T18:28:08Z\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "314269c9-0509-4845-aa06-3b99ebbaa01e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "722f7061-f419-4995-8cd9-55200a095174",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c515a6f8-5422-43ae-afde-be777e79b482"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1bae2350-b85d-4128-a7a6-6f44e007f6f3",
                    "name": "credentials_verify:proof:verificationMethod:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9543792d-5abd-494a-bc23-6553547a7e53",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = [\"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1d760b97-7c72-4c62-8aee-f7bd74026cc6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7dde8373-ba5e-4f06-84df-e91fe2e9792e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ea61aa78-9937-41e2-bb36-431fee323e0d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "28d86142-55d6-4d2f-bce0-7c94452b9b61",
                    "name": "credentials_verify:proof:verificationMethod:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "899f821f-1d2d-4493-9fe3-bb3805895a12",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "90def3e7-9cbf-4d17-93d7-d96de971ed0d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e6bca1f2-febe-4531-a6d7-43bdc38fd4c9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "352debe5-9785-4f38-b30c-1be76ddc52c1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "52f70d21-55c2-4921-a9ee-dd12960ddabd",
                    "name": "credentials_verify:proof:verificationMethod:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "287c41a0-b8fb-487a-a713-f3e5391a0681",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "216ae4a4-6e25-411a-9723-7405267c126c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "69a344ba-56cc-40f5-bedb-35804eba0094",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "51192174-a841-46dc-9cb6-eb89a3c315aa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a28eb62f-a91b-4af3-8c1d-d3b4011ae46d",
                    "name": "credentials_verify:proof:verificationMethod:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e215eb7a-4716-4af7-8c7d-cb5b9eec6636",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "531176e8-b6b4-4a04-a33c-11ebaabbb403"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "417c0ffb-2960-4155-9651-147c6b631cad",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8148ccaf-fe1a-4010-9629-9c9877684dfa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "83405629-7aec-4d12-9363-173944e1e68a",
                    "name": "credentials_verify:proof:verificationMethod:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ff4de868-4fcf-4e4b-a39b-5e5060ee6cc5",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = {\"key\": \"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "59715689-240b-43a9-adb8-f49c5b206ded"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f3817339-5cc2-4fed-ac8b-7004904539ae",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7f12a8d1-9143-4449-af50-7e447b4a5f4e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f72aa811-a7cb-4185-a360-5fd901144d45",
                    "name": "credentials_verify:proof:jws:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "faa0aab4-0a9e-4541-a8d0-4b78a44953b2",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = [\"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "06621cda-d57c-46c7-aa5b-ba1b8b6540ed"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "da832637-fc72-462e-a8f9-fc63ad5c7bc5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ec0e963e-acb3-4341-b927-551e7ebd8b4a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a9316dd0-4977-4b4e-9158-e2fe9f6b87f6",
                    "name": "credentials_verify:proof:jws:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e075c994-fc76-45f7-8621-8da0ebaa097b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b98c9020-cde4-404a-ad73-eae1aa0b6a46"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5ae7b722-1ee4-4ef6-920f-5a38194c91e7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6e41b4bd-b5da-47d9-9fb9-7d189c3c3d62"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9b039154-87c2-47ee-b9c8-6d5161bb7911",
                    "name": "credentials_verify:proof:jws:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "12a9f21a-fab9-4537-9dd2-40b7e80eea00",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "78b54b52-e751-45f2-be81-d90d033457f6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7ef45f5a-4b76-41e0-bf3c-c20d3e66a2c1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cf6259d8-3918-4698-b926-389a07aec765"
                        }
                      }
                    ]
                  },
                  {
                    "id": "70c22cc9-3fcc-4e33-869a-19984c37253f",
                    "name": "credentials_verify:proof:jws:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c1bdbf2c-bba0-442e-886f-d7f0952d3ec6",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "011a71f3-4fec-4161-a15a-d09e65a3b08e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "abecbe7f-5b7b-41b5-8ddf-e58b7b5dde2d",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c088915b-1d7b-4337-b1ec-a0611969a77b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2c2cb873-8fc5-4670-8b15-ea06e82dd8aa",
                    "name": "credentials_verify:proof:jws:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ccb11d95-04ca-436b-bf5b-be9c641c9c5d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = {\"key\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7105ead5-e528-40bf-b528-c0cc769ee462"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "957de73e-d372-4819-be2b-061f1d65459e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "114f3300-0b70-4de2-8d8c-0dc4b27931a5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "38942f86-9156-4f7a-af2a-be103f439563",
                    "name": "credentials_verify:proof:proofPurpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d8158782-4600-4b17-9b6b-bd2e04a0674a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = [\"assertionMethod\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "edd192cf-5e4f-47da-8d04-aecf23ff355f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6caeb08b-0ce6-4a64-a7bb-2c1e47bcf3c5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9fde446c-4e30-4f17-bbd9-b510877acbcc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e4c0dc31-5367-4a45-88b4-55d6f685bd24",
                    "name": "credentials_verify:proof:proofPurpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "58b9093b-2652-408c-b980-2e64e55d5eb0",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "077043af-dc08-41a8-ae8d-80baf7ca7260"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5b9606db-abf9-4f51-a367-778b5098588f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "830fd829-f831-4167-a03b-8a977dc64782"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b89942de-d053-4213-a26e-8608eafc6b27",
                    "name": "credentials_verify:proof:proofPurpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "07ab976e-36c2-4814-abb1-9bedff1fa566",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8a14c581-6447-433b-bbd9-ab6498e14e82"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9af90fbd-3a03-44e6-9e27-974f26bed141",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "edc78bfb-e772-4b20-8c51-89595448a5bc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "12c2dcd9-0c87-4bf3-8fed-0a1b36552a72",
                    "name": "credentials_verify:proof:proofPurpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d1f46d00-01d0-4e02-b093-0758c4364e5b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "68cf5898-363c-4c4b-9899-9cf416ae3e0f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5b48d2b5-46b2-44b8-8022-a1e9b622de8d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "740db654-dfab-4c1d-a636-76195eaadd3f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dd772242-6298-4f78-85cd-9a78dc02d12e",
                    "name": "credentials_verify:proof:proofPurpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "775e7da9-9735-4b52-8a49-b3c5bb3baee9",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = {\"key\": \"assertionMethod\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "50963800-83d3-4745-b3b3-4a5f861ff478"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "15c82ad4-7105-40c3-b7e1-6794101e1e3e",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bc1c9f3a-0c73-4536-bd4c-e488bb8d6221"
                        }
                      }
                    ]
                  },
                  {
                    "id": "71b61959-2eac-4b83-a469-e7b080d74288",
                    "name": "credentials_verify:proof:proofPurpose:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a96e2e6d-743a-43b2-90ef-eaf74354cb62",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = \"not a valid value\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "481fd9c3-e6ec-4b7c-9d2a-8454b8fd859c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "010ea10c-f4e2-4718-910c-3998977313cd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e03f3c12-c587-425b-9395-d66996801548"
                        }
                      }
                    ]
                  }
                ],
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "b110265d-9355-4173-a779-edac1154ee73",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "9f330ea3-804d-412d-b14d-5686cbb378a4"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "e0ac9f3b-2a37-4fc6-b1bc-a5bdc583bf8a",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 400\", function () {",
                        " pm.response.to.have.status(400);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "1f0a5733-c27a-41dd-bd64-1c5b9016396c"
                    }
                  }
                ]
              },
              {
                "id": "81e235f3-02da-42d5-9e3a-ef5db89e1303",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "c9d7e6df-7284-4086-a930-137e4a8b8513",
                    "name": "credentials_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "006ba220-5bd3-40a4-b8d6-c9635577fa56",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"valid_vc\")));"
                          ],
                          "_lastExecutionId": "e5fd1784-2b28-4361-ba67-fbec5e977183"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8df64eb9-1678-4417-be4e-7ae560ce3c9c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "f925e7f6-c7db-4df0-9fe5-3b1ef5c48a19"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "db497ff3-83b4-4ad4-911c-cc790d2f5574",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "4b705ce9-de86-402e-ab14-0acd7d108233"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "de15d5c8-ac8a-415b-9396-5eee751d9b9c",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "806b0d2f-f171-4227-b734-05a3d49a230d"
                    }
                  }
                ]
              },
              {
                "id": "3f3a9471-3c9e-4f20-bca5-61f976102d85",
                "name": "Bad Signature",
                "item": [
                  {
                    "id": "14e2e48b-a39d-4b54-ab02-9b7807734134",
                    "name": "credentials_verify:bad_signature",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"id\": \"urn:uuid:e22ccc92-2c81-411f-a80f-e7f8334000a7\",\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..mvbcalofPOi7o7nxByyxXCuSOKXuGFM7_W9a8N62-EERarrH4p4T_0c2ZfGnGLiHOvY6Q-dyy38t9HPvXy-MBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0d776393-ac41-4115-bc89-c2f554c26038",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 200\", function () {",
                            " pm.response.to.have.status(200);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            "pm.test(\"response verified is false\", function() {",
                            " const { verified } = pm.response.json();",
                            " pm.expect(verified).to.be.false;",
                            "});"
                          ],
                          "_lastExecutionId": "5c15ed58-f7ee-4e79-8326-bf5868f11359"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "43ccf375-7291-4cdd-b8e3-8c269f703e40",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c7270bba-4cfc-4c5d-ab2e-7ccb26b28ce8"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "7ec9d799-8070-417f-93ea-b4d0c87283d9",
            "name": "Positive Testing",
            "item": [
              {
                "id": "83882b1b-7b00-4f8e-b7cd-3ae4ea0c0390",
                "name": "credentials_verify",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "10add6ff-212e-485e-97cf-de93cedb0068",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "810c3206-82c0-4ce9-9699-692819b87a86"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "508924b7-5fd3-4b90-9585-f4874c5c32f4",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "a464bc28-3bf3-4894-918f-f40b01dd3524"
                    }
                  }
                ]
              },
              {
                "id": "86b02bb2-b61e-447d-aad0-2e146b5bb483",
                "name": "credentials_verify:issuer:object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\"\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "9510740d-992b-416d-95e5-fa950ed9bf5a",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "b77bae08-e8b4-4979-8437-0c883d4f77f2"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "ba1d0f40-73f6-49dc-ba0e-721b2f96e0d6",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "56627bdd-7769-426c-a8f3-d5baf34c2741"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "691e50aa-c9ce-457d-8dbd-778e8becfff3",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Dummy VC issued for testing",
                "pm.variables.set(\"valid_vc\", {",
                "    \"@context\": [",
                "        \"https://www.w3.org/2018/credentials/v1\"",
                "    ],",
                "    \"credentialSubject\": {",
                "        \"id\": \"did:example:123\"",
                "    },",
                "    \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",",
                "    \"issuanceDate\": \"2006-01-02T15:04:05Z\",",
                "    \"issuer\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\",",
                "    \"proof\": {",
                "        \"created\": \"2020-04-02T18:48:36Z\",",
                "        \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..R618vVfGIF2jTe5dVkzMqQYIFKoIkyK_3_35z15tp_aFzew_4ruQt2DcaxdtkwsRff7bFsrVfigTl_XeE3tPDA\",",
                "        \"proofPurpose\": \"assertionMethod\",",
                "        \"type\": \"Ed25519Signature2018\",",
                "        \"verificationMethod\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV#z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\"",
                "    },",
                "    \"type\": \"VerifiableCredential\"",
                "});",
                ""
              ],
              "_lastExecutionId": "f9840376-cc35-4447-9575-ba98e9782062"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "e028e79a-bfeb-4143-983d-00fbcd45a3d2",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "fc97af97-8fb6-481e-8c31-c5572efc13d2"
            }
          }
        ]
      },
      {
        "id": "3f62d509-957c-4ace-973b-c38fcb9f9d00",
        "name": "Presentations - Present",
        "item": [
          {
            "id": "87467eb7-4a17-49bc-b106-2daf93fae9c0",
            "name": "Negative Testing",
            "item": [
              {
                "id": "98a238ca-82d3-4904-b38b-194674cb60da",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "c7a19634-8911-4fa0-b77b-ead66e3f9025",
                    "name": "presentations:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b2c45cf4-0159-42cc-a9b8-21827037da26",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "012546b1-afb8-4463-87e4-576af137c923"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4cbfb556-6ec4-47e6-a09a-38d788ec39d3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "e05e13c3-a244-416d-880a-2b06869b062a"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "df79a1da-ae82-4984-9f01-69fb9650283d",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "54f3be2c-e91b-419d-9d16-d18bdb029ffa"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "af9caf34-8c83-47fd-8a78-ca622c38da4d",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "a37451e7-57ba-4b96-853f-2a3656fdd9ed"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "81120adf-890d-4dd6-a33a-62f5fd91b633",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "793696a0-ed98-4578-9fb2-d237cd9b85a4"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "3b2f4e97-1c36-4612-b68f-6277b4c820bb",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "41efa71b-cb9d-4b5b-86bc-0661b65609e3"
            }
          }
        ]
      },
      {
        "id": "48558be9-56d1-4072-9fde-3829070e7c54",
        "name": "Presentations - Create",
        "item": [
          {
            "id": "5d107c5b-9512-4c3c-8de0-733d0ec0b70b",
            "name": "Negative Testing",
            "item": [
              {
                "id": "c8b1cb36-8936-4b4a-99a5-077675ec3b03",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "442d15fb-bbb8-400b-9dee-ac6f3e59b7cd",
                    "name": "presentations_prove:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "772c3434-a31e-4973-9c78-6b137e80baa6",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "a5e61c56-8c31-438f-89c5-7cd61a10d729"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b7a5e3b2-fbc1-42fd-a977-3d0a7532c8b3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "aa69fbd0-e796-40f7-a110-db81101f573d"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "b9ddaeba-845f-4687-ba3b-341bcc8e3624",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "44f5c446-f7a2-4040-a58e-b555c6e3f9ce"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "97287d10-9603-41a6-8d5b-00456bf59515",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "6b5a3b5a-07ba-4970-8b23-954c49673348"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "93e27ade-d3ef-4856-b7d0-60a0a057b4e1",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "2f9a8cd9-a3b7-4e9c-9141-5f1636479eb8"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "7079463f-b0b7-4e02-a04d-fe0663698d08",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "ba534113-467e-47d7-ac48-d85c37e1c461"
            }
          }
        ]
      },
      {
        "id": "eeb0201f-c6f6-43e3-84d4-2210835fd355",
        "name": "Presentations - Verify",
        "item": [
          {
            "id": "336eaeb8-6f19-463d-9bb7-f2255fa5d484",
            "name": "Negative Testing",
            "item": [
              {
                "id": "ddfd9bd5-0dd2-4730-aa92-4813799259ac",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "633142d8-9227-4cef-9fbb-5883e6808c27",
                    "name": "presentations_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cfa6fd7c-8f12-4a84-8658-73974931e8f9",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "950c5850-53e4-457f-9a72-9404ed0771c5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0ed40bc4-7965-4f86-ad5b-a00007c03a6f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "be73ddc6-5160-4ab4-9e35-fe6f3497ae8d"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "4eebe786-a51e-49a8-9b2a-62ccd3d13051",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "79f43b14-cec0-4af4-a52e-0c5431201031"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "f8bb5abf-6a49-4707-b224-6f0f9bf14dee",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "94f772e0-dcea-4c90-9fdd-93534e43ed5f"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "89e355b1-33ec-49a7-bfe2-c7665abbb34c",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "4f5e7c1a-eff1-4c25-8c7a-85451010083e"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "530c1dc1-97b3-4c26-aa5f-6c905c7f42fb",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "6aadda0d-18cc-49e7-8962-e7dc7e81a895"
            }
          }
        ]
      },
      {
        "id": "ad96af60-86f1-450a-89f5-e0a7198073a1",
        "name": "Presentations - Notify",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "122f6566-a6fb-4218-8d5b-5a252b92f306",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "1b521e41-d64b-4c9b-bbc5-ac8daba65467",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      },
      {
        "id": "93ac35fe-8ca6-46bd-817a-a2684055bb49",
        "name": "Presentations - Submit",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "b132de4c-0289-4d62-966d-e0319f1407f3",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "f26f3331-90a9-451b-bc13-9d9ce6577f34",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      }
    ]
  },
  "run": {
    "stats": {
      "iterations": {
        "total": 1,
        "pending": 0,
        "failed": 0
      },
      "items": {
        "total": 283,
        "pending": 0,
        "failed": 0
      },
      "scripts": {
        "total": 2091,
        "pending": 0,
        "failed": 0
      },
      "prerequests": {
        "total": 283,
        "pending": 0,
        "failed": 0
      },
      "requests": {
        "total": 285,
        "pending": 0,
        "failed": 0
      },
      "tests": {
        "total": 283,
        "pending": 0,
        "failed": 0
      },
      "assertions": {
        "total": 573,
        "pending": 0,
        "failed": 77
      },
      "testScripts": {
        "total": 1050,
        "pending": 0,
        "failed": 0
      },
      "prerequestScripts": {
        "total": 1041,
        "pending": 0,
        "failed": 0
      }
    },
    "timings": {
      "responseAverage": 62.88070175438607,
      "responseMin": 5,
      "responseMax": 570,
      "responseSd": 80.18561676728348,
      "dnsAverage": 0,
      "dnsMin": 0,
      "dnsMax": 0,
      "dnsSd": 0,
      "firstByteAverage": 0,
      "firstByteMin": 0,
      "firstByteMax": 0,
      "firstByteSd": 0,
      "started": 1710722121360,
      "completed": 1710722149015
    },
    "executions": [
      {
        "id": "dfe13424-e06e-4e12-91d3-40feea9ec1f3",
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 283,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "5b9f3e8d-5827-4666-a936-219a2c28e355",
          "httpRequestId": "a22a7081-c792-43f5-b57f-8ec83933da31"
        },
        "item": {
          "id": "dfe13424-e06e-4e12-91d3-40feea9ec1f3",
          "name": "Clear Token Cache"
        },
        "response": {
          "id": "72d3e20a-56de-40f0-b12e-33c9813ef321",
          "status": "OK",
          "code": 200,
          "responseTime": 51,
          "responseSize": 0
        }
      },
      {
        "id": "88356fa1-10fd-44aa-a01b-0dbd13ee9895",
        "cursor": {
          "ref": "17a394db-772b-4547-ab8a-08eda708d908",
          "length": 283,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "699b34b2-7780-40d8-83fd-2a8a41927d4b"
        },
        "item": {
          "id": "88356fa1-10fd-44aa-a01b-0dbd13ee9895",
          "name": "Clear DID Web Cache"
        },
        "response": {
          "id": "3e028106-3c25-42eb-a7a0-bf59aea14189",
          "status": "OK",
          "code": 200,
          "responseTime": 5,
          "responseSize": 0
        }
      },
      {
        "id": "de2ca0ab-bea0-40ba-902a-0b84656178a1",
        "cursor": {
          "ref": "06d3a58a-f181-442f-bba1-c8deb1384003",
          "length": 283,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "455a6cc0-9154-43c9-8a55-2b8834b7507a"
        },
        "item": {
          "id": "de2ca0ab-bea0-40ba-902a-0b84656178a1",
          "name": "did_json"
        },
        "response": {
          "id": "a0e71703-e20c-4017-82b3-b9eedd649ceb",
          "status": "OK",
          "code": 200,
          "responseTime": 166,
          "responseSize": 1446
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2db350e3-70b7-4c10-abf9-b9d938a3d5fd",
        "cursor": {
          "ref": "cc3fd9e6-e885-4977-afb7-692abc4abdc7",
          "length": 283,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "f8cfa9a5-c747-4f26-b8f2-fa95d96801fc"
        },
        "item": {
          "id": "2db350e3-70b7-4c10-abf9-b9d938a3d5fd",
          "name": "did:invalid"
        },
        "response": {
          "id": "98e4d576-9022-4236-b341-bfc470e4eff2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2db350e3-70b7-4c10-abf9-b9d938a3d5fd",
        "cursor": {
          "ref": "cc3fd9e6-e885-4977-afb7-692abc4abdc7",
          "length": 283,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "f8cfa9a5-c747-4f26-b8f2-fa95d96801fc"
        },
        "item": {
          "id": "2db350e3-70b7-4c10-abf9-b9d938a3d5fd",
          "name": "did:invalid"
        },
        "response": {
          "id": "98e4d576-9022-4236-b341-bfc470e4eff2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a87d6abf-f7cb-41a1-883a-26b372a4a709",
        "cursor": {
          "ref": "727b233e-91e1-47af-8f2c-cb8df7fe5c55",
          "length": 283,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "5f6bad91-5609-4d52-a63a-87c3216644e7"
        },
        "item": {
          "id": "a87d6abf-f7cb-41a1-883a-26b372a4a709",
          "name": "did:not_found:did_web"
        },
        "response": {
          "id": "a19e619a-4406-429a-bdf8-22186ead250b",
          "status": "Not Found",
          "code": 404,
          "responseTime": 315,
          "responseSize": 49
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ecca2e0c-8657-4c03-9308-dae76d6451fc",
        "cursor": {
          "ref": "9b73865c-c6c6-460d-911d-faa006dfc90b",
          "length": 283,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "9f0cd205-9105-4df8-9a74-2b3bd0c4313a"
        },
        "item": {
          "id": "ecca2e0c-8657-4c03-9308-dae76d6451fc",
          "name": "did:not_found:urn"
        },
        "response": {
          "id": "951eb307-46a3-49cf-8516-a3cf21fbad88",
          "status": "Not Found",
          "code": 404,
          "responseTime": 40,
          "responseSize": 82
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5daf88a2-0f3f-44dd-b9ab-c744fe06db01",
        "cursor": {
          "ref": "ba5e3783-449e-4f4a-93d4-02590df376b0",
          "length": 283,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "7ec7f377-f353-4fb2-9754-d0256ef53eb8"
        },
        "item": {
          "id": "5daf88a2-0f3f-44dd-b9ab-c744fe06db01",
          "name": "identifiers:missing_auth"
        },
        "response": {
          "id": "41b69cd4-6424-44b0-8ed4-a5e805d4e9bc",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 23,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6c6dff1c-9826-402a-9efc-7c9d8f60b856",
        "cursor": {
          "ref": "54499dfc-9130-490f-97b0-4ab29b75c401",
          "length": 283,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "22b66059-839b-49d2-be9e-8ee5e604eb3d"
        },
        "item": {
          "id": "6c6dff1c-9826-402a-9efc-7c9d8f60b856",
          "name": "identifiers"
        },
        "response": {
          "id": "d17d1222-bfe9-4b78-90d7-a1cfb5aaf15d",
          "status": "OK",
          "code": 200,
          "responseTime": 75,
          "responseSize": 1462
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "138105d7-8c1f-4be0-a782-fc7666881bd8",
        "cursor": {
          "ref": "742f1fde-0994-4153-ab17-e9e9f41d6608",
          "length": 283,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "af12ab2f-0078-4ba8-898e-230cd4a6fdb8"
        },
        "item": {
          "id": "138105d7-8c1f-4be0-a782-fc7666881bd8",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "371a9b7d-7e2b-473c-b067-16591726d8f7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cbec044b-1461-4040-baa5-95263cf1e385",
        "cursor": {
          "ref": "41afa710-b388-46f4-9da3-fbac7a46833e",
          "length": 283,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "361ca98a-2939-4229-bba2-1a59f7b72bb7"
        },
        "item": {
          "id": "cbec044b-1461-4040-baa5-95263cf1e385",
          "name": "credentials_issue:credential.@context:missing"
        },
        "response": {
          "id": "7fa66053-3196-4e02-9830-89587ae6f45e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "87f4c702-e858-4074-b690-cb780bcbe6da",
        "cursor": {
          "ref": "7adada70-5ad7-4376-916c-25488112fe87",
          "length": 283,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "e3e8c70f-6226-48ac-aed4-7c6ac3e24d8f"
        },
        "item": {
          "id": "87f4c702-e858-4074-b690-cb780bcbe6da",
          "name": "credentials_issue:credential.@context:boolean"
        },
        "response": {
          "id": "c29891a9-bef3-4cde-b107-256cca040032",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7935e3fe-b6ea-4049-bddf-2c04e46c6800",
        "cursor": {
          "ref": "c4da864c-706d-4bb2-b087-aef7e9efdade",
          "length": 283,
          "cycles": 1,
          "position": 11,
          "iteration": 0,
          "httpRequestId": "12db57f1-c655-4fd4-96c7-e392127ce53d"
        },
        "item": {
          "id": "7935e3fe-b6ea-4049-bddf-2c04e46c6800",
          "name": "credentials_issue:credential.@context:integer Copy"
        },
        "response": {
          "id": "2282d6ec-626b-4993-81ac-e3a9cb964dfc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "93c24148-3189-4d4b-a964-f92d4713096e",
        "cursor": {
          "ref": "6d224502-cb9a-4aac-bb97-f2ea7d3a3156",
          "length": 283,
          "cycles": 1,
          "position": 12,
          "iteration": 0,
          "httpRequestId": "d935404d-1eed-464f-9329-ff90610d6e92"
        },
        "item": {
          "id": "93c24148-3189-4d4b-a964-f92d4713096e",
          "name": "credentials_issue:credential.@context:null"
        },
        "response": {
          "id": "9bc1859e-5e73-4746-8e21-89c5d29e98fd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "df157402-483c-469d-a7b0-b289e3fbe3ac",
        "cursor": {
          "ref": "bc89c4e0-2c42-4b90-b0c2-f2ff761936f0",
          "length": 283,
          "cycles": 1,
          "position": 13,
          "iteration": 0,
          "httpRequestId": "a556432d-3773-47c0-9d7f-cdd3e89c9427"
        },
        "item": {
          "id": "df157402-483c-469d-a7b0-b289e3fbe3ac",
          "name": "credentials_issue:credential.@context:object"
        },
        "response": {
          "id": "675a59a1-7f6c-4d3b-a2aa-206aeaf55d36",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "aa80c5eb-ecd2-4b98-8833-4eae929821b6",
        "cursor": {
          "ref": "cb21884f-96d4-4921-bbf5-b6b865ba5d33",
          "length": 283,
          "cycles": 1,
          "position": 14,
          "iteration": 0,
          "httpRequestId": "3820d97f-73f8-4b79-8c30-308d4b74dc5b"
        },
        "item": {
          "id": "aa80c5eb-ecd2-4b98-8833-4eae929821b6",
          "name": "credentials_issue:credential.@context:string"
        },
        "response": {
          "id": "4702e864-1cae-4362-a097-e9aef95c9072",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ee377e93-d21e-46ca-8ec8-252f1da9fbf6",
        "cursor": {
          "ref": "02ce5621-950b-4b37-b166-84387034a49f",
          "length": 283,
          "cycles": 1,
          "position": 15,
          "iteration": 0,
          "httpRequestId": "e5947881-bdae-4b12-be12-1fd4c0d46708"
        },
        "item": {
          "id": "ee377e93-d21e-46ca-8ec8-252f1da9fbf6",
          "name": "credentials_issue:credential.@context.item.array"
        },
        "response": {
          "id": "7c121b29-9349-41c2-9ac5-ed27ad729c9a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "68957b8d-f9f5-4669-8469-6343ac230020",
        "cursor": {
          "ref": "410abc96-5e0b-4ffa-b2dc-6eb52e7ff9b7",
          "length": 283,
          "cycles": 1,
          "position": 16,
          "iteration": 0,
          "httpRequestId": "fb7f2e64-a97f-4113-b54f-ea0189a5bbfc"
        },
        "item": {
          "id": "68957b8d-f9f5-4669-8469-6343ac230020",
          "name": "credentials_issue:credential.@context.item.boolean"
        },
        "response": {
          "id": "8288afe9-1248-41ac-bbe9-cba36d9ceefd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a2a71fb8-2339-44c2-9696-4769a3302b01",
        "cursor": {
          "ref": "fb5cfe4a-6d73-433c-b839-30140c819426",
          "length": 283,
          "cycles": 1,
          "position": 17,
          "iteration": 0,
          "httpRequestId": "2cd65b8f-8f8c-4a63-989c-90a78b449802"
        },
        "item": {
          "id": "a2a71fb8-2339-44c2-9696-4769a3302b01",
          "name": "credentials_issue:credential.@context.item.integer"
        },
        "response": {
          "id": "9236faf2-1e18-4d4a-842b-e3f2d5a82d29",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9cc44650-5f8c-4677-ac04-64fb54461194",
        "cursor": {
          "ref": "b9f5a8f7-8aa5-4abc-833f-71b872922f62",
          "length": 283,
          "cycles": 1,
          "position": 18,
          "iteration": 0,
          "httpRequestId": "de66628a-142e-4523-aab8-8309aa60b0b7"
        },
        "item": {
          "id": "9cc44650-5f8c-4677-ac04-64fb54461194",
          "name": "credentials_issue:credential.@context.item.null"
        },
        "response": {
          "id": "4bb9b03f-a245-4e04-b18c-348e4b6ae402",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "816b1bb5-4f83-4c58-a0bb-4f421e59125a",
        "cursor": {
          "ref": "5789bcc8-3ef6-4799-ab93-6144cca11e53",
          "length": 283,
          "cycles": 1,
          "position": 19,
          "iteration": 0,
          "httpRequestId": "0aee636b-c854-48a6-9db5-cc1352fc07c6"
        },
        "item": {
          "id": "816b1bb5-4f83-4c58-a0bb-4f421e59125a",
          "name": "credentials_issue:credential.@context.item.object"
        },
        "response": {
          "id": "ac6382db-623d-4d9a-91c4-b4790fbb4b5b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a6177874-631c-4a60-8975-7ba7410f6893",
        "cursor": {
          "ref": "f84b0164-67cf-4f23-ae4b-33325c77b541",
          "length": 283,
          "cycles": 1,
          "position": 20,
          "iteration": 0,
          "httpRequestId": "accc8b45-2318-4ef6-8de8-2b958da2e542"
        },
        "item": {
          "id": "a6177874-631c-4a60-8975-7ba7410f6893",
          "name": "credentials_issue:credential.id:array"
        },
        "response": {
          "id": "8cc5f282-46c9-4885-9e17-4abac3365fcf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "736b3412-2b53-4d55-b914-6444db6c7293",
        "cursor": {
          "ref": "2b44b73e-09c0-4df2-9896-53a733639544",
          "length": 283,
          "cycles": 1,
          "position": 21,
          "iteration": 0,
          "httpRequestId": "90fe0cc3-56d2-4d56-aa1c-2d94ec7b35c0"
        },
        "item": {
          "id": "736b3412-2b53-4d55-b914-6444db6c7293",
          "name": "credentials_issue:credential.id:boolean"
        },
        "response": {
          "id": "a324c4a3-7d81-402b-80c8-ea7ff6118677",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "264471e5-d03c-4fe2-b0ad-beafaeee2489",
        "cursor": {
          "ref": "07a732e0-42fd-43be-ad7e-4ae3bdde2139",
          "length": 283,
          "cycles": 1,
          "position": 22,
          "iteration": 0,
          "httpRequestId": "17368b3e-72ca-4fe8-8a53-66317662cb38"
        },
        "item": {
          "id": "264471e5-d03c-4fe2-b0ad-beafaeee2489",
          "name": "credentials_issue:credential.id:integer"
        },
        "response": {
          "id": "873009d4-78cf-4273-8a37-3adfe05a5f89",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c04c4ead-7709-436c-a9d4-d5833516bcb6",
        "cursor": {
          "ref": "a8c40477-b46f-469f-9346-367c9cc2426a",
          "length": 283,
          "cycles": 1,
          "position": 23,
          "iteration": 0,
          "httpRequestId": "8a6decec-4576-4a2c-8192-d675d55c4ca8"
        },
        "item": {
          "id": "c04c4ead-7709-436c-a9d4-d5833516bcb6",
          "name": "credentials_issue:credential.id:null"
        },
        "response": {
          "id": "87d62754-b9fa-4e7a-bea1-200e09f655d9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1edc032b-2501-4838-8c86-f4031b683c97",
        "cursor": {
          "ref": "1e0bd939-c271-442c-9b02-706ed6e9d8da",
          "length": 283,
          "cycles": 1,
          "position": 24,
          "iteration": 0,
          "httpRequestId": "627a4369-8509-4e97-bef7-338996c94e9f"
        },
        "item": {
          "id": "1edc032b-2501-4838-8c86-f4031b683c97",
          "name": "credentials_issue:credential.id:object"
        },
        "response": {
          "id": "d564932f-d001-41c7-b8f6-a381211ead57",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a7a8c665-ec1a-4774-9faf-92a91f29bcc9",
        "cursor": {
          "ref": "cfc34125-d1f2-4a4a-aa25-49ea8677bef3",
          "length": 283,
          "cycles": 1,
          "position": 25,
          "iteration": 0,
          "httpRequestId": "eed956a0-abce-4a7c-afe2-f5e2ca0135f0"
        },
        "item": {
          "id": "a7a8c665-ec1a-4774-9faf-92a91f29bcc9",
          "name": "credentials_issue:credential.type:missing"
        },
        "response": {
          "id": "57629a39-d492-453e-9195-653f018b78df",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9ace6dd4-052f-4aea-9150-a564a242755d",
        "cursor": {
          "ref": "17f80c21-bd92-4df9-af8b-2d3271ac3cbe",
          "length": 283,
          "cycles": 1,
          "position": 26,
          "iteration": 0,
          "httpRequestId": "710e7fd5-2d58-4881-896e-639104578855"
        },
        "item": {
          "id": "9ace6dd4-052f-4aea-9150-a564a242755d",
          "name": "credentials_issue:credential.type:boolean"
        },
        "response": {
          "id": "c7e5f687-24a8-4f66-a446-dd339daed463",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "82f5cb41-3a8b-47e0-8ff4-4edd68cd9f63",
        "cursor": {
          "ref": "38b3157f-7e3b-41f4-a7b7-673375a77e8b",
          "length": 283,
          "cycles": 1,
          "position": 27,
          "iteration": 0,
          "httpRequestId": "671f77cc-e00e-4b08-b4a6-5f745dafe779"
        },
        "item": {
          "id": "82f5cb41-3a8b-47e0-8ff4-4edd68cd9f63",
          "name": "credentials_issue:credential.type:integer"
        },
        "response": {
          "id": "89f65817-18f9-4ea4-8dd5-d9d4c4c8b1fd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f1412ce4-2859-4955-8d4c-d2e7e016fd52",
        "cursor": {
          "ref": "a8534cac-18ad-4b3b-8083-1dea9d566f1d",
          "length": 283,
          "cycles": 1,
          "position": 28,
          "iteration": 0,
          "httpRequestId": "206fbb6c-ea01-4ef0-9978-f63d6c7cd815"
        },
        "item": {
          "id": "f1412ce4-2859-4955-8d4c-d2e7e016fd52",
          "name": "credentials_issue:credential.type:null"
        },
        "response": {
          "id": "2eac35c1-7f2f-4bd9-909c-d6e6c56e76bc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ef873c0b-ec7f-4acb-9427-0c4d16155765",
        "cursor": {
          "ref": "eca542f5-253a-47ea-850e-739acc61207b",
          "length": 283,
          "cycles": 1,
          "position": 29,
          "iteration": 0,
          "httpRequestId": "c49ad1cf-ae30-4312-9114-356e257c1fc4"
        },
        "item": {
          "id": "ef873c0b-ec7f-4acb-9427-0c4d16155765",
          "name": "credentials_issue:credential.type:object"
        },
        "response": {
          "id": "c9497907-5a76-4ed1-a42e-85dada2c261b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "41c045e2-d8d4-4de2-987b-bcbddc62714b",
        "cursor": {
          "ref": "4a9011d2-15a8-495c-b659-38b6f5ab170f",
          "length": 283,
          "cycles": 1,
          "position": 30,
          "iteration": 0,
          "httpRequestId": "a6a4fa0e-158b-4c87-9040-42022dfc18ad"
        },
        "item": {
          "id": "41c045e2-d8d4-4de2-987b-bcbddc62714b",
          "name": "credentials_issue:credential.type:string"
        },
        "response": {
          "id": "5c6a8898-c87a-4117-b4d5-3b8a31993b20",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 107
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "aad68f44-48a3-4014-b462-67122a257055",
        "cursor": {
          "ref": "b9d49281-9850-434e-a5ec-ab0a29ee316b",
          "length": 283,
          "cycles": 1,
          "position": 31,
          "iteration": 0,
          "httpRequestId": "ce89da78-1854-4674-bbdd-9091b515533b"
        },
        "item": {
          "id": "aad68f44-48a3-4014-b462-67122a257055",
          "name": "credentials_issue:credential.type.item:missing"
        },
        "response": {
          "id": "e4b83eac-afc4-4ea9-bef4-053e0842bdf5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 107
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "70ae738c-2072-4699-ad3f-767a0564bb32",
        "cursor": {
          "ref": "2a72e5ee-a778-4800-b3c3-670cf83534a7",
          "length": 283,
          "cycles": 1,
          "position": 32,
          "iteration": 0,
          "httpRequestId": "4ba524d8-8279-4438-b35a-2ecb813e3383"
        },
        "item": {
          "id": "70ae738c-2072-4699-ad3f-767a0564bb32",
          "name": "credentials_issue:credential.type.item:array"
        },
        "response": {
          "id": "7f31187f-fc01-4f29-9286-86eb90194e27",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fe472178-fe23-4c00-b460-c00a8e928f75",
        "cursor": {
          "ref": "b1894084-04b1-49c7-9bd3-a7698097e35d",
          "length": 283,
          "cycles": 1,
          "position": 33,
          "iteration": 0,
          "httpRequestId": "2e2c135a-3ead-4e0f-a2fb-9a303441b513"
        },
        "item": {
          "id": "fe472178-fe23-4c00-b460-c00a8e928f75",
          "name": "credentials_issue:credential.type.item:boolean"
        },
        "response": {
          "id": "3eda11c9-4b03-4566-b4f4-3eb341378cd2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0e38af4e-b66a-49a2-848c-5681102ce1d3",
        "cursor": {
          "ref": "c4d7ac1a-5a6c-4abe-b366-4849630c6474",
          "length": 283,
          "cycles": 1,
          "position": 34,
          "iteration": 0,
          "httpRequestId": "2f00a7dc-60cb-48da-a133-8448f7ed8caf"
        },
        "item": {
          "id": "0e38af4e-b66a-49a2-848c-5681102ce1d3",
          "name": "credentials_issue:credential.type.item:integer"
        },
        "response": {
          "id": "ebf92b6e-7ec2-481a-9c8b-f073052f52e1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "277935f4-fce3-4765-92c8-5be010d9098e",
        "cursor": {
          "ref": "ad6e1c46-5cfe-4d19-b000-9a588173698b",
          "length": 283,
          "cycles": 1,
          "position": 35,
          "iteration": 0,
          "httpRequestId": "e150723c-7353-49f3-9c79-dbb19e3532ff"
        },
        "item": {
          "id": "277935f4-fce3-4765-92c8-5be010d9098e",
          "name": "credentials_issue:credential.type.item:null"
        },
        "response": {
          "id": "5ec82396-4221-4aa9-9a92-98c932b3a98a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9b66c76a-a402-4f78-b7af-ff34c73bf543",
        "cursor": {
          "ref": "bf948a05-870c-40b4-8c17-c813c95dc024",
          "length": 283,
          "cycles": 1,
          "position": 36,
          "iteration": 0,
          "httpRequestId": "49fb12fa-a327-49f5-8751-e90154841b0d"
        },
        "item": {
          "id": "9b66c76a-a402-4f78-b7af-ff34c73bf543",
          "name": "credentials_issue:credential.type.item:object"
        },
        "response": {
          "id": "f70a5596-7634-4432-bd1f-a3c411137e18",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b23acd9e-4db1-49c7-8293-c1761a7db3ba",
        "cursor": {
          "ref": "99439a89-8cf7-4543-afd3-33f01d35fec9",
          "length": 283,
          "cycles": 1,
          "position": 37,
          "iteration": 0,
          "httpRequestId": "635ebdef-c791-4c5f-90a2-6c6111bc5fbb"
        },
        "item": {
          "id": "b23acd9e-4db1-49c7-8293-c1761a7db3ba",
          "name": "credentials_issue:credential.issuer:missing"
        },
        "response": {
          "id": "c009e4a0-b535-4431-a0f9-509e72a99d89",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 96
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2f1a7373-51a4-4052-9171-cb1767878e4d",
        "cursor": {
          "ref": "58972610-87ed-4d30-bc5b-7bb746d62d33",
          "length": 283,
          "cycles": 1,
          "position": 38,
          "iteration": 0,
          "httpRequestId": "25d96987-d5ab-4467-aba5-47873fa73beb"
        },
        "item": {
          "id": "2f1a7373-51a4-4052-9171-cb1767878e4d",
          "name": "credentials_issue:credential.issuer:array"
        },
        "response": {
          "id": "4d0402a0-7849-4f36-bab3-fedd4d880b1c",
          "status": "Created",
          "code": 201,
          "responseTime": 570,
          "responseSize": 691
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:39)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:39)"
            }
          }
        ]
      },
      {
        "id": "8d777aba-1bcb-4225-8dc2-f63a216de18a",
        "cursor": {
          "ref": "770378a5-6ea4-4548-af16-d1fcff8a1dd2",
          "length": 283,
          "cycles": 1,
          "position": 39,
          "iteration": 0,
          "httpRequestId": "adc72f53-f768-47f5-8188-b0a13ce8e53d"
        },
        "item": {
          "id": "8d777aba-1bcb-4225-8dc2-f63a216de18a",
          "name": "credentials_issue:credential.issuer:boolean"
        },
        "response": {
          "id": "4567ab34-d1c1-4102-bfce-4d80917f0d06",
          "status": "Created",
          "code": 201,
          "responseTime": 253,
          "responseSize": 650
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:40)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:40)"
            }
          }
        ]
      },
      {
        "id": "e8dc1308-d7a9-40bf-8d3b-bfc6b0519cfe",
        "cursor": {
          "ref": "a0e39bd1-a87b-4ccc-82e6-424e570fea6e",
          "length": 283,
          "cycles": 1,
          "position": 40,
          "iteration": 0,
          "httpRequestId": "6347e843-e6b5-4fc1-b9b2-02342c48a5b7"
        },
        "item": {
          "id": "e8dc1308-d7a9-40bf-8d3b-bfc6b0519cfe",
          "name": "credentials_issue:credential.issuer:integer"
        },
        "response": {
          "id": "eade64ec-a3b4-4f7e-b0d7-d1a275deb61a",
          "status": "Created",
          "code": 201,
          "responseTime": 250,
          "responseSize": 647
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:41)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:41)"
            }
          }
        ]
      },
      {
        "id": "ade10cbd-6d11-40e9-a5bc-df41e6094272",
        "cursor": {
          "ref": "db395318-590c-4237-b682-50bd9ac73bf9",
          "length": 283,
          "cycles": 1,
          "position": 41,
          "iteration": 0,
          "httpRequestId": "c9832d97-871f-4979-bad7-d123e81b055d"
        },
        "item": {
          "id": "ade10cbd-6d11-40e9-a5bc-df41e6094272",
          "name": "credentials_issue:credential.issuer:null"
        },
        "response": {
          "id": "5f1afbf6-df4f-4102-b999-989407cd2a16",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 96
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "27eb3743-3a2a-4b55-8f55-7deb6365d5f3",
        "cursor": {
          "ref": "df345c4a-dbf3-4491-9d90-ac4365260bce",
          "length": 283,
          "cycles": 1,
          "position": 42,
          "iteration": 0,
          "httpRequestId": "a6d6fa8f-b994-4b7f-8eac-5aaaefde803d"
        },
        "item": {
          "id": "27eb3743-3a2a-4b55-8f55-7deb6365d5f3",
          "name": "credentials_issue.credential.issuer:invalid"
        },
        "response": {
          "id": "f5a90276-c707-461e-a99e-7db304154a2d",
          "status": "Created",
          "code": 201,
          "responseTime": 250,
          "responseSize": 656
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:43)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:43)"
            }
          }
        ]
      },
      {
        "id": "4902f75f-445d-4f58-b6f0-b4110d402c00",
        "cursor": {
          "ref": "03a89e86-29fb-4ce2-948f-32dca5f08cf0",
          "length": 283,
          "cycles": 1,
          "position": 43,
          "iteration": 0,
          "httpRequestId": "89d64a6f-0037-41bc-9ec6-e7973c664217"
        },
        "item": {
          "id": "4902f75f-445d-4f58-b6f0-b4110d402c00",
          "name": "credentials_issue.credential.issuer:unknown"
        },
        "response": {
          "id": "9bbe695a-372a-4ef1-91c6-4ddee08dd1f7",
          "status": "Created",
          "code": 201,
          "responseTime": 266,
          "responseSize": 692
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 201",
              "stack": "AssertionError: expected response to have status code 422 but got 201\n   at Object.eval sandbox-script.js:1:44)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:44)"
            }
          }
        ]
      },
      {
        "id": "6fd8b07a-eff9-40ac-8685-88a595803cff",
        "cursor": {
          "ref": "8b855c7f-5a58-4838-8f75-e81bf8a88fcf",
          "length": 283,
          "cycles": 1,
          "position": 44,
          "iteration": 0,
          "httpRequestId": "a6e6148d-170d-4857-b72c-b82a1e29a295"
        },
        "item": {
          "id": "6fd8b07a-eff9-40ac-8685-88a595803cff",
          "name": "credentials_issue:credential.issuer.id:missing"
        },
        "response": {
          "id": "e4b3f295-346f-445f-a67d-6f85ac5e1b37",
          "status": "Created",
          "code": 201,
          "responseTime": 336,
          "responseSize": 647
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:45)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:45)"
            }
          }
        ]
      },
      {
        "id": "4bf9551c-f697-434b-a1c5-255a1a70d993",
        "cursor": {
          "ref": "1b5eb521-8748-461a-a6dc-38418ad3f82f",
          "length": 283,
          "cycles": 1,
          "position": 45,
          "iteration": 0,
          "httpRequestId": "3e526633-afa1-4a59-ba13-c4be20dde8af"
        },
        "item": {
          "id": "4bf9551c-f697-434b-a1c5-255a1a70d993",
          "name": "credentials_issue:credential.issuer.id:array"
        },
        "response": {
          "id": "57b5feed-df66-4b09-be79-a2140200fc08",
          "status": "Created",
          "code": 201,
          "responseTime": 271,
          "responseSize": 698
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:46)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:46)"
            }
          }
        ]
      },
      {
        "id": "6d37de76-16f0-44ac-a43f-a76fed2d9eb2",
        "cursor": {
          "ref": "cb92ed55-d134-4b62-b73b-4c6f32c1b0b8",
          "length": 283,
          "cycles": 1,
          "position": 46,
          "iteration": 0,
          "httpRequestId": "b7cd05a5-9fc3-4e47-bf5a-253d1ad1f6fc"
        },
        "item": {
          "id": "6d37de76-16f0-44ac-a43f-a76fed2d9eb2",
          "name": "credentials_issue:credential.issuer.id:boolean"
        },
        "response": {
          "id": "3ae52410-4dba-4de3-9815-f566ec76d1b5",
          "status": "Created",
          "code": 201,
          "responseTime": 277,
          "responseSize": 657
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:47)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:47)"
            }
          }
        ]
      },
      {
        "id": "5f968d5a-ed6b-4d64-bf92-1413a206e29e",
        "cursor": {
          "ref": "7f89f2ca-9cd8-48df-9e8c-c70c410d6a4b",
          "length": 283,
          "cycles": 1,
          "position": 47,
          "iteration": 0,
          "httpRequestId": "675de102-0f0d-4bd3-a3aa-b088ff0db70e"
        },
        "item": {
          "id": "5f968d5a-ed6b-4d64-bf92-1413a206e29e",
          "name": "credentials_issue:credential.issuer.id:integer"
        },
        "response": {
          "id": "4c9ea975-14a3-4191-b5c8-6ea8accc2c3e",
          "status": "Created",
          "code": 201,
          "responseTime": 260,
          "responseSize": 654
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:48)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:48)"
            }
          }
        ]
      },
      {
        "id": "06bbd6b7-2eaa-4824-a3a9-0b1bd7c43598",
        "cursor": {
          "ref": "38742074-1317-4325-85ec-51866f16baa5",
          "length": 283,
          "cycles": 1,
          "position": 48,
          "iteration": 0,
          "httpRequestId": "067469ec-5f75-4df6-bf68-ba1e2e5d499b"
        },
        "item": {
          "id": "06bbd6b7-2eaa-4824-a3a9-0b1bd7c43598",
          "name": "credentials_issue:credential.issuer.id:null"
        },
        "response": {
          "id": "fd483f48-e740-42f4-9c74-de5ad7804989",
          "status": "Created",
          "code": 201,
          "responseTime": 295,
          "responseSize": 656
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:49)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:49)"
            }
          }
        ]
      },
      {
        "id": "44824a08-1bb2-4669-b998-edd658059768",
        "cursor": {
          "ref": "47f8e8dd-2aa3-4520-8164-074e4917445b",
          "length": 283,
          "cycles": 1,
          "position": 49,
          "iteration": 0,
          "httpRequestId": "82d76c92-360c-4b02-974a-88b438b92a2c"
        },
        "item": {
          "id": "44824a08-1bb2-4669-b998-edd658059768",
          "name": "credentials_issue.credential.issuer.id:invalid"
        },
        "response": {
          "id": "c0220122-c2ca-4356-bc61-cf536d83b792",
          "status": "Created",
          "code": 201,
          "responseTime": 299,
          "responseSize": 663
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:50)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:50)"
            }
          }
        ]
      },
      {
        "id": "350e68aa-5930-426a-8bb5-f5a162531c42",
        "cursor": {
          "ref": "9b1ff603-f907-4fc1-9b73-112f679e7572",
          "length": 283,
          "cycles": 1,
          "position": 50,
          "iteration": 0,
          "httpRequestId": "365ac365-21ae-4cba-9b47-a1b974f8517c"
        },
        "item": {
          "id": "350e68aa-5930-426a-8bb5-f5a162531c42",
          "name": "credentials_issue.credential.issuer.id:unknown"
        },
        "response": {
          "id": "251572b9-5375-4b54-8246-dad30449944d",
          "status": "Created",
          "code": 201,
          "responseTime": 443,
          "responseSize": 699
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 201",
              "stack": "AssertionError: expected response to have status code 422 but got 201\n   at Object.eval sandbox-script.js:1:51)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:51)"
            }
          }
        ]
      },
      {
        "id": "5c5cb18c-8bfb-477a-98f5-cb4eeeb6ae98",
        "cursor": {
          "ref": "5740a252-c460-46d7-a35f-ce19f3a3dd41",
          "length": 283,
          "cycles": 1,
          "position": 51,
          "iteration": 0,
          "httpRequestId": "261c9aa5-d13d-478c-94c5-3b9e07f2ee4b"
        },
        "item": {
          "id": "5c5cb18c-8bfb-477a-98f5-cb4eeeb6ae98",
          "name": "credentials_issue:credential.issuanceDate.missing"
        },
        "response": {
          "id": "d3bd85d5-3ee3-467c-890d-14595fa2de8d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 167
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a3be6480-ca9a-40d2-ad24-b275b6cc6e81",
        "cursor": {
          "ref": "2a5efb55-e5a6-4295-ac69-0581ba02dffd",
          "length": 283,
          "cycles": 1,
          "position": 52,
          "iteration": 0,
          "httpRequestId": "0c394ce7-8469-443e-9d3b-6b927e04327f"
        },
        "item": {
          "id": "a3be6480-ca9a-40d2-ad24-b275b6cc6e81",
          "name": "credentials_issue:credential.issuanceDate:array"
        },
        "response": {
          "id": "c159d796-2fe2-4d64-a014-fb456bdcbf73",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "68d08e6b-0df1-462b-af18-e15d8ad7d450",
        "cursor": {
          "ref": "b079ec97-68df-4f6c-95f0-aa0c0a8ac2d3",
          "length": 283,
          "cycles": 1,
          "position": 53,
          "iteration": 0,
          "httpRequestId": "b106ee8e-7323-40f0-8fb2-d4e9572105ed"
        },
        "item": {
          "id": "68d08e6b-0df1-462b-af18-e15d8ad7d450",
          "name": "credentials_issue:credential.issuanceDate:boolean"
        },
        "response": {
          "id": "ff71f779-3e9d-4a96-84ac-a13b0362da82",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4ffaf55f-959a-496b-a2bf-3262deecf24f",
        "cursor": {
          "ref": "e586c9c0-75b7-4e82-bba1-3a0cf08f43fd",
          "length": 283,
          "cycles": 1,
          "position": 54,
          "iteration": 0,
          "httpRequestId": "620c75a0-8aa7-455f-9229-4f2e0e02baf3"
        },
        "item": {
          "id": "4ffaf55f-959a-496b-a2bf-3262deecf24f",
          "name": "credentials_issue:credential.issuanceDate:integer"
        },
        "response": {
          "id": "e18258c0-22ca-4524-9d67-51910786d833",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "68bbfdd4-f719-41de-88c0-df6b1ee9f022",
        "cursor": {
          "ref": "f09702c2-7208-48be-aed2-350056ea996e",
          "length": 283,
          "cycles": 1,
          "position": 55,
          "iteration": 0,
          "httpRequestId": "f21dbcf0-3533-4016-88f1-01f977ea6682"
        },
        "item": {
          "id": "68bbfdd4-f719-41de-88c0-df6b1ee9f022",
          "name": "credentials_issue:credential.issuanceDate:null"
        },
        "response": {
          "id": "d6e5b2ea-f044-4150-addb-5ee72f462ef2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 167
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b01c5471-78ca-4a5d-bdf1-5cb7e7ad0b0d",
        "cursor": {
          "ref": "b347689d-e287-4a83-b87c-f773979b6bb2",
          "length": 283,
          "cycles": 1,
          "position": 56,
          "iteration": 0,
          "httpRequestId": "a4ff2531-4b82-4542-b293-d3845a447ba2"
        },
        "item": {
          "id": "b01c5471-78ca-4a5d-bdf1-5cb7e7ad0b0d",
          "name": "credentials_issue:credential.issuanceDate:object"
        },
        "response": {
          "id": "a3bd31f6-c8ec-43e7-95e7-c88934447f3c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ead3eeb0-00ad-489b-ba8c-a861aa059fac",
        "cursor": {
          "ref": "11770d34-7781-4f3c-8882-02aeef4813c1",
          "length": 283,
          "cycles": 1,
          "position": 57,
          "iteration": 0,
          "httpRequestId": "8061675b-0d83-4270-b8de-5aabd8ae1e0b"
        },
        "item": {
          "id": "ead3eeb0-00ad-489b-ba8c-a861aa059fac",
          "name": "credentials_issue:credential.issuanceDate:invalid_value"
        },
        "response": {
          "id": "07f20e94-1582-4fdd-b27e-6b8927da1eec",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "06c2d660-72a0-49b1-9d24-68354255d84b",
        "cursor": {
          "ref": "a4b00997-4e4d-42e3-b8e1-035a1afd97ee",
          "length": 283,
          "cycles": 1,
          "position": 58,
          "iteration": 0,
          "httpRequestId": "dbc1e251-01ce-4ef8-bf43-3e063b865f9c"
        },
        "item": {
          "id": "06c2d660-72a0-49b1-9d24-68354255d84b",
          "name": "credentials_issue:credential.credentialSubject:missing"
        },
        "response": {
          "id": "de8e950d-3cc6-4998-b8b6-afe0d1841faf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f3792255-3014-41e0-bde9-93ab054f3149",
        "cursor": {
          "ref": "5ebccdb6-258d-46d6-ae66-552ee0fd001a",
          "length": 283,
          "cycles": 1,
          "position": 59,
          "iteration": 0,
          "httpRequestId": "58651429-2d6a-4fbd-a3d6-c7be676153ae"
        },
        "item": {
          "id": "f3792255-3014-41e0-bde9-93ab054f3149",
          "name": "credentials_issue:credential.credentialSubject:array"
        },
        "response": {
          "id": "53f81ac6-9ee9-45e6-b941-d4db3ba98994",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 203
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1a757890-a660-4ab5-93da-98a17680ac59",
        "cursor": {
          "ref": "2d513fc3-1123-4ead-a203-5cf6b6403afd",
          "length": 283,
          "cycles": 1,
          "position": 60,
          "iteration": 0,
          "httpRequestId": "e39623c1-d4eb-43a6-a89e-eae5ae31e879"
        },
        "item": {
          "id": "1a757890-a660-4ab5-93da-98a17680ac59",
          "name": "credentials_issue:credential.credentialSubject:boolean"
        },
        "response": {
          "id": "cfd89dcf-4c47-48bb-957a-912830802142",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 185
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e1d11ef6-f13e-4f7a-875b-36a96c1b0f41",
        "cursor": {
          "ref": "c8bf9d56-6440-4e9f-be30-4d661c401950",
          "length": 283,
          "cycles": 1,
          "position": 61,
          "iteration": 0,
          "httpRequestId": "028f8274-3d30-42cc-9225-d3d67d8ade4f"
        },
        "item": {
          "id": "e1d11ef6-f13e-4f7a-875b-36a96c1b0f41",
          "name": "credentials_issue:credential.credentialSubject:integer"
        },
        "response": {
          "id": "d1ef0d49-d410-4be7-90d8-798f3e265c2f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 185
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9ce3e1a5-c975-4972-8250-7eb1d45dbd7f",
        "cursor": {
          "ref": "b8fe524a-e731-4c31-98a5-46a1f2ed9ea5",
          "length": 283,
          "cycles": 1,
          "position": 62,
          "iteration": 0,
          "httpRequestId": "334a4ee9-2526-4006-a365-47124ed65e80"
        },
        "item": {
          "id": "9ce3e1a5-c975-4972-8250-7eb1d45dbd7f",
          "name": "credentials_issue:credential.credentialSubject:null"
        },
        "response": {
          "id": "d04d2ec5-f04b-484b-8be5-56839272bc05",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 238
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9f2eb4ad-1201-4a1c-882e-760e0ef09a44",
        "cursor": {
          "ref": "ff5e96f7-2008-4242-ab86-7b4322e9dfac",
          "length": 283,
          "cycles": 1,
          "position": 63,
          "iteration": 0,
          "httpRequestId": "e75c604c-044a-4c15-8b3a-36027b2e75bc"
        },
        "item": {
          "id": "9f2eb4ad-1201-4a1c-882e-760e0ef09a44",
          "name": "credentials_issue:credential.credentialSubject:string"
        },
        "response": {
          "id": "6b0d8c0b-4fbe-4401-80fe-166af237a155",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 185
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c1acae1f-dc72-4087-b597-13aece477b26",
        "cursor": {
          "ref": "f39327a0-fedc-4c99-9d27-02c034719f80",
          "length": 283,
          "cycles": 1,
          "position": 64,
          "iteration": 0,
          "httpRequestId": "c8439e86-58f0-42eb-8398-b07a6848f169"
        },
        "item": {
          "id": "c1acae1f-dc72-4087-b597-13aece477b26",
          "name": "credentials_issue:credential.credentialSubject.id:array"
        },
        "response": {
          "id": "2d6ed9f7-cbcd-41f8-835b-3fa4ec758af5",
          "status": "Created",
          "code": 201,
          "responseTime": 267,
          "responseSize": 702
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:65)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:65)"
            }
          }
        ]
      },
      {
        "id": "01ae0e53-4d54-462c-aeef-c16c4f5eb4f4",
        "cursor": {
          "ref": "96bd66b8-5580-41d9-9c58-cbf236bcccdf",
          "length": 283,
          "cycles": 1,
          "position": 65,
          "iteration": 0,
          "httpRequestId": "3fa2afc9-ff94-44f2-91f7-d3f116b7959d"
        },
        "item": {
          "id": "01ae0e53-4d54-462c-aeef-c16c4f5eb4f4",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy"
        },
        "response": {
          "id": "85cf9a69-7842-49c1-a503-0f5a309e96ca",
          "status": "Created",
          "code": 201,
          "responseTime": 266,
          "responseSize": 688
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:66)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:66)"
            }
          }
        ]
      },
      {
        "id": "8f9a2737-c47f-4bb9-87b5-73ef8ed2e961",
        "cursor": {
          "ref": "55df28c5-80e9-4ed9-8b19-17b789fa7f71",
          "length": 283,
          "cycles": 1,
          "position": 66,
          "iteration": 0,
          "httpRequestId": "b0e23104-aeb9-4b7d-add2-baa04b0803fc"
        },
        "item": {
          "id": "8f9a2737-c47f-4bb9-87b5-73ef8ed2e961",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 2"
        },
        "response": {
          "id": "e53f6583-49ee-4134-a37f-3b305dd7ba82",
          "status": "Created",
          "code": 201,
          "responseTime": 267,
          "responseSize": 685
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:67)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:67)"
            }
          }
        ]
      },
      {
        "id": "4de10755-761b-4b89-939b-7701ab7a5b87",
        "cursor": {
          "ref": "3e503f8d-0e9a-4c45-91f5-8f9cb4847e8b",
          "length": 283,
          "cycles": 1,
          "position": 67,
          "iteration": 0,
          "httpRequestId": "73aad063-3d79-4850-9130-d364502f40f0"
        },
        "item": {
          "id": "4de10755-761b-4b89-939b-7701ab7a5b87",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 3"
        },
        "response": {
          "id": "3bfa879a-f34f-4517-952e-a66c5dfe07b5",
          "status": "Created",
          "code": 201,
          "responseTime": 267,
          "responseSize": 687
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:68)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:68)"
            }
          }
        ]
      },
      {
        "id": "4295a0c1-5da7-4e2a-8fd4-14bc9ecb848c",
        "cursor": {
          "ref": "a0d29aaa-cb5a-4208-b42f-c832b55b82aa",
          "length": 283,
          "cycles": 1,
          "position": 68,
          "iteration": 0,
          "httpRequestId": "53e66b6c-1634-4b9c-b213-1b0468ef4bd6"
        },
        "item": {
          "id": "4295a0c1-5da7-4e2a-8fd4-14bc9ecb848c",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 4"
        },
        "response": {
          "id": "8fdc0474-e5d1-4541-a26b-37ee4ef5c91c",
          "status": "Created",
          "code": 201,
          "responseTime": 297,
          "responseSize": 685
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:69)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:69)"
            }
          }
        ]
      },
      {
        "id": "e0207517-304e-4f22-a401-6c043bdd7b16",
        "cursor": {
          "ref": "91f3ca72-8451-4302-892e-bf050866d1b7",
          "length": 283,
          "cycles": 1,
          "position": 69,
          "iteration": 0,
          "httpRequestId": "3451a603-c369-455c-a35f-cb5ea9bc7ec2"
        },
        "item": {
          "id": "e0207517-304e-4f22-a401-6c043bdd7b16",
          "name": "credentials_issue:options:missing"
        },
        "response": {
          "id": "b568a6cf-80d0-4ce3-82fd-797868b61673",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 116
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "64f3de4d-c4a8-4176-9e18-d4216136f966",
        "cursor": {
          "ref": "5c952679-71b7-457f-b325-7c7af744c200",
          "length": 283,
          "cycles": 1,
          "position": 70,
          "iteration": 0,
          "httpRequestId": "750c3d24-ab48-41e7-8d7a-c7e682811a51"
        },
        "item": {
          "id": "64f3de4d-c4a8-4176-9e18-d4216136f966",
          "name": "credentials_issue:options:array"
        },
        "response": {
          "id": "6c852ad2-a69a-4044-bbdc-3f0e4cf9c89a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 57,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "84d040c8-85cf-430f-a64d-42c9ccd1df8d",
        "cursor": {
          "ref": "c8ecc96b-f9a3-472b-b02e-df8fadd79147",
          "length": 283,
          "cycles": 1,
          "position": 71,
          "iteration": 0,
          "httpRequestId": "31bb9072-5f1f-46fa-ba66-be6f37ec6d0f"
        },
        "item": {
          "id": "84d040c8-85cf-430f-a64d-42c9ccd1df8d",
          "name": "credentials_issue:options:boolean"
        },
        "response": {
          "id": "1e39740d-8a3b-4ac1-8c7a-dd963b4472b6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 157
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "38f28d25-a102-4537-bb19-25e6b231cec7",
        "cursor": {
          "ref": "eb6adf01-15b7-42ff-bf37-6fb53e9a8050",
          "length": 283,
          "cycles": 1,
          "position": 72,
          "iteration": 0,
          "httpRequestId": "8a5e820b-db03-44c8-8450-a5d4f992155a"
        },
        "item": {
          "id": "38f28d25-a102-4537-bb19-25e6b231cec7",
          "name": "credentials_issue:options:integer"
        },
        "response": {
          "id": "6cd20eaf-d12a-46cb-bf02-e6b621902c16",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 157
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "48365a8a-65e0-4458-bee8-1f42e0a94def",
        "cursor": {
          "ref": "b61ecdd6-da15-42a0-9fd2-3c8fb0ffcdd8",
          "length": 283,
          "cycles": 1,
          "position": 73,
          "iteration": 0,
          "httpRequestId": "152ec7d7-9fb5-4144-817c-9322a1575cd1"
        },
        "item": {
          "id": "48365a8a-65e0-4458-bee8-1f42e0a94def",
          "name": "credentials_issue:options:null"
        },
        "response": {
          "id": "ff3d508a-4187-4995-95f8-a9ff2897b0c1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 189
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bde0eae5-d58e-4ad8-8a79-b58c7c4ea63a",
        "cursor": {
          "ref": "bacb8602-dcf3-422c-9deb-54da91c647c2",
          "length": 283,
          "cycles": 1,
          "position": 74,
          "iteration": 0,
          "httpRequestId": "385d897e-f430-4f89-b391-9ddd79e04ad6"
        },
        "item": {
          "id": "bde0eae5-d58e-4ad8-8a79-b58c7c4ea63a",
          "name": "credentials_issue:options:string"
        },
        "response": {
          "id": "7df39804-d2d8-4ce5-bede-8c29d9cbdb63",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 189
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c57afa5d-58b0-4127-addf-e7c30614cf8f",
        "cursor": {
          "ref": "3a223d1a-d814-40e5-a528-c8751df2d9ef",
          "length": 283,
          "cycles": 1,
          "position": 75,
          "iteration": 0,
          "httpRequestId": "260beb36-c5a9-466a-a14c-d0030c0ddde4"
        },
        "item": {
          "id": "c57afa5d-58b0-4127-addf-e7c30614cf8f",
          "name": "credentials_issue:options.type:missing"
        },
        "response": {
          "id": "585d8c8b-3093-4946-942c-3f9362c7f4f3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 71,
          "responseSize": 278
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "863ea588-89da-4e0a-95ed-5e06414a772a",
        "cursor": {
          "ref": "a1d85335-a3d4-4b11-830c-629e864d20c1",
          "length": 283,
          "cycles": 1,
          "position": 76,
          "iteration": 0,
          "httpRequestId": "9adb9c38-83ab-4a69-b125-1cf1d48e4bbd"
        },
        "item": {
          "id": "863ea588-89da-4e0a-95ed-5e06414a772a",
          "name": "credentials_issue:options.type:array"
        },
        "response": {
          "id": "de6dbdbf-a061-4a35-8a9d-d835f6b9beaf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b6e28daa-29a0-4b70-b65a-5de9835cdc3d",
        "cursor": {
          "ref": "0d426220-25e9-47d8-a89a-4cd4b1b0c13a",
          "length": 283,
          "cycles": 1,
          "position": 77,
          "iteration": 0,
          "httpRequestId": "3d2ce901-3c06-4f63-b847-c7af8ac87dd7"
        },
        "item": {
          "id": "b6e28daa-29a0-4b70-b65a-5de9835cdc3d",
          "name": "credentials_issue:options.type:boolean"
        },
        "response": {
          "id": "e43c3b28-0063-4f24-ad2a-d89c02e68a60",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a095a260-89c2-48d7-9c2f-844caad6bcae",
        "cursor": {
          "ref": "1329e5a6-e766-44a9-83ed-f205dfb4d9c5",
          "length": 283,
          "cycles": 1,
          "position": 78,
          "iteration": 0,
          "httpRequestId": "e8dbd5af-2d22-4236-976c-24b25e41e7f4"
        },
        "item": {
          "id": "a095a260-89c2-48d7-9c2f-844caad6bcae",
          "name": "credentials_issue:options.type:integer"
        },
        "response": {
          "id": "5d7fbd18-5cfc-428a-b0f6-f512c0d6a06f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "af0b31de-0592-4e64-9782-21e67e312adf",
        "cursor": {
          "ref": "ffd99cf1-7d00-45e7-8ce9-0b0a21bda3c6",
          "length": 283,
          "cycles": 1,
          "position": 79,
          "iteration": 0,
          "httpRequestId": "2c788ed9-88f1-4a52-acda-0b3b53b607bc"
        },
        "item": {
          "id": "af0b31de-0592-4e64-9782-21e67e312adf",
          "name": "credentials_issue:options.type:null"
        },
        "response": {
          "id": "6f883f5c-4837-4415-8ff0-2115eea9d164",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 278
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "507a9769-4b4c-4072-a1ca-1b8bc672dfef",
        "cursor": {
          "ref": "1dec61db-6a35-4b62-b215-21412e6f8bdf",
          "length": 283,
          "cycles": 1,
          "position": 80,
          "iteration": 0,
          "httpRequestId": "4d32cd56-fdfc-4896-8fca-282174bd26e4"
        },
        "item": {
          "id": "507a9769-4b4c-4072-a1ca-1b8bc672dfef",
          "name": "credentials_issue:options.type:object"
        },
        "response": {
          "id": "48444847-55e8-41e7-965e-596cf9546853",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ccd691fc-323a-4190-a177-37ee6eca6231",
        "cursor": {
          "ref": "310d980f-d9ea-409b-8be0-2a2a3c85ce30",
          "length": 283,
          "cycles": 1,
          "position": 81,
          "iteration": 0,
          "httpRequestId": "350d37a0-cc59-418e-9c79-667595477ad1"
        },
        "item": {
          "id": "ccd691fc-323a-4190-a177-37ee6eca6231",
          "name": "credentials_issue:options.type:invalid_value"
        },
        "response": {
          "id": "31457999-be94-4716-9bca-9115fbf82d05",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 207
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ec455ef2-21f5-43bd-881d-db92e350aebf",
        "cursor": {
          "ref": "97b2ef4f-b318-40af-980a-bcb4089bdd64",
          "length": 283,
          "cycles": 1,
          "position": 82,
          "iteration": 0,
          "httpRequestId": "d2784f9e-239a-4338-aca4-73b3a650dfc7"
        },
        "item": {
          "id": "ec455ef2-21f5-43bd-881d-db92e350aebf",
          "name": "credentials_issue:options.created:array"
        },
        "response": {
          "id": "ec75edce-460c-4c06-8a1f-4fb1971a35e9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f4cc5310-c4a3-4bc5-af14-a4ec914625a0",
        "cursor": {
          "ref": "8785fb43-f129-4270-b2d2-6d0be3c522f5",
          "length": 283,
          "cycles": 1,
          "position": 83,
          "iteration": 0,
          "httpRequestId": "4a9c024b-dc61-4033-b440-b248fadbf989"
        },
        "item": {
          "id": "f4cc5310-c4a3-4bc5-af14-a4ec914625a0",
          "name": "credentials_issue:options.created:boolean"
        },
        "response": {
          "id": "b326b3a1-7c09-4367-b187-bd89c16e4da9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "de2dd808-e80b-472c-81df-1582a6d224d5",
        "cursor": {
          "ref": "918adffb-65d2-4c2e-8095-34387ea4526c",
          "length": 283,
          "cycles": 1,
          "position": 84,
          "iteration": 0,
          "httpRequestId": "feae36b0-3ce3-46e0-83f0-84b8cd9a9e0e"
        },
        "item": {
          "id": "de2dd808-e80b-472c-81df-1582a6d224d5",
          "name": "credentials_issue:options.created:integer"
        },
        "response": {
          "id": "54bce00c-5aae-4ea8-b7ec-88180d4dbadd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5b865ac6-c712-493a-8e61-e69fd4b20523",
        "cursor": {
          "ref": "cb73318d-3f9f-4931-8e7d-47345737e913",
          "length": 283,
          "cycles": 1,
          "position": 85,
          "iteration": 0,
          "httpRequestId": "d32ece58-5c18-4a95-89ab-3b0cf1c125ae"
        },
        "item": {
          "id": "5b865ac6-c712-493a-8e61-e69fd4b20523",
          "name": "credentials_issue:options.created:null"
        },
        "response": {
          "id": "3a7d3394-4a28-4e7e-973d-a4e1d6c947df",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e0644510-d51f-4ef9-8805-882f0a0e25dd",
        "cursor": {
          "ref": "f845c99d-8578-4ee8-b99c-93d2db8bc3aa",
          "length": 283,
          "cycles": 1,
          "position": 86,
          "iteration": 0,
          "httpRequestId": "760fee0f-f474-4334-9540-67abae6ce673"
        },
        "item": {
          "id": "e0644510-d51f-4ef9-8805-882f0a0e25dd",
          "name": "credentials_issue:options.created:object"
        },
        "response": {
          "id": "ded4da57-1941-4cd0-acd3-c1e7aceceb8c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a872a9ce-aaa7-4687-a4a1-93007e154343",
        "cursor": {
          "ref": "a9c1e5b3-9108-4071-981e-fa6e0818ea50",
          "length": 283,
          "cycles": 1,
          "position": 87,
          "iteration": 0,
          "httpRequestId": "12ae26aa-c580-4a96-8ad6-604dcce85307"
        },
        "item": {
          "id": "a872a9ce-aaa7-4687-a4a1-93007e154343",
          "name": "credentials_issue:options.created:invalid"
        },
        "response": {
          "id": "7b310443-39e4-4477-be01-4eb811de5a3e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3801e567-89cb-43b4-a684-58528c997dd9",
        "cursor": {
          "ref": "b7e34a2f-06e6-480e-8b99-6ed1e4eb695d",
          "length": 283,
          "cycles": 1,
          "position": 88,
          "iteration": 0,
          "httpRequestId": "896f2c53-d499-419c-960d-1c648c19e105"
        },
        "item": {
          "id": "3801e567-89cb-43b4-a684-58528c997dd9",
          "name": "credentials_issue:options.credentialStatus:array"
        },
        "response": {
          "id": "60009d2b-8e57-45c2-8350-4a036314d69e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "632ae0f0-5229-487a-80b0-4098bc706dc8",
        "cursor": {
          "ref": "bb79a9ce-31e8-4744-a352-62809119e368",
          "length": 283,
          "cycles": 1,
          "position": 89,
          "iteration": 0,
          "httpRequestId": "f186d0bc-b4b3-4a3b-959f-8b2ed5085134"
        },
        "item": {
          "id": "632ae0f0-5229-487a-80b0-4098bc706dc8",
          "name": "credentials_issue:options.credentialStatus:boolean"
        },
        "response": {
          "id": "164ae2b8-2702-4d75-aec8-7a89ffb9004e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b48b2db6-125b-4981-9c1a-f5c6bf4c905f",
        "cursor": {
          "ref": "e700a821-7691-4af4-af3a-114464b53e93",
          "length": 283,
          "cycles": 1,
          "position": 90,
          "iteration": 0,
          "httpRequestId": "ba35da7c-1025-47ba-abd4-3b5becf0106c"
        },
        "item": {
          "id": "b48b2db6-125b-4981-9c1a-f5c6bf4c905f",
          "name": "credentials_issue:options.credentialStatus:integer"
        },
        "response": {
          "id": "f53950b5-263c-4931-a989-27b62e65afd7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "871bfe1a-c5c3-47c0-8370-f649b7b27ab3",
        "cursor": {
          "ref": "6a2283c8-d488-4611-a63f-0401f75bcd17",
          "length": 283,
          "cycles": 1,
          "position": 91,
          "iteration": 0,
          "httpRequestId": "5b97f50d-8b1b-4459-b674-bca09136bd7c"
        },
        "item": {
          "id": "871bfe1a-c5c3-47c0-8370-f649b7b27ab3",
          "name": "credentials_issue:options.credentialStatus:null"
        },
        "response": {
          "id": "fc107ce1-414e-4411-903c-6cc2ae6a608a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4dca16fc-6a12-4c21-a2d0-db753e9e9190",
        "cursor": {
          "ref": "fc829ff5-9678-46d3-81c8-7777c7c8b0e0",
          "length": 283,
          "cycles": 1,
          "position": 92,
          "iteration": 0,
          "httpRequestId": "a70d4090-568d-4347-8673-c91726115861"
        },
        "item": {
          "id": "4dca16fc-6a12-4c21-a2d0-db753e9e9190",
          "name": "credentials_issue:options.credentialStatus:string"
        },
        "response": {
          "id": "81545748-635c-4f6a-8d60-587f89eb99dd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9d64f1d4-de3a-405f-ad8e-2d628f7d6c0f",
        "cursor": {
          "ref": "d8a35eda-85d2-4e07-8124-987f5cf9e071",
          "length": 283,
          "cycles": 1,
          "position": 93,
          "iteration": 0,
          "httpRequestId": "3add52e6-f231-43e0-b3cf-86b17d16bbc3"
        },
        "item": {
          "id": "9d64f1d4-de3a-405f-ad8e-2d628f7d6c0f",
          "name": "credentials_issue:options.credentialStatus.type:missing"
        },
        "response": {
          "id": "b3df3e66-4901-411a-b48b-66f9a73b7e7e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3ff21609-d2a0-4d3b-8ecc-da3029219b72",
        "cursor": {
          "ref": "99ef2636-17b5-4fb9-8480-2da0f7699e83",
          "length": 283,
          "cycles": 1,
          "position": 94,
          "iteration": 0,
          "httpRequestId": "64e5c968-eb81-46dd-aec7-f8f6bfc4588a"
        },
        "item": {
          "id": "3ff21609-d2a0-4d3b-8ecc-da3029219b72",
          "name": "credentials_issue:options.credentialStatus.type:array"
        },
        "response": {
          "id": "ae02e23f-9ef5-41f3-ae70-9bc39dcbf94e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5e945250-6dd8-4902-9496-e2d73752fd3c",
        "cursor": {
          "ref": "7692bde1-46f5-4617-81d1-c8d51da661a7",
          "length": 283,
          "cycles": 1,
          "position": 95,
          "iteration": 0,
          "httpRequestId": "14a3da8f-e782-4a24-b2c9-b172c914ceb4"
        },
        "item": {
          "id": "5e945250-6dd8-4902-9496-e2d73752fd3c",
          "name": "credentials_issue:options.credentialStatus.type:boolean"
        },
        "response": {
          "id": "ac57b5e4-da90-4dc4-bf81-180e1d538e6b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "46b8c235-04ba-438d-ba8f-fe5d4c1498c6",
        "cursor": {
          "ref": "19b7bb9c-1665-4604-a915-32e706c63bb9",
          "length": 283,
          "cycles": 1,
          "position": 96,
          "iteration": 0,
          "httpRequestId": "b899dde7-3de0-4df9-8735-f302a6959419"
        },
        "item": {
          "id": "46b8c235-04ba-438d-ba8f-fe5d4c1498c6",
          "name": "credentials_issue:options.credentialStatus.type:integer"
        },
        "response": {
          "id": "740ee2f6-5aa7-4f73-8fbb-a0e123101a53",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "08da35f3-fdbc-4f39-af22-1bd6c620f814",
        "cursor": {
          "ref": "4f1e5d56-498a-4461-96b6-90613551aab2",
          "length": 283,
          "cycles": 1,
          "position": 97,
          "iteration": 0,
          "httpRequestId": "70140fcb-561c-4f1a-b521-ce9dddba1c9d"
        },
        "item": {
          "id": "08da35f3-fdbc-4f39-af22-1bd6c620f814",
          "name": "credentials_issue:options.credentialStatus.type:null"
        },
        "response": {
          "id": "a5940972-afe0-449b-a15b-33eb139f6c52",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e5bed5e1-ecff-41e3-ae98-eb576dc32f33",
        "cursor": {
          "ref": "8c028a43-56a1-4e1a-bdc9-58170e2e1e99",
          "length": 283,
          "cycles": 1,
          "position": 98,
          "iteration": 0,
          "httpRequestId": "4e3f55ce-16cb-41b3-b5c8-51260f2bb7eb"
        },
        "item": {
          "id": "e5bed5e1-ecff-41e3-ae98-eb576dc32f33",
          "name": "credentials_issue:options.credentialStatus.type:null Copy"
        },
        "response": {
          "id": "e363fa25-ae94-460b-b41d-dc5b3f34d3cf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2bb3159c-25e9-4af7-9550-b82f37cd09f7",
        "cursor": {
          "ref": "7332a0cf-3e0d-4667-81e5-99a8b7b2c6ee",
          "length": 283,
          "cycles": 1,
          "position": 99,
          "iteration": 0,
          "httpRequestId": "b19a6640-8370-4268-acdb-57ac7910eae2"
        },
        "item": {
          "id": "2bb3159c-25e9-4af7-9550-b82f37cd09f7",
          "name": "credentials_issue:options.credentialStatus.type:invalid"
        },
        "response": {
          "id": "60a8d29b-322a-4f9c-9668-0e627ce62db1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9a5e496e-6457-417e-acdd-f47fc1db3656",
        "cursor": {
          "ref": "63e9885c-1b66-4e04-9392-b98b593fea92",
          "length": 283,
          "cycles": 1,
          "position": 100,
          "iteration": 0,
          "httpRequestId": "cc8f4a61-56c2-4d48-afff-931b344b392f"
        },
        "item": {
          "id": "9a5e496e-6457-417e-acdd-f47fc1db3656",
          "name": "credentials_issue:missing_auth"
        },
        "response": {
          "id": "bb6ad7f2-61ce-4073-83af-47fdf4ae94a3",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 17,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e8d45054-59e5-48fb-b2b9-4503ec0ba3c0",
        "cursor": {
          "ref": "d0ccdc8b-243a-4457-9b33-2a312e2e316c",
          "length": 283,
          "cycles": 1,
          "position": 101,
          "iteration": 0,
          "httpRequestId": "af44fbbc-3bae-4c7c-98bf-4f99fdc58c96"
        },
        "item": {
          "id": "e8d45054-59e5-48fb-b2b9-4503ec0ba3c0",
          "name": "credentials_issue.credential.issuer:dup"
        },
        "response": {
          "id": "263c9797-6f8d-434e-bc0d-3ac6f58d0e10",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 400",
              "stack": "AssertionError: expected response to have status code 201 but got 400\n   at Object.eval sandbox-script.js:1:102)"
            }
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 1,
              "test": "response issuer matches request credential.issuer",
              "message": "Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.",
              "stack": "TypeError: Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.\n   at Object.eval sandbox-script.js:2:102)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:3:102)"
            }
          }
        ]
      },
      {
        "id": "60682699-cabd-4cd9-9922-9f72b7424f22",
        "cursor": {
          "ref": "2bf78119-1a40-485a-ae00-80cfe5a3c62c",
          "length": 283,
          "cycles": 1,
          "position": 102,
          "iteration": 0,
          "httpRequestId": "b7583296-115c-4d09-b7c2-42ffbbb26335"
        },
        "item": {
          "id": "60682699-cabd-4cd9-9922-9f72b7424f22",
          "name": "credentials_issue"
        },
        "response": {
          "id": "1fc88ace-e625-47cc-a18f-2c265ba598ed",
          "status": "Created",
          "code": 201,
          "responseTime": 288,
          "responseSize": 689
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false
          },
          {
            "assertion": "response issuanceDate matches request credential.issuanceDate",
            "skipped": false
          },
          {
            "assertion": "response proof.created is close to 'now'",
            "skipped": false
          }
        ]
      },
      {
        "id": "efe28d77-60f5-4f06-9a8b-f582b3955122",
        "cursor": {
          "ref": "7a4f81f8-20f3-4609-8dbc-a1dd590a1afd",
          "length": 283,
          "cycles": 1,
          "position": 103,
          "iteration": 0,
          "httpRequestId": "25aa2c53-84e4-4f05-ab3a-129547579597"
        },
        "item": {
          "id": "efe28d77-60f5-4f06-9a8b-f582b3955122",
          "name": "credentials_issue:credential.opt.id"
        },
        "response": {
          "id": "50face5f-33a1-47a0-9c29-a43bab6c7d65",
          "status": "Created",
          "code": 201,
          "responseTime": 256,
          "responseSize": 643
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verifiableCredential.id matches request credential.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "92f03a8b-1795-4c27-9337-780a225b14c9",
        "cursor": {
          "ref": "2a00d21c-4ee2-4835-8f08-5214b8cb85cb",
          "length": 283,
          "cycles": 1,
          "position": 104,
          "iteration": 0,
          "httpRequestId": "11024a82-9420-49f6-a3a9-37f1bc642976"
        },
        "item": {
          "id": "92f03a8b-1795-4c27-9337-780a225b14c9",
          "name": "credentials_issue:credential:alt.issuer.object"
        },
        "response": {
          "id": "748d5634-bb81-48e6-b9c8-87eb1b29b6ef",
          "status": "Created",
          "code": 201,
          "responseTime": 313,
          "responseSize": 696
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "049163a7-069a-44a8-b3dc-986b35f869a4",
        "cursor": {
          "ref": "9557d514-06d7-4b80-8636-60a24dff7812",
          "length": 283,
          "cycles": 1,
          "position": 105,
          "iteration": 0,
          "httpRequestId": "aa4216c3-8436-448f-98d0-ef9d239a48b8"
        },
        "item": {
          "id": "049163a7-069a-44a8-b3dc-986b35f869a4",
          "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id"
        },
        "response": {
          "id": "e4ceac91-bfd4-4b26-bf1f-fb55f38586de",
          "status": "Created",
          "code": 201,
          "responseTime": 318,
          "responseSize": 700
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response credentialSubject.id matches request credential.credentialSubject.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "ef762d6c-a306-4b9d-abc4-42be0e394ee2",
        "cursor": {
          "ref": "fa417337-c687-4203-8c2a-12f9f94fcbda",
          "length": 283,
          "cycles": 1,
          "position": 106,
          "iteration": 0,
          "httpRequestId": "b72e2197-1013-4343-a77f-6dbe728aa169"
        },
        "item": {
          "id": "ef762d6c-a306-4b9d-abc4-42be0e394ee2",
          "name": "credentials_issue:options:opt.created"
        },
        "response": {
          "id": "8ed7eed0-387a-416a-96cc-ddb19bc62802",
          "status": "Created",
          "code": 201,
          "responseTime": 260,
          "responseSize": 689
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response proof.created matches request options.created",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response proof.created matches request options.created",
              "message": "expected '2024-03-18T00:35:35.328Z' to equal '2006-01-02T15:04:05Z'",
              "stack": "AssertionError: expected '2024-03-18T00:35:35.328Z' to equal '2006-01-02T15:04:05Z'\n   at Object.eval sandbox-script.js:3:107)"
            }
          }
        ]
      },
      {
        "id": "d7e6427a-4487-4b7d-b418-2a597a7ebaa9",
        "cursor": {
          "ref": "780b20c8-456a-4b36-ba8a-4b3057a73cc8",
          "length": 283,
          "cycles": 1,
          "position": 107,
          "iteration": 0,
          "httpRequestId": "8ab77897-4fc3-46bd-a119-b1fb3962c281"
        },
        "item": {
          "id": "d7e6427a-4487-4b7d-b418-2a597a7ebaa9",
          "name": "credentials_issue:options:opt.credentialStatus"
        },
        "response": {
          "id": "66347dd6-4fdc-4584-a7a1-92929eae6aba",
          "status": "Created",
          "code": 201,
          "responseTime": 364,
          "responseSize": 689
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ea5893e7-e503-4f81-bd97-d1977bbcef9e",
        "cursor": {
          "ref": "2a2b928b-5b31-4b1b-8886-ce297c2436fc",
          "length": 283,
          "cycles": 1,
          "position": 108,
          "iteration": 0,
          "httpRequestId": "7bd33cdf-d411-41b9-9749-b197ad442958"
        },
        "item": {
          "id": "ea5893e7-e503-4f81-bd97-d1977bbcef9e",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "a58d206d-a553-4cf3-a4ba-de889aa06cd2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "30347284-212b-43d1-8e4e-4b21b1008eb4",
        "cursor": {
          "ref": "92aed305-6d03-4b7d-a991-0ef279caa3ae",
          "length": 283,
          "cycles": 1,
          "position": 109,
          "iteration": 0,
          "httpRequestId": "8ae9dc6f-8deb-41c5-b0e6-a0c35a01b4da"
        },
        "item": {
          "id": "30347284-212b-43d1-8e4e-4b21b1008eb4",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "3334ded5-b854-4ab7-a3ce-75fae5649b17",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a33094ab-e787-4a93-ab47-b90445f602c2",
        "cursor": {
          "ref": "873164e0-f00a-478d-b176-16b0ba3c9609",
          "length": 283,
          "cycles": 1,
          "position": 110,
          "iteration": 0,
          "httpRequestId": "cf0b3ffe-309e-4c73-bd26-77c673532e5e"
        },
        "item": {
          "id": "a33094ab-e787-4a93-ab47-b90445f602c2",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "bbba09c0-a246-47d5-9574-acda7d00c85b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fb9093d8-ff7b-425d-93e8-effa6d092709",
        "cursor": {
          "ref": "f506e6b2-eb3c-4405-b381-290607266973",
          "length": 283,
          "cycles": 1,
          "position": 111,
          "iteration": 0,
          "httpRequestId": "69730fb8-faf3-464a-95f9-25ae1bc887f2"
        },
        "item": {
          "id": "fb9093d8-ff7b-425d-93e8-effa6d092709",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "4ea78727-002e-46bf-8880-c9903db52995",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f403649f-37cd-44f4-9c19-3af23442dc01",
        "cursor": {
          "ref": "450a5c27-db99-45c2-8f95-8f5104279ac1",
          "length": 283,
          "cycles": 1,
          "position": 112,
          "iteration": 0,
          "httpRequestId": "accda045-81e0-4632-917d-e832b6355666"
        },
        "item": {
          "id": "f403649f-37cd-44f4-9c19-3af23442dc01",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "b9d12787-891b-4ba3-882c-b481318c541d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "486c2cda-5858-4cfd-92e7-293f0d88324f",
        "cursor": {
          "ref": "6bab9bd7-8ca5-4a3f-b5de-1aaaf1b6e5e4",
          "length": 283,
          "cycles": 1,
          "position": 113,
          "iteration": 0,
          "httpRequestId": "acc2258d-85e8-4a53-8ebd-8c5056b4fe50"
        },
        "item": {
          "id": "486c2cda-5858-4cfd-92e7-293f0d88324f",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "23e2f9fc-1004-40a8-8cd6-6d486aa4791f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4839c9e3-3c39-4d39-8f3f-56fd6365f660",
        "cursor": {
          "ref": "a3c673a3-bc20-4f07-bad7-3f1e3a321e5a",
          "length": 283,
          "cycles": 1,
          "position": 114,
          "iteration": 0,
          "httpRequestId": "9955edd0-8986-49b8-93de-79128536002c"
        },
        "item": {
          "id": "4839c9e3-3c39-4d39-8f3f-56fd6365f660",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "c20b4da9-bb78-4059-81f8-d7e08e8db328",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 146
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a8f5b467-04b4-4752-b0a6-d3d9b6a28ea5",
        "cursor": {
          "ref": "73d1af03-6346-41b5-abdc-c38b0af9e3b1",
          "length": 283,
          "cycles": 1,
          "position": 115,
          "iteration": 0,
          "httpRequestId": "3aa6ff4d-9b59-420b-bf19-c52b308f4b11"
        },
        "item": {
          "id": "a8f5b467-04b4-4752-b0a6-d3d9b6a28ea5",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "673044dd-f520-4793-a251-c8fcea1cc44d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 228
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f7f33cfd-b8e9-4a81-bcad-be900faa77f5",
        "cursor": {
          "ref": "88ecbf34-fd9f-4fe2-b666-84e25fb70e1b",
          "length": 283,
          "cycles": 1,
          "position": 116,
          "iteration": 0,
          "httpRequestId": "3cabf348-b24f-41fd-becd-31158a552c52"
        },
        "item": {
          "id": "f7f33cfd-b8e9-4a81-bcad-be900faa77f5",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "39ab94e5-50f1-42ac-a99b-069c970f83fd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 228
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6bdd9fef-7590-4862-9b74-dbd223700d17",
        "cursor": {
          "ref": "2102f88d-d71d-4efa-81d3-7aa6f7e38d79",
          "length": 283,
          "cycles": 1,
          "position": 117,
          "iteration": 0,
          "httpRequestId": "ef1cad10-d41a-4d9d-ab31-08e51745bee9"
        },
        "item": {
          "id": "6bdd9fef-7590-4862-9b74-dbd223700d17",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "18e72646-fea6-4da4-a173-fbc181a2232a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 228
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4ea5ccfc-0021-4c05-9ad1-9881914cad7b",
        "cursor": {
          "ref": "0b7ac4cb-49b8-4f62-9a60-ddeebb9c4c5f",
          "length": 283,
          "cycles": 1,
          "position": 118,
          "iteration": 0,
          "httpRequestId": "a4ac01ef-f22d-4d3b-a53c-8414498c3c08"
        },
        "item": {
          "id": "4ea5ccfc-0021-4c05-9ad1-9881914cad7b",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "01deed52-1bd4-4e6b-ab85-6bd4415e85fe",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 146
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4bad755b-b4d3-4ba5-984e-0585437b30eb",
        "cursor": {
          "ref": "6e215892-810a-498c-96b0-ee202df21ba6",
          "length": 283,
          "cycles": 1,
          "position": 119,
          "iteration": 0,
          "httpRequestId": "655d338e-2947-4294-a925-6a6e37881eec"
        },
        "item": {
          "id": "4bad755b-b4d3-4ba5-984e-0585437b30eb",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "1ec6a5a0-2aa2-4fe4-a893-9080b7543d42",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 228
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d3538cef-c6b3-4551-bd0d-c6523336019c",
        "cursor": {
          "ref": "4b47138e-7149-4358-9a88-de71dcfa269f",
          "length": 283,
          "cycles": 1,
          "position": 120,
          "iteration": 0,
          "httpRequestId": "3ca29896-8d6b-4641-a90a-73e740c9e742"
        },
        "item": {
          "id": "d3538cef-c6b3-4551-bd0d-c6523336019c",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "40eef658-f21b-4758-b3eb-06c0a6d95f25",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 92,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:121)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:121)"
            }
          }
        ]
      },
      {
        "id": "a9e41061-a7d0-4cdf-98c7-2884b1fe586b",
        "cursor": {
          "ref": "3f7a7af7-ba13-4ba1-83a7-40022a2f7e03",
          "length": 283,
          "cycles": 1,
          "position": 121,
          "iteration": 0,
          "httpRequestId": "ffba1e46-6d37-4e8b-952a-11444b818793"
        },
        "item": {
          "id": "a9e41061-a7d0-4cdf-98c7-2884b1fe586b",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "2fe49028-edb1-40fc-9497-ef0b9e428326",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 86,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:122)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:122)"
            }
          }
        ]
      },
      {
        "id": "c1b63fce-964e-465e-8737-610348359088",
        "cursor": {
          "ref": "2c6ffe5b-ed3b-4f50-9059-9552d6e19cd3",
          "length": 283,
          "cycles": 1,
          "position": 122,
          "iteration": 0,
          "httpRequestId": "487279a9-a1a4-4bde-9fc5-275d4fc28ed9"
        },
        "item": {
          "id": "c1b63fce-964e-465e-8737-610348359088",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "f8712cdf-a6aa-459c-b5f5-ae1654b44638",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "808bd54c-9726-442d-8a97-ef7fa21ba2d2",
        "cursor": {
          "ref": "8ef3a2ae-7f55-47af-80b3-5fa7bb739b9e",
          "length": 283,
          "cycles": 1,
          "position": 123,
          "iteration": 0,
          "httpRequestId": "c7838bc7-f04c-4c73-b990-e3dd740d623a"
        },
        "item": {
          "id": "808bd54c-9726-442d-8a97-ef7fa21ba2d2",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "cf8e71de-9858-4727-9585-e84653d778ce",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "389b6713-ae50-473c-af4e-d95d89045d19",
        "cursor": {
          "ref": "a610b910-fadc-445e-a23e-370321289540",
          "length": 283,
          "cycles": 1,
          "position": 124,
          "iteration": 0,
          "httpRequestId": "4cb93fe6-ebe4-48d5-9a27-010a37e7218f"
        },
        "item": {
          "id": "389b6713-ae50-473c-af4e-d95d89045d19",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "3cbc0312-5dd1-44e2-8717-0d65b31b9c1d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "424c38dc-c435-4539-aa87-4ea5b0cf50fa",
        "cursor": {
          "ref": "808f9cf2-fb89-4a54-a79a-e70c39c08aa0",
          "length": 283,
          "cycles": 1,
          "position": 125,
          "iteration": 0,
          "httpRequestId": "2e71536f-e74f-4669-8159-3dc5cf577585"
        },
        "item": {
          "id": "424c38dc-c435-4539-aa87-4ea5b0cf50fa",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "2d36a739-733f-40b5-a0d7-b7f14029dc95",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fdf24cd2-d194-4513-ae2c-a2d48cf08312",
        "cursor": {
          "ref": "e89bffb8-3661-429e-aa32-f408adf20aae",
          "length": 283,
          "cycles": 1,
          "position": 126,
          "iteration": 0,
          "httpRequestId": "ab5b6cd6-57e4-4d95-8b9a-ca16e9b7a837"
        },
        "item": {
          "id": "fdf24cd2-d194-4513-ae2c-a2d48cf08312",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "ee0334e2-0d56-41cf-994a-d4d46476a01a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e110df7e-95eb-4888-8f4c-d0ebfd1f4097",
        "cursor": {
          "ref": "b15a3bbf-6ac7-4b30-82ab-ac8a748a2918",
          "length": 283,
          "cycles": 1,
          "position": 127,
          "iteration": 0,
          "httpRequestId": "4b196a9f-22df-4422-91bd-27c696a0dd2e"
        },
        "item": {
          "id": "e110df7e-95eb-4888-8f4c-d0ebfd1f4097",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "2a1ffc36-b12f-47de-8e3a-0b12a892176e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b1e339aa-808a-4cfe-82e1-f18317d5bd96",
        "cursor": {
          "ref": "9a67d500-96ce-44fd-b154-03afcd202de1",
          "length": 283,
          "cycles": 1,
          "position": 128,
          "iteration": 0,
          "httpRequestId": "f3490c67-e727-46b4-8007-d0fcbfabbf53"
        },
        "item": {
          "id": "b1e339aa-808a-4cfe-82e1-f18317d5bd96",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "b7682858-ede2-4abe-9ed3-6afd6164d927",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a735c5b1-7bb9-4140-b02f-5e9f0d23459e",
        "cursor": {
          "ref": "b296e42f-7ebe-4291-8fbf-1290aca3229f",
          "length": 283,
          "cycles": 1,
          "position": 129,
          "iteration": 0,
          "httpRequestId": "cd5e17e6-1967-401c-a0b2-c12ee3e7f0d2"
        },
        "item": {
          "id": "a735c5b1-7bb9-4140-b02f-5e9f0d23459e",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "cec64fa6-6856-4d0c-aa1a-0d4de8232792",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "966759cf-badb-474b-8672-63587d3923a5",
        "cursor": {
          "ref": "59609f0a-ffed-4df0-bc23-4464401622f5",
          "length": 283,
          "cycles": 1,
          "position": 130,
          "iteration": 0,
          "httpRequestId": "2c525f80-403b-4e8b-8079-15c55d70a724"
        },
        "item": {
          "id": "966759cf-badb-474b-8672-63587d3923a5",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "e29bf05d-84b3-44ca-8900-ad3e823219b3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b5b31519-e67f-4ff2-bf03-a22c5ff3f45d",
        "cursor": {
          "ref": "378997fd-363d-4f19-999d-d26590f481dd",
          "length": 283,
          "cycles": 1,
          "position": 131,
          "iteration": 0,
          "httpRequestId": "09c6165a-0af7-4697-bfe4-830ca25efdda"
        },
        "item": {
          "id": "b5b31519-e67f-4ff2-bf03-a22c5ff3f45d",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "663160c4-f2bf-4d8f-95c1-3efa2bee3ac0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "199ec701-e40e-4ceb-b992-64d290ef2dbb",
        "cursor": {
          "ref": "0ff35ad7-42c2-44cd-9ec4-9d5827dd0d72",
          "length": 283,
          "cycles": 1,
          "position": 132,
          "iteration": 0,
          "httpRequestId": "3f3163e7-d031-4d85-8882-8960a56226e5"
        },
        "item": {
          "id": "199ec701-e40e-4ceb-b992-64d290ef2dbb",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "fa6c4a0b-365a-4e71-814b-295179f58590",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "42675ca3-7487-44de-a9b4-7173b040d09a",
        "cursor": {
          "ref": "1cb35658-b925-4266-bb2b-aa0f938a2310",
          "length": 283,
          "cycles": 1,
          "position": 133,
          "iteration": 0,
          "httpRequestId": "bec12bdf-8c31-49c6-b554-6677026206dd"
        },
        "item": {
          "id": "42675ca3-7487-44de-a9b4-7173b040d09a",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "83e1324d-27ac-4905-909d-566b74caea2b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d825632c-03bd-4de4-a6b6-782b0ca27ba8",
        "cursor": {
          "ref": "17a32ff4-6228-406c-9d1c-742bf6e6ab3c",
          "length": 283,
          "cycles": 1,
          "position": 134,
          "iteration": 0,
          "httpRequestId": "280f122c-aa6a-48ee-bfb2-b58b923f81a8"
        },
        "item": {
          "id": "d825632c-03bd-4de4-a6b6-782b0ca27ba8",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "2133ac12-561a-400f-9c9e-e5de3e30d62f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 101
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1adad85a-7088-4f75-bbdb-8a768d8942b1",
        "cursor": {
          "ref": "db7b52a6-6971-4115-9ae7-80e084545558",
          "length": 283,
          "cycles": 1,
          "position": 135,
          "iteration": 0,
          "httpRequestId": "05e82fb8-6978-4073-9b01-0d1fb5f08e02"
        },
        "item": {
          "id": "1adad85a-7088-4f75-bbdb-8a768d8942b1",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "076e6cab-1c12-4b41-9a2a-2f00e90f87f4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 101
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "11256798-98b3-4a19-9fd2-04e8d12cda24",
        "cursor": {
          "ref": "1531cc5f-fccc-4daa-89e0-6ad825782888",
          "length": 283,
          "cycles": 1,
          "position": 136,
          "iteration": 0,
          "httpRequestId": "ad5455da-9343-4ffc-b5a3-b9e96807711a"
        },
        "item": {
          "id": "11256798-98b3-4a19-9fd2-04e8d12cda24",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "94a22b0b-2c38-46dd-852d-e7718d17ae77",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 101
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6650cdb4-54d3-45f7-9362-a17169f84f3d",
        "cursor": {
          "ref": "3121efc8-8f0c-4fd5-98a7-56becb723cf8",
          "length": 283,
          "cycles": 1,
          "position": 137,
          "iteration": 0,
          "httpRequestId": "02113fe3-c5f6-469e-b037-36a16496510b"
        },
        "item": {
          "id": "6650cdb4-54d3-45f7-9362-a17169f84f3d",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "ec43505c-7cc0-4fa8-a932-ba9bd2a4a925",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8fc9c6b0-5d6d-463f-ab2c-5d002b2b39cf",
        "cursor": {
          "ref": "f57d5dfe-b388-4e0e-bee7-c9dd8fcfbbcb",
          "length": 283,
          "cycles": 1,
          "position": 138,
          "iteration": 0,
          "httpRequestId": "6425705d-06d5-45a1-93cd-60e6de9487bf"
        },
        "item": {
          "id": "8fc9c6b0-5d6d-463f-ab2c-5d002b2b39cf",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "50827b2a-5ca6-470e-b4da-6d71ecccab2a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 101
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7164f278-3c67-45cb-a492-33752efbac65",
        "cursor": {
          "ref": "65dc0360-e86c-46b4-a94b-b2b03acdcb53",
          "length": 283,
          "cycles": 1,
          "position": 139,
          "iteration": 0,
          "httpRequestId": "0a1dc748-a4ef-4509-832a-5c682f172c25"
        },
        "item": {
          "id": "7164f278-3c67-45cb-a492-33752efbac65",
          "name": "credentials_status:credentialStatus:item:status:invalid"
        },
        "response": {
          "id": "69c5a105-bb30-45ca-894c-e3db2738376a",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 77,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:140)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:140)"
            }
          }
        ]
      },
      {
        "id": "80a00f97-9a0e-4dae-b5c1-4af9fbe90447",
        "cursor": {
          "ref": "c7f6b936-54fd-46d5-9087-e4bacd1f1a46",
          "length": 283,
          "cycles": 1,
          "position": 140,
          "iteration": 0,
          "httpRequestId": "a6c8446d-e512-4325-9855-59e22207a6ea"
        },
        "item": {
          "id": "80a00f97-9a0e-4dae-b5c1-4af9fbe90447",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "456f05b2-6057-444f-82e8-a5b158990bfa",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 16,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "755e6491-deb5-4e88-8853-26ceab3a3c9e",
        "cursor": {
          "ref": "84f7ac0e-7a34-4474-a641-2a68b423f95f",
          "length": 283,
          "cycles": 1,
          "position": 141,
          "iteration": 0,
          "httpRequestId": "02c6e9a9-71d9-4aab-9bb9-26d1ed977faa"
        },
        "item": {
          "id": "755e6491-deb5-4e88-8853-26ceab3a3c9e",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "c920290d-69c1-4a04-bfba-399bbac91301",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "93e4a843-01a4-4ad9-9f69-a566fe090450",
        "cursor": {
          "ref": "0982a32d-11b3-44bb-bc51-349298fff43b",
          "length": 283,
          "cycles": 1,
          "position": 142,
          "iteration": 0,
          "httpRequestId": "8b2a0bbb-5a90-448d-a0ad-e6f5f1aa5c23"
        },
        "item": {
          "id": "93e4a843-01a4-4ad9-9f69-a566fe090450",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "a485aeda-253b-4d90-868c-75450c518818",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "68fe3718-c06f-495f-8b85-9ff2899bc8d0",
        "cursor": {
          "ref": "88313304-f7ee-48e3-b65d-8882dfe96624",
          "length": 283,
          "cycles": 1,
          "position": 143,
          "iteration": 0,
          "httpRequestId": "e9a74d06-f528-4fb6-b37e-2dd250ce43b9"
        },
        "item": {
          "id": "68fe3718-c06f-495f-8b85-9ff2899bc8d0",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "6439e690-6e82-4e40-8e88-3ca0f4454483",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b1a447df-a2ea-484f-939f-ccb76a754f54",
        "cursor": {
          "ref": "7fe2a51d-86c4-4058-8a30-53500b66f5e5",
          "length": 283,
          "cycles": 1,
          "position": 144,
          "iteration": 0,
          "httpRequestId": "1e70ca08-cb65-4af1-a4f7-49cdeacd2148"
        },
        "item": {
          "id": "b1a447df-a2ea-484f-939f-ccb76a754f54",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "7f29aa26-014d-4d36-aa8d-0fbdba39022f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "04ee55d0-5225-4b17-8a28-5fe7579bd030",
        "cursor": {
          "ref": "5aab9a20-ec91-4916-87ee-bbcd8494d953",
          "length": 283,
          "cycles": 1,
          "position": 145,
          "iteration": 0,
          "httpRequestId": "1bde216c-0037-476b-9992-5031ce201ba1"
        },
        "item": {
          "id": "04ee55d0-5225-4b17-8a28-5fe7579bd030",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "af23e51f-bb80-4b1a-b331-19f85d2cdcbe",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "93fda3f7-0785-4b93-a44e-d4128f170797",
        "cursor": {
          "ref": "5aee4428-b853-40b2-a791-bc5c0d02860c",
          "length": 283,
          "cycles": 1,
          "position": 146,
          "iteration": 0,
          "httpRequestId": "2940dec8-3795-4004-b60b-94dac40f5633"
        },
        "item": {
          "id": "93fda3f7-0785-4b93-a44e-d4128f170797",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "ca1e2863-2e8f-42e4-afae-57b86586ffba",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4aaa1dd4-52fa-4cca-9a0a-4be9c9259217",
        "cursor": {
          "ref": "b8c04e43-7916-4363-ad7f-d132ba9613f4",
          "length": 283,
          "cycles": 1,
          "position": 147,
          "iteration": 0,
          "httpRequestId": "587dc02d-72fe-449f-aba8-19557f62f6dd"
        },
        "item": {
          "id": "4aaa1dd4-52fa-4cca-9a0a-4be9c9259217",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "ac8e5c49-b8f9-490e-b42f-24e5a530d618",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 146
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "187a22df-d45f-4aff-ac66-732ffd5fad84",
        "cursor": {
          "ref": "b670d47c-df09-4a32-97bd-4e18028811fe",
          "length": 283,
          "cycles": 1,
          "position": 148,
          "iteration": 0,
          "httpRequestId": "1a9aaaa9-ad0a-4a0a-92bc-f6662a0d0c8d"
        },
        "item": {
          "id": "187a22df-d45f-4aff-ac66-732ffd5fad84",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "60a37279-3992-418b-9e4f-644aa986e069",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 228
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d2e9c3d5-af56-48e2-b90f-e55deb56d25a",
        "cursor": {
          "ref": "59612751-c27f-4e6a-b089-d9011e93e4e6",
          "length": 283,
          "cycles": 1,
          "position": 149,
          "iteration": 0,
          "httpRequestId": "8391f7f6-e480-4bf9-9b57-c82e39941dfd"
        },
        "item": {
          "id": "d2e9c3d5-af56-48e2-b90f-e55deb56d25a",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "7a79183d-c403-4889-afc6-0023a088f2c8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 228
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "089169b2-0d0d-40f0-9c1c-4f77128e3401",
        "cursor": {
          "ref": "57a97595-df31-422a-8e34-977f0ade4f84",
          "length": 283,
          "cycles": 1,
          "position": 150,
          "iteration": 0,
          "httpRequestId": "c35e444e-b45a-4d8f-97fd-944d646e3823"
        },
        "item": {
          "id": "089169b2-0d0d-40f0-9c1c-4f77128e3401",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "93a80961-7548-46c5-bf48-14b74a54802c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 228
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "033de3cb-9786-424a-b193-61792263baa0",
        "cursor": {
          "ref": "79fa365e-4931-4df3-83c8-a9e15d501ff4",
          "length": 283,
          "cycles": 1,
          "position": 151,
          "iteration": 0,
          "httpRequestId": "71d08ef4-e14b-46b1-b5dc-8ada63d4066b"
        },
        "item": {
          "id": "033de3cb-9786-424a-b193-61792263baa0",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "18f3c08e-f846-4831-b5fc-c5d16af6fc1f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 122
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6699a15c-2fcf-4c3b-bfdc-22cfeb4d7825",
        "cursor": {
          "ref": "b0d9dcb5-00e4-4615-a14d-7ecf50936492",
          "length": 283,
          "cycles": 1,
          "position": 152,
          "iteration": 0,
          "httpRequestId": "04fa7a01-db7c-43e5-9413-ce4066042a3c"
        },
        "item": {
          "id": "6699a15c-2fcf-4c3b-bfdc-22cfeb4d7825",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "5c05129f-9bc8-4371-ac86-9cd8bf46f562",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 228
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3719fb1a-3127-4226-8742-f0f935b74ef0",
        "cursor": {
          "ref": "cf2e116f-2206-45e3-9bd3-59612276d833",
          "length": 283,
          "cycles": 1,
          "position": 153,
          "iteration": 0,
          "httpRequestId": "14df31c7-ec14-44b7-b794-245290c8b16f"
        },
        "item": {
          "id": "3719fb1a-3127-4226-8742-f0f935b74ef0",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "abcb5611-898a-49f8-bfff-3613d7e91f03",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 194
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "969f2ecf-2e29-46a6-8805-cc50c4799b8c",
        "cursor": {
          "ref": "5d3f0069-8b58-4521-a813-d68bd15a2954",
          "length": 283,
          "cycles": 1,
          "position": 154,
          "iteration": 0,
          "httpRequestId": "27ff7941-f83b-4c0c-b39f-339bfece2ab1"
        },
        "item": {
          "id": "969f2ecf-2e29-46a6-8805-cc50c4799b8c",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "740f3784-f39f-4226-9067-d4911586682d",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 81,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:155)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:155)"
            }
          }
        ]
      },
      {
        "id": "b77186f6-34b3-4de6-96f2-87f2d14eff66",
        "cursor": {
          "ref": "b6a21bf4-c5e8-42c2-82e4-8e2f7086bda1",
          "length": 283,
          "cycles": 1,
          "position": 155,
          "iteration": 0,
          "httpRequestId": "8736648e-8fd7-48e8-8c2a-961e193c2b25"
        },
        "item": {
          "id": "b77186f6-34b3-4de6-96f2-87f2d14eff66",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "5165ac05-249f-4765-92c3-4fcbae226158",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7143139d-298f-41fa-8cb4-df296086d04e",
        "cursor": {
          "ref": "f7eb7f02-e54a-415a-b62f-96667baed925",
          "length": 283,
          "cycles": 1,
          "position": 156,
          "iteration": 0,
          "httpRequestId": "160ca71c-1091-43d4-a765-a1a9eaa9a9d6"
        },
        "item": {
          "id": "7143139d-298f-41fa-8cb4-df296086d04e",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "8d894a5c-359f-4583-a644-26e23df1fb2e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fdb46b22-dd0d-494a-9a56-d4133e8f48b5",
        "cursor": {
          "ref": "ede9b123-9013-4bf6-9ee7-00a4dde22db2",
          "length": 283,
          "cycles": 1,
          "position": 157,
          "iteration": 0,
          "httpRequestId": "52b8b760-b575-4a74-9100-2a599ea2cb34"
        },
        "item": {
          "id": "fdb46b22-dd0d-494a-9a56-d4133e8f48b5",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "c5877265-767f-491c-8cd2-69870e995380",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 103,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f8cef008-1a9d-48b5-b0e1-a2f2aa9c0732",
        "cursor": {
          "ref": "4fdccd9e-0bc8-45d3-9d43-0a6e3cfa4172",
          "length": 283,
          "cycles": 1,
          "position": 158,
          "iteration": 0,
          "httpRequestId": "bdfc94d6-321a-4c34-b9a7-5787fd3fa60d"
        },
        "item": {
          "id": "f8cef008-1a9d-48b5-b0e1-a2f2aa9c0732",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "e1e3efad-75ff-44b9-8716-e8335a16fd1b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 74,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "78e82f5b-56d5-41e3-9fa4-b28a0296ad25",
        "cursor": {
          "ref": "b7fb69b1-48f5-4f94-b3e1-f7f0c768a8ce",
          "length": 283,
          "cycles": 1,
          "position": 159,
          "iteration": 0,
          "httpRequestId": "aaaaf389-d5cf-4e6a-bbae-431e2c4f132b"
        },
        "item": {
          "id": "78e82f5b-56d5-41e3-9fa4-b28a0296ad25",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "ed75e2c3-df80-4ceb-902f-d2f39b76986a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b38e9538-bcd9-4906-b002-b763f1002b66",
        "cursor": {
          "ref": "0c44b9bb-1526-4f38-9e86-62ac247e45d4",
          "length": 283,
          "cycles": 1,
          "position": 160,
          "iteration": 0,
          "httpRequestId": "3246b9d9-9143-4bf1-9587-08199c1e0109"
        },
        "item": {
          "id": "b38e9538-bcd9-4906-b002-b763f1002b66",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "3178363a-ef5a-4726-be09-a1079f4caf17",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cfa507b3-cf48-43e8-89c9-2af3b0d68fb5",
        "cursor": {
          "ref": "bd9a9006-d140-468a-8e15-bec7aabe8ff6",
          "length": 283,
          "cycles": 1,
          "position": 161,
          "iteration": 0,
          "httpRequestId": "e7f9b451-5fca-44ba-b735-e2db242bca0d"
        },
        "item": {
          "id": "cfa507b3-cf48-43e8-89c9-2af3b0d68fb5",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "fc0f1396-85e0-4ef2-ae67-70a8b921ac0b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c9d3359f-88f1-41f0-b12d-6e3455077ae6",
        "cursor": {
          "ref": "2a45c5d5-efa2-4a12-8f94-2b50aa233766",
          "length": 283,
          "cycles": 1,
          "position": 162,
          "iteration": 0,
          "httpRequestId": "4dfb4684-d60d-4ea5-9b48-8036da62507a"
        },
        "item": {
          "id": "c9d3359f-88f1-41f0-b12d-6e3455077ae6",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "5e20e4be-6c80-4ec5-96c3-e6e0aac6268d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a992dcbc-b66a-417d-b2d5-3d99f8f3d595",
        "cursor": {
          "ref": "cc935c04-afc3-4cbc-9eb3-333bdc49e536",
          "length": 283,
          "cycles": 1,
          "position": 163,
          "iteration": 0,
          "httpRequestId": "f1f5a7ec-37f4-440d-be1c-47612de4bcc6"
        },
        "item": {
          "id": "a992dcbc-b66a-417d-b2d5-3d99f8f3d595",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "76ccc741-e3bb-420f-9df0-901233781f24",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "77c8474e-8aba-4daf-9f53-5facdaa1e74e",
        "cursor": {
          "ref": "5cade787-4f6b-4eb7-a2c9-4fc6dd6d0327",
          "length": 283,
          "cycles": 1,
          "position": 164,
          "iteration": 0,
          "httpRequestId": "2a152a34-6ca4-4f75-a9b9-8f0c9c3efc0f"
        },
        "item": {
          "id": "77c8474e-8aba-4daf-9f53-5facdaa1e74e",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "d66b6db3-8136-4688-92df-baa6ac5f90fc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e75b11ae-d031-48bb-81c4-3ea5d3139123",
        "cursor": {
          "ref": "1e210cc4-d4e2-4648-899e-bd3e42b16b7a",
          "length": 283,
          "cycles": 1,
          "position": 165,
          "iteration": 0,
          "httpRequestId": "7fa01e6c-2546-4648-966b-34a37520a837"
        },
        "item": {
          "id": "e75b11ae-d031-48bb-81c4-3ea5d3139123",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "7e1253e4-aa44-47f5-bab8-2096e7c5bc2e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7f3f6eff-fb22-4d92-b676-f46304b10dbf",
        "cursor": {
          "ref": "4f160b09-2bc4-413a-9a5f-82afbe21f2fc",
          "length": 283,
          "cycles": 1,
          "position": 166,
          "iteration": 0,
          "httpRequestId": "e47c68e3-a985-4b42-85b1-b435f6933805"
        },
        "item": {
          "id": "7f3f6eff-fb22-4d92-b676-f46304b10dbf",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "64173b96-4ace-4340-9c64-3d7e01f9cbc3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 221
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "692699ff-d427-47a1-bc6f-ed8a7c0042ea",
        "cursor": {
          "ref": "41de0fa8-0f13-4474-96b8-18d842d28708",
          "length": 283,
          "cycles": 1,
          "position": 167,
          "iteration": 0,
          "httpRequestId": "d08e3a36-3c55-4ce3-8780-3396846e4f99"
        },
        "item": {
          "id": "692699ff-d427-47a1-bc6f-ed8a7c0042ea",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "3a934d8b-4c46-4c8f-a4bd-4ff658bf8c4e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 171
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "96ea1dd0-5a3c-4520-be2c-9eac8386de80",
        "cursor": {
          "ref": "8a914047-ff9e-4cf1-95fa-9464c6ee3522",
          "length": 283,
          "cycles": 1,
          "position": 168,
          "iteration": 0,
          "httpRequestId": "8e1fc4cc-2af0-4fd5-b585-c0531eafd2e7"
        },
        "item": {
          "id": "96ea1dd0-5a3c-4520-be2c-9eac8386de80",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "fd08e191-6e0a-48b8-8c57-9183a1c095f0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 171
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "44029629-6c05-41eb-8fd0-6668eee64eb1",
        "cursor": {
          "ref": "39c0307b-7939-491b-9589-9ae518023299",
          "length": 283,
          "cycles": 1,
          "position": 169,
          "iteration": 0,
          "httpRequestId": "bb367452-1323-4513-bed1-00e7fd074c17"
        },
        "item": {
          "id": "44029629-6c05-41eb-8fd0-6668eee64eb1",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "66ada8fb-51e1-4829-a599-7f8e8a97c4b3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 171
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3895041f-9adf-45f1-ae23-6f61d186502a",
        "cursor": {
          "ref": "55685a5e-3b2a-47bd-9a23-07035c11433d",
          "length": 283,
          "cycles": 1,
          "position": 170,
          "iteration": 0,
          "httpRequestId": "31c21153-65ab-431a-8500-5ee2f57796bf"
        },
        "item": {
          "id": "3895041f-9adf-45f1-ae23-6f61d186502a",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "69f0b8eb-48d5-44e3-ac68-a543d2937cd3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 221
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "41f53519-5fd7-4e91-a6f0-7c58258a1dd5",
        "cursor": {
          "ref": "042e9867-f4f8-4cac-af61-6eaf47ae0469",
          "length": 283,
          "cycles": 1,
          "position": 171,
          "iteration": 0,
          "httpRequestId": "90f66596-5c77-4535-a315-d4261ac0c23e"
        },
        "item": {
          "id": "41f53519-5fd7-4e91-a6f0-7c58258a1dd5",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "ed609638-086a-4647-8104-cda3736642f1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 171
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a8e76583-0c2a-430a-bbb7-e331efd08a6e",
        "cursor": {
          "ref": "c0ac9985-1535-424b-9a86-246bec59616d",
          "length": 283,
          "cycles": 1,
          "position": 172,
          "iteration": 0,
          "httpRequestId": "b0b94843-eb8c-4713-ad56-baa56c31944b"
        },
        "item": {
          "id": "a8e76583-0c2a-430a-bbb7-e331efd08a6e",
          "name": "credentials_status:credentialStatus:item:purpose:missing"
        },
        "response": {
          "id": "2af858ef-1eaf-4a83-88d8-e0df199ef707",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "42680188-dcf5-4036-855d-43e3b8de4d52",
        "cursor": {
          "ref": "fefbcdd7-9620-4dfb-8f66-e8077328fd8f",
          "length": 283,
          "cycles": 1,
          "position": 173,
          "iteration": 0,
          "httpRequestId": "52135c94-8466-4f08-9ed2-da3328690f58"
        },
        "item": {
          "id": "42680188-dcf5-4036-855d-43e3b8de4d52",
          "name": "credentials_status:credentialStatus:item:purpose:array"
        },
        "response": {
          "id": "aa8a871a-fb7f-4890-9f12-a3dad11c7081",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1d641f30-27f7-4113-a00f-7c77ded87458",
        "cursor": {
          "ref": "9db017d1-9df1-4f87-9870-92deb545338f",
          "length": 283,
          "cycles": 1,
          "position": 174,
          "iteration": 0,
          "httpRequestId": "2d9c6e7b-3db7-4cc8-b794-aa1c5813e0ac"
        },
        "item": {
          "id": "1d641f30-27f7-4113-a00f-7c77ded87458",
          "name": "credentials_status:credentialStatus:item:purpose:boolean"
        },
        "response": {
          "id": "514fda8a-b261-42c7-97a2-d25b17e34919",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "176b88d8-dbc0-4214-b3d0-13ad4fa6d900",
        "cursor": {
          "ref": "a41f3624-6d86-4895-8ca0-cdf4cc1c1399",
          "length": 283,
          "cycles": 1,
          "position": 175,
          "iteration": 0,
          "httpRequestId": "8ed3647a-747f-4512-bc1d-68eeacece40b"
        },
        "item": {
          "id": "176b88d8-dbc0-4214-b3d0-13ad4fa6d900",
          "name": "credentials_status:credentialStatus:item:purpose:integer"
        },
        "response": {
          "id": "e8e7ed91-8d43-4257-b151-89cf89b79d13",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ee0d7c43-b2d4-4a0f-b4c9-d418eb4dac6c",
        "cursor": {
          "ref": "9989ae54-e9ad-4f3f-8e14-2ae2e141d1b1",
          "length": 283,
          "cycles": 1,
          "position": 176,
          "iteration": 0,
          "httpRequestId": "15fab43f-3892-407c-b77a-a930fcaa20d4"
        },
        "item": {
          "id": "ee0d7c43-b2d4-4a0f-b4c9-d418eb4dac6c",
          "name": "credentials_status:credentialStatus:item:purpose:null"
        },
        "response": {
          "id": "3833b97b-2528-404d-ab73-cb9689a56a25",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dbd4e8f8-1d1e-4187-a3b3-9fff8eceeb6e",
        "cursor": {
          "ref": "34084c21-f4d1-4add-aa99-561ecc7f846b",
          "length": 283,
          "cycles": 1,
          "position": 177,
          "iteration": 0,
          "httpRequestId": "0fe392b0-73f6-45b8-b193-9d4402a8a4d8"
        },
        "item": {
          "id": "dbd4e8f8-1d1e-4187-a3b3-9fff8eceeb6e",
          "name": "credentials_status:credentialStatus:item:purpose:object"
        },
        "response": {
          "id": "5f4fc26d-5cba-4c44-b4ac-ad3106cffde4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "16209ad2-097b-41db-b300-9cb6186dcc3f",
        "cursor": {
          "ref": "2caa59b6-7549-4782-a92c-61120f580bd8",
          "length": 283,
          "cycles": 1,
          "position": 178,
          "iteration": 0,
          "httpRequestId": "ab3b59af-688a-49a4-85c1-3deb2c7eea3d"
        },
        "item": {
          "id": "16209ad2-097b-41db-b300-9cb6186dcc3f",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "be083909-200b-46d3-845a-d8b0e70ce6db",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 16,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "213f735d-50e5-4547-942a-20eb86a1f8c5",
        "cursor": {
          "ref": "62212024-1d5c-4fe9-a012-7db7c3795c60",
          "length": 283,
          "cycles": 1,
          "position": 179,
          "iteration": 0,
          "httpRequestId": "e8a47fc9-399c-4f57-968c-2345909a496f"
        },
        "item": {
          "id": "213f735d-50e5-4547-942a-20eb86a1f8c5",
          "name": "credentials_verify:vc:missing"
        },
        "response": {
          "id": "2599861c-5cd1-423b-ae84-b390ca58d06a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2f3fa926-d6bf-405d-94e4-3a216b6cd94e",
        "cursor": {
          "ref": "39123969-30a6-46bb-a428-2bd8a832a36e",
          "length": 283,
          "cycles": 1,
          "position": 180,
          "iteration": 0,
          "httpRequestId": "c871448f-410f-4bee-ace8-746e93737ac6"
        },
        "item": {
          "id": "2f3fa926-d6bf-405d-94e4-3a216b6cd94e",
          "name": "credentials_verify:vc:string"
        },
        "response": {
          "id": "880b3a1f-3d20-4207-8462-4c7d3b77e6e5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e0d222d8-30ad-4fd6-8dbb-7b30a9d33846",
        "cursor": {
          "ref": "13203167-bda4-4418-b679-7dadf52792dc",
          "length": 283,
          "cycles": 1,
          "position": 181,
          "iteration": 0,
          "httpRequestId": "636f8d55-aa73-4a57-a6e9-282c6cd352ca"
        },
        "item": {
          "id": "e0d222d8-30ad-4fd6-8dbb-7b30a9d33846",
          "name": "credentials_verify:vc:null"
        },
        "response": {
          "id": "116173fb-8faa-40c4-8ee4-db6f3093f966",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 171
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b7ea0913-544d-40ee-8aff-5beee95b4965",
        "cursor": {
          "ref": "1d88a245-3309-4764-a31d-75aad7c964c0",
          "length": 283,
          "cycles": 1,
          "position": 182,
          "iteration": 0,
          "httpRequestId": "53ece875-74bc-45b1-a83e-af4e7e35c2d8"
        },
        "item": {
          "id": "b7ea0913-544d-40ee-8aff-5beee95b4965",
          "name": "credentials_verify:vc:integer"
        },
        "response": {
          "id": "a7ed81c7-ef29-4b92-bf68-b7f47d083ca4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bf52b58f-db4c-489d-aed3-fddb3922ce8f",
        "cursor": {
          "ref": "384fe00e-ba23-4230-8446-f0fe42253ebc",
          "length": 283,
          "cycles": 1,
          "position": 183,
          "iteration": 0,
          "httpRequestId": "f1282b4c-42da-407e-b34a-51b064267ca9"
        },
        "item": {
          "id": "bf52b58f-db4c-489d-aed3-fddb3922ce8f",
          "name": "credentials_verify:vc:boolean"
        },
        "response": {
          "id": "266e077b-c76d-48c9-8460-3d505c65878f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8e1c45dd-3391-4596-871f-7429ec797f77",
        "cursor": {
          "ref": "ecaea710-53b2-48b1-a35e-24106ab259d1",
          "length": 283,
          "cycles": 1,
          "position": 184,
          "iteration": 0,
          "httpRequestId": "70919715-1f83-48d8-b0ee-287da71bf489"
        },
        "item": {
          "id": "8e1c45dd-3391-4596-871f-7429ec797f77",
          "name": "credentials_verify:vc:array"
        },
        "response": {
          "id": "a3468a91-7e1b-42d5-9630-2524a09ac37d",
          "status": "OK",
          "code": 200,
          "responseTime": 110,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:185)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:185)"
            }
          }
        ]
      },
      {
        "id": "81350a15-0b15-4300-9edd-c5591168ebd3",
        "cursor": {
          "ref": "8bbedc46-8ef8-4fe4-b1a7-206ecf33018c",
          "length": 283,
          "cycles": 1,
          "position": 185,
          "iteration": 0,
          "httpRequestId": "20eac18d-f8b3-4314-be0f-014af33aec95"
        },
        "item": {
          "id": "81350a15-0b15-4300-9edd-c5591168ebd3",
          "name": "credentials_verify:vc:@context:missing"
        },
        "response": {
          "id": "13ff4637-6f66-4cc0-8d9d-0a829dd4d305",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 242
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ae83f2e4-0968-4007-a9d0-1c655af7d759",
        "cursor": {
          "ref": "c62c500f-12b5-4fe9-b530-63cdacfa4ea0",
          "length": 283,
          "cycles": 1,
          "position": 186,
          "iteration": 0,
          "httpRequestId": "48b66a62-6963-45eb-9414-4cdd0e9fa649"
        },
        "item": {
          "id": "ae83f2e4-0968-4007-a9d0-1c655af7d759",
          "name": "credentials_verify:vc:@context:boolean"
        },
        "response": {
          "id": "e686b69d-4ef3-419e-9943-065cda2cd6cb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 78,
          "responseSize": 305
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a04a4da4-bad2-4aae-87cf-27064d2dd398",
        "cursor": {
          "ref": "283b62c9-ec9c-4b0a-99d6-9b1bcc63fc94",
          "length": 283,
          "cycles": 1,
          "position": 187,
          "iteration": 0,
          "httpRequestId": "7e70f474-9b6e-4796-bb47-63cd92577d02"
        },
        "item": {
          "id": "a04a4da4-bad2-4aae-87cf-27064d2dd398",
          "name": "credentials_verify:vc:@context:integer"
        },
        "response": {
          "id": "22a5a2f2-64b5-4358-a7d1-6854f0f068ad",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 305
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "29422522-9fb0-4138-a55b-58cce359eeec",
        "cursor": {
          "ref": "9cf93f47-1377-42a3-8d57-c2b95e6ca88c",
          "length": 283,
          "cycles": 1,
          "position": 188,
          "iteration": 0,
          "httpRequestId": "a9ab7995-0f51-4ba2-ba20-e80a155beb7d"
        },
        "item": {
          "id": "29422522-9fb0-4138-a55b-58cce359eeec",
          "name": "credentials_verify:vc:@context:null"
        },
        "response": {
          "id": "b3cb0b38-38ca-44a5-a07d-1abb66da79a7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 305
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4406bf8f-3e08-48a6-a60b-8efd95e297c2",
        "cursor": {
          "ref": "a7720bd7-e685-43bb-95cb-20e45e1d044c",
          "length": 283,
          "cycles": 1,
          "position": 189,
          "iteration": 0,
          "httpRequestId": "77b63c0e-e11d-46e3-b9e4-784d5ae35a76"
        },
        "item": {
          "id": "4406bf8f-3e08-48a6-a60b-8efd95e297c2",
          "name": "credentials_verify:vc:@context:object"
        },
        "response": {
          "id": "2c2a8153-8fae-4a9f-8e9c-9bb7fa2233f9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 242
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4d4568dc-52e7-44ec-899b-6ad603156452",
        "cursor": {
          "ref": "b186b610-bbe1-4f0e-a93c-f9608d5a7a32",
          "length": 283,
          "cycles": 1,
          "position": 190,
          "iteration": 0,
          "httpRequestId": "b04e774a-311f-4fc4-a1c5-9659269e3493"
        },
        "item": {
          "id": "4d4568dc-52e7-44ec-899b-6ad603156452",
          "name": "credentials_verify:vc:@context:string"
        },
        "response": {
          "id": "2e7a00dd-b53f-4caf-b381-3eadd5bb6f0b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 172
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8fd2a904-6c0a-4493-99b4-278def4596cc",
        "cursor": {
          "ref": "fea28341-c664-4b33-ae7c-79f2ce56d426",
          "length": 283,
          "cycles": 1,
          "position": 191,
          "iteration": 0,
          "httpRequestId": "098980ca-c9bf-4355-867d-d4c829ccc861"
        },
        "item": {
          "id": "8fd2a904-6c0a-4493-99b4-278def4596cc",
          "name": "credentials_verify:vc:@context:item:array"
        },
        "response": {
          "id": "884af346-755e-4377-a2c0-8e0990704cdf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "963e294f-6d7c-4b12-a8fd-a87f807382b7",
        "cursor": {
          "ref": "c9c18aac-576b-49ce-a255-98ae6e53fb44",
          "length": 283,
          "cycles": 1,
          "position": 192,
          "iteration": 0,
          "httpRequestId": "3e729d55-acbf-4b7d-8f49-eff2a2442737"
        },
        "item": {
          "id": "963e294f-6d7c-4b12-a8fd-a87f807382b7",
          "name": "credentials_verify:vc:@context:item:boolean"
        },
        "response": {
          "id": "f13aa204-b743-4645-95d5-187a769c912f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2d71866b-b9b9-4a6e-af91-6f09ed8fd6f4",
        "cursor": {
          "ref": "6e416c69-fdca-4ba9-9fa8-09b4ed25ce4f",
          "length": 283,
          "cycles": 1,
          "position": 193,
          "iteration": 0,
          "httpRequestId": "2a6a5f18-5807-41d9-9862-6cf2f3bc068e"
        },
        "item": {
          "id": "2d71866b-b9b9-4a6e-af91-6f09ed8fd6f4",
          "name": "credentials_verify:vc:@context:item:integer"
        },
        "response": {
          "id": "624527c3-80a9-468c-8af1-c0c49313fa19",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4b3de4c2-796a-4db3-aae5-ea188f102b59",
        "cursor": {
          "ref": "6160ff89-73f1-442e-b1cb-9749a63d5748",
          "length": 283,
          "cycles": 1,
          "position": 194,
          "iteration": 0,
          "httpRequestId": "807e13c7-ea38-4e13-a2a9-216cf1b8158c"
        },
        "item": {
          "id": "4b3de4c2-796a-4db3-aae5-ea188f102b59",
          "name": "credentials_verify:vc:@context:item:null"
        },
        "response": {
          "id": "d304ad92-2332-4082-9867-200a944cf77b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 26,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "84cf2a90-7e65-433b-bd37-8ea8f316d27b",
        "cursor": {
          "ref": "9d8fa157-fafa-4b17-95a8-a775cb323bb4",
          "length": 283,
          "cycles": 1,
          "position": 195,
          "iteration": 0,
          "httpRequestId": "257766e5-69ac-4904-b37d-d20bc0ddb3d5"
        },
        "item": {
          "id": "84cf2a90-7e65-433b-bd37-8ea8f316d27b",
          "name": "credentials_verify:vc:@context:item:object"
        },
        "response": {
          "id": "e9d894bc-25df-436b-971b-fd7f4958eb8e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "59b5bda9-e872-467c-91e6-43fb459f6567",
        "cursor": {
          "ref": "766383e0-9bab-4e70-9c2c-112b024ea8ce",
          "length": 283,
          "cycles": 1,
          "position": 196,
          "iteration": 0,
          "httpRequestId": "afd3d432-8eee-48df-aca9-8bc9336a3655"
        },
        "item": {
          "id": "59b5bda9-e872-467c-91e6-43fb459f6567",
          "name": "credentials_verify:vc:id:array"
        },
        "response": {
          "id": "a78dab86-1478-4296-9738-460cef6a6103",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "00185d50-fc80-41c7-b978-3d360714ba62",
        "cursor": {
          "ref": "2a60e1b2-c7bf-4aef-926d-71736e184c5d",
          "length": 283,
          "cycles": 1,
          "position": 197,
          "iteration": 0,
          "httpRequestId": "24b4edf8-45f3-4272-a094-29df43c303b1"
        },
        "item": {
          "id": "00185d50-fc80-41c7-b978-3d360714ba62",
          "name": "credentials_verify:vc:id:boolean"
        },
        "response": {
          "id": "afb7d50e-c905-4824-afcf-e229484cd290",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "933bde1c-8856-4c9d-90f0-5525a2c9ccab",
        "cursor": {
          "ref": "32f210c3-f9eb-4f6f-a668-f90127c4bb43",
          "length": 283,
          "cycles": 1,
          "position": 198,
          "iteration": 0,
          "httpRequestId": "27979a0a-cedf-4451-8667-8d6568718ab6"
        },
        "item": {
          "id": "933bde1c-8856-4c9d-90f0-5525a2c9ccab",
          "name": "credentials_verify:vc:id:integer"
        },
        "response": {
          "id": "2c9dc2ee-b551-4251-a30b-8dedd6454bb0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9fdfad77-bff2-4cd9-90bd-110481da48ec",
        "cursor": {
          "ref": "a99d016e-954c-478f-ac6a-22e17884b7c2",
          "length": 283,
          "cycles": 1,
          "position": 199,
          "iteration": 0,
          "httpRequestId": "466d1fcd-a09f-4e1b-997d-4581e265fb8e"
        },
        "item": {
          "id": "9fdfad77-bff2-4cd9-90bd-110481da48ec",
          "name": "credentials_verify:vc:id:null"
        },
        "response": {
          "id": "9fcae237-c006-4865-83f9-22a2e8ea0895",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c6732d77-6491-4440-ab19-7065d17622c8",
        "cursor": {
          "ref": "b45220b5-635a-4d43-be8f-414b3af6aac2",
          "length": 283,
          "cycles": 1,
          "position": 200,
          "iteration": 0,
          "httpRequestId": "4e883f09-3791-4695-83b5-60644ad9a913"
        },
        "item": {
          "id": "c6732d77-6491-4440-ab19-7065d17622c8",
          "name": "credentials_verify:vc:id:object"
        },
        "response": {
          "id": "634a15b8-edd7-45d2-947e-4e5a5d8e9508",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d206f345-2896-4a64-803d-44afc7b4ec3a",
        "cursor": {
          "ref": "95d60a2e-7783-4368-a90b-d40a77f652b2",
          "length": 283,
          "cycles": 1,
          "position": 201,
          "iteration": 0,
          "httpRequestId": "c2d796f4-19fc-48f7-8383-067eda41c895"
        },
        "item": {
          "id": "d206f345-2896-4a64-803d-44afc7b4ec3a",
          "name": "credentials_verify:vc:type:missing"
        },
        "response": {
          "id": "b79e5881-2532-4c8f-b3a0-c0e52421d187",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "87c50ce3-618e-4f77-9143-70c041e8bbd0",
        "cursor": {
          "ref": "99acb2a0-1049-4291-8ed2-01be629d7f29",
          "length": 283,
          "cycles": 1,
          "position": 202,
          "iteration": 0,
          "httpRequestId": "ed1bf4f6-da8a-4cfa-9fe0-e66bc6d16ac9"
        },
        "item": {
          "id": "87c50ce3-618e-4f77-9143-70c041e8bbd0",
          "name": "credentials_verify:vc:type:boolean"
        },
        "response": {
          "id": "5aac1697-fd7d-48a4-8fd2-7b399084b78d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2ccefadc-93b7-4e42-8346-3c15c12f95da",
        "cursor": {
          "ref": "c4a38dfe-fa0e-4876-b072-77dc917276f3",
          "length": 283,
          "cycles": 1,
          "position": 203,
          "iteration": 0,
          "httpRequestId": "caf7322b-4ea9-4e98-bd85-b874c3ca8dea"
        },
        "item": {
          "id": "2ccefadc-93b7-4e42-8346-3c15c12f95da",
          "name": "credentials_verify:vc:type:integer"
        },
        "response": {
          "id": "52309ba7-8ca3-4668-9ce9-f2af7d40f8ec",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2a73f89d-7912-459f-8c0b-1ff09b9e4886",
        "cursor": {
          "ref": "8ff52d8d-66e4-4d45-8c91-b062d7a0ca52",
          "length": 283,
          "cycles": 1,
          "position": 204,
          "iteration": 0,
          "httpRequestId": "df79412d-35fc-4fa9-aea1-a46349cbb231"
        },
        "item": {
          "id": "2a73f89d-7912-459f-8c0b-1ff09b9e4886",
          "name": "credentials_verify:vc:type:null"
        },
        "response": {
          "id": "04324533-2a6a-4c68-ac22-8b6b94f5d98d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b8da002b-4932-4992-9f7c-1c0573e2d256",
        "cursor": {
          "ref": "c04ef114-d7a4-4d00-995a-b0ab73bdb299",
          "length": 283,
          "cycles": 1,
          "position": 205,
          "iteration": 0,
          "httpRequestId": "fef51ebd-264b-4d6b-b7c3-42c59da5887f"
        },
        "item": {
          "id": "b8da002b-4932-4992-9f7c-1c0573e2d256",
          "name": "credentials_verify:vc:type:object"
        },
        "response": {
          "id": "e3d2bf72-da58-4369-8da5-20b5603307c6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "36ec8b8a-d207-46f9-93e9-13b56ce60dea",
        "cursor": {
          "ref": "7814e73d-d052-4bac-a9b4-e7bd7c59f279",
          "length": 283,
          "cycles": 1,
          "position": 206,
          "iteration": 0,
          "httpRequestId": "32955da7-40f4-4d4e-b452-f0f7730eb776"
        },
        "item": {
          "id": "36ec8b8a-d207-46f9-93e9-13b56ce60dea",
          "name": "credentials_verify:vc:type:string"
        },
        "response": {
          "id": "5e80c9de-d860-41ac-a01b-97ec998abb1c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7cdf4f84-26ff-4d44-be58-6b9f78830803",
        "cursor": {
          "ref": "f010d65a-e2b1-4fc2-be9b-f456837b21e7",
          "length": 283,
          "cycles": 1,
          "position": 207,
          "iteration": 0,
          "httpRequestId": "fbf9d0d6-8f1a-4324-bae5-e32e97390324"
        },
        "item": {
          "id": "7cdf4f84-26ff-4d44-be58-6b9f78830803",
          "name": "credentials_verify:vc:type:item:missing"
        },
        "response": {
          "id": "e5bbb881-01ef-43d0-a99b-a7243c0a8f86",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ba51aeb3-e373-4f38-992c-4181b2d1ebd2",
        "cursor": {
          "ref": "c84b0289-2ae9-42ad-a112-9d4a762094e5",
          "length": 283,
          "cycles": 1,
          "position": 208,
          "iteration": 0,
          "httpRequestId": "f7604293-6cb2-4172-82e1-840d8624ecf9"
        },
        "item": {
          "id": "ba51aeb3-e373-4f38-992c-4181b2d1ebd2",
          "name": "credentials_verify:vc:type:item:array"
        },
        "response": {
          "id": "e4a6d978-cc83-45ad-b5c2-ad8f545e98aa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5a21d872-718e-44ad-a833-5bbdb3095bf5",
        "cursor": {
          "ref": "fc45b3a9-4dab-44a3-8511-6ed47006e17c",
          "length": 283,
          "cycles": 1,
          "position": 209,
          "iteration": 0,
          "httpRequestId": "35b874cd-df7f-4b00-aef6-c614e98427cf"
        },
        "item": {
          "id": "5a21d872-718e-44ad-a833-5bbdb3095bf5",
          "name": "credentials_verify:vc:type:item:boolean"
        },
        "response": {
          "id": "cef6506f-539f-4dd0-bac6-234ca527f6ea",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ab6b2749-fdf1-4508-9e97-fed003dbd999",
        "cursor": {
          "ref": "99d21259-40b4-4313-887d-d8e042d4e84a",
          "length": 283,
          "cycles": 1,
          "position": 210,
          "iteration": 0,
          "httpRequestId": "c220c651-59a0-4777-bfbe-e16356586ad9"
        },
        "item": {
          "id": "ab6b2749-fdf1-4508-9e97-fed003dbd999",
          "name": "credentials_verify:vc:type:item:integer"
        },
        "response": {
          "id": "c49f390f-02a7-494e-bead-623069e507c6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ed8e327c-f600-4cb2-ab29-2f26299e25da",
        "cursor": {
          "ref": "b14339fb-07e7-46a4-8a2c-1124a39407f9",
          "length": 283,
          "cycles": 1,
          "position": 211,
          "iteration": 0,
          "httpRequestId": "72bea80a-acf7-421d-80db-3a0288fdad5e"
        },
        "item": {
          "id": "ed8e327c-f600-4cb2-ab29-2f26299e25da",
          "name": "credentials_verify:vc:type:item:null"
        },
        "response": {
          "id": "a127f588-99fc-42d8-ba90-dcef453e63bc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9834f2d0-ba49-4530-9d1c-48f019525d0f",
        "cursor": {
          "ref": "895e33b3-7df2-46fc-8714-eedd17608a60",
          "length": 283,
          "cycles": 1,
          "position": 212,
          "iteration": 0,
          "httpRequestId": "b2a74090-9ed3-4978-b437-2217a94d48d3"
        },
        "item": {
          "id": "9834f2d0-ba49-4530-9d1c-48f019525d0f",
          "name": "credentials_verify:vc:type:item:object"
        },
        "response": {
          "id": "0d8fab53-b6dd-4335-93dd-a43ce10cb804",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a7bb1717-7032-416d-9507-af1ea71c4f9c",
        "cursor": {
          "ref": "251c5ea9-518e-4271-9b3e-0cce3cdf45d7",
          "length": 283,
          "cycles": 1,
          "position": 213,
          "iteration": 0,
          "httpRequestId": "e1a7dcda-af94-4bde-ba7d-bd59fae612ec"
        },
        "item": {
          "id": "a7bb1717-7032-416d-9507-af1ea71c4f9c",
          "name": "credentials_verify:vc:issuer:missing"
        },
        "response": {
          "id": "c69457d6-66d6-4a27-80c1-6267d2ab0db2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 106
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "934f969e-02e2-4eb0-b3d4-80077ef9bd3a",
        "cursor": {
          "ref": "790e8358-a6f2-4ff8-b126-b69684e3ce42",
          "length": 283,
          "cycles": 1,
          "position": 214,
          "iteration": 0,
          "httpRequestId": "0f4a5dbb-5987-4481-a1e9-be8d269e053f"
        },
        "item": {
          "id": "934f969e-02e2-4eb0-b3d4-80077ef9bd3a",
          "name": "credentials_verify:vc:issuer:array"
        },
        "response": {
          "id": "29693805-757c-430b-bcf2-4211d333fd7d",
          "status": "OK",
          "code": 200,
          "responseTime": 115,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:215)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:215)"
            }
          }
        ]
      },
      {
        "id": "4fff18e5-7283-453c-89cb-ed4f018ec4b3",
        "cursor": {
          "ref": "abfae347-ab32-4851-bce7-5856783336d9",
          "length": 283,
          "cycles": 1,
          "position": 215,
          "iteration": 0,
          "httpRequestId": "e4418940-8fe4-4a96-a25a-20873d4d40a3"
        },
        "item": {
          "id": "4fff18e5-7283-453c-89cb-ed4f018ec4b3",
          "name": "credentials_verify:vc:issuer:boolean"
        },
        "response": {
          "id": "e9f24af0-61a3-404c-96ce-a7f9396813c9",
          "status": "OK",
          "code": 200,
          "responseTime": 161,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:216)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:216)"
            }
          }
        ]
      },
      {
        "id": "2622b6c2-73d7-409e-acc8-8d1479af4c63",
        "cursor": {
          "ref": "6eb43f2d-9137-4b09-940f-9eba9141e895",
          "length": 283,
          "cycles": 1,
          "position": 216,
          "iteration": 0,
          "httpRequestId": "468fa897-e1df-452d-9a6e-23b720dfe383"
        },
        "item": {
          "id": "2622b6c2-73d7-409e-acc8-8d1479af4c63",
          "name": "credentials_verify:vc:issuer:integer"
        },
        "response": {
          "id": "75655a44-a2a2-44a2-8fee-7cab3e794c13",
          "status": "OK",
          "code": 200,
          "responseTime": 108,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:217)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:217)"
            }
          }
        ]
      },
      {
        "id": "0acefb39-f369-462b-8cde-bc1f9c4de294",
        "cursor": {
          "ref": "7f5c7743-8816-4cca-bc85-16d7276780a5",
          "length": 283,
          "cycles": 1,
          "position": 217,
          "iteration": 0,
          "httpRequestId": "d6ee258d-1455-4ec7-8a57-915a65a0acc8"
        },
        "item": {
          "id": "0acefb39-f369-462b-8cde-bc1f9c4de294",
          "name": "credentials_verify:vc:issuer:null"
        },
        "response": {
          "id": "4a2048eb-e0dc-4019-a803-dc27b6d263c1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 106
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "20a6d57f-5ef8-44c1-ad7f-76113e002016",
        "cursor": {
          "ref": "a40a4fd3-f352-4eeb-9cd2-becbe01c618c",
          "length": 283,
          "cycles": 1,
          "position": 218,
          "iteration": 0,
          "httpRequestId": "7e943faa-6816-485c-9972-982389bb8567"
        },
        "item": {
          "id": "20a6d57f-5ef8-44c1-ad7f-76113e002016",
          "name": "credentials_verify:vc:issuer:id:missing"
        },
        "response": {
          "id": "96fa79e6-3879-4fb6-8548-dcd8c9fc6c68",
          "status": "OK",
          "code": 200,
          "responseTime": 112,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:219)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:219)"
            }
          }
        ]
      },
      {
        "id": "3e062e9c-15d7-419b-8a49-59a9b88486d9",
        "cursor": {
          "ref": "0cb6a929-a9af-4db3-aa12-ee2b09426a98",
          "length": 283,
          "cycles": 1,
          "position": 219,
          "iteration": 0,
          "httpRequestId": "98528424-eb9c-4032-9707-ebbbad92ebfa"
        },
        "item": {
          "id": "3e062e9c-15d7-419b-8a49-59a9b88486d9",
          "name": "credentials_verify:vc:issuer:id:array"
        },
        "response": {
          "id": "5ca78638-8037-47ad-9b1b-daf85c12b2fd",
          "status": "OK",
          "code": 200,
          "responseTime": 129,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:220)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:220)"
            }
          }
        ]
      },
      {
        "id": "db5ac9e2-1ea7-4d63-88a6-44658e35d6ab",
        "cursor": {
          "ref": "b98bb0dd-94ce-46f2-8db5-f63060cca028",
          "length": 283,
          "cycles": 1,
          "position": 220,
          "iteration": 0,
          "httpRequestId": "06a91422-2592-40a4-ac7d-cd6764ec87d1"
        },
        "item": {
          "id": "db5ac9e2-1ea7-4d63-88a6-44658e35d6ab",
          "name": "credentials_verify:vc:issuer:id:boolean"
        },
        "response": {
          "id": "70cfaebc-3cb8-4de4-9a11-6240117a1efb",
          "status": "OK",
          "code": 200,
          "responseTime": 221,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:221)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:221)"
            }
          }
        ]
      },
      {
        "id": "fe35f864-4cd8-481d-834e-c23a89c174c2",
        "cursor": {
          "ref": "7dbc22d1-a786-4276-9ed9-4b5e4637e7ed",
          "length": 283,
          "cycles": 1,
          "position": 221,
          "iteration": 0,
          "httpRequestId": "29ef2117-9a9e-412a-acae-06c24b05b591"
        },
        "item": {
          "id": "fe35f864-4cd8-481d-834e-c23a89c174c2",
          "name": "credentials_verify:vc:issuer:id:integer"
        },
        "response": {
          "id": "595738af-b107-456e-bb60-f68405dde03a",
          "status": "OK",
          "code": 200,
          "responseTime": 113,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:222)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:222)"
            }
          }
        ]
      },
      {
        "id": "71504323-2897-4a7e-ac2f-26c2957b5b4f",
        "cursor": {
          "ref": "dd28b557-733d-4199-b41d-e81d9603153e",
          "length": 283,
          "cycles": 1,
          "position": 222,
          "iteration": 0,
          "httpRequestId": "ef8d75e0-ce12-4cb7-8096-7ca1eab5353e"
        },
        "item": {
          "id": "71504323-2897-4a7e-ac2f-26c2957b5b4f",
          "name": "credentials_verify:vc:issuer:id:null"
        },
        "response": {
          "id": "cecda9b4-f196-407c-9fdd-a75f9f074709",
          "status": "OK",
          "code": 200,
          "responseTime": 115,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:223)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:223)"
            }
          }
        ]
      },
      {
        "id": "312b741d-245a-417a-b87d-de469361c25c",
        "cursor": {
          "ref": "590bbc57-4630-43a2-9208-6f0edde99a8d",
          "length": 283,
          "cycles": 1,
          "position": 223,
          "iteration": 0,
          "httpRequestId": "e192be26-2beb-4e55-89d7-d6550b5ca7d0"
        },
        "item": {
          "id": "312b741d-245a-417a-b87d-de469361c25c",
          "name": "credentials_verify:vc:issuer:id:object"
        },
        "response": {
          "id": "5e770c46-d9b4-4c10-8de4-33e1034bea57",
          "status": "OK",
          "code": 200,
          "responseTime": 111,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:224)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:224)"
            }
          }
        ]
      },
      {
        "id": "8f4ceb5d-9f18-4d62-a608-b5a121e73be8",
        "cursor": {
          "ref": "1cf96bdf-5976-469f-8d8d-6bf82c217449",
          "length": 283,
          "cycles": 1,
          "position": 224,
          "iteration": 0,
          "httpRequestId": "cf49e886-671b-4e4e-8c39-f6f455141f8a"
        },
        "item": {
          "id": "8f4ceb5d-9f18-4d62-a608-b5a121e73be8",
          "name": "credentials_verify:vc:issuanceDate:missing"
        },
        "response": {
          "id": "056f8b87-60f0-423c-9b67-dce3851d9290",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a9ecdb0f-b7a2-4391-9e1a-a55c2b59ca05",
        "cursor": {
          "ref": "5fdca5d8-c8b5-480e-8422-c1cbb86d82a4",
          "length": 283,
          "cycles": 1,
          "position": 225,
          "iteration": 0,
          "httpRequestId": "2128d36a-e829-4bec-b6d1-9c59ce8691f9"
        },
        "item": {
          "id": "a9ecdb0f-b7a2-4391-9e1a-a55c2b59ca05",
          "name": "credentials_verify:vc:issuanceDate:array"
        },
        "response": {
          "id": "b1db7529-a951-4d91-aab1-f292014d4bb4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1b9f21d2-c98c-403f-9f48-8945d5809f0f",
        "cursor": {
          "ref": "52bfab2b-0c0f-4d53-8491-f8d3d9ebcfe6",
          "length": 283,
          "cycles": 1,
          "position": 226,
          "iteration": 0,
          "httpRequestId": "fdfa8d2d-4089-46c9-9276-dc3018f48229"
        },
        "item": {
          "id": "1b9f21d2-c98c-403f-9f48-8945d5809f0f",
          "name": "credentials_verify:vc:issuanceDate:boolean"
        },
        "response": {
          "id": "a415f54f-807f-4762-a83e-43da820e9949",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ff6f57c4-32f8-48db-a3a8-f3d808318130",
        "cursor": {
          "ref": "34227162-b011-42be-9576-02c41df1645c",
          "length": 283,
          "cycles": 1,
          "position": 227,
          "iteration": 0,
          "httpRequestId": "4245beda-577a-4751-9f04-980aabec916a"
        },
        "item": {
          "id": "ff6f57c4-32f8-48db-a3a8-f3d808318130",
          "name": "credentials_verify:vc:issuanceDate:integer"
        },
        "response": {
          "id": "65b54d69-68bd-434c-b6da-0c23ae99085f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "90b635fd-8b07-416c-a104-f3c087b0246a",
        "cursor": {
          "ref": "a174da3f-2890-4f28-8209-a51705aa50c1",
          "length": 283,
          "cycles": 1,
          "position": 228,
          "iteration": 0,
          "httpRequestId": "d5bc5bad-f4a0-4ba7-b33f-739e165481cd"
        },
        "item": {
          "id": "90b635fd-8b07-416c-a104-f3c087b0246a",
          "name": "credentials_verify:vc:issuanceDate:null"
        },
        "response": {
          "id": "2c912b2c-ed04-4292-a8f3-eaf5b115bc65",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "645fcb87-362f-415e-aea6-880bbdb3c526",
        "cursor": {
          "ref": "3b8dfbf8-b58b-43b6-aca0-e39684f648af",
          "length": 283,
          "cycles": 1,
          "position": 229,
          "iteration": 0,
          "httpRequestId": "5bb6a848-aab3-4425-bce1-66425eb109d5"
        },
        "item": {
          "id": "645fcb87-362f-415e-aea6-880bbdb3c526",
          "name": "credentials_verify:vc:issuanceDate:object"
        },
        "response": {
          "id": "874aefbd-712d-4af1-9985-ae8d8cd8e396",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "48986266-2657-44d9-abd7-9b571fa370a3",
        "cursor": {
          "ref": "60a578c0-b7ff-4d9a-987e-cf4845a73daa",
          "length": 283,
          "cycles": 1,
          "position": 230,
          "iteration": 0,
          "httpRequestId": "9a9ad5fd-a6e9-4073-8a33-52374d3b0ce2"
        },
        "item": {
          "id": "48986266-2657-44d9-abd7-9b571fa370a3",
          "name": "credentials_verify:vc:issuanceDate:string"
        },
        "response": {
          "id": "0291c6e2-e008-4693-ae45-9c27776f46ee",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ee462200-1164-47da-957a-846d373992f2",
        "cursor": {
          "ref": "2d80f809-4694-4366-827e-9d8c4ed3d4e9",
          "length": 283,
          "cycles": 1,
          "position": 231,
          "iteration": 0,
          "httpRequestId": "86cb5799-51e6-4dde-8b03-4b7260ba33ad"
        },
        "item": {
          "id": "ee462200-1164-47da-957a-846d373992f2",
          "name": "credentials_verify:vc:credentialSubject:missing"
        },
        "response": {
          "id": "ca4a3abe-5672-4607-beb5-6f6ecdbeea6e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3055a9c8-551c-47b8-a6f2-4f095723991e",
        "cursor": {
          "ref": "e1776a73-9acb-43fd-ac0d-5e9c89300de1",
          "length": 283,
          "cycles": 1,
          "position": 232,
          "iteration": 0,
          "httpRequestId": "26515ab1-d0c2-446f-a102-369d50124a49"
        },
        "item": {
          "id": "3055a9c8-551c-47b8-a6f2-4f095723991e",
          "name": "credentials_verify:vc:credentialSubject:array"
        },
        "response": {
          "id": "e18296a8-3386-4a52-b324-f2e7e29fa1eb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 223
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "801119f7-cd82-49ff-b5a2-11cacec41d7e",
        "cursor": {
          "ref": "e75b24ac-68c7-4e33-93cb-6e9c6b3fa5b8",
          "length": 283,
          "cycles": 1,
          "position": 233,
          "iteration": 0,
          "httpRequestId": "9fe121ba-4029-4d61-9745-dbefb3b3604e"
        },
        "item": {
          "id": "801119f7-cd82-49ff-b5a2-11cacec41d7e",
          "name": "credentials_verify:vc:credentialSubject:boolean"
        },
        "response": {
          "id": "04bc69a8-901b-4cbe-a33b-53ddf8b33afc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 205
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b7795ba4-dcc3-47c3-99e4-51ce196de687",
        "cursor": {
          "ref": "89abefb9-eb1d-4361-a8f9-233037576d1a",
          "length": 283,
          "cycles": 1,
          "position": 234,
          "iteration": 0,
          "httpRequestId": "47a6de40-07c7-4586-beca-ad66050405f9"
        },
        "item": {
          "id": "b7795ba4-dcc3-47c3-99e4-51ce196de687",
          "name": "credentials_verify:vc:credentialSubject:integer"
        },
        "response": {
          "id": "da041f73-db56-46b1-949b-eaf3bf339ece",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 205
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ad4d3e2b-e4cf-4de7-a788-393c6db2925f",
        "cursor": {
          "ref": "226659c4-b1a0-411d-a290-5ea053485c21",
          "length": 283,
          "cycles": 1,
          "position": 235,
          "iteration": 0,
          "httpRequestId": "4bbb18b8-892d-426d-bfc5-6830a1251179"
        },
        "item": {
          "id": "ad4d3e2b-e4cf-4de7-a788-393c6db2925f",
          "name": "credentials_verify:vc:credentialSubject:null"
        },
        "response": {
          "id": "9e836030-0439-4b6a-ab12-c3df7ae9dcae",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 268
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7b24f69f-85a0-4800-b194-3c0fc212f899",
        "cursor": {
          "ref": "42176bab-b26a-44f8-80d3-09fed51be712",
          "length": 283,
          "cycles": 1,
          "position": 236,
          "iteration": 0,
          "httpRequestId": "e7b87178-e196-4f3a-aaf2-44f543c7927a"
        },
        "item": {
          "id": "7b24f69f-85a0-4800-b194-3c0fc212f899",
          "name": "credentials_verify:vc:credentialSubject:string"
        },
        "response": {
          "id": "4061e275-d0c7-45bd-8818-fabf72de3976",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 205
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "815f3af6-4cf8-4986-87de-7d905e90eacf",
        "cursor": {
          "ref": "be3334fd-b36b-4d77-925b-9456c18a4d20",
          "length": 283,
          "cycles": 1,
          "position": 237,
          "iteration": 0,
          "httpRequestId": "2de67f17-dd2a-4df9-b49d-30d4c96a44a4"
        },
        "item": {
          "id": "815f3af6-4cf8-4986-87de-7d905e90eacf",
          "name": "credentials_verify:vc:credentialSubject:id:array"
        },
        "response": {
          "id": "add357dd-b10e-4ff9-806b-ab5e10d97125",
          "status": "OK",
          "code": 200,
          "responseTime": 110,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:238)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:238)"
            }
          }
        ]
      },
      {
        "id": "da0ea641-fd85-4777-bfd9-eee07afc3ccb",
        "cursor": {
          "ref": "d19db1f9-b7be-4b5b-9332-b5a7b1cd2966",
          "length": 283,
          "cycles": 1,
          "position": 238,
          "iteration": 0,
          "httpRequestId": "625f44f4-56c4-434e-b5fc-71db6ce42f91"
        },
        "item": {
          "id": "da0ea641-fd85-4777-bfd9-eee07afc3ccb",
          "name": "credentials_verify:vc:credentialSubject:id:boolean"
        },
        "response": {
          "id": "b5f70801-64e9-49c9-8d9f-8a6fc7f7c6f1",
          "status": "OK",
          "code": 200,
          "responseTime": 121,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:239)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:239)"
            }
          }
        ]
      },
      {
        "id": "86ff7dc5-e424-4e6d-9993-94757fc1bf4d",
        "cursor": {
          "ref": "a8905728-1ffa-4547-b0b2-eb5feed3300f",
          "length": 283,
          "cycles": 1,
          "position": 239,
          "iteration": 0,
          "httpRequestId": "98049cc2-6032-4d43-99dc-046265369abd"
        },
        "item": {
          "id": "86ff7dc5-e424-4e6d-9993-94757fc1bf4d",
          "name": "credentials_verify:vc:credentialSubject:id:integer"
        },
        "response": {
          "id": "0b74464e-ff08-4639-aae0-9b1cf062aadf",
          "status": "OK",
          "code": 200,
          "responseTime": 106,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:240)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:240)"
            }
          }
        ]
      },
      {
        "id": "7592ca9e-a030-4fa1-abfd-d6ac6a23b9b1",
        "cursor": {
          "ref": "e86a12e9-2dba-4e73-9705-fed2fdf521d4",
          "length": 283,
          "cycles": 1,
          "position": 240,
          "iteration": 0,
          "httpRequestId": "62c2a499-d801-4b68-9856-0c3dc2a9e838"
        },
        "item": {
          "id": "7592ca9e-a030-4fa1-abfd-d6ac6a23b9b1",
          "name": "credentials_verify:vc:credentialSubject:id:null"
        },
        "response": {
          "id": "06eaf1f1-97e3-4df9-a777-ace79c7ad416",
          "status": "OK",
          "code": 200,
          "responseTime": 118,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:241)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:241)"
            }
          }
        ]
      },
      {
        "id": "1211d53f-aa07-4a58-b82f-f0b6956bc71c",
        "cursor": {
          "ref": "40ff061d-33ab-41ec-bae9-80086c230043",
          "length": 283,
          "cycles": 1,
          "position": 241,
          "iteration": 0,
          "httpRequestId": "7aca598f-5495-458f-a11c-f85426dccad4"
        },
        "item": {
          "id": "1211d53f-aa07-4a58-b82f-f0b6956bc71c",
          "name": "credentials_verify:vc:credentialSubject:id:object"
        },
        "response": {
          "id": "4656cc3d-cb02-407c-ab4d-5d81d4545c92",
          "status": "OK",
          "code": 200,
          "responseTime": 107,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:242)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:242)"
            }
          }
        ]
      },
      {
        "id": "ead516c8-ccb7-459a-ae14-f64aba229d88",
        "cursor": {
          "ref": "3c71b60f-e727-465f-b529-f448cce06988",
          "length": 283,
          "cycles": 1,
          "position": 242,
          "iteration": 0,
          "httpRequestId": "4268a174-60a9-476e-a593-14f00e7637a7"
        },
        "item": {
          "id": "ead516c8-ccb7-459a-ae14-f64aba229d88",
          "name": "credentials_verify:proof:missing"
        },
        "response": {
          "id": "cc4c435f-a5a5-4389-a87e-81fd4dfa1e20",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 217
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5f9cd02d-72ee-4fe8-ac85-ea0f63f351b9",
        "cursor": {
          "ref": "0ca485ce-c46f-473e-b2aa-8c7c1719ce7a",
          "length": 283,
          "cycles": 1,
          "position": 243,
          "iteration": 0,
          "httpRequestId": "e5a48fe1-916b-4995-9ea1-b4562b49260d"
        },
        "item": {
          "id": "5f9cd02d-72ee-4fe8-ac85-ea0f63f351b9",
          "name": "credentials_verify:proof:array"
        },
        "response": {
          "id": "2e7d30c2-2798-497e-ac9a-c901993afd3f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 166
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "db6b4150-2ed8-47fd-9add-8e6132b3ec44",
        "cursor": {
          "ref": "951aaf4a-2ea5-43dc-bc26-88cea878b409",
          "length": 283,
          "cycles": 1,
          "position": 244,
          "iteration": 0,
          "httpRequestId": "8d9b720d-c3c1-4cac-9701-04134038ebdd"
        },
        "item": {
          "id": "db6b4150-2ed8-47fd-9add-8e6132b3ec44",
          "name": "credentials_verify:proof:boolean"
        },
        "response": {
          "id": "fa1cae86-0bec-4b6a-a4b5-d27183685414",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 244
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "47217cdb-8a64-4db0-b019-915d63e9d071",
        "cursor": {
          "ref": "40d9c5d7-efc6-41af-a935-3bc51b817c80",
          "length": 283,
          "cycles": 1,
          "position": 245,
          "iteration": 0,
          "httpRequestId": "6e8bb31b-dd85-4cee-a4a0-6ef96bec288a"
        },
        "item": {
          "id": "47217cdb-8a64-4db0-b019-915d63e9d071",
          "name": "credentials_verify:proof:integer"
        },
        "response": {
          "id": "0ede6c1d-20d3-44b3-aef1-e354b16eccd2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 244
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a1e3b0ff-d962-4473-b58b-1d6884eb707a",
        "cursor": {
          "ref": "72069e7a-226d-4963-ba7f-08098bcec647",
          "length": 283,
          "cycles": 1,
          "position": 246,
          "iteration": 0,
          "httpRequestId": "a2ffcefa-ca82-40f6-abb8-8510f30e86bc"
        },
        "item": {
          "id": "a1e3b0ff-d962-4473-b58b-1d6884eb707a",
          "name": "credentials_verify:proof:null"
        },
        "response": {
          "id": "f587a33e-24ea-4054-bc84-81ee8403135c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 295
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a7342112-358f-4e26-aeff-30ead7209fed",
        "cursor": {
          "ref": "57e5eb98-b821-4d37-961b-ba0f2af625ec",
          "length": 283,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "f21a48fd-8beb-4736-8f8f-7ca129cf7f09"
        },
        "item": {
          "id": "a7342112-358f-4e26-aeff-30ead7209fed",
          "name": "credentials_verify:proof:string"
        },
        "response": {
          "id": "cd530472-b43d-4b9f-9d83-96d077603b45",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 244
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "69d90a26-e593-464b-9db3-d225f2af36db",
        "cursor": {
          "ref": "2bbfc8ee-2baf-405b-9751-cdf58eb9fec8",
          "length": 283,
          "cycles": 1,
          "position": 248,
          "iteration": 0,
          "httpRequestId": "e4d80d54-ca19-45be-af55-a3e44a73a559"
        },
        "item": {
          "id": "69d90a26-e593-464b-9db3-d225f2af36db",
          "name": "credentials_verify:proof:type:missing"
        },
        "response": {
          "id": "1c6fb237-34bb-4e72-9809-632f578847be",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 345
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f7bda5ee-c2d0-4781-bb0c-a22decb25b33",
        "cursor": {
          "ref": "84bc69bd-0721-4a51-ae04-83b69e173b39",
          "length": 283,
          "cycles": 1,
          "position": 249,
          "iteration": 0,
          "httpRequestId": "ef20b10d-e98c-4884-ae51-398f3bb7fc36"
        },
        "item": {
          "id": "f7bda5ee-c2d0-4781-bb0c-a22decb25b33",
          "name": "credentials_verify:proof:type:array"
        },
        "response": {
          "id": "68b73bb1-3b78-4a26-8567-e9d113044fdb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "03e91787-930c-4eda-8e5b-9a51398fd64d",
        "cursor": {
          "ref": "0d5a3fdb-8fc9-4329-b829-a53eebae2f06",
          "length": 283,
          "cycles": 1,
          "position": 250,
          "iteration": 0,
          "httpRequestId": "1b58060d-c4a1-44e2-a13a-6085b2e1e7b3"
        },
        "item": {
          "id": "03e91787-930c-4eda-8e5b-9a51398fd64d",
          "name": "credentials_verify:proof:type:boolean"
        },
        "response": {
          "id": "9a587968-5407-48a1-a417-ec00d26faad4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c95c2106-39d6-4713-af48-7344a306f1da",
        "cursor": {
          "ref": "f4f7025f-46a2-4875-93c3-1f41c5563fe2",
          "length": 283,
          "cycles": 1,
          "position": 251,
          "iteration": 0,
          "httpRequestId": "43be5360-d3b9-441b-8514-71ac83579632"
        },
        "item": {
          "id": "c95c2106-39d6-4713-af48-7344a306f1da",
          "name": "credentials_verify:proof:type:integer"
        },
        "response": {
          "id": "09eb299e-3a7e-42f5-81fb-596d581ba458",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "89e6c64a-9bdd-435f-af31-1fc98b2939ef",
        "cursor": {
          "ref": "e9237874-3f04-47ba-9cc4-815240270aa6",
          "length": 283,
          "cycles": 1,
          "position": 252,
          "iteration": 0,
          "httpRequestId": "43bd90dd-7c3a-4208-a272-b34d3efd5be6"
        },
        "item": {
          "id": "89e6c64a-9bdd-435f-af31-1fc98b2939ef",
          "name": "credentials_verify:proof:type:null"
        },
        "response": {
          "id": "72c84d34-9840-486c-85bd-669ef6de914e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 345
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0d24be9c-3d50-40f7-9932-5a6ba9fc8773",
        "cursor": {
          "ref": "9758daab-59c1-43f0-9b74-9d53e7feceed",
          "length": 283,
          "cycles": 1,
          "position": 253,
          "iteration": 0,
          "httpRequestId": "6be63e8c-b8d7-490c-9a04-bbe6e7505b44"
        },
        "item": {
          "id": "0d24be9c-3d50-40f7-9932-5a6ba9fc8773",
          "name": "credentials_verify:proof:type:object"
        },
        "response": {
          "id": "de181b1a-1ce5-41bf-a8b1-152e482dc3c5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "65b919f6-90cc-4051-9b4e-6b1f73434043",
        "cursor": {
          "ref": "5c838d84-4e52-4f4b-a5b0-1765758e032d",
          "length": 283,
          "cycles": 1,
          "position": 254,
          "iteration": 0,
          "httpRequestId": "24c8a35e-637e-4179-bf22-517aa072eff3"
        },
        "item": {
          "id": "65b919f6-90cc-4051-9b4e-6b1f73434043",
          "name": "credentials_verify:proof:type:string"
        },
        "response": {
          "id": "94121767-5fe9-474a-9907-069c708718d3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "21d910b1-6251-4b34-9964-dd33c7644795",
        "cursor": {
          "ref": "dda6caf1-2083-4b33-8150-8f636d817891",
          "length": 283,
          "cycles": 1,
          "position": 255,
          "iteration": 0,
          "httpRequestId": "016a3315-3ddf-4418-a7a0-0d0727a19e82"
        },
        "item": {
          "id": "21d910b1-6251-4b34-9964-dd33c7644795",
          "name": "credentials_verify:proof:created:array"
        },
        "response": {
          "id": "9e51a39b-ef80-4cb8-907d-a4c5d78ceefe",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "452e3e70-d8f7-4e4b-8ff2-d19e4677a426",
        "cursor": {
          "ref": "e3eebc5a-946c-4b7e-9067-79c4459baf39",
          "length": 283,
          "cycles": 1,
          "position": 256,
          "iteration": 0,
          "httpRequestId": "1ba2385d-a3fd-4691-974e-d18af1db7208"
        },
        "item": {
          "id": "452e3e70-d8f7-4e4b-8ff2-d19e4677a426",
          "name": "credentials_verify:proof:created:boolean"
        },
        "response": {
          "id": "66757cca-158e-4c10-9bf5-a7eb62d9130b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "336f542d-9047-47dc-a506-c862d41d5647",
        "cursor": {
          "ref": "b23ff428-de5f-431a-8d05-3ab7164f0c69",
          "length": 283,
          "cycles": 1,
          "position": 257,
          "iteration": 0,
          "httpRequestId": "e8ae5e10-537e-40d2-8b32-de3a33ba3311"
        },
        "item": {
          "id": "336f542d-9047-47dc-a506-c862d41d5647",
          "name": "credentials_verify:proof:created:integer"
        },
        "response": {
          "id": "f221612b-6e22-4f41-9b0f-0e438e6f3530",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6ddd7eb4-53d5-4757-8577-899d92fdccd0",
        "cursor": {
          "ref": "5273e162-84c9-4de2-acd0-84018940b1c7",
          "length": 283,
          "cycles": 1,
          "position": 258,
          "iteration": 0,
          "httpRequestId": "75d7851d-a714-427e-9786-5f4dcf2526b3"
        },
        "item": {
          "id": "6ddd7eb4-53d5-4757-8577-899d92fdccd0",
          "name": "credentials_verify:proof:created:null"
        },
        "response": {
          "id": "e0607fd8-cad7-4caa-85f4-fbec594b2535",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 252
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "06e4c1eb-4182-44e1-af62-425333f80448",
        "cursor": {
          "ref": "ad1612f2-8d19-4b8b-ac35-1f3a0d6542a1",
          "length": 283,
          "cycles": 1,
          "position": 259,
          "iteration": 0,
          "httpRequestId": "458ac69e-c45f-42e4-b69c-9d09b88f06ea"
        },
        "item": {
          "id": "06e4c1eb-4182-44e1-af62-425333f80448",
          "name": "credentials_verify:proof:created:object"
        },
        "response": {
          "id": "c5c982ca-1356-40a6-be7f-ca36f0a0a823",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1bae2350-b85d-4128-a7a6-6f44e007f6f3",
        "cursor": {
          "ref": "c3852880-177e-4aa3-8947-a130fd52605a",
          "length": 283,
          "cycles": 1,
          "position": 260,
          "iteration": 0,
          "httpRequestId": "7f00da5d-4777-46b3-afa7-345c718e3da2"
        },
        "item": {
          "id": "1bae2350-b85d-4128-a7a6-6f44e007f6f3",
          "name": "credentials_verify:proof:verificationMethod:array"
        },
        "response": {
          "id": "be4ca867-7a30-4460-a760-5d8239fb2306",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "28d86142-55d6-4d2f-bce0-7c94452b9b61",
        "cursor": {
          "ref": "e6f6d503-0104-4032-92cf-7c622c5884f1",
          "length": 283,
          "cycles": 1,
          "position": 261,
          "iteration": 0,
          "httpRequestId": "a020c529-2c9d-4903-b377-5690821db2bf"
        },
        "item": {
          "id": "28d86142-55d6-4d2f-bce0-7c94452b9b61",
          "name": "credentials_verify:proof:verificationMethod:boolean"
        },
        "response": {
          "id": "cdc635a6-c3a1-44cf-b62f-1c4ab8a81bf7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "52f70d21-55c2-4921-a9ee-dd12960ddabd",
        "cursor": {
          "ref": "9f0ecd8b-5a9f-4b5f-afb8-e54e673a8702",
          "length": 283,
          "cycles": 1,
          "position": 262,
          "iteration": 0,
          "httpRequestId": "53861852-8559-40de-aeb4-1d3f752f4eb4"
        },
        "item": {
          "id": "52f70d21-55c2-4921-a9ee-dd12960ddabd",
          "name": "credentials_verify:proof:verificationMethod:integer"
        },
        "response": {
          "id": "e93590f9-8a54-4b3b-96de-27386d62b42b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a28eb62f-a91b-4af3-8c1d-d3b4011ae46d",
        "cursor": {
          "ref": "fb446e10-1c78-4023-96e6-1c7af89be2ee",
          "length": 283,
          "cycles": 1,
          "position": 263,
          "iteration": 0,
          "httpRequestId": "2ca0a5b7-7235-4684-8f17-0edd834d776f"
        },
        "item": {
          "id": "a28eb62f-a91b-4af3-8c1d-d3b4011ae46d",
          "name": "credentials_verify:proof:verificationMethod:null"
        },
        "response": {
          "id": "719d292d-6a9e-4cb6-a253-17c16c5daff0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 26,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "83405629-7aec-4d12-9363-173944e1e68a",
        "cursor": {
          "ref": "bdc7a255-b71e-4d64-9e02-f4f6ffa88108",
          "length": 283,
          "cycles": 1,
          "position": 264,
          "iteration": 0,
          "httpRequestId": "506b85de-8324-4be9-b850-af1fb93c3e3e"
        },
        "item": {
          "id": "83405629-7aec-4d12-9363-173944e1e68a",
          "name": "credentials_verify:proof:verificationMethod:object"
        },
        "response": {
          "id": "ad7c9826-62bf-4d9e-9939-f136668b3c8c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f72aa811-a7cb-4185-a360-5fd901144d45",
        "cursor": {
          "ref": "bb906f71-40ca-4d19-ae54-06ae7c6a9d9a",
          "length": 283,
          "cycles": 1,
          "position": 265,
          "iteration": 0,
          "httpRequestId": "02844712-7500-4bba-b68e-c8256ffb6ed4"
        },
        "item": {
          "id": "f72aa811-a7cb-4185-a360-5fd901144d45",
          "name": "credentials_verify:proof:jws:array"
        },
        "response": {
          "id": "0ab4e449-6825-45a6-a6a8-b27842520aa0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a9316dd0-4977-4b4e-9158-e2fe9f6b87f6",
        "cursor": {
          "ref": "5c542e3c-6f2b-4c63-83e5-d09b289b3e17",
          "length": 283,
          "cycles": 1,
          "position": 266,
          "iteration": 0,
          "httpRequestId": "11480095-9120-4846-8ffe-f3f24148597e"
        },
        "item": {
          "id": "a9316dd0-4977-4b4e-9158-e2fe9f6b87f6",
          "name": "credentials_verify:proof:jws:boolean"
        },
        "response": {
          "id": "90d964b2-1ad3-4b67-a957-1a79e8a8881c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9b039154-87c2-47ee-b9c8-6d5161bb7911",
        "cursor": {
          "ref": "46ae4c39-f006-4cc9-90f7-01ec52cd760f",
          "length": 283,
          "cycles": 1,
          "position": 267,
          "iteration": 0,
          "httpRequestId": "ceff4297-1200-440b-a029-0f1391813172"
        },
        "item": {
          "id": "9b039154-87c2-47ee-b9c8-6d5161bb7911",
          "name": "credentials_verify:proof:jws:integer"
        },
        "response": {
          "id": "6b41d8a8-efbf-4bc1-ba00-012b9172ee29",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "70c22cc9-3fcc-4e33-869a-19984c37253f",
        "cursor": {
          "ref": "36b364bd-72ad-48cb-b440-e57c0c7b51d6",
          "length": 283,
          "cycles": 1,
          "position": 268,
          "iteration": 0,
          "httpRequestId": "3bb1ec61-b2a4-495d-ac53-868910a5c933"
        },
        "item": {
          "id": "70c22cc9-3fcc-4e33-869a-19984c37253f",
          "name": "credentials_verify:proof:jws:null"
        },
        "response": {
          "id": "dabc9a1a-70da-4f66-bcde-84398c2f7267",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 172
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2c2cb873-8fc5-4670-8b15-ea06e82dd8aa",
        "cursor": {
          "ref": "0959fda0-f04d-4222-b9d3-02157178ab17",
          "length": 283,
          "cycles": 1,
          "position": 269,
          "iteration": 0,
          "httpRequestId": "9aca86c1-1c2b-4528-89fc-4c04eb572374"
        },
        "item": {
          "id": "2c2cb873-8fc5-4670-8b15-ea06e82dd8aa",
          "name": "credentials_verify:proof:jws:object"
        },
        "response": {
          "id": "312845b6-efa7-43f6-9439-9a79409a252d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "38942f86-9156-4f7a-af2a-be103f439563",
        "cursor": {
          "ref": "86a0fdd4-e50a-48b6-94bd-6140bd92ac2b",
          "length": 283,
          "cycles": 1,
          "position": 270,
          "iteration": 0,
          "httpRequestId": "76e13f66-640c-4976-a54c-076bdf999cc7"
        },
        "item": {
          "id": "38942f86-9156-4f7a-af2a-be103f439563",
          "name": "credentials_verify:proof:proofPurpose:array"
        },
        "response": {
          "id": "b931ddd9-5516-4b9d-9a1d-f785a9bc2b3e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e4c0dc31-5367-4a45-88b4-55d6f685bd24",
        "cursor": {
          "ref": "efd5bdf5-82f8-4997-bd4f-64c21daf2384",
          "length": 283,
          "cycles": 1,
          "position": 271,
          "iteration": 0,
          "httpRequestId": "2a3d69ec-20cf-4d4a-9ac4-f142efc4cd80"
        },
        "item": {
          "id": "e4c0dc31-5367-4a45-88b4-55d6f685bd24",
          "name": "credentials_verify:proof:proofPurpose:boolean"
        },
        "response": {
          "id": "f87130fa-3e14-4e12-a41d-797916a1d61f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b89942de-d053-4213-a26e-8608eafc6b27",
        "cursor": {
          "ref": "414b7134-dddf-4717-b737-a24ed37bbb3f",
          "length": 283,
          "cycles": 1,
          "position": 272,
          "iteration": 0,
          "httpRequestId": "2e1c13cd-8365-4c36-bacd-c696042b2864"
        },
        "item": {
          "id": "b89942de-d053-4213-a26e-8608eafc6b27",
          "name": "credentials_verify:proof:proofPurpose:integer"
        },
        "response": {
          "id": "64963d5f-6a4d-4713-9509-cf44dceba214",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "12c2dcd9-0c87-4bf3-8fed-0a1b36552a72",
        "cursor": {
          "ref": "8769a228-1d27-4fa2-b10c-c51114bccf42",
          "length": 283,
          "cycles": 1,
          "position": 273,
          "iteration": 0,
          "httpRequestId": "5deae7f8-da0b-4f12-a0c3-5d10b550f6e3"
        },
        "item": {
          "id": "12c2dcd9-0c87-4bf3-8fed-0a1b36552a72",
          "name": "credentials_verify:proof:proofPurpose:null"
        },
        "response": {
          "id": "bf038038-ff81-46c7-b043-56b1c26ac45e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dd772242-6298-4f78-85cd-9a78dc02d12e",
        "cursor": {
          "ref": "edf60feb-2869-4077-ac38-8389220fa89b",
          "length": 283,
          "cycles": 1,
          "position": 274,
          "iteration": 0,
          "httpRequestId": "d3628a5e-8098-46f2-91d3-cb52b8fbabd1"
        },
        "item": {
          "id": "dd772242-6298-4f78-85cd-9a78dc02d12e",
          "name": "credentials_verify:proof:proofPurpose:object"
        },
        "response": {
          "id": "4de53b4c-b6fa-4230-b7c8-6fcdfd585608",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "71b61959-2eac-4b83-a469-e7b080d74288",
        "cursor": {
          "ref": "674bc95b-d41a-4cee-b698-bc94223f077e",
          "length": 283,
          "cycles": 1,
          "position": 275,
          "iteration": 0,
          "httpRequestId": "1b1e894c-fac5-4664-b00c-798fd481a3bc"
        },
        "item": {
          "id": "71b61959-2eac-4b83-a469-e7b080d74288",
          "name": "credentials_verify:proof:proofPurpose:string"
        },
        "response": {
          "id": "bfbe6150-f68c-4b0c-a4e6-443409088dd6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 26,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c9d7e6df-7284-4086-a930-137e4a8b8513",
        "cursor": {
          "ref": "64a15e9f-5d45-46e9-b476-858b932b4d3f",
          "length": 283,
          "cycles": 1,
          "position": 276,
          "iteration": 0,
          "httpRequestId": "a25f19aa-2f66-4edc-ba2c-6ae448047dc3"
        },
        "item": {
          "id": "c9d7e6df-7284-4086-a930-137e4a8b8513",
          "name": "credentials_verify:missing_auth"
        },
        "response": {
          "id": "b36461e4-adf9-4173-9b53-2bcf97d7dc8f",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 16,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "14e2e48b-a39d-4b54-ab02-9b7807734134",
        "cursor": {
          "ref": "fccef58e-1bed-4fc8-9ea6-0f6d21a3089d",
          "length": 283,
          "cycles": 1,
          "position": 277,
          "iteration": 0,
          "httpRequestId": "2a582672-0b5b-480f-9897-779ca2516637"
        },
        "item": {
          "id": "14e2e48b-a39d-4b54-ab02-9b7807734134",
          "name": "credentials_verify:bad_signature"
        },
        "response": {
          "id": "af112927-1967-4731-937a-b171132a7347",
          "status": "OK",
          "code": 200,
          "responseTime": 108,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is false",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response verified is false",
              "message": "expected true to be false",
              "stack": "AssertionError: expected true to be false\n   at Object.eval sandbox-script.js:3:278)"
            }
          }
        ]
      },
      {
        "id": "83882b1b-7b00-4f8e-b7cd-3ae4ea0c0390",
        "cursor": {
          "ref": "fd7cbcd5-b5cd-45c7-87c8-54c31013b61b",
          "length": 283,
          "cycles": 1,
          "position": 278,
          "iteration": 0,
          "httpRequestId": "4aad170d-c935-433b-b050-9606c2074a24"
        },
        "item": {
          "id": "83882b1b-7b00-4f8e-b7cd-3ae4ea0c0390",
          "name": "credentials_verify"
        },
        "response": {
          "id": "6bf4929f-bd5a-4e32-a4ea-9a841c1ffc5c",
          "status": "OK",
          "code": 200,
          "responseTime": 123,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "86b02bb2-b61e-447d-aad0-2e146b5bb483",
        "cursor": {
          "ref": "952bffd2-7f65-470a-ae30-16d1e5b02024",
          "length": 283,
          "cycles": 1,
          "position": 279,
          "iteration": 0,
          "httpRequestId": "95071df5-e76a-4395-a755-19127999a3d9"
        },
        "item": {
          "id": "86b02bb2-b61e-447d-aad0-2e146b5bb483",
          "name": "credentials_verify:issuer:object"
        },
        "response": {
          "id": "d84ce742-3a06-4c91-b672-60b2cbb09f0a",
          "status": "OK",
          "code": 200,
          "responseTime": 111,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "c7a19634-8911-4fa0-b77b-ead66e3f9025",
        "cursor": {
          "ref": "134cdb1b-cd4f-484f-9ca4-79258ef33b9d",
          "length": 283,
          "cycles": 1,
          "position": 280,
          "iteration": 0,
          "httpRequestId": "17b425f0-9b24-4e39-bb08-1bd5ae8ddab0"
        },
        "item": {
          "id": "c7a19634-8911-4fa0-b77b-ead66e3f9025",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "ccc23250-11f4-4b70-aea1-b4edab76075f",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 16,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c7a19634-8911-4fa0-b77b-ead66e3f9025",
        "cursor": {
          "ref": "134cdb1b-cd4f-484f-9ca4-79258ef33b9d",
          "length": 283,
          "cycles": 1,
          "position": 280,
          "iteration": 0,
          "httpRequestId": "17b425f0-9b24-4e39-bb08-1bd5ae8ddab0"
        },
        "item": {
          "id": "c7a19634-8911-4fa0-b77b-ead66e3f9025",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "ccc23250-11f4-4b70-aea1-b4edab76075f",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 16,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "442d15fb-bbb8-400b-9dee-ac6f3e59b7cd",
        "cursor": {
          "ref": "1b9609b0-ae1b-41e1-b7a3-930501b5ccf6",
          "length": 283,
          "cycles": 1,
          "position": 281,
          "iteration": 0,
          "httpRequestId": "ed853e89-a4fa-42f2-bc44-e0e889a2d0d1"
        },
        "item": {
          "id": "442d15fb-bbb8-400b-9dee-ac6f3e59b7cd",
          "name": "presentations_prove:missing_auth"
        },
        "response": {
          "id": "dc1a8836-6666-4bbd-85d5-275cc422adc5",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 17,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "633142d8-9227-4cef-9fbb-5883e6808c27",
        "cursor": {
          "ref": "bb6cb93a-3afa-4abc-867c-2f744860368f",
          "length": 283,
          "cycles": 1,
          "position": 282,
          "iteration": 0,
          "httpRequestId": "caca0d36-e248-48d7-83a0-d1caa6f39467"
        },
        "item": {
          "id": "633142d8-9227-4cef-9fbb-5883e6808c27",
          "name": "presentations_verify:missing_auth"
        },
        "response": {
          "id": "df5f7db4-e7f2-46c7-9907-016f6b93aad3",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 16,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      }
    ]
  }
}