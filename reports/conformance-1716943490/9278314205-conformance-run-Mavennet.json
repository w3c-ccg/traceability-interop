{
  "collection": {
    "info": {
      "_postman_id": "0b8a4a7f-f952-4403-a9a4-909b37b8fa24",
      "name": "Conformance Suite",
      "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
    },
    "item": [
      {
        "id": "3144c409-98de-41e5-be14-c38fef84f255",
        "name": "Clear Cache",
        "item": [
          {
            "id": "e506fbe1-700f-42c3-a5ac-dcad83cba074",
            "name": "Clear Token Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "4d3ab99e-6a69-4ddd-80da-71c40f2078ba",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"tokenCache\");",
                    ""
                  ],
                  "_lastExecutionId": "bd759174-9b19-46a4-acd4-2bb1069ba7ad"
                }
              }
            ]
          },
          {
            "id": "ac397068-8288-4aef-8df4-878923e97713",
            "name": "Clear DID Web Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "75e75bb7-8071-4a21-927c-63e395950fe2",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"didWebCache\");",
                    ""
                  ],
                  "_lastExecutionId": "8f2f8b73-c0f2-4707-92d1-c3bc88a94d53"
                }
              }
            ]
          }
        ],
        "event": []
      },
      {
        "id": "8835794e-16c5-4a40-a04b-2980946260c8",
        "name": "Discovery - API Configuration",
        "item": [
          {
            "id": "b41082b7-58f0-44e7-9e0e-6aae13782777",
            "name": "Positive Testing",
            "item": [
              {
                "id": "d273f55b-463c-48a9-8d16-c21ab258690a",
                "name": "did_json",
                "request": {
                  "url": {
                    "host": [
                      "{{did_web_endpoint}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "fcc360c1-1fee-4de7-a9ce-820712bd87ba",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200ApiConfiguration\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "c5a299de-6bf4-4b81-bcd7-762b20320d88"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "cbb5b3c6-1aa3-49fd-9cf8-3bd5e9596f8d",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "c9c5e1cf-7131-4388-a5a7-8cf05f317e6c"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "9d8aed9a-0b34-41d4-851d-639ef96bef49",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "28bb8245-88e9-49a4-9991-052816a0c2bb"
                }
              }
            ]
          }
        ],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "ca164b82-b5da-46a3-a8f3-2864ee5cf56b",
              "type": "text/javascript",
              "exec": [
                "// Discovery requires a multi-tenant aware did web endpoint",
                "const did_web = pm.environment.get(\"ORGANIZATION_DID_WEB\");",
                "const did_web_endpoint = utils(pm).convertDidWebToEndpoint(did_web);",
                "pm.variables.set('did_web_endpoint', did_web_endpoint);",
                ""
              ],
              "_lastExecutionId": "8d5a649a-2aca-4b56-a915-f128e8aa878b"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "3effec6a-837a-4016-875b-1eb7e0b62b5b",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "e736c23c-85cb-4ba3-a154-b00d4992b265"
            }
          }
        ]
      },
      {
        "id": "997bef4c-ba97-44f4-aa3c-478f237287bf",
        "name": "Identifiers - Resolve",
        "item": [
          {
            "id": "9ca692da-6ee3-48e4-9cae-1ff4a8c0eefd",
            "name": "Negative Testing",
            "item": [
              {
                "id": "fb343a12-a1c3-4de2-93a7-58ad918a6ce0",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "382c8ced-ff38-4435-817f-ed86a6c44642",
                    "name": "did:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "invalid_did"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "50aa0c93-e1bc-47ea-88b4-d44e5d2134ca",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400Identifiers\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "ba9d4a98-bd94-42f2-9157-397d9ad76c66"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cbae89ef-c468-4dad-b542-10e77306aa6d",
                    "name": "did:not_found:did_web",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "did:web:example.com"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4a7e70d1-ea9a-4adf-a1f2-fd0bcd10ba97",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "c0e0b586-6260-438e-951d-7b04f02eb592"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1c4ad6e6-1b75-4659-ad07-fd668fbffd10",
                    "name": "did:not_found:urn",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "urn:uuid:{{$randomUUID}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bbe87838-96ef-416e-be6b-6f097d205866",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "cc2dd2a7-e64f-43cf-8c80-262079d80a51"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "b65caacb-4023-42f4-891d-38613c355647",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "fbe8e957-327f-4dac-9031-1cfbefab1061",
                    "name": "identifiers:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET",
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a2e73e0c-5da5-4f64-9874-54fd986594ca",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "2c020ca3-6ef2-4687-988b-1753b515a895"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9b445806-40d2-4f3b-91b7-b08693d260f6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4a4c055f-2df7-4d76-b835-0ff2bea88069"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "0aee2218-a8c1-4937-bc0f-19d67c3787f2",
            "name": "Positive Testing",
            "item": [
              {
                "id": "984b006b-87cc-4cbf-aadb-cd7e4d625486",
                "name": "identifiers",
                "request": {
                  "url": {
                    "path": [
                      "identifiers",
                      "{{ORGANIZATION_DID_WEB}}"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "a7a6086b-875b-47ef-9709-13ea78033fc7",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200Identifiers\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString), {",
                        "     strict: true,",
                        "     strictSchema: true,",
                        " });",
                        "});"
                      ],
                      "_lastExecutionId": "68f1481c-df52-45c1-a074-02b97fd706b3"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "51552d4f-73bd-4b04-a854-63f001234c60",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                ""
              ],
              "_lastExecutionId": "75aa088f-7b2b-4bca-a560-f84874fca544"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "1ba44788-28fa-4b56-82a4-00d9640df5ab",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "4018e4e7-e8a2-4600-b365-3554a10dce62"
            }
          }
        ]
      },
      {
        "id": "dff33307-fbf1-48e2-9c29-7e2063d3226b",
        "name": "Credentials - Create",
        "item": [
          {
            "id": "44ffb804-fa6a-4010-97ba-970a81a209ed",
            "name": "Negative Testing",
            "item": [
              {
                "id": "e8837476-13ee-42f3-8e7e-028b743cf191",
                "name": "Bad Request",
                "description": {
                  "content": "This folder contains requests which mutate a valid request body in a way that should provoke a \"400 Bad Request\" response from the server.",
                  "type": "text/plain"
                },
                "item": [
                  {
                    "id": "9a1969a3-b8ac-476c-94e0-fcde9bdb13cd",
                    "name": "credentials_issue:credential:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fed8dbca-8598-4396-bbab-32155d7ac877",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f531203a-0638-484b-a8d1-8a67c2f79ddc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a4a2dc50-e6f0-4f0d-b264-302d64d14e38",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential\" is a required field",
                            "    delete req.credential;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "360962bb-6313-4529-8a51-55d640affcb8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "33c90ee5-78c5-429a-b355-89e4c3d2f249",
                    "name": "credentials_issue:credential.@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3fbc11e4-eff0-4ec8-a98a-832eb69200e9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f9ba23fa-f475-41f7-a3e9-153373e9746e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bb76594d-a611-4562-ae80-e20618cfee08",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" is a required field",
                            "    delete req.credential[\"@context\"];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "d3d5abba-8784-4f78-8321-0122def571d1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f91e04c2-c765-4d1a-bcff-0d68e6634899",
                    "name": "credentials_issue:credential.@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bf212663-fdd7-4b7a-915f-5f1b080b27a7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f2f441d3-afdd-46de-8248-b06fca43fc29"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5e97ca01-654f-4bd2-adab-88df420721ea",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a boolean",
                            "    req.credential[\"@context\"] = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "95a36d00-0bd5-4788-be4d-e601add44af2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f8697df8-027e-4a5e-a242-622caee9e2be",
                    "name": "credentials_issue:credential.@context:integer Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b6fb9da1-8921-48b1-92ff-168cef6747ae",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "21f2cd89-977c-48ab-b2ca-b1e31bfabae3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1178291b-8135-4a53-a623-51e36449a253",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an integer",
                            "    req.credential[\"@context\"] = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "59cd2ce5-d0b5-411e-86c4-c715ccce315f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ed693cc5-fb58-443f-97d3-1a45e2a7e369",
                    "name": "credentials_issue:credential.@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4bd2aabe-d92e-4ebf-9120-fa51e5d2764e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5e710a80-0061-4982-bd11-0cf169c66b5d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c3f9e6f4-efe6-483d-b608-cdd5bf1fc31f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not null",
                            "    req.credential[\"@context\"] = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "84da06bd-58a2-4778-82fe-6c7c1a822c2b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a51522f7-a910-4ff0-97fb-56f6ef1a96c6",
                    "name": "credentials_issue:credential.@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "73482643-6aba-46b6-ab06-c8f641c51e0e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "afb179de-4e24-4a6c-8e78-c227c7ff9638"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d9c7a21a-982a-4184-91b8-6956340b1e6e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an object",
                            "    req.credential[\"@context\"] = {\"@vocab\": \"https://www.w3.org/2018/credentials/v1\"};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "d6aac8ff-b240-4e85-affd-5cdc348a1d17"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5416a427-cbd2-43dc-956d-67ec39ef2db4",
                    "name": "credentials_issue:credential.@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "facfd667-10b8-420d-aa9f-d4abe7e36c81",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9a218156-f0c0-44ac-a1ec-461b3ae68783"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8ddf5953-2956-4a3d-a818-4be8f85f2ed5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a string",
                            "    req.credential[\"@context\"] = \"https://www.w3.org/2018/credentials/v1\";",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "49505f91-1cb6-43cb-81e5-01ba645f4440"
                        }
                      }
                    ]
                  },
                  {
                    "id": "57d5f863-e79c-438e-a13f-996aae64404f",
                    "name": "credentials_issue:credential.@context.item.array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "34d7c980-47c3-4dea-a491-12136f46f52e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "365abd68-995e-4455-88cb-805d8927bd48"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "972155f4-5445-481c-84f3-5bd58a824c1f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not array",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        [\"https://w3id.org/traceability/v1\"],",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "cabd6c99-41fc-46df-a295-4f3afbad38a4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "40bd2cec-3217-4cbf-ae43-8c91dbda822d",
                    "name": "credentials_issue:credential.@context.item.boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0c7094a4-f254-49ec-833a-4f85c2ca8367",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8e213b04-a800-4845-a0c0-cbbc4d428ef1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4646819e-a99a-4c6e-bfb6-ae7edfc2f4d1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not boolean",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        false,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "d1fe1518-c626-421d-9c61-57b2a25a9bbd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "304634a9-4f90-447e-a25a-59e058a3a068",
                    "name": "credentials_issue:credential.@context.item.integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "abf59094-7bd8-4a96-99e4-ce335526e344",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1ecf5be0-4eee-4f4b-9a41-ba34d2db79b1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "42e23098-3538-4b5e-a032-998a059835c1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        42,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "5677d4e0-f8c7-460a-8ede-ffa50ccd22a8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "33747d92-b48a-40cd-be9d-3426bde01866",
                    "name": "credentials_issue:credential.@context.item.null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "618050ba-fb58-4fe0-9692-af5af4f3745e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d477cfba-206b-4c20-a1dc-7154a164b321"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "daf64ccf-974b-4cce-bd7a-9752de8faa83",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        null,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "57ed8a75-d88b-4df7-bd79-d10d83347974"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cf4a950f-d1cd-42aa-9205-871717170114",
                    "name": "credentials_issue:credential.@context.item.object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7a62cf36-44ff-46b9-8523-013aed53a102",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3326a5fb-e5e9-4634-80d6-a77152f5ed8d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3df2d22b-54c5-41fa-b42e-61f9a5dbab87",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not object",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        {\"@vocab\": \"https://w3id.org/traceability/v1\"},",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "d9e62ae5-0dbc-4f39-8274-9a164a656a45"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1fe5eb06-b3a9-4651-8593-9a5ee991129d",
                    "name": "credentials_issue:credential.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c07cfc7d-2f65-4be5-a1d4-2a3549d10837",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c95fd3e5-5bcc-4e48-9e0f-25f38d6dfe8b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "410b1130-e312-49c1-a85b-ae9f8c8a8f30",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not array",
                            "    req.credential.id = [pm.variables.get(\"credentialId\")];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "25508f1b-29da-4fb9-bc04-630f38149823"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3b93b81a-222c-4e61-85ff-30785e647f6a",
                    "name": "credentials_issue:credential.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e9d5d112-67e2-4255-9875-7dadcfe56697",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8b77392c-c687-483e-ab8c-1a1fa6d7abab"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7acac1b6-b9a0-4b9a-bb63-97832d462b18",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not boolean",
                            "    req.credential.id = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "711e4b03-5a4c-465c-839f-6c3f14b2ce78"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d74d31c2-febc-4ed8-a70a-afa0550ab00e",
                    "name": "credentials_issue:credential.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "09192b54-7128-4d1c-9f0e-47a76cef25df",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e31de88e-de0f-4d07-8e7b-c84bc86a707e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "11c692f7-b9b3-4ce5-a119-70c40ac4651b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not integer",
                            "    req.credential.id = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "5d5ae487-4552-4754-9fa1-39d64e86918c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cccb3039-bd14-4ed9-9058-fa8a02b66f48",
                    "name": "credentials_issue:credential.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6d352771-7529-46fe-b860-fc28dc505182",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "20dbebd2-b6f7-43d3-8b91-c81912e437dd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c4c778b9-df8e-4d13-9c3b-24aed83453ff",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not null",
                            "    req.credential.id = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "e232977b-3996-47ba-a559-2ef526ac0ea9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "90beb3ff-e17a-48d8-aaa0-782eb372458d",
                    "name": "credentials_issue:credential.id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c24425ec-1114-4496-8f9e-4a14b62e5ab8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "275da790-9dd9-4fd5-8802-6bc267788575"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e968fcc1-3cf4-486a-9408-32d3d0fd9e32",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not object",
                            "    req.credential.id = {\"id\": pm.variables.get(\"credentialId\")};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "34f89812-7cc7-4098-847d-e81747ec464e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8f07d8e3-1c6c-4e7a-a449-3d5d942ac37d",
                    "name": "credentials_issue:credential.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ff8cdab4-ab99-46e4-9be4-b8643c7fe074",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8596d54a-4cc6-4784-8af4-7f3f10ab6a52"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "363bd94e-7b01-4ab0-8886-fad0467e92a8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type is a required property",
                            "    delete req.credential.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "afff0490-4195-4565-9564-c1e82521e540"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f1eb8826-21cb-47fa-901b-13962b9aec8a",
                    "name": "credentials_issue:credential.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2f0be5d8-4e45-4d10-9135-e77d94e16f4a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d0a073c6-fb27-414a-8179-59fe200d44b7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5706941b-6dec-47b1-85ca-02ea3ebe6cc3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not boolean",
                            "    req.credential.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "24482970-c236-4fd0-b70b-005cfe236f98"
                        }
                      }
                    ]
                  },
                  {
                    "id": "837b0b84-bfc2-45fb-a328-d2bd17378821",
                    "name": "credentials_issue:credential.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1401a585-7199-414c-be3e-31c26eb8a3dd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b10da295-1a06-4dc3-9324-d57009abc4c1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2598a88a-25ae-415b-a7c0-c9a82d35c4e0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not integer",
                            "    req.credential.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "1645b8f1-0b99-41e1-9033-63a5d322802f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "625a04a3-07b7-43b7-974d-1c113409a212",
                    "name": "credentials_issue:credential.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fe1c90b2-e272-4142-9b3a-b761bef48570",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d5fec2e7-e41f-4e06-b88f-9a738d68f3a5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7a5ca58e-06e7-4b38-a392-40aba046105d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not null",
                            "    req.credential.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "e9491df5-ad99-4745-a842-ed290abd6185"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d6018487-7435-455b-8b5d-08e77ccff623",
                    "name": "credentials_issue:credential.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e6290977-fe5d-43de-a44b-7e0824ba96e3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8fee562e-1755-4765-aa8a-18282d658ab3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d12d37f1-f7b7-42c9-8211-ecd78da202b0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not object",
                            "    req.credential.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "44befd7d-9080-445a-bd68-37b1f80a6854"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8792c975-29db-4abb-9ce2-72e6f08b4127",
                    "name": "credentials_issue:credential.type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "be13b8bf-dfec-47ba-bcb6-eab90efb8800",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9053a5f0-d5d1-46ad-9697-370b51afdf5f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "09ff3839-b79a-44e8-a5bf-f19dfdd44c66",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not string",
                            "    req.credential.type = \"VerifiableCredential\";",
                            "}));"
                          ],
                          "_lastExecutionId": "1f12eab6-012d-4e21-a0d2-bd3e3b6e4afb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c5d6540f-7b1e-482f-b429-991b47940e6f",
                    "name": "credentials_issue:credential.type.item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b7de58ea-ac22-4970-a1bc-c60127d29802",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6c91b6b1-5741-45cf-a96f-fcda5aa0307b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d771fb5d-3bd0-4c10-8dad-fbde19e57335",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must have at least one element",
                            "    req.credential.type = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "77e6c2f2-d979-44f2-afd9-2c56f99366ba"
                        }
                      }
                    ]
                  },
                  {
                    "id": "847a228d-21db-455e-a186-a4c9f967b7d0",
                    "name": "credentials_issue:credential.type.item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3e519915-33bd-4568-896a-fa3bc6de7b83",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "33ea4e95-7084-4ef8-80e8-5bbf161b6db4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ab7d67c8-f8b7-447c-8f55-8f4736d66f93",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not array",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        [\"AnotherType\"],",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "4fd8a8e0-abbd-4f81-b807-6272e5fe921a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "99bf0c8d-850d-403c-8e9e-6f2a429cf96d",
                    "name": "credentials_issue:credential.type.item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "88524e5d-1796-4092-b11d-d7d837205498",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a28f32cd-4da9-4a5d-9202-5079a1cc26d2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "271c0489-7f70-40c3-ac83-87f3b5180dcf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not boolean",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        false,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "96aba15d-34a6-4c18-820e-1d25a26792c1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4bbc9505-91cb-4170-a0e1-9605ca78e3cb",
                    "name": "credentials_issue:credential.type.item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e0a849b4-4294-44e2-aef8-fdc51c8a8521",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1ed4c604-24d5-452a-aab8-3e4ef0e3978e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "16cd7493-a10c-4a0a-9ece-5aa719d7217e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not integer",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        42,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "6f55a89d-892e-4833-8c60-72df40463ec7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7085414f-0068-44c1-ac91-1e37aa517cb4",
                    "name": "credentials_issue:credential.type.item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "60262732-ac39-4f6a-b02c-5a4e8d4f69f1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "db754d77-1024-421a-9ba1-52c0640dbe65"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "524df862-c49e-480a-a6d4-67411bc2504c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not null",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        null,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "f9f749c4-039a-47ef-a24d-62d34c2ceda9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "41f1ba3b-f672-4ec5-adb9-2ca02ce3e7fc",
                    "name": "credentials_issue:credential.type.item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "631f4d8a-e271-44a8-95db-35537b629679",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "49225554-094f-458b-9c3d-38844d4ab202"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a8d47e39-e612-4124-a7b9-c0a802b37326",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not object",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        {},",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "2f9c0483-4a44-4eda-a0f9-cd069a4a0331"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c67ac5e1-13ac-4e20-a249-b41753f85cc3",
                    "name": "credentials_issue:credential.issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1efc22ca-90a0-4742-b1d0-9f7e31d0f86e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0a230477-c55e-4c47-836c-4d081fbb0601"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3413937b-6cea-41cb-80fb-535cdc0b1b88",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer is a required property",
                            "    delete req.credential.issuer;",
                            "}));"
                          ],
                          "_lastExecutionId": "3ad77861-2378-4749-bec3-eb2c4d25b1a9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bd222340-faa7-4bee-a649-8d098b36a505",
                    "name": "credentials_issue:credential.issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5f71597b-f3e1-4214-af95-ae921a0c35c5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ff39654d-c143-4b20-9238-8db1081ee281"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ffda6d1b-212b-42ef-b6a9-78fc661b7cb8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not array",
                            "    req.credential.issuer = [pm.variables.get(\"issuer\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "79ea2794-69a2-482e-8148-171a5f6d5cbe"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9dcd34b0-7a94-47bf-abda-1811baa71f9f",
                    "name": "credentials_issue:credential.issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2ca1780f-f966-4a19-ad57-36d68bd1e29f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "37b873b7-840e-48a3-a365-9369ed64c1b0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7d046e91-2f67-4920-846b-3c6b8685a5cd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not boolean",
                            "    req.credential.issuer = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "e3ca3cec-d5cf-458c-b0bf-f15e53773b90"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dfd518e5-8f83-460b-adf7-ef186609a3ed",
                    "name": "credentials_issue:credential.issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c79f3e97-a03f-4c51-8a6e-f6720e1f209c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "287833d8-101e-4162-af21-cef0d86efccb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e181c043-7f68-4909-8959-a82ac6fddc26",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not integer",
                            "    req.credential.issuer = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "6795f373-8ff6-4052-b24c-86ac26f9c0dc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e5260a97-7075-4dc0-956f-c7701e07a9a7",
                    "name": "credentials_issue:credential.issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c0c335bf-5451-4bec-8261-ff6c3dd38e5f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c6176cea-3774-433a-a12d-34ab6c74c185"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f64f1de0-135b-40d3-a912-31f92799fbbb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not null",
                            "    req.credential.issuer = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "6420017a-3af2-44e8-b66e-2d162d81d468"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3a3c5a95-bfc7-4c9e-a936-4fb266813049",
                    "name": "credentials_issue.credential.issuer:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2d214cc5-b728-48df-9b2b-f006e4cbaec3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "111843a0-c39c-4b41-b8d4-b404d64e7bec"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6c47857c-de73-40cd-8112-82bc549143aa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be a valid URI",
                            "    req.credential.issuer = \"not.a.uri\"",
                            "}));"
                          ],
                          "_lastExecutionId": "75aef185-8285-4874-9844-e37c87538982"
                        }
                      }
                    ]
                  },
                  {
                    "id": "54a569fb-347f-420d-b82c-07c96dad7b0d",
                    "name": "credentials_issue.credential.issuer:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e7f0b540-848b-4703-bcc6-e8f5578b3f80",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "2af81787-5c19-46ad-9fca-9d982fce5968"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "33bb5a10-ba47-4968-9c4a-2bec31b40d52",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be known to the endpoint.",
                            "    req.credential.issuer = \"urn:uuid:{{$randomUUID}}\";",
                            "}));"
                          ],
                          "_lastExecutionId": "53f65203-3364-4e57-a979-f74c7a268425"
                        }
                      }
                    ]
                  },
                  {
                    "id": "93911dca-fa55-4b8c-8596-c56d9e3c8199",
                    "name": "credentials_issue:credential.issuer.id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3d4c7262-9ef8-4340-8241-6f374b7aaa6c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "89610c65-6a96-433d-81f9-3d9d35f5832c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "50bb9a05-d380-4aba-832c-6356b0621690",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id is required when issuer is in object format",
                            "    req.credential.issuer = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "4db13ff2-4ba3-49d4-a400-fb07c0dc19b3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3dc0a7a5-f9c4-4821-9b35-1f7973fabef0",
                    "name": "credentials_issue:credential.issuer.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7c99ae16-f945-4525-94e6-0e6e193d6ba7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8bf06311-3aea-41a1-bb1b-3414d3239359"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a62958ea-b7af-42fc-8e7d-ab53cd7bd98b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not array",
                            "    req.credential.issuer = {\"id\": [pm.variables.get(\"issuer\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "cf11c56b-3883-4500-a63d-d2de64e73972"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fd43256a-e9aa-4814-9337-f8193af0bab9",
                    "name": "credentials_issue:credential.issuer.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "21e9cb30-a18b-4034-bb32-27173238f306",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f43fbca3-ddc3-443d-b061-b32e92d8aba2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8b6494f2-40f8-4132-9333-610e7910f224",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not boolean",
                            "    req.credential.issuer = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "5ab8597e-334d-4922-a302-fed7d5ced0f8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2f090255-8b79-4c11-a8a2-92748e9e675c",
                    "name": "credentials_issue:credential.issuer.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d1cdd627-8f42-4a32-88af-20d0c4c17a5b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a7afa75e-7983-451f-92c9-4117bdf180e4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9c55fd85-1e5e-490e-9217-ff84bd731da1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not integer",
                            "    req.credential.issuer = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "0cf2f11d-3bd0-4216-a902-74ce99898722"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e99ab4d1-3e7b-41ef-ad6b-5d41f3a9aee4",
                    "name": "credentials_issue:credential.issuer.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e11f1c29-bd58-42c7-809f-9070f77f1049",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "468eb913-ee51-417c-ba8d-0bf8b1057687"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "14374a31-b2b0-452b-b232-3435f6dd6c7f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not null",
                            "    req.credential.issuer = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "2183b6ad-475c-47f0-a747-1d96635f9ece"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5755a728-6604-4851-956f-990a9f486a0b",
                    "name": "credentials_issue.credential.issuer.id:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "818c8a0a-5d47-4976-8710-e3e6e0fbcc57",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "65358c5e-e480-4ce4-aeef-5f058a46cacc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6d5314bc-dfd1-4a5e-ab62-fe9c203d8fd7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be a valid URI",
                            "    req.credential.issuer = {\"id\": \"not.a.uri\"}",
                            "}));"
                          ],
                          "_lastExecutionId": "14c705d2-2e4c-4a3f-ab6e-3d7ed5b8f93e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d20b10d1-486b-412b-93d7-34770d3d23d6",
                    "name": "credentials_issue.credential.issuer.id:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0260964f-6f5e-4ed8-806f-feb1215b5a1f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6177ed63-57bd-4f59-a06a-e28b27268593"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "66f5b587-3e04-446c-b1a8-be0c3b0bd013",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be known to the endpoint.",
                            "    req.credential.issuer = {\"id\": \"urn:uuid:{{$randomUUID}}\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "f1142cd5-8772-4315-b007-50b495978fce"
                        }
                      }
                    ]
                  },
                  {
                    "id": "74810113-e6c9-49b8-b7c8-b58e6c7ff2cb",
                    "name": "credentials_issue:credential.issuanceDate.missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "49777ef5-3c04-41d6-8b3f-5f75c685bab7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "07415a8d-f64c-4d4d-8b43-3dc31856f418"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "397e69a3-db18-4711-b091-0d93b1e1d8ba",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate is a required property",
                            "    delete req.credential.issuanceDate;",
                            "}));"
                          ],
                          "_lastExecutionId": "3f88c663-92c5-4da1-b086-bfe72408aa4c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d1d8ff44-9e9e-460c-9b06-5777b0496df6",
                    "name": "credentials_issue:credential.issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dea0b7c1-755c-4b7a-98f3-44da0b384053",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c40991eb-f0af-4394-a29c-9840dfe3d450"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e85dda58-2534-495c-9a21-3e7219560b07",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not array",
                            "    req.credential.issuanceDate = [pm.variables.get(\"issuanceDate\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "16cc2c4d-8999-4640-86e6-3ec287a3d2dd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b0452ed8-aa6e-4286-91f6-cceb72ead5e2",
                    "name": "credentials_issue:credential.issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0cdb0867-8de0-47e5-96b1-976b1d0a4054",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "43d56ac2-54fd-484d-8720-a52757177550"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bce44db4-b983-4e8c-85eb-db0b5217fd6c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not boolean",
                            "    req.credential.issuanceDate = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "24efc601-461e-4e08-a907-2eddce856104"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8651f53e-d7b1-4f0c-a44d-2f49bc7531cf",
                    "name": "credentials_issue:credential.issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9e04edec-beeb-48a7-9f39-ef04b0addfd2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a9e317f6-1f26-4a95-9f5f-2e78226235d8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4fb0a9e7-0978-4451-8a6c-5f40fe2b9cfc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not integer",
                            "    req.credential.issuanceDate = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "8e595625-4123-4de3-bf67-ed5eeaef5789"
                        }
                      }
                    ]
                  },
                  {
                    "id": "93981ca4-d6fe-4d45-9a59-97a28d5dd40f",
                    "name": "credentials_issue:credential.issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "024125e7-4b5b-496c-933e-43638f76264a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "aef2ea7f-a50a-46e1-97a5-57ffdfb0c263"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1c50efb9-0a1f-4c89-98ce-329614e18019",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not null",
                            "    req.credential.issuanceDate = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "59f87242-6315-4367-90b9-4e38a3b6c502"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c9f6bdfc-2b20-4603-9f74-37b94f568396",
                    "name": "credentials_issue:credential.issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3ba85a69-10e9-4ed2-9e63-eb3b71905cf2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "73d007ad-92fc-495c-82e9-94642c6f6104"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "34a8b91e-9f1b-4164-8bf0-5cd89d815149",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not object",
                            "    req.credential.issuanceDate = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "f660a57f-4235-43be-aaf2-e1ab14cab6cd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9d3828a4-3251-41db-b522-1291073ff141",
                    "name": "credentials_issue:credential.issuanceDate:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5fdbca08-f818-45fd-bbc1-a2f1e177e11f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e0c5e7e0-4d78-41a2-8e46-82c077d87bc9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "15213b15-ae6b-41ab-839a-a0c369b458dd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be a valid XML date time string",
                            "    req.credential.issuanceDate = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "eaf0bf02-69ab-4961-8661-0facc8f783be"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2f9d766f-ede5-4b95-aeff-3f0c6657007b",
                    "name": "credentials_issue:credential.credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0a79cf22-43ed-42db-9eee-9c5487aecd13",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0e1dc15e-0b43-4523-b8e9-707389f4f203"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5c42cdfb-1057-4b97-9f75-7522bcf63db8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject is a required property",
                            "    delete req.credential.credentialSubject;",
                            "}));"
                          ],
                          "_lastExecutionId": "bee0ee89-060a-44ec-9c59-f4679f32a687"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a0d5991f-2376-4036-a9d9-aafc1168158d",
                    "name": "credentials_issue:credential.credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7567794a-27f0-4c79-a138-39b3376d4bf1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3321b84e-30e8-4d05-8f7a-86933002313e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "84a909b0-359d-4407-a3fd-b1c7d5355510",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not array",
                            "    req.credential.credentialSubject = [pm.variables.get(\"credentialSubject\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "945fbaf6-648d-4a68-8708-90eb6693c99c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0bb9650f-08e1-4ec1-941d-6448b06c1943",
                    "name": "credentials_issue:credential.credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1e7e6a71-a1da-480a-b9a7-2eea491c107a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "16582b14-ef4a-4938-9016-682e0b33ce3b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "17595336-6068-4b3c-8849-9cc96a17eda7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not boolean",
                            "    req.credential.credentialSubject = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "a463b04f-d644-4ea2-97d0-f1c5fd09f044"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8b6eb082-8019-4471-8517-19bd565820e9",
                    "name": "credentials_issue:credential.credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dc1b891f-810b-4b07-98a8-f790a3b94c46",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0b49778e-f75d-4787-8a69-40feca9ecb8a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "271e3600-404a-47dc-aa41-f35f169efc67",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not integer",
                            "    req.credential.credentialSubject = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "74d6bfb5-5d73-4b54-bcc2-ec9e7770fb40"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4fe179e2-81da-46ac-b3ef-58149d26365b",
                    "name": "credentials_issue:credential.credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6f4f22c4-188a-4c1a-899d-b8e160c5879e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "eea41e9a-7568-48e6-9015-e66b588c2fd7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c497911a-002d-4492-a8c0-6fe664f2a535",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not null",
                            "    req.credential.credentialSubject = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "e79d8eeb-4a93-4344-b111-6d435ae44a14"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e31c1e8a-92a1-46ec-99e4-61238a36d4e3",
                    "name": "credentials_issue:credential.credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "02f4effb-d33b-44d0-afe6-f18a32dd4807",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "15e9032f-2c41-427a-9acb-6aca906e594e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9d5b4023-4991-4150-ab63-34f798f6c431",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not string.",
                            "    req.credential.credentialSubject = pm.variables.get(\"credentialSubject\");",
                            "}));"
                          ],
                          "_lastExecutionId": "68d376b0-1f3a-4417-a737-9e7e417d8de5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "32343464-a8d8-4306-9020-08f4613d261a",
                    "name": "credentials_issue:credential.credentialSubject.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2c4949ac-bade-46bf-a401-d124e7c6a1e2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8309249c-3dd0-4a07-952c-6c51cd5a70a2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9e1940b8-304f-4579-9e67-e7337514ca8b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not array",
                            "    req.credential.credentialSubject = {\"id\": [pm.variables.get(\"credentialSubject\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "b06afd06-bf2f-4047-824d-ee0e74a524e5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3fd065f5-d10d-4a51-8928-33d2261eaac8",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d412e5d1-9f45-44d8-b4b1-593c6f2d862c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "79c0a371-84db-48fa-8c90-a76f47ee9124"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "29e26907-f9f2-45fe-b3d8-939d90916501",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not boolean",
                            "    req.credential.credentialSubject = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "127b3345-396a-4247-b15f-4150ec6f12b3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "34ed6cb9-4ba4-4af2-a11a-33338ae4fb51",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 2",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fb02fb1b-8e1b-48fa-b5b0-d3934b25d3e4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "33924fe7-2044-42b6-92bb-4355272af3b0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3d6f605e-7239-454f-86da-b7f3592ccf1d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not integer",
                            "    req.credential.credentialSubject = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "1b998490-b3e6-479c-8bd9-1509f15d6188"
                        }
                      }
                    ]
                  },
                  {
                    "id": "43d03990-c60b-4a9a-8cb0-bc372b6174a9",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 3",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5b5a4e6d-3208-43fa-8e07-f07192cec546",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3e124bab-223d-4e94-a2c4-5e855611128c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "182e7c1f-13bb-425c-8bb5-022baaedacfb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not null",
                            "    req.credential.credentialSubject = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "a1ab3901-43c4-472c-8910-863bbcb7dabf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6748c66e-e95a-4cf9-9a75-2de0082b5437",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 4",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b8b4b691-230d-489f-ac86-ce4575aeb161",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f2bfc84f-c494-4667-bc28-8f2f7b9b4e99"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f9ef49af-c86f-4c30-b163-491983df3e8a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not object",
                            "    req.credential.credentialSubject = {\"id\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "248f745a-85e8-4c92-a15b-b26c263f42fa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b0d30679-aa20-4b46-a075-783b35ee7927",
                    "name": "credentials_issue:options:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6cb187a6-a12d-4f68-b4df-45d14fc98737",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2faa8fc1-b849-49e2-be3b-f00a69a39729"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1933e2a9-8415-44b3-8781-2ba8c82c58ef",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options is a required property",
                            "    delete req.options;",
                            "}));"
                          ],
                          "_lastExecutionId": "d4de2ace-8594-4988-a25e-921a10d2d16d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6c395d02-bfbd-46b1-9baa-f37fcc90b01c",
                    "name": "credentials_issue:options:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fae8e18e-98b6-46ed-80bb-cf895ab02e92",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "647d9abc-549f-48ec-a153-94fa18478112"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6571d77a-fa22-4096-b56d-0926ad21839a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not array",
                            "    req.options = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "5246e2b8-ee8b-4b10-9647-7da480360cb8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4dcafc62-a845-48e9-bfd5-95b8f71b0202",
                    "name": "credentials_issue:options:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2a478e9c-cc9e-4a07-ac76-cd238976e76e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b42a196f-bce5-4acd-a367-68c4cc9657af"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "30e7e51a-faed-4400-a649-78ba665cfbd2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not boolean",
                            "    req.options = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "c513f7c3-3224-42fa-8356-cc513cdb36b8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c451a2ec-9701-4b95-82b6-f8fafba04182",
                    "name": "credentials_issue:options:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ab6dff20-6727-4829-aea3-7e7d479888b1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6f6f7c52-a2fd-4cc3-9073-07853bb37839"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bec7f864-8c32-408f-b22d-b198b870334b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not integer",
                            "    req.options = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "ccb9f599-729b-4ced-8e70-fb66a56691a7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "75e48998-1512-4b97-9ddb-578bec081a88",
                    "name": "credentials_issue:options:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "68288237-a399-47e1-8665-bba15ad7decd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ada54c94-8080-4561-b7ec-bd2c323241bc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4701e710-2061-47f3-a12f-926018af6937",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not null",
                            "    req.options = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "75beae9e-6a0a-4431-ba98-a2c8481034ad"
                        }
                      }
                    ]
                  },
                  {
                    "id": "159ebd51-84fd-482d-acaa-cf24236ba606",
                    "name": "credentials_issue:options:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "eff7c0cb-2f9f-46d7-831d-51072aded30d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e559ed4a-41d3-44f3-85b4-03c9981c496f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9c706dec-9f47-4c8e-92f3-816adbbf5ffb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not string",
                            "    req.options = \"\";",
                            "}));"
                          ],
                          "_lastExecutionId": "12c44249-42fa-4995-8f6a-12ed7ac49894"
                        }
                      }
                    ]
                  },
                  {
                    "id": "00e558dd-d398-45f9-b2ec-d77ee9591824",
                    "name": "credentials_issue:options.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ba7b08ac-204a-492b-b323-5cb53008bb3a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8b3a0f6d-5887-40b5-82f7-7327b785ac6e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "03f8c577-81bf-4ab6-bb45-bba7cdecd755",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type is a required property",
                            "    delete req.options.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "f8e7d0c9-328c-485a-9726-401846a2954e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "63e8bfe0-fb96-4475-b6dc-12046384ba04",
                    "name": "credentials_issue:options.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0f96f0d5-00b6-4925-b348-83193749c572",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7562f630-117b-4d06-9285-42d66035d381"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "35245ac1-33e0-4668-90f7-556417bf9992",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not array",
                            "    req.options.type = [\"Ed25519Signature2018\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "3cd3c3bd-291f-4374-af1d-716aa751d88e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e03f8e6b-5fa4-4d56-98fb-468e19045522",
                    "name": "credentials_issue:options.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d2a549f5-00dd-424e-8579-8eaa87cc0b7a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b3fd7550-42c2-41b1-964d-76e4025917b1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1d0e4a5f-7638-4110-ba35-7dcaabb0eab6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not boolean",
                            "    req.options.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "21711297-0912-4f18-8e9a-e62fea6a2d07"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ea11c752-4226-4a82-b8a6-c49c7e6f5fc8",
                    "name": "credentials_issue:options.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d5f703f8-6a75-4d61-a076-aaf2e5a7931b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8beb7167-ece4-4641-9341-7cd1fda1ed9f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7696fda9-cbea-4c33-96a4-65a546b5ee31",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not integer",
                            "    req.options.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "d1729702-8635-4f7d-af4f-6bc71cb86a44"
                        }
                      }
                    ]
                  },
                  {
                    "id": "58451740-c5fb-4cce-bc23-30ab9814c181",
                    "name": "credentials_issue:options.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "662d65e3-3017-4446-9682-99ee0d85c39d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "411be1ef-6251-4832-9b96-abcce4ffe2c8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "73e786a6-c0ca-4f2b-bd75-058e14de1f50",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not null",
                            "    req.options.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "a29c6aae-6ed0-4a50-aa02-778dacf047c8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1b1f9d90-b4b0-40b2-ad6f-be2e78384465",
                    "name": "credentials_issue:options.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5f46b018-72b8-409c-abf6-6711bddc545e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2b63054e-b109-4ce9-87dc-548e5684a4a8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "91c321cf-99dc-4cf2-8017-e3d98040bf07",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not object",
                            "    req.options.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "d9ef6808-df8e-48da-bd82-a1a959fdb8b1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6edec91d-18f2-4704-af26-72a38a0ea430",
                    "name": "credentials_issue:options.type:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c7d81c22-abca-4122-9023-e10466bd2722",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c32c8017-5a30-4228-ba76-8be800594c9e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "963eddaf-6ecf-4018-8ccb-d718dd9e0102",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be one of the valid values",
                            "    req.options.type = \"invalid value\";",
                            "}));"
                          ],
                          "_lastExecutionId": "fc48e5d3-ae04-49e7-bf55-f12d566abe76"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a514888b-9913-4327-acb4-767d5b5edae0",
                    "name": "credentials_issue:options.created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "db85e70a-bd59-4864-9996-fd1cff06c5c9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9592326d-103e-4a4c-a5e5-61b12c53ef63"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "274b12e2-5a0e-4c0f-9199-c0db87e046ce",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not array",
                            "    req.options.created = [pm.variables.get(\"created\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "6445988f-4b4a-4f8d-8f51-de52b33b2719"
                        }
                      }
                    ]
                  },
                  {
                    "id": "50ef6bcb-e5ef-4451-8206-badd4d09db7e",
                    "name": "credentials_issue:options.created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d607e068-e423-4000-9d5b-ba1e7281ce70",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1f6c113a-d1c8-4d4d-8e1b-621dd87eb5f0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f19a3280-8848-4c09-a123-54e82ce83789",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not boolean",
                            "    req.options.created = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "628946e4-bcec-49bf-941a-556ef3110ace"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a6e3fd78-b5f6-46ce-a498-c9e937235bff",
                    "name": "credentials_issue:options.created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6f6b7e15-fac0-4658-a7c1-f53a2d65e058",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9c6c38ab-69f6-450e-a3f8-b44a3d3f1a05"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6d81ba2e-9fad-4bf9-8890-3f9a917b1655",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not integer",
                            "    req.options.created = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "a8591853-2893-4fe5-a3e5-e80dd2ab1a25"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0575b429-3fea-4c44-bbfc-ba6f132f4c9f",
                    "name": "credentials_issue:options.created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0f063148-4451-4c3f-ac06-4b1f7442788c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c3534305-ac6f-4e49-9d59-0dea705652b5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c1575a72-5300-4088-bcba-b2de00d56903",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not null",
                            "    req.options.created = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "d188d7af-a8b9-4411-8827-e24f1326a1f5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a5bfa881-ca23-4548-b179-5dd77c463c92",
                    "name": "credentials_issue:options.created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ad6beb7f-4b30-4750-8164-32a8a2c78336",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bcc2393d-dd8b-4010-9c6b-e3bace212ab5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "55163539-aa99-4edd-afd4-b5828eedd0ac",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not object",
                            "    req.options.created = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "608058c4-e027-4497-8e14-81c85494433b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "898c668d-8f36-43ba-a7c9-5aac2f9738e1",
                    "name": "credentials_issue:options.created:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "43b868d0-3e49-47e0-a616-bdbd061f1f82",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fb35a2bb-f063-4d6d-8e28-25519fe3ee5f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bb24122d-e8c8-408b-ba5d-d32aaea5a397",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be a valid XML date time string",
                            "    req.options.created = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "c3cac98a-46a8-46db-904b-783711c205ce"
                        }
                      }
                    ]
                  },
                  {
                    "id": "37e7cd18-3b14-4326-922f-a77fb720ccba",
                    "name": "credentials_issue:options.credentialStatus:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fce2dd03-63e8-4f77-9abe-e569d073db2c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f566fb72-6219-4010-ae95-bc22be4f835b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "131690a6-b2c4-4a7d-8895-c5261271e088",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not array",
                            "    req.options.credentialStatus = [\"StatusList2021Entry\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "82f26beb-4fca-46e0-927f-9bbb2cc0e5ef"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3733f06b-6cc6-4325-a134-a6453d7ff0dc",
                    "name": "credentials_issue:options.credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8fd9d6b2-c10a-46e6-b305-33b021d1b126",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "64bef90b-d607-4bf2-bd9c-fcb3c072762b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ca02c8e2-9057-49e4-9058-9214d135b470",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not boolean",
                            "    req.options.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "a63a2a5c-0bc9-4c02-8853-9cf14a6d0909"
                        }
                      }
                    ]
                  },
                  {
                    "id": "88fd7501-651e-465a-8603-f46669dde818",
                    "name": "credentials_issue:options.credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7245b615-36e6-4a64-8d48-1934ed02ee80",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3aaa282c-56aa-4941-bf13-e9d2ef236e0a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c1f8921c-c51b-4665-9415-ae0c54a3a1a4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not integer",
                            "    req.options.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "2888c1e1-0088-4691-8199-68bcc6523ea1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "427f6dc0-1427-412f-b645-e8a193fdbea4",
                    "name": "credentials_issue:options.credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "aa28b0e4-6489-405b-89fd-4c27942a42cc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "becfb991-671f-4a8b-8d06-8c218996cdb6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "aedf4a61-3c64-41fe-a40a-6d283781674a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not null",
                            "    req.options.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "36d2c95b-8649-44ef-a0e5-4ff379c4f707"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0d9dfcdc-6808-4871-ab8b-b186d661187e",
                    "name": "credentials_issue:options.credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9b10f889-d8e6-4a4b-b42d-cf793f095cfa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "df7b0c92-4281-4801-a910-e6ee4b826088"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1d4b4894-418e-4547-a623-f0b3e6bfccdc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not string",
                            "    req.options.credentialStatus = \"StatusList2021Entry\";",
                            "}));"
                          ],
                          "_lastExecutionId": "a1a82e25-a069-455e-9848-da21cd876a90"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f3e2afe6-6d1e-4835-b5a6-ade0ec6cc71f",
                    "name": "credentials_issue:options.credentialStatus.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a135595c-dc2c-43c1-872e-c0afc3ccf0c3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "85075a52-4daa-4ead-970c-4ea4bd07c7e2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bde548e7-67dd-4cf0-a393-8adbc6cac0e8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must contain \"type\" when present    ",
                            "    req.options.credentialStatus = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "531205ae-ea3b-4353-933c-23196a19016c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "35a54df0-6003-4338-a051-694046e438a0",
                    "name": "credentials_issue:options.credentialStatus.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e3b7226a-3dff-409f-bc6c-7b6c4bdfffd6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "408eff50-df2b-4eb3-95fd-7935de9dbad2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "89367ec9-00e8-493f-8379-2a6a4280da7d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not array",
                            "    req.options.credentialStatus = {\"type\": [\"StatusList2021Entry\"]};",
                            "}));"
                          ],
                          "_lastExecutionId": "f254cc5a-ee08-429f-aad0-c3c89709a0fc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "da94f43d-bc4f-4c3e-8244-f631731f82e1",
                    "name": "credentials_issue:options.credentialStatus.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5df3f199-6f7b-44b7-9dcd-f1e3aa94d045",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cfc53e37-2d37-492b-aa2c-55ceb30096fa"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3ff29c4c-7a43-4ffa-bf92-d13e669bd45d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not boolean",
                            "    req.options.credentialStatus = {\"type\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "fbd16ada-31a8-42eb-b1da-66b83f06a100"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8be8383c-4d22-41fe-aa7f-1baabadfc14c",
                    "name": "credentials_issue:options.credentialStatus.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "488104ed-0ed0-415c-b095-cf0e2071a838",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a8c421ed-007c-4d38-9567-8372e9091231"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f968fb75-ec23-44e5-ad11-84a3e352f46e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not integer",
                            "    req.options.credentialStatus = {\"type\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "dadb669f-bed7-4e66-bff2-3c4bcf506f86"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3515895e-0d41-43ec-80d0-28d8918a2c57",
                    "name": "credentials_issue:options.credentialStatus.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "89a6463b-d87b-492a-9c46-2bcfe6c794ec",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "86df2f6b-e7b1-4a29-acfd-7422eaf39d13"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "921ab60c-29cb-4291-a5db-2d4692aaeedb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not null",
                            "    req.options.credentialStatus = {\"type\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "cfa97b26-4182-4aee-b822-3da5d408df28"
                        }
                      }
                    ]
                  },
                  {
                    "id": "420f5516-7196-48c7-b354-a56ee4bf59f2",
                    "name": "credentials_issue:options.credentialStatus.type:null Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "872c5eb2-e31c-4a41-b7b2-0209e0f20fb4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d9af371c-609e-4416-ada3-7e580c5096de"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "73924f85-e631-4b86-96fe-8496e849094c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not object",
                            "    req.options.credentialStatus = {\"type\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "e069880c-a0b9-4a96-a9de-2a2c83ce67ff"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2fce058a-5fbb-4afd-9647-0431c0f64b03",
                    "name": "credentials_issue:options.credentialStatus.type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e4ac540e-1a24-4fbe-a33d-07049cce722f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "809d6b8f-8719-488b-94f3-3daa73cbff60"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0e0f34c7-fdb1-4fa1-824b-071226ee0ac9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be a valid value",
                            "    req.options.credentialStatus = {\"type\": \"invalid value\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "8e43f7aa-c2c4-4775-9a7a-1c44485c93ed"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "258bca78-2f5c-439d-a33e-fc23a61f7066",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "8a52e113-07c4-451f-9721-6a926f9e62fa",
                    "name": "credentials_issue:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "eb4c7e36-28a9-4f38-aad4-2056c7b687a9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "5be279e0-4b09-4d48-82d3-d5da4bc67197"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b70621d4-5efe-42d6-845b-ae4597cf3255",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "06ccff3c-16cf-4720-b35b-a22c04343dd0"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "074910e7-617a-499a-bf62-d35fdc27e201",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "7fe02985-cd46-45b3-969a-a86922f97e03"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "ef1ee041-0382-46fd-b768-bc34dd62f901",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "8b9e4603-3ff6-4db3-bea0-e56935229b62"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "1206c4b7-4ae6-46be-9cac-6ba3e08498c0",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "a93e16aa-9522-41d7-84e7-cea3d65ed724"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "9eb23c9b-2556-4a5a-9ad3-1605dfbadafa",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "5f4e866d-f654-4970-a730-be6e9eac400a"
                }
              }
            ]
          },
          {
            "id": "de247a2b-b4a3-4e30-abc3-c77dae40c083",
            "name": "Positive Testing",
            "item": [
              {
                "id": "6488c412-cc32-43a7-8866-69e8494af7f2",
                "name": "Duplicate Keys",
                "item": [
                  {
                    "id": "a0a6dfeb-b941-4299-9854-ffa15bcb602f",
                    "name": "credentials_issue.credential.issuer:dup",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"credential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"issuer\": \"{{issuer}}-ignored\",\n        \"issuer\": \"{{issuer}}\",\n        \"issuanceDate\": \"{{issuanceDate}}\",\n        \"credentialSubject\": {\"foo\": \"bar\"}\n    },\n    \"options\": {\n        \"type\": \"Ed25519Signature2018\"\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "text"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "979927b1-a5a2-4dd3-b00f-b4ad4aaf55cb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 201\", function () {",
                            " pm.response.to.have.status(201);",
                            "});",
                            "",
                            "pm.test(\"response issuer matches request credential.issuer\", function() {",
                            " const { issuer } = pm.response.json().verifiableCredential;",
                            " pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "06243ee8-63d6-4140-a190-4157d4c0189c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "720befc7-5657-4b81-9f3f-75f51ebb560c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "62c19f7e-7361-4b9a-93fa-6bebb3fa1a79"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "383f1c29-028a-467e-b1ac-3a01c55dab58",
                "name": "credentials_issue",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "6277d726-4ca2-479a-89f2-cdca53ff9727",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        "});",
                        "",
                        "pm.test(\"response issuanceDate matches request credential.issuanceDate\", function() {",
                        " const { issuanceDate } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuanceDate).to.equal(pm.variables.get(\"issuanceDate\"))",
                        "});",
                        "",
                        "pm.test(\"response proof.created is close to 'now'\", function() {",
                        " const { proof } = pm.response.json().verifiableCredential;",
                        " const delta = Math.abs(Date.parse(proof.created) - Date.now());",
                        " const tenSecondsInMs = 10000;",
                        " pm.expect(delta).to.be.lessThan(tenSecondsInMs);",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "89ba6ffd-fcee-437d-ba78-a82a82e569cc"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "f588410a-d7b7-4af1-afc3-c582c965fbd5",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // noop",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "9c4f6379-c3cb-47dd-8438-caaf39b9b213"
                    }
                  }
                ]
              },
              {
                "id": "4422c3e6-8b96-4625-a395-36dbf0f62b61",
                "name": "credentials_issue:credential.opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "b21d6f9d-0226-472b-b7cf-f997cbb9c9a0",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verifiableCredential.id matches request credential.id\", function() {",
                        " const { id } = pm.response.json().verifiableCredential.id;",
                        " pm.expect(id).to.equal(pm.variables.get(\"id\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "9fcb6714-96b3-4d32-9adf-75d46bb168eb"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "67c2a13a-9489-4729-8926-45ff4c6662e0",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.credential.id = pm.variables.get(\"credentialId\");",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "c94e9880-8fcd-42c8-a17c-30c4e87da37b"
                    }
                  }
                ]
              },
              {
                "id": "81304a76-8ce0-49ad-81ed-676224866854",
                "name": "credentials_issue:credential:alt.issuer.object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "12790077-8d72-4a10-a183-ade7385bd0c8",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer.id\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " // Implementations may reduce object with just \"id\" property to a bare string",
                        " if (typeof issuer === 'string') {",
                        "  pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        " } else {",
                        "  pm.expect(issuer.id).to.equal(pm.variables.get(\"issuer\"))",
                        " }",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "9bc95394-bf21-4d09-a390-913fc0607557"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "7018a188-1581-4125-ae63-2c2672f18144",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.issuer can be an object with required 'id' element",
                        "    req.credential.issuer = {\"id\": pm.variables.get(\"issuer\") };",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "09760d5e-d86f-46e8-9534-2dde221f872c"
                    }
                  }
                ]
              },
              {
                "id": "d006e041-ba2b-48cb-8f09-f1a831bd37de",
                "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "1f931793-0e76-4944-9e41-ce475c1b6b85",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject.id matches request credential.credentialSubject.id\", function() {",
                        " const { credentialSubject } = pm.response.json().verifiableCredential;",
                        " pm.expect(credentialSubject.id).to.equal(pm.variables.get(\"credentialSubject\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "a1e1d36f-7e06-4c69-ab29-bbcde2454a24"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "5eaa0d2d-c157-4cbf-bdcd-050892fd53dc",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.credentialSubject can be an object with optional 'id' element",
                        "    req.credential.credentialSubject = {\"id\": pm.variables.get(\"credentialSubject\") };",
                        "}));"
                      ],
                      "_lastExecutionId": "69169704-a6eb-46dd-afcd-48f3477eec54"
                    }
                  }
                ]
              },
              {
                "id": "e91153ca-94fe-4896-8d75-4475c10d5133",
                "name": "credentials_issue:options:opt.created",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "a069aa46-6a4f-4d56-928b-42851cc5a8e9",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response proof.created matches request options.created\", function() {",
                        " const { created } = pm.response.json().verifiableCredential.proof;",
                        " pm.expect(created).to.equal(pm.variables.get(\"created\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "e63fe754-3bab-4721-bf7b-5d36d9a529f2"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "547eba9a-f634-45f2-a2c4-00f032bd100e",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.options.created = pm.variables.get(\"created\");",
                        "}));"
                      ],
                      "_lastExecutionId": "da7384c8-2b98-459f-96e3-6265291acaa7"
                    }
                  }
                ]
              },
              {
                "id": "7973f9b5-4f93-4f49-b13f-efdd60332140",
                "name": "credentials_issue:options:opt.credentialStatus",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "0b061373-b455-4a0e-ae2a-16e04f6a9ae6",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "2cd7b030-34d7-4046-b62b-186d433abd17"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "e489c941-227f-4a60-ab1f-6c48fa8b16b9",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // options.credentialStatus can be an optional object",
                        "    req.options.credentialStatus = {\"type\": \"StatusList2021Entry\"};",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "890a7cf6-cc58-42e6-9f49-6c67816c4661"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "5fd611b6-8a74-49ab-a951-381e10957008",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "697bca9b-26dd-4f73-a48b-669762b2bdaf"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "ad1e705c-890d-4595-8578-3a20161bbe87",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "eec9f78d-68dd-4cbd-9553-903b846a40f6"
                }
              }
            ]
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "f435e14f-3911-4818-9ba0-a78124dc9b59",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "pm.variables.set(\"credentialSubject\", \"did:example:123\")",
                "pm.variables.set(\"issuanceDate\", \"2006-01-02T15:04:05Z\");",
                "pm.variables.set(\"issuer\", pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "pm.variables.set(\"created\", \"2006-01-02T15:04:05Z\");",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credential\": {",
                "        \"@context\": [",
                "            \"https://www.w3.org/2018/credentials/v1\",",
                "            \"https://w3id.org/traceability/v1\"",
                "        ],",
                "        \"type\": [",
                "            \"VerifiableCredential\"",
                "        ],",
                "        \"issuer\": pm.variables.get(\"issuer\"),",
                "        \"issuanceDate\": pm.variables.get(\"issuanceDate\"),",
                "        \"credentialSubject\": {\"foo\": \"bar\"}",
                "    },",
                "    \"options\": {",
                "        \"type\": \"Ed25519Signature2018\"",
                "    }",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};",
                ""
              ],
              "_lastExecutionId": "51512562-7e82-430e-b13a-4dee5c3201e8"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "db91bd3c-36c2-4da8-8bf3-1f85c1e86493",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "025ebfa8-45c8-4390-8f99-3e0f63989850"
            }
          }
        ]
      },
      {
        "id": "512d7416-24b9-42d1-b0f5-fc73143d9d40",
        "name": "Credentials - Update Status",
        "item": [
          {
            "id": "2b23d57b-5d4b-4597-a533-1799f1365998",
            "name": "Negative Testing",
            "item": [
              {
                "id": "95e13557-72ad-4b39-8fb1-66212564d3ce",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "e7ac1ccd-4c51-4f38-99a4-7d091ac3aef4",
                    "name": "credentials_status:credentialId:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "43e173d3-97cc-4e7e-b22b-0ce0488e663e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1aa39579-2f9e-418b-bbc1-23d46fdbe3dc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "85773f58-f221-46a6-8636-18538557659a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId is a required property",
                            "    delete req.credentialId;",
                            "}));"
                          ],
                          "_lastExecutionId": "3d33e6a4-cdc1-4705-b171-8158f7785df4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f166c9ec-b6f8-4978-a96f-c71680090587",
                    "name": "credentials_status:credentialId:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "eed1ddcc-087d-4890-b6be-3690798613b0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "11597cfa-0015-4a2b-9cfe-5a3631416095"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6331b3b4-4c6e-457a-9810-000f3fca0493",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not array",
                            "    req.credentialId = [pm.variables.get(\"credentialId\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "cebca38a-6faa-472d-be1e-a239a3dde0a2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "522d593b-0e8a-4d2a-822d-89366fccf39f",
                    "name": "credentials_status:credentialId:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "788aec0a-f67f-41dc-b8cb-650fcec8b104",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "90db6aa0-edb5-4011-b5fb-9705733b0977"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "236be24b-5e73-49c6-9a53-36995cc82849",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not boolean",
                            "    req.credentialId = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "0fa8f2bb-bccd-4d4e-8950-fd16867b49b1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4b22aabf-aa2d-4906-ae07-e2e462e684cd",
                    "name": "credentials_status:credentialId:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "09a8011d-c29e-4fd3-986c-b514fe41c493",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d67e9a57-4374-43ca-8ccd-91dc1bca881e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2cde2565-172d-48a6-a9a5-c564f248f619",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not integer",
                            "    req.credentialId = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "42bd7353-ad19-4558-8d13-f3638db385ed"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3272db06-20d9-4170-87c2-309eab046938",
                    "name": "credentials_status:credentialId:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3575c0ad-b872-404b-a661-c783dfdcfce2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "844f4de1-4b09-48d7-ad1b-b5cad9df1bc3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4efdba8d-0eaf-4590-966c-d9e97ebf4921",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not null",
                            "    req.credentialId = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "92aec2c0-3708-4e7f-9852-dcbeaaf36c9d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7dd755bc-a0da-4587-bc30-4c6ca7c4aeb2",
                    "name": "credentials_status:credentialId:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b9f1906c-a201-4605-9e5b-21f6e0c84d50",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "eb6cfd62-89c0-4133-8a2c-3785fdf0bb9f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9da9b2a9-d0c0-4290-a6d2-5b5b7a23fbf8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not object",
                            "    req.credentialId = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "ce866bee-d14e-4404-9791-474d793b9565"
                        }
                      }
                    ]
                  },
                  {
                    "id": "690b0977-af9e-467f-9530-85fda849778f",
                    "name": "credentials_status:credentialStatus:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "063e4531-d674-4e8d-ad68-d850bf99e793",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2a0671ed-6de9-4ab9-b154-b5531dbcce33"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a9edfbe6-435f-4477-b917-0a48db6c7b71",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus is a required property",
                            "    delete req.credentialStatus;",
                            "}));"
                          ],
                          "_lastExecutionId": "29426f89-85af-4148-bcf2-f5e4e04bad05"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b3ffcee6-95f5-402d-884c-91c81732672e",
                    "name": "credentials_status:credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5c5f9f9e-98bd-47aa-8064-e62dd0787eef",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bcb89996-6ac6-43f2-8be2-a50217a23e92"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7eeea931-8f5a-4cc2-8eee-e46efc21adc0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not boolean",
                            "    req.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "08d9e400-0d06-43e2-ac4e-3f513744b5c8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b1d38695-a289-4369-8f3a-faa6f3f5b74c",
                    "name": "credentials_status:credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "062d53fb-d4ee-441a-8d1c-3e69797e8e17",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7c7d282b-78ca-459d-a9c6-5686a27f2d77"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7deb3947-9534-475f-a7d9-b221d2c15e45",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not integer",
                            "    req.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "325e5df6-917c-41c4-a54e-90d26b234029"
                        }
                      }
                    ]
                  },
                  {
                    "id": "06ae2acf-3ddb-497b-97f8-04603437c844",
                    "name": "credentials_status:credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "01a84721-ef98-4e30-b9d7-e6d30ffe5caa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2d1c1f63-1084-408f-9fa1-7de74779772e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e0bb350a-7193-4a03-9f81-efe4f70c9e1e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not null",
                            "    req.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "49ca30ee-46f4-49a0-ae41-00776e161905"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b14ce581-8ead-4412-b68d-567a6ce6b608",
                    "name": "credentials_status:credentialStatus:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "320a21f3-2da6-48a7-b105-7b59ebb6a6cc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "531cbb24-0a56-43c0-a6ae-c6b7c61402cb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dd4bb9c4-5808-4fda-baf6-808bc77aa6eb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not object",
                            "    req.credentialStatus = {",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"statusPurpose\": \"revocation\",",
                            "        \"status\": \"0\"",
                            "    };",
                            "}));"
                          ],
                          "_lastExecutionId": "1f10f03b-b6d6-45d8-855c-eccbb59a872c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "678bacbf-c9c6-4156-a214-eeefa8781445",
                    "name": "credentials_status:credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6d9edd77-ea00-4be1-b52a-28039ad17019",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d7df9930-557b-4856-930a-4a23832d8570"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "12ebd460-6f31-4719-92a9-5a299e3a39a9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not string",
                            "    req.credentialStatus = \"StatusList2021Entry\";",
                            "}));"
                          ],
                          "_lastExecutionId": "eb0ed69b-fdad-486a-8abb-1a5ace67f911"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3aad51ca-cbf5-44a3-b75d-9e73b605a4f9",
                    "name": "credentials_status:credentialStatus:too_long",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "119fb6cb-75e8-4e22-a0dc-d95942e0d444",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "41a2e637-bf1c-422c-a971-790599f04ae7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8aefa511-2b33-4187-867e-6f7e0a019a79",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus can only have zero or one elements.",
                            "    req.credentialStatus = [",
                            "        {",
                            "            \"type\": \"StatusList2021Entry\",",
                            "            \"statusPurpose\": \"revocation\",",
                            "            \"status\": \"0\",",
                            "        },",
                            "        {",
                            "            \"type\": \"StatusList2021Entry\",",
                            "            \"statusPurpose\": \"revocation\",",
                            "            \"status\": \"1\",",
                            "        }",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "4c86257a-ee86-4416-a27d-ad537501bb12"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4c3c7512-82d1-4d24-af58-c3bf77307445",
                    "name": "credentials_status:credentialStatus:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "08334c60-b8ee-4c40-a946-6300ca272efc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8a0564d5-d115-4102-8d67-88b5e1774fc6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b9a365ac-f649-4bdf-b6bc-c19c9be8e59c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not array",
                            "    req.credentialStatus = [[]];",
                            "}));"
                          ],
                          "_lastExecutionId": "a6ab7c1d-9344-4b9d-85db-1f0bdebde22f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5fd740d9-7dbf-46c5-a405-cc1dfca88c6c",
                    "name": "credentials_status:credentialStatus:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "caaf857e-4d4d-43ec-a766-2d4a1661d259",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "58de9650-3553-464c-b90d-546417f2df36"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dfb5040d-c83b-4fba-9db4-5e32b8dbb49d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not boolean",
                            "    req.credentialStatus = [false];",
                            "}));"
                          ],
                          "_lastExecutionId": "2bbad289-e219-4d68-90a9-a8c6efe1707d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8d7c4184-3b0f-4408-9cd3-d1f381fa0ec9",
                    "name": "credentials_status:credentialStatus:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8fb0d124-5736-42ce-8491-1e4a9ce25e01",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c3221e45-3dc1-47f9-a45d-c8005e32df50"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d4fcf127-db56-4fa1-bb68-acc3bd1313d8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not integer",
                            "    req.credentialStatus = [42];",
                            "}));"
                          ],
                          "_lastExecutionId": "7d795423-839d-430d-8173-1581a5a9e176"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7fab7d28-8cc8-4e15-b6ae-48f9f8397ae3",
                    "name": "credentials_status:credentialStatus:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "74fc6e25-1070-45fa-8607-c2f805e831ca",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "62a37f90-d79f-40d4-b68f-079560aae88d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0ed54de3-cbe0-4c26-909f-323f4fd7fa09",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not null",
                            "    req.credentialStatus = [null];",
                            "}));"
                          ],
                          "_lastExecutionId": "19acf003-4220-4bc0-a1f6-ab2e64a0ecca"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8f60dc41-a1fe-43a7-b490-f0664060f84f",
                    "name": "credentials_status:credentialStatus:item:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3ba544fb-30e3-45ff-ba1f-701681dd0ad6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d78c7745-c0c7-4248-a3d4-dfc233c98678"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b115e632-ee36-4627-bd3c-2a352056c2a1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not string",
                            "    req.credentialStatus = [\"StatusList2021Entry\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "0ef09137-bed5-4d54-bfca-ab1f6aecaab0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3ee4c387-8b3f-4ef6-8ce9-f3bc9aab859c",
                    "name": "credentials_status:credentialStatus:item:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "70b51e0e-f0ee-4362-8344-ca56817528ec",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3a7f051e-0f31-4637-aea0-b9e08c12a200"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c8c0bf83-2cc4-443d-8eac-8a30ac2ac54f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type is a required property",
                            "    req.credentialStatus = [{",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "cf45a331-12be-437d-b7ac-64703b7ed1c9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5873383b-9103-444c-867c-0c9c8ea642ec",
                    "name": "credentials_status:credentialStatus:item:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "283cd83c-cc1b-432c-ae44-0ac851f43ee7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9882538b-7de4-474e-87ce-38c9d9d918ce"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ca374ff4-03be-4302-96ba-9e8b35e4800d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not array",
                            "    req.credentialStatus = [{",
                            "        \"type\": [\"StatusList2021Entry\"],",
                            "        \"statusPurpose\": \"revocation\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "2fb04248-70bd-49f6-9777-55db207b21b4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ef1879a6-c537-44f2-aa28-51a002269f33",
                    "name": "credentials_status:credentialStatus:item:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "44a0cf66-d31c-49d0-85de-a34c182c38ec",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d9c6b54a-2a4c-4493-a74d-f117e16df722"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "84358b7e-d2fb-432c-95b4-efbeae07fb79",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not boolean",
                            "    req.credentialStatus = [{",
                            "        \"type\": false,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "f66b4304-7851-4af8-86ad-cbb473a520e8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "559f01e4-2240-4264-9bf8-2697b1fb3c3c",
                    "name": "credentials_status:credentialStatus:item:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ae7523f7-bcdf-428f-807a-229e1defc0cc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1ee5b7a4-9513-4ed6-a3ff-e5b252a8ce8a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "57b1cee6-e97d-4266-ba74-96df990495ca",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not integer",
                            "    req.credentialStatus = [{",
                            "        \"type\": 42,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "a1d4d1f7-f1cc-4e86-bddc-81c0e6a3f175"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f9979c1d-f21c-4e47-a437-28d59f0d6841",
                    "name": "credentials_status:credentialStatus:item:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "55590826-7194-4b47-8e7f-82eeadeff31a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "585f21e5-1fdc-4db2-856e-47cb69792286"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "293996de-aad6-41a2-bd9d-21c8e482d1c7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not null",
                            "    req.credentialStatus = [{",
                            "        \"type\": null,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "0cdf6345-7247-4eeb-a63a-552e6321e0ff"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8539da2c-45c2-41f7-ad64-1d800920a4a1",
                    "name": "credentials_status:credentialStatus:item:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "158e3b3d-1efb-49e6-93f0-39aa6b2e79ca",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2713e510-8af5-4025-b754-5ad5b7a8f410"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2938c59d-42d8-404c-ae04-7758bdbb8087",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not object",
                            "    req.credentialStatus = [{",
                            "        \"type\": {},",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "822c1a18-a052-4f05-ad0a-373839271eda"
                        }
                      }
                    ]
                  },
                  {
                    "id": "153322bd-272d-4d90-afbe-7a30e77fb19f",
                    "name": "credentials_status:credentialStatus:item:type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7ca62bba-cf32-41e7-85c3-58a155eeaa96",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f6b8d56a-c71f-46b5-b4fc-f30ca1ff1da6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c13f0beb-43e4-4dad-aa0e-595615984f76",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be a valid value",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"invalid value\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "0850629f-c0cc-454c-bb4d-fe3ac0eacd66"
                        }
                      }
                    ]
                  },
                  {
                    "id": "65f1b494-7da5-456d-9025-7b488b7b5330",
                    "name": "credentials_status:credentialStatus:item:status:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "62a7a8d5-7a55-403d-9227-3e6f9f573ed2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "358889a9-0c32-4c21-917b-01bd0b9c7e3c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0482faf7-c99c-4a16-8c11-99a19595ef97",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "5c39155a-90e8-4692-b185-c4fa5e33524d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "20dea589-279b-4f80-8eb3-00bb63437106",
                    "name": "credentials_status:credentialStatus:item:status:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "45e0bde8-80df-48e5-9d78-c0702e51edb9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fd6e945a-ad4d-4e23-9be5-9b4cb34920f2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8812a08c-d142-485a-a5ce-96e780028886",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": [\"0\"],",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "c66143d2-f7a3-47e7-beb2-5be68c090edb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "262bb59e-de07-409c-8e43-370a5d413f5d",
                    "name": "credentials_status:credentialStatus:item:status:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4f05933c-fafb-4d49-a7e8-f1e83bc984e8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b04dc5c0-f058-4433-8441-8c4a3db7324e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "974834d8-4726-4572-a09a-376d456dba51",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": false,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "32ce817c-4659-43c1-943e-28fb69fc2d40"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3d1629e7-26cb-43bd-ba64-2321861e77d7",
                    "name": "credentials_status:credentialStatus:item:status:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9953cc5b-abed-4995-89ed-591d64aa4273",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1bea4736-4e9a-40ee-bb6f-8dc317e91e62"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6a3bc131-c53c-4b51-8d3b-7f46f2311eac",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": 1,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "65870cd6-91d3-4149-aee3-67be655124ee"
                        }
                      }
                    ]
                  },
                  {
                    "id": "43124b06-68ad-48f5-9fa6-8dc3838711c5",
                    "name": "credentials_status:credentialStatus:item:status:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2625404d-e0fe-4940-aec9-644a098802d4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "65b25667-6c59-4cb5-80b2-0c9f4c616577"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cbc1d7ed-a6a6-4399-9af6-b42633a25d90",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": null,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "9176a3d9-aa7c-4310-98f4-326a38769958"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1fa33f79-2813-46a0-9beb-04f4742d3056",
                    "name": "credentials_status:credentialStatus:item:status:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9839287e-14f5-4fc4-87cc-e111ab5739f5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1315237e-05b5-4735-82d8-5070c1061c6b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bee2e3ae-7eb0-48cf-a6ab-a7ba35fca001",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": {},",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "22aa2dcf-e8fb-4116-812a-8412b209d270"
                        }
                      }
                    ]
                  },
                  {
                    "id": "16a42ec7-4f0c-461a-8b1a-e497fc4a081a",
                    "name": "credentials_status:credentialStatus:item:purpose:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9d225e49-2e4c-45aa-a79e-972ecd186b9f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8ccaac9e-1e91-4a5f-911b-6a038fd4534d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "08d4be95-eb92-4e4c-8d61-3e3ab8fbcee1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "4e2b8c3f-96c5-4f0e-9369-a9dc4065a35f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9ad8532c-4db2-4ae8-9bf5-b8d72e2745ec",
                    "name": "credentials_status:credentialStatus:item:purpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f84ad7a0-bcde-4295-896c-617f073cf143",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "35796ac3-95fc-45f5-b199-b089bb04912f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "becdea5e-f1af-4589-9ff6-55a902c2d2c5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": [\"revocation\"],",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "126d2d8a-a9ed-46d3-8966-1b18983a3a2b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "928bbc1f-8cd2-4d2f-9716-d579f7e7cd71",
                    "name": "credentials_status:credentialStatus:item:purpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "debe6e08-66ff-4c4e-a044-82f17261165a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a981fd2c-49a3-493d-a15a-1afd88920ca1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2a117239-4427-41ea-9e2a-f49f276bc517",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": false,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "8b15d9d5-615a-4cbc-9c54-fc044aa6b9ed"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2c6f803c-9ab4-459a-acd8-4a742fc9890e",
                    "name": "credentials_status:credentialStatus:item:purpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0539e5f3-cd8a-4c4b-b917-0be5f0c8f061",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8df9f170-01eb-4c7d-93a6-be2002eadd26"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b83b4623-7a45-4610-9f52-3041eeef720f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": 42,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "28f218fd-0151-4113-b2d1-a203c4eee345"
                        }
                      }
                    ]
                  },
                  {
                    "id": "10b8a5e1-e519-4da1-a65e-4e3dbabbac3e",
                    "name": "credentials_status:credentialStatus:item:purpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "44edd2fd-7c84-4e0a-abeb-dfba21e2b2d3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "37afe051-e1f6-4e5f-a522-bef94575592e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "751963b7-2964-4e93-9947-820af8af207b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": null,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "8b642802-f440-4c71-9207-0c25c5dcd264"
                        }
                      }
                    ]
                  },
                  {
                    "id": "41673fb8-5697-4d21-9f3a-6158ae07582e",
                    "name": "credentials_status:credentialStatus:item:purpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0e922dd6-91b2-4841-a44e-6c9671481ac2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6a8197f3-5837-4ea7-9bb1-15b663da81ba"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "52455a78-fc3d-463f-b313-97222d51c83c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": {},",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "998266d8-dd86-42b6-837b-edfa238e3a9a"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "c14f554f-1bad-42af-b7f6-79070a5ce58c",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "5942f64b-c769-4a23-b6cc-3e995c172584",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "56c8104e-806a-492d-a2d1-1a184c7d102c",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "a4c09820-51f5-4257-b58a-2b88093741ef"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ddcb8c49-c148-4195-8254-d3a5c6307729",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "fc54da23-7797-4ce8-82f7-2747ce872d37"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "7a4f8751-2810-4b5b-a1ff-3a003bb6b3a3",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "55b8a4cf-f72a-4503-9a46-df8ba4fbf0cf"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "4edf483b-0d71-443e-b27a-3357c1528bc3",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "a8ac769d-1909-47f5-bbc5-1a3cdb20cf00"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "3b593dfd-f087-40c7-bf0c-a240445644b6",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credentialId\": pm.variables.get(\"credentialId\"),",
                "    \"credentialStatus\": [],",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "30d71114-878f-45e6-bbd7-3729e9ac1b65"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "8172dcd1-4bcc-416d-89dd-1dc2d3ecb00e",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "4abfb49c-9ba1-44c3-bbf9-12793dd748bd"
            }
          }
        ]
      },
      {
        "id": "0cfdf7a4-f81d-407a-bc20-a7a54f7255be",
        "name": "Credentials - Verify",
        "item": [
          {
            "id": "2668dae1-9f7a-4ef2-abb5-49c8e37f5452",
            "name": "Negative Testing",
            "item": [
              {
                "id": "bf7c50bb-d7e5-40b4-b936-c44236f08af5",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "4bd886c7-b828-4e6b-848e-0f2f50b32000",
                    "name": "credentials_verify:vc:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1e8a2e1e-c603-4521-adfc-c09798bae6c3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "20c46fa8-e3de-468f-8bf0-2d94a98ae081"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6daaaedd-51a7-49f2-9066-b051cf013253",
                    "name": "credentials_verify:vc:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": \"string\"\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "76aff418-373b-4ab7-a537-f0d956655d7c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "68367806-2a02-496d-9ca3-ad42c0a3998f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ed9778b8-caf9-4136-9b2e-bab91d0b860e",
                    "name": "credentials_verify:vc:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": null\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "66a3878f-8ce4-463a-b56b-c4a568ade03c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "24991782-b992-401d-be53-d311c56669bf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "becb3411-8653-492d-bdf2-2cefa964845b",
                    "name": "credentials_verify:vc:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": 123\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "419617d7-8659-4a16-b4f4-c9b77484bf93",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e594ff85-620e-4611-8202-693442760ed6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8a7d6f7f-5ed1-466d-9bae-0a82fc6d3753",
                    "name": "credentials_verify:vc:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": true\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "40b0cfb1-e2e3-4466-a1be-3f1c5d03469b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0e0fa056-f594-438f-a871-dd3e7c5adfc1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b6eea00a-a563-4d1a-8ea5-acefbba0864d",
                    "name": "credentials_verify:vc:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": []\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "aea49208-b093-4e88-9b5d-770a9315f8a3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "62781918-3509-4fe7-98c0-5dc56f521dfc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "422d28b1-0d0a-4dc0-8b62-b348d3dce66e",
                    "name": "credentials_verify:vc:@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..V5PnQzCWxrPiCYT-WAyKAnypebgwYeD7lX_hyIjFa_lbJje23pZAfFdgnlqBnXLd19Ksa8fZpCE9TN7kAjzxDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1055166e-9ab2-4c80-aee1-c13ca94e8a30",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6194421a-88c4-4e28-89dc-62e2ac4b7695"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f3b69ad8-c6d9-4b25-8e29-d2dc620e29e4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "194865f7-f618-4edf-bc5d-9618888f9f8d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c653ab14-dba6-4bdb-b69d-22b56443dbdc",
                    "name": "credentials_verify:vc:@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1e91280b-0ea9-4986-8746-555631f15ff9",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "09b414c2-469d-469e-982f-6884194332d9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d5f1333b-19e6-466f-876d-58e9ec15b16b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "87da8148-d757-4c93-9fb7-ea9321d60ea6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5311cea4-13ee-4e90-817f-17a198dd4eb1",
                    "name": "credentials_verify:vc:@context:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a7fd7c49-cf96-44bd-a6e9-1b2025fa4489",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "98526efe-155e-4a3d-ac1c-bbc2ca553d7d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d3e12e57-82d2-466c-9bbe-cfc0a13c9760",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0584630c-6d32-4e6c-bd27-afe01cf8ae67"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c396e959-0252-45c7-ae47-d13ff6c9bfc2",
                    "name": "credentials_verify:vc:@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "955d85a4-bbae-4356-8951-25b621e2587b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e9fbecfa-4c30-4f88-a43f-f430fae84097"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c14c9744-583f-4685-b8aa-2d02cb6083a1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "61e17970-9215-4dc5-98f0-a4e8289a504e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6212adad-4931-4283-925c-5d73cd5bd0ac",
                    "name": "credentials_verify:vc:@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": {\n            \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n        },\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..w4xJhf2l_4JzwE4kp8pD8dNJdWSaws5HiBgal8zFzB6i9p05tmPITdsrUttpUwopW5UAq9M_EZVqlz-kRfSFBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3c34a088-039c-4841-b185-aef6c6bcc70f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "575c120c-27af-4f9d-8a1e-d70c56ace336"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6af5cd73-7ca3-46bf-bda7-102a8e83fda4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "81cefa41-7cb7-4446-8e74-eec533015b29"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9baf360f-58b1-4910-803a-3cbd01ed3964",
                    "name": "credentials_verify:vc:@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": \"https://www.w3.org/2018/credentials/v1\",\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4cda61bb-0f4c-4fe2-9cc4-fe328fd8c34b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "44acbb09-1ac8-47a9-87bb-065f7e7bad9f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5e294bf5-1382-433a-b849-961d8ad4d50d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b72a0c1d-d48b-49d5-9a8f-04acd9895325"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7bd52224-7245-4ff3-abd0-a54c8fddb230",
                    "name": "credentials_verify:vc:@context:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e6af13d7-68a8-47d9-af7f-4b8db224811f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6deb9de7-172b-4a82-b7c3-be5fc5f16e47"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "aed4c4d6-12ea-41a8-a4e5-62ed452688c9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "187028e5-0443-49bb-896a-23a911b203c0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ba806c42-aee7-4417-9461-7c6c3289c610",
                    "name": "credentials_verify:vc:@context:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "aa125cb2-0c28-4e42-afa4-560e70e2a272",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "df38a880-8cbb-4e43-8352-3da1ac233b93"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "64dc8564-3b75-4735-9332-a14e01bd516c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "71cf9b57-33fa-4e14-8427-85a6d15e4e6c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d3a003d7-e7c6-4e88-8768-f0186e4651e6",
                    "name": "credentials_verify:vc:@context:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ce1e06e0-57c8-48d1-aa9b-80de015aaa59",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d19f247b-ad1d-4874-9c54-89112adf3e1c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "37b300fb-7770-4387-aacc-982ef0b14895",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7eb909cc-949e-453c-bac2-f91a49ec1888"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2e368299-f1ed-49a2-985c-d0a588af2b1f",
                    "name": "credentials_verify:vc:@context:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "af134d57-6212-4f6f-b522-c9a3273a0507",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "fcfda9b6-7dac-4a76-8c0e-0d235876a165"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "be4a3d83-103e-4979-8f9d-8235a2e37f0b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e45241b7-8c0e-4fb5-8715-918e8ad2eaca"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a19271d0-4616-46f8-8374-1fbf9bdd2f04",
                    "name": "credentials_verify:vc:@context:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            {\n                \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n            }\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b1b822e0-0c20-4111-89a3-daceb69c462c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "de80ce6b-9dba-4e22-904e-87114bd07166"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2d040edd-21b7-4784-83ff-7db03cf44198",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "196622f0-52aa-407c-82d4-4f1ca7fcfd03"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8ab1a39a-a254-4fb9-aa36-a3030ac5257e",
                    "name": "credentials_verify:vc:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": [\n            \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        ],\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..iom-sOLAz9-9FhadLRpqOYXXBhx4Rgwa3I3w1oh087xFQqIMhVTzcSpHCGdGWu2QT1KwrrgVAXPeTT2EthmxBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ed9c197f-e1ef-4155-bb14-ecd7c7a257d1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cc182c30-b771-4cd4-a850-04c7c7ad0098"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a13a987a-c7bb-4802-9fa2-c643f2854294",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ec3933e1-6cf2-47dc-9f7c-6743c36d9c82"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d8562185-c19f-4bf9-8512-dfca2b8bd657",
                    "name": "credentials_verify:vc:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": false,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..xftqB9cBFsSe226cWEZ4wr5sfxlAOJYYo6yjwPCVeHDdk6OoWGjZQGO7xXpSidrrr6e1imP18LiFK34xtRWADQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "141b5b41-6bd3-4b2b-aa7c-ec6c536e119c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4e39b637-dcf6-41fa-bdad-d63f6df17104"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "15e781b8-49d8-4ca9-9207-ef798193279e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0489b137-a31b-4b7e-a886-cf1d3b89a234"
                        }
                      }
                    ]
                  },
                  {
                    "id": "24406f5b-696b-44b0-9115-bd17222b5310",
                    "name": "credentials_verify:vc:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": 123,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ZqV-qqLOh_Kb4vAdXKBfmFdNyv3FzXJAIYV9JltcYGDAefU3OUOnoaAU2WSEufkuYkvczxfRLhrMKgkoVoIRAA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2ca607ac-5945-483b-ae8e-e32ba23fe067",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5879d252-0c32-4331-9d97-7144ec06c04b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "acb7d53d-0172-4580-9cde-de9a32d2b2cf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "29ca36d6-b7b4-4f0c-9047-9a84975a76ba"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6af935c4-a0f6-4b80-ae66-258753b51a51",
                    "name": "credentials_verify:vc:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": null,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d29228e5-549d-44af-8dbb-4c24aec23333",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f04dc482-678a-4548-82d0-5dfca2ec8c14"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9232de59-f11a-4e5c-836d-f9d4b0249aeb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cd53d1e6-238c-4868-bf95-f1ae188a95db"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5893f59d-b119-41ca-ad8e-c69b165710c8",
                    "name": "credentials_verify:vc:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": {\n            \"key\": \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..0Nrj_srTLYyA-9ZVA_dkVGjUcKx6xELHjbbdppEMFPGEN5c2gPXgstNRjnrr8hhMMegSAbvGASKWseBXGR9uAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4556f7f1-a347-4e2f-b6fd-8053bafc50c8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "eae663bf-e695-42e7-8597-6aa135db719b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2eb2d1ac-50b5-42f1-a091-7dc8955e33f0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "72b2b66d-cf1f-4a48-86c3-2aabfa452a2c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c61fee8c-010d-4196-bc63-620b5f8c7ec9",
                    "name": "credentials_verify:vc:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Bx6sv21fSmT7fCCxU3fDaLhEOhfRK8llXSiFTgApd4PHot00nVjhaKQyhBW9FfFmJljstlOV_Zff164cxOKiCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8e0774a9-aaa0-4c3a-8b36-17c2fc8f08ef",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4c0c783e-04c1-4031-9357-f5a7917d1ea8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "218e0550-8709-4d76-b30f-8af54af8113c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "35b59bdd-70a9-451e-9357-47455635e3cd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7501aa59-faeb-4f62-8d63-52e853a3907f",
                    "name": "credentials_verify:vc:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8cf79ab2-615b-4f58-8cea-8eace442de3b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "fe308bb9-1201-45d9-ba17-2819cf5500b6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4cf80c13-34ad-4f9f-82b6-7afdd2aa9701",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "95098000-83d8-40bb-9128-cdf37f32371b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e1154499-a024-4173-a4f7-a54b3f968366",
                    "name": "credentials_verify:vc:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a31e909b-071a-4e1d-9d71-31cb8c861a0f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "136a4bff-1673-41fd-af3f-fde50179b085"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "03dbb514-bf87-47d8-be46-6f2dcf881018",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cae55baa-1ba6-449e-8b09-c42206252a2c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aa52cfa2-7402-429f-919b-8fee87875499",
                    "name": "credentials_verify:vc:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "257fabfb-0694-4c26-9b6b-724e036eea7a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c29c8c88-c8a9-4083-84d6-b8fd09b32503"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "14caa0e6-76fb-43ef-a547-c1c9ece80c79",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "39bc8591-6a1f-4ad2-8405-9673bb366697"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c90a0804-c933-4669-812d-7b936cbc2867",
                    "name": "credentials_verify:vc:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "04dd6ec0-c707-42e1-b404-344293119533",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = {\"key\": \"VerifiableCredential\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2bfbda79-970c-4d3e-9abc-d4f46e6db4c7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "89ad029b-acc2-41d9-8c44-9e0bf2d8e0eb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0b64fbb7-49df-4e70-b892-6c31e3958c7f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9718d225-4dd9-4645-8254-f368bec2b8e6",
                    "name": "credentials_verify:vc:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": \"VerifiableCredential\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "86c723b0-6549-4e3c-9ce3-4447b7830132",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f192c489-a376-42aa-bb72-3b31e7b009e3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2d34dfa7-f201-4db5-b2b5-1b512f02dd26",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f60740c9-c64c-4a25-9d16-6abab6eda336"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3fa0dd9b-24ce-4905-8c47-5b5442bf6141",
                    "name": "credentials_verify:vc:type:item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ad71475e-ebc0-487c-b6e9-d1002c7ab646",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must have at least one element",
                            "rawBody.type = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "dbe9b23f-af8b-4cd6-b65b-5db8c3d3623c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a56d9eda-a2fb-476c-bff5-7ea106ed7966",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a136d972-28d1-48d1-9028-60a21c21cb56"
                        }
                      }
                    ]
                  },
                  {
                    "id": "89bb0383-d4fb-4b0c-b599-68dbdc38138a",
                    "name": "credentials_verify:vc:type:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f85f8ada-5872-4358-8f35-328e70cbc1d7",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "670a3160-b440-4c85-8013-5271ce9bc292"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c275e703-62f4-4d33-bed0-176ad06bf859",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8a37695e-1c5c-49b7-82e8-9e035d53033f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2ff5513a-c441-4eef-8639-49a769e9d5ed",
                    "name": "credentials_verify:vc:type:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a82c5e4d-d550-4370-aa7e-c4151301771c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c700716c-3606-4044-b41b-67932edac8b8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8fb30ba4-4873-490c-bbc2-d4af5814c93a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f1ad17c1-11dc-42cf-94cb-c6ad9f928db0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "82b9fe21-e911-432f-9698-028692743d15",
                    "name": "credentials_verify:vc:type:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6290712c-452c-43ba-ac00-5bba2b71c076",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b0c871db-b761-4a1e-87f2-79a421304997"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ab2e9abd-24a7-4df6-96fb-e222f75ead55",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bb09ab8e-8c0c-4b9c-b842-a4f65f2a9629"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4d534d0a-3175-4265-9269-2bc5f272cd70",
                    "name": "credentials_verify:vc:type:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "279eae91-30d4-4cdc-9eeb-70f4cdee2041",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "df3c624b-7179-4034-a3d5-168154bb849e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6f9d0f56-d28c-4eda-b97a-faebb620fcc4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2202fa72-26fc-400d-98e6-ddefbc4ef030"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5d9af14b-9774-44b3-9ca8-e56a9c774b2c",
                    "name": "credentials_verify:vc:type:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eef56846-754f-4d78-ae87-378f7edd99db",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", {\"key\": \"VerifiableCredential\"}];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3639ac29-8657-497b-be5e-96b0c17710ac"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cf859709-72da-4d50-96b1-74b579a02e4e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "62ec7b98-67b7-4842-8016-0b22a4869882"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1da8459a-ccea-4fcd-8386-a01653107bf0",
                    "name": "credentials_verify:vc:issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "60bebc4e-4c41-46d4-a349-e0666a3fc74f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "115eda5b-87ea-497c-ab77-6981182ab229"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a98c0bcc-40a9-4e25-a70e-8e1e96a4be7a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fb12193a-07b8-4f1d-999f-15c2d0daedc0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ceb29ed8-0d96-4138-9512-e88b0cc10c95",
                    "name": "credentials_verify:vc:issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": [\n            \"did:example:123\"\n        ],\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Mdpb0nbZLuHLqh6IBr6ouahKZNFB-cIKJXn-b-O6Pt6HyJaECfc399qgMTWovf-l04XYEpuYDmfZeYVThBeMDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "23ffd162-70dd-4eda-95b0-b541353bb772",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0357624d-7d92-40d5-80d0-ab8266bbf16e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b8399237-7199-4eff-9ef7-6f4119110e43",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c4ec1b4e-2c6b-4631-a0d5-85850ea54184"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e254d05d-bab3-4c00-915c-0669cb1f97f9",
                    "name": "credentials_verify:vc:issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": false,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ryGzH1cVI0oyA0eBPKjIBDGJ8FYapvVnUEcovWWepoAASL3SzOOUvcQ9XOnQlclFU8dYhkEN2L8TQAj2OHlcBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1cf1baa0-d228-4f56-b14c-8e862dcd9e7b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "28051df9-07a3-43e6-8ef4-d94c720e9d15"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d1d6ad88-727e-4e95-82dd-acbe273134c7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "aaf91100-a7f7-4624-94bc-e594ea0e48eb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "71016389-24d6-4f0e-ab83-cf6424863d64",
                    "name": "credentials_verify:vc:issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": 123,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..kEE8wQKYgVQlcBvJeVeV151aR_iD6vPrlW2bgXPW8NvJx9AOuW5eGtL3j_I3xIGR_JWDA5jGy6KDVkqJNEDHAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "20f75a0b-15c3-4d57-99b0-fed6f4a08b39",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f92a25e3-d2d4-4f8e-9a1d-ac93a4eabd8e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cad2a9eb-50ce-491c-b19c-52601cf261ea",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2eb6487f-c497-4e42-b7b7-e4f64bcb7acf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ec72ae58-0a8b-44d8-945b-c1b2ccb04f07",
                    "name": "credentials_verify:vc:issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": null,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "07e76668-2d9f-40a1-8791-ea5e3789304f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4e381555-a8b2-4c99-ae69-259807069c34"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "73f7e3e9-e9ac-4f2f-8134-e062480e41a5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e4c7adec-ca51-4ff7-a515-431b2467996f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7408de18-3766-4bb8-bee2-febe99bab7a7",
                    "name": "credentials_verify:vc:issuer:id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {},\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9cde6a19-155a-4ba4-affa-4696b5ec4d8f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "37111877-a2c5-48cc-93f3-596c6354c8e6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9444c4f3-0e9b-4ac8-a8a6-7e10ad57ddc3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fbb6bddd-6632-4506-93e2-cd8e8733b085"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aa57049f-adc1-4a34-8a36-446013f6495b",
                    "name": "credentials_verify:vc:issuer:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TsN_31UJYzTTx1xh5CB9PjhnehJza3N5gAEFoNO55HLtQvoqGiEd-SI_4Xy7cpuYMbHdYf5CKHwP0eooyzjrAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0cfcacd6-92fe-4ea7-bcc8-8ec0163a1f0d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c36dc58a-e186-488f-a0ce-6f7412dbdf75"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "55d1b5da-e21d-4cdd-8498-e32d4fd5a5f4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9955b404-60ed-434a-a540-af0a51f9aecc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "304c4e12-b771-45ba-932a-27ac779161ca",
                    "name": "credentials_verify:vc:issuer:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": false\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JOl3FF8mG94K8DDAtSYeirCtE5GRVHXYZcIbf3JRCquZ7obaBm1wh3rEzbG-t8kjdWMn7Zwy8q4zw7pMC2-gAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c6e0ff09-ee60-4efc-919e-2916780afd3c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d9166b29-8823-4e81-b426-0fd8c6f362b1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5c49fc1d-a4a6-4091-9ba8-10b9c8b443ac",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d2a9e8ff-ec7c-4861-ae10-ebfc3f73a9d1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "89c64a54-dfb4-48fe-b72f-bc13c6de9819",
                    "name": "credentials_verify:vc:issuer:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": 123\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Ibp_FWO5FwzfTfd_PeTgedqAEcbS7dtCOoREanyZP0yAg63ZGay4hjjd-NwZfmWG8LRbMSqtjX2_Cu5BbBEoAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5cd38602-2f7b-4438-840a-0bef087064c2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "087c66fc-80ef-4135-ac2d-8157d693b4eb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ff8506d2-743e-4122-a4f8-d95e43b9a659",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b3c74674-3533-4321-9775-cd97b9bc6e87"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e01aa7b7-94d8-487d-9853-5d749ebf9102",
                    "name": "credentials_verify:vc:issuer:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": null\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "26cfff9e-5533-40ea-8b1e-b72cef3502cf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "08cf6888-73ab-40c2-8347-01fbcf5f3e99"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "12b7dd0f-2093-4c42-b2b4-d3b3d9d81fca",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1cb20bd5-a542-44d7-b96f-da5b5fb8c40e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f7375c7c-da12-4116-b587-43d15640e454",
                    "name": "credentials_verify:vc:issuer:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..n3pFfPx4jY7EjlOpLNJT4CAJYI1roVE6LoUgLQhJ1bMgS5xUKbsIhynp7xDW-vSGzIcu58w-Z8_d9--99NCDBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f9609910-4a38-4ee4-8e12-88ba9eb13a2e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "73e27d82-2a1e-483b-9c00-ec788b5c43ca"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fd4cc6b8-dde4-4db7-8505-2c729dbeebc7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bfcf4ab4-0e9c-4e6d-a396-4af12fc5f403"
                        }
                      }
                    ]
                  },
                  {
                    "id": "854dc857-e7be-4580-8c96-b585b978db46",
                    "name": "credentials_verify:vc:issuanceDate:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ab6fa6b9-a179-4891-a8f2-59e6c7328070",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "601a5c55-1aa0-4a32-805b-e2951158b401"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "03d4a443-9c59-48c7-bc95-5baee1618f7c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dd48e104-ff78-456a-8e16-1e435abd3a49"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9538938c-d725-47ae-936a-a406e0d4e0fe",
                    "name": "credentials_verify:vc:issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": [\n            \"2010-01-01T19:23:24Z\"\n        ],\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..eJGt2anEVhR3qXrd8726C2a8PNJ-S4SnhIUB2YpAUiLJhTQ4FcY_nONpl-U0MbpWgwlpJ7xa1_uk4EMrGmOUBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "96ed1847-b1e7-414b-a299-6062e08c1d1c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cb47b758-3ae1-41f7-a24d-f7e4ca2e72f7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bdc5cf5a-fde2-4df7-b3bc-a32fe67830ec",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "133e347e-6f8a-4ed8-9f89-25565fcdca01"
                        }
                      }
                    ]
                  },
                  {
                    "id": "70b285ff-9a61-4b0f-8b2e-b2cf6a39acc2",
                    "name": "credentials_verify:vc:issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": false,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8Ax_d8Yp8MIszSaGQa1WkiT4xktUk0Ltg7EF3QQ-GGY8JaV_jR6-zRUlEF2iW0HcK6C8ZoAt0KrllUUDdJkdDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1f445fba-e744-440e-8841-3855419ecb7c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f6c82b3b-a2dc-4119-923d-3d2fcc4338c4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e3dc5cfd-d538-4b56-8df1-f6a76ee1a257",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f19c9214-7194-4a74-bef9-8f22d739e0bb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a07a8db7-f55b-4fbf-814d-ab6e0a8d5333",
                    "name": "credentials_verify:vc:issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": 123,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..x-sSX9vqc6977YPFhNbzjKdisDv4qD2mx-yBSH_EG-UQCpyH_ErCzoFWnpJzRJKIKbOLEvvZ5SO_fWbNWyNdCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fad41f75-f218-473a-bfce-6ed78b6a8478",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "02c6a4cf-8b4b-4977-ac35-99833ecab6dc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "742d4c93-6ec9-4757-b1f1-7d5b03ee1a5d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dae238ea-6a52-40f4-b9d3-b6f6b803cfec"
                        }
                      }
                    ]
                  },
                  {
                    "id": "242379bf-afa1-45b4-a662-65fb23a1d4d8",
                    "name": "credentials_verify:vc:issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": null,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b2170782-d3f9-4d42-948b-770219d2917d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ef494840-cf8e-4cf1-8e87-916daf488844"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "61d7a6d0-973c-46b3-ade4-bc2cc9e5bc12",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0fe71bf7-4c5e-4836-8a9d-195baf50574d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "461c9788-e180-42c3-a836-7a0154f75a1c",
                    "name": "credentials_verify:vc:issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": {\n            \"key\": \"2010-01-01T19:23:24Z\"\n        },\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Z1GVMKiJuJeJMpR_Ag4Wpv6940N3WUreYSxEsPaZgU_J1C_EDUj8ycRJitlJNEBBuGhibJ0GWyK-WW9RO2WCDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "87e226f5-d94b-43ba-9062-5a5c041a74b9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c3dbc676-a4eb-46ab-aea7-6b195b7b3a00"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "72839b2e-9661-4fe0-a457-50fa65f0f6c6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "879ab610-6e52-4439-a5eb-57b3ae4ffbaa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5dbd9781-db58-4eeb-bebd-ff43de86c79c",
                    "name": "credentials_verify:vc:issuanceDate:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"not a valid XML Date Time string\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ebrsCszvH6TQHw1QhA8laajPRWL_zGvQ96Up8A4TiJrY7ueFm3V-Suk-KNd6JKckpOxLoF-Cb24KG_g73AqHAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3e922388-fa75-4222-992e-badba7867334",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "403057fe-5120-4bfa-894e-42d2995daa6f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9140295c-bd9d-4247-9aa8-98994c0253db",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d82b2d5e-fb15-4115-9743-1ca6455c1f08"
                        }
                      }
                    ]
                  },
                  {
                    "id": "30ff2766-538d-44b0-8bdd-51afcf73fdea",
                    "name": "credentials_verify:vc:credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ceaf3754-0fb4-437a-a61f-bb1cb9be87cd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4b3343d6-12be-4dd4-b547-ed3aa08d5442"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2b5cbde2-c25d-44c6-8afd-e9227056cc37",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a55c00df-39eb-488e-bd87-29cd9a623530"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dd159bea-6f70-4472-81ea-dc0fef047b97",
                    "name": "credentials_verify:vc:credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": [\n            \"did:example:123\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "444f774d-a29c-4c50-947d-5049146257f8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "61f1ad1c-3a6c-4dae-a142-0bea7858e582"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "da74b676-86c7-447a-8b6f-1b265b195b9e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4c9f11e0-e175-43ed-b31c-a62b393a167e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1f371ee4-96ff-4d47-b0f6-8f95f2b5fa5c",
                    "name": "credentials_verify:vc:credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": false,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..VK75R0RpQX9g4E_vGExhb_aDUNycy1UlQYvhCL1Ydl9bWiT1oUPeHEUgJMRGzmRRvyByyj13oHI2yB3cOLWXCA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "07ab9e29-337e-41ca-8daa-63b3027fe00e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "053d75a5-837f-4e73-bac9-9f0c540fa105"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "45cdda90-bb41-49f2-92e6-af104a24def4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3b36027a-bd68-4f80-a891-98e999c437cb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a83d09cc-75b2-4f8f-a182-62a8622589fa",
                    "name": "credentials_verify:vc:credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": 123,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..dQnu8mT7YMECvDQPODQ1YUudQIO9Yx7WsZ07UWpHRqw0iV3ZvJOebbBoY0gFvsF9t6foFFEaaWcKi4vNgIdfCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "019031c3-67f7-4096-a260-f6c6e0630bcc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "370c7bc0-7f3d-4bd6-b192-6a023662179e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f1a63919-8f22-4ca5-a370-ebbb21580da8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "98454252-2550-469a-beb9-f2b6771ccc49"
                        }
                      }
                    ]
                  },
                  {
                    "id": "91a69772-deae-4508-a248-44e58afc212a",
                    "name": "credentials_verify:vc:credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": null,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6936ff05-422e-4067-84df-3267ae8c419b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d887ef49-7a91-4a14-8bfd-c7983e39b49a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "865cc04e-1213-48c2-9e42-a30d56708677",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bbcb295f-4cf0-4e37-a225-6c36dca21557"
                        }
                      }
                    ]
                  },
                  {
                    "id": "66cc5aa7-e3d1-459d-b232-af2648baf244",
                    "name": "credentials_verify:vc:credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": \"did:example:123\",\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "82ef97e3-4770-4100-ae3f-5663f61f527c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "35b1aa30-d0b7-4eef-bcfe-127b9aeb620d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4b0767ed-b903-4b97-a1da-2a2ca3975102",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1f009494-9024-4556-b585-a8aec12dea66"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3fddc0bf-7107-4b37-b994-856b55223a24",
                    "name": "credentials_verify:vc:credentialSubject:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8KJ136ciaI5X01UO8dPG0KMcsxmd7qzxvrahflTNqsrjjd-vF8bBKpjVDLOOj7bUolO277JWFCPX1xvvAVAvAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "86ca1cd8-e8d8-43d0-b360-8eda57cf34ed",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "32559a83-e1fe-4e1b-a8fd-391766f89b66"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cc7b5c4a-3eb8-443f-aaf5-74b86c13c794",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d6e66b6a-2692-4e61-aedb-e7b966db8ec2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0a52d89b-5b2d-4ea0-9dac-047d60627353",
                    "name": "credentials_verify:vc:credentialSubject:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": false\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..1Tatn2a45JYHHvhGvCLNbO1VUDV_lkvRVosGzDXDF-DseqRorDTFmY7XSyYqrl5yc6B200ET0RBvgK2vyEC6BA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5a383caa-9a49-4cf1-89c0-0b9a1590d901",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c884dcf6-b36b-42c6-8be2-b7895db37049"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ba081602-b550-4f60-beea-f5f01e75213d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "60f20c1c-3f9b-4959-9233-7bb2a6eb35cd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "25c91c90-4c01-4763-8183-bea787cc1760",
                    "name": "credentials_verify:vc:credentialSubject:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": 123\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..qPc7PrMuniibwI74A9ELPRd1YyUjNyeccnUFc4GCfj7I3oREDl0RT6PEt1pEY81mq7vlIsNG1myE86igC__qBA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ed24838d-9364-4380-ae21-60e906767ef6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9efc474c-eef0-4688-a355-b8b4d781f7cb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0563fe3e-eed8-4738-96c0-433e527a5a27",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "54b5320e-5133-48c7-a1a9-50627767ec36"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5d415106-d0c1-4709-8d1e-b9d3f16d8533",
                    "name": "credentials_verify:vc:credentialSubject:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": null\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..10vzNYPpxv6gZwVR-V23lgvIgseVOwxT6Tc1Zbn5T6pWGmUhrkur_O-OexNVjkVSf7Qu_6NDnIL1m0KcNKGBCg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8e4924e0-ff04-40e4-a611-abbc53a24f7a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "62b861ae-cb01-4928-8ef6-a4f1139329aa"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6c0f4426-58e0-4410-a28c-4963472e5112",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1fbf2c12-d42d-4b90-891c-4293820607e0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6bc5e7f2-7538-4480-8068-a536de5eeba6",
                    "name": "credentials_verify:vc:credentialSubject:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..tQJMGZTsqt1RhpxKkq647EHc3pjQ183zd4KchfvD3dXWVfL9X1fUedMbj33l8eev6YWua2-6_4_sUTDr2MLEDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8d84e99b-dbcc-4f53-8aec-ff9241ef1052",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "36f0d60f-429c-473a-bbd2-4b2d6ac5f6ed"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "45591951-ff6a-4af9-9c78-0e83eff6ec32",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "600b4b1e-f012-4c9a-9012-025d537982e0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "621a74e6-c7b5-4653-95ec-e341146d2759",
                    "name": "credentials_verify:proof:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "600525e3-a9ae-43b4-8167-226e4e25c51c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required for embedded proof VCs",
                            "delete rawBody.proof",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0f4d0bf2-785b-43e0-9336-82df91ab3f59"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "84e6eccf-97af-4007-a721-6b40d5a2ad31",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d5fe8f10-d203-4961-b560-346cbb961dfa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6f753bf6-062c-4a57-bfad-d8481855c56b",
                    "name": "credentials_verify:proof:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "32ee6ff2-3760-4d6c-8555-a227040c7830",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ef3c899f-ed3d-4666-92c3-0c99b670b964"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "24137fe7-0482-4cc7-8553-0afb8fd1bbab",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2dbec6f7-9889-4c83-a880-eaae2b0a94ea"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ba937760-4f1f-4dce-a971-1de5fc3417d3",
                    "name": "credentials_verify:proof:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6a4978e0-7930-4730-aae1-e0b4c483f7eb",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "52445d29-f9d6-48f4-833d-e608c2af91b0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "872ad193-9b92-43e2-b33f-d2ee018281e0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "959f1a24-0833-4fa8-9cab-2c399a00b87f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0a74bce9-c26b-4965-bdfa-4788e0b41755",
                    "name": "credentials_verify:proof:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1d348a65-0e35-47dc-90b3-ef262bafc3e5",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = 10;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4641b5ef-5f85-47b3-b139-644959bd759e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "88d5b6c0-8c41-4282-a330-47aedbb4360d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3dfdb740-9e96-4182-a626-2a53bfc01a7c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ee9ad8c6-2e02-4ff4-841e-4f3749859ee8",
                    "name": "credentials_verify:proof:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1c8fc609-2158-4ccd-ab61-44f81f929881",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "eb526d53-ecb2-44ab-8f9c-5928a1adf0cc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "099e9620-0228-4c4a-903c-6408b584073f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1ddd479a-6648-490f-b286-dda574ed564f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "35e5f79f-d571-4721-a4ad-1b50cc8d4e14",
                    "name": "credentials_verify:proof:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5bbbac38-4610-4546-83b6-a5c71b0373a2",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = \"string\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e64557d7-d5ef-4b41-acb2-4ec09d905f91"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ef954898-7ccf-4598-82e4-132132477949",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a9b90071-6718-492f-ac2b-cb35ce781691"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5143e496-9454-4c20-82ad-d1246b2a8041",
                    "name": "credentials_verify:proof:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "95b3fd15-7364-4ad1-bb65-6b2a3df73d58",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required for embedded proof VCs",
                            "delete rawBody.proof.type",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "598e4d3e-9f2c-49e1-b616-a47102187768"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "468e9373-8bee-44df-a00a-d22b9850eb77",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f23ab5d6-f7c7-48c2-b4e3-bb1ce705288f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cd5f034e-6c9e-4e2f-9064-171cbafabddb",
                    "name": "credentials_verify:proof:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "990a0679-60a8-4442-98ee-db8a5433396e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = [\"Ed25519Signature2018\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8440af28-c35d-434f-814e-7ffa890375d3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6a8a9590-546d-439a-8bec-076630761ef4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1393fd0b-2286-4328-a988-83ff8a65d87e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "79f35c14-d005-4b6f-bbcb-51cea168f72f",
                    "name": "credentials_verify:proof:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eb1fb69c-0b8f-48d4-bd4e-7dd6d976704d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "67aa862d-713b-46b6-a187-e69d6e2aad5a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6447246a-ab76-49a1-9e07-ed70b2fee935",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "eaa9d19e-d574-4fe4-8e54-9d9e9d418b2b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9019e63b-2763-4877-ab7e-f940db89df1d",
                    "name": "credentials_verify:proof:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9d32d8d2-0b54-4d21-8253-3ac1ce7d0ae1",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "44bf8ef8-e449-4d02-a066-56afaff5f620"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "72c92443-34cc-4b4f-a7b5-e31d29e64c36",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0c934607-2507-43f0-a55e-790f4c0deaab"
                        }
                      }
                    ]
                  },
                  {
                    "id": "10c6a7ed-19e3-414c-9f25-976b13820d97",
                    "name": "credentials_verify:proof:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5c901519-3b1b-4eeb-960a-997a956d636b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7f763c78-748f-4692-a6f1-e1dec3ea601d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "67b3a89a-7a6b-46cb-8e71-d2394b1cde7e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bdcb0564-6b5c-4006-a899-f4ffdb2dd353"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7d923722-6c13-4899-8d8f-bd176804442f",
                    "name": "credentials_verify:proof:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "35d112b1-340a-4149-8aed-acff61a66089",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = {\"key\": \"Ed25519Signature2018\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1b114a9f-bd5c-4234-855d-c544a904ed08"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2d031d8f-b3bc-44cf-b245-c60a4a039270",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "341b1f25-adff-4cfd-8f14-11ff9ce83b92"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c6116b94-14fa-4a34-971a-b4d36b22340c",
                    "name": "credentials_verify:proof:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "452739ea-b53d-4d8f-a5f6-effdfba4ef3a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = \"not one of the valid values\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8b2b9ff2-6920-4be9-b0f1-a18c40e804a7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "22f6eef2-cba3-4aa7-a055-98b07f278e48",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e235be31-3bb8-419e-9b1b-dd2ed4820733"
                        }
                      }
                    ]
                  },
                  {
                    "id": "460c1b33-66b5-4dab-8ffd-26757985aef7",
                    "name": "credentials_verify:proof:created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "22e5a69d-cf28-463f-b123-56e80e3c005d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = [\"2020-04-02T18:28:08Z\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "99d5f52f-a1cd-4545-b265-0da51b6241e8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cead01b1-89e9-48e3-aa0d-3070fb48bba0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "90565886-462c-42e7-82af-f05ead80e4af"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ebf6f719-7e44-49bc-ba3d-f27f823f9f4a",
                    "name": "credentials_verify:proof:created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b1cc6ff7-f7d7-41c3-927b-4d5519d2c0c4",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "888f96d8-1470-45fc-bf5a-f3c8896eb2ba"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5b852209-44cc-411d-a2ab-ad693db9c98a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6524774d-fa70-4fa1-b5e9-2c94df1715cd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6883cd88-8b95-43cf-aa62-a93e1e73a9ba",
                    "name": "credentials_verify:proof:created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ad325017-4a51-4281-ae3f-9c83ba410b51",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "88325554-d787-4d0c-89c8-db7dd764fc00"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "60ba6834-e20b-4e81-b95b-5157dd08f88c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b5710e18-2105-46ea-b713-126d40f5cf72"
                        }
                      }
                    ]
                  },
                  {
                    "id": "473b4775-5c78-49a5-964f-c4aa2ab5bf32",
                    "name": "credentials_verify:proof:created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "174be0a8-d5f4-4875-8671-f8d2d0318240",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "04242ee9-fc26-4aa0-bd42-05ab35df4c60"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e1613afb-2d10-4957-922e-4bcd57babc3f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "04eb3f8e-e00e-4fff-8e23-6f1697019439"
                        }
                      }
                    ]
                  },
                  {
                    "id": "50aebb5c-c995-439d-bf2e-7c7455e5f3bb",
                    "name": "credentials_verify:proof:created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "568bc36d-942e-4db8-8fd3-5e5f38be4959",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = {\"key\": \"2020-04-02T18:28:08Z\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3a9c1c11-1b45-4dd1-a5f2-0a03a7eab7a2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "38a4377e-ae39-42fc-9214-5e01f13a6eb3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d42458ea-909b-41c2-b97b-3ff4073289f1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6b15dbca-e291-4a5e-bc13-89066c4a5c23",
                    "name": "credentials_verify:proof:verificationMethod:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f70d3094-297a-4aa0-af6d-dc2b619664af",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = [\"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "edc39d66-29b5-40ec-b1a3-b17817aefc39"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8f55356d-3b70-4cdc-9942-91ac19bb0d6e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "278f9661-19cc-433a-a055-87655562359f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aa37441a-c1e1-4a20-9aa2-e08d9704d461",
                    "name": "credentials_verify:proof:verificationMethod:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2fc37041-3959-4e54-8d11-c04f4c372413",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e81cd8ee-5a85-424d-8ae4-e6d2decfe4c7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c211ec2d-40a0-4c3e-b9ec-1668d1275f21",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a2e14281-627e-4639-aa0a-978994b8f38e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "df4492f1-08a1-403b-9285-5c99563c5b05",
                    "name": "credentials_verify:proof:verificationMethod:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f4f1f37e-4da6-4915-8851-7df196972f16",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8bced3d3-1526-4b45-8b3a-b9309b817ce6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "70364397-c83d-443f-884f-4dd677e7cb24",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "64a1f3d2-6a43-4ddd-abde-cdd7e05e3e86"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5e796a1b-1847-4855-9807-e3effc142521",
                    "name": "credentials_verify:proof:verificationMethod:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e6370fa7-d413-4ad5-8892-4812684a636b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4a406e5c-e93f-4391-8207-ef0d750a506a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7efd5c72-6e26-4905-bbc4-6220c1dbcfa9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "25f98083-6198-4ef5-a503-a7277e6b9f1a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "06fd4a95-2ec9-4883-8545-bcd2713e0470",
                    "name": "credentials_verify:proof:verificationMethod:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4591532d-0c94-4657-ac4c-df5749be5074",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = {\"key\": \"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "dfaa1cd3-684a-4471-993d-903e80777d3a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "00f0554e-2823-438b-b639-da2f63457f5c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "eb9062a2-76e6-4467-9950-8f4ff6b04791"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2eed640f-68b2-4c68-b47b-5619867eb458",
                    "name": "credentials_verify:proof:jws:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "07501f69-7146-45bb-80c3-4337ef4d8212",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = [\"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "dc4ecd1d-c7ab-4233-a2a4-f46d2295d98f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b174a8e2-c6db-4c6a-a4e6-168769f9bba0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a7b431b2-3487-4e14-945b-a98bb2ef85bc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "17c684ac-01cb-4924-a66e-489e5b15a63f",
                    "name": "credentials_verify:proof:jws:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e929034a-d225-4b59-ae62-b5ac60556fd6",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "70b2693d-982d-449f-9a51-6b0d8d74d7e2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c6aa225b-7be1-4dbb-86a9-41201f7c3f54",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bdadf491-93d7-4b30-9717-a3bbd96cc873"
                        }
                      }
                    ]
                  },
                  {
                    "id": "18cd2610-db87-4269-ab12-8c82b1ec79a4",
                    "name": "credentials_verify:proof:jws:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "18cae070-3934-4c7e-8042-925e64c8a159",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ac5755e1-2a21-4ba3-836c-930d61c9da49"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "aaa83a59-b8a1-484e-b6fb-0f577a4a7cfc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7f0483fd-ba57-4536-aac9-ffc24ce4eb4e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "df545795-788a-45ec-950a-14e6236d8582",
                    "name": "credentials_verify:proof:jws:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4ad08eec-af04-48d7-885a-746acc43a621",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "cfa8c75a-ef8f-4732-bb27-2e2f4f8ed2e1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "02e782dd-041c-4524-8637-5038ecf04369",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7466775d-2ce6-4641-8918-79c2758a3083"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0d57e77e-ebdb-4389-8d15-f6f00db201f2",
                    "name": "credentials_verify:proof:jws:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "56a81edc-d3f9-4f8e-bd1a-9836abb34ce4",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = {\"key\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ec809799-f0b9-4d89-a508-225f25173168"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "deca1026-23e4-437c-a9cb-18eec0ea6740",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c0926068-9827-47de-95e7-81768fcea150"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5f6ac033-e127-4c9d-95d4-098d3ed603a1",
                    "name": "credentials_verify:proof:proofPurpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1ccdc3a3-e511-4eb3-b945-f3f71f3adbbd",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = [\"assertionMethod\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3316ed24-9ffb-4c0b-99b1-1bdedd2c1203"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d81d4917-4fe6-4c14-8c15-49e3160bd591",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ccda281f-44fc-4cd3-bc67-275285352737"
                        }
                      }
                    ]
                  },
                  {
                    "id": "82d9fd2d-2d44-4494-832e-1768f4991f8a",
                    "name": "credentials_verify:proof:proofPurpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3cb26530-49fe-4359-a21d-780ff16dff83",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "49a0623d-c519-4549-86b8-ef654cf767e7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ec255a0a-b5d5-4f33-afbe-582a1a78a8ff",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "db81d792-7a10-42e0-9f6d-5fde92427c9e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e3b1a6c8-091f-4af4-98a4-1c5002cbb46a",
                    "name": "credentials_verify:proof:proofPurpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "24e31087-c95a-4598-871d-4187fae605e0",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7407f214-27d1-43aa-86ef-f4c2989de08d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "868d281d-b8db-46b8-8dc6-b58462b8615f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fd2235e5-b4ad-4764-a158-4c494407bb30"
                        }
                      }
                    ]
                  },
                  {
                    "id": "feefa92f-ddcc-4483-b5af-16d6a04e6f72",
                    "name": "credentials_verify:proof:proofPurpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a69ee29e-26f5-43b6-8707-3eff5568b3ef",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "854a930f-79fb-4237-863c-23bbbf43dd2a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f3d81207-8a7a-4b8a-9de7-a42c944cc386",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a52f825b-0877-4c0a-b899-ca2ee884295d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6dc2ab52-4ef0-4f53-82db-c3f2a2f8c16e",
                    "name": "credentials_verify:proof:proofPurpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5417f5b3-ab81-469b-9082-aff0f2f85fcb",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = {\"key\": \"assertionMethod\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "dbb47272-f2da-4f4a-add2-9cb69b253b19"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4041eb27-304f-4988-9679-f30b823dc453",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5089edfd-aeab-44cc-b2fb-bd790a9cc033"
                        }
                      }
                    ]
                  },
                  {
                    "id": "54b7e00a-0aa8-40d8-963c-fa79e0e0b28a",
                    "name": "credentials_verify:proof:proofPurpose:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f17e0783-944d-4806-92d9-e89f4b559e68",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = \"not a valid value\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7a212591-47d0-4ba0-a21b-74322c315906"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b9e68eaf-97ba-4cbe-b075-5bebd1784a1e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7cb7b6b4-0862-4406-95e7-b2e1d16584e3"
                        }
                      }
                    ]
                  }
                ],
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "ad8f119f-68ce-4b17-8d7b-4f13f8c9bdc8",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "e32b7e22-4834-4c72-ad1b-b40c36541a13"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "321734bb-5afb-43d6-8bad-5f0fcdb3a856",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 400\", function () {",
                        " pm.response.to.have.status(400);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "064f704d-ed7c-414e-b1b5-d74060badfbb"
                    }
                  }
                ]
              },
              {
                "id": "849836bb-4783-4cda-b58e-58bf2f32aa74",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "2b4c3a04-4aae-4287-8c3f-3cd75df08826",
                    "name": "credentials_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b9508c21-ec52-47bd-bd39-02cf3e6c52d0",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"valid_vc\")));"
                          ],
                          "_lastExecutionId": "472daf34-e44d-4bc7-ab0f-9ceabc243432"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "27d3a187-7d24-404e-9def-45ac879a368a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "d3b19ca9-1c37-4833-9672-7564e3874888"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "d43ba10b-09da-4c08-939c-80b447210fd7",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "53f6f6fd-27ea-4b12-9885-d5166299204f"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "4ae52318-6f57-461c-8328-97de4b00caa7",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "f08e1923-e561-4bcc-83fa-1e69bad56395"
                    }
                  }
                ]
              },
              {
                "id": "b32eb5aa-1711-4d6d-8d99-0bfa686438bf",
                "name": "Bad Signature",
                "item": [
                  {
                    "id": "58b9ac59-a028-499c-a747-aa5ecd28cef7",
                    "name": "credentials_verify:bad_signature",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"id\": \"urn:uuid:e22ccc92-2c81-411f-a80f-e7f8334000a7\",\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..mvbcalofPOi7o7nxByyxXCuSOKXuGFM7_W9a8N62-EERarrH4p4T_0c2ZfGnGLiHOvY6Q-dyy38t9HPvXy-MBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1c282314-7aed-4b44-bab8-d7b13317cb09",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 200\", function () {",
                            " pm.response.to.have.status(200);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            "pm.test(\"response verified is false\", function() {",
                            " const { verified } = pm.response.json();",
                            " pm.expect(verified).to.be.false;",
                            "});"
                          ],
                          "_lastExecutionId": "dbf513bf-36df-49a9-a815-f5812bb3b17c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "45e6616f-78b9-4c1c-a4be-14d37c42a487",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f04c4fc3-ffcc-478d-b122-424ba0f9faa9"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "6799433b-a4bc-497b-9016-6660da8146af",
            "name": "Positive Testing",
            "item": [
              {
                "id": "a9e554c8-3bd4-4eef-9fcb-549fd7dfdb64",
                "name": "credentials_verify",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "b1707b94-db8b-4b0f-9781-ad29eaeaca77",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "2963edfa-99f3-4c06-8852-3b54b1bf8d82"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "113db679-f23c-454f-82f8-f3f7ec5c4f02",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "55ca8ca1-dd41-45a7-a195-33eeb782274e"
                    }
                  }
                ]
              },
              {
                "id": "ac4c81b4-0b54-42b0-94cd-c1fef45c2828",
                "name": "credentials_verify:issuer:object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\"\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "8d754013-44ed-4ea4-a700-bfc42cecb599",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "c1290bc6-c1c0-4fdd-adf2-fde09927f2d9"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "e5dc4d82-d021-4fa7-ad64-0f9fa480fcf9",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "51b94acf-8ed3-433e-8cea-ab8ebf9b995f"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "6a933eee-620f-4d03-8874-35f8b6c45837",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Dummy VC issued for testing",
                "pm.variables.set(\"valid_vc\", {",
                "    \"@context\": [",
                "        \"https://www.w3.org/2018/credentials/v1\"",
                "    ],",
                "    \"credentialSubject\": {",
                "        \"id\": \"did:example:123\"",
                "    },",
                "    \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",",
                "    \"issuanceDate\": \"2006-01-02T15:04:05Z\",",
                "    \"issuer\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\",",
                "    \"proof\": {",
                "        \"created\": \"2020-04-02T18:48:36Z\",",
                "        \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..R618vVfGIF2jTe5dVkzMqQYIFKoIkyK_3_35z15tp_aFzew_4ruQt2DcaxdtkwsRff7bFsrVfigTl_XeE3tPDA\",",
                "        \"proofPurpose\": \"assertionMethod\",",
                "        \"type\": \"Ed25519Signature2018\",",
                "        \"verificationMethod\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV#z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\"",
                "    },",
                "    \"type\": \"VerifiableCredential\"",
                "});",
                ""
              ],
              "_lastExecutionId": "43784a9a-f197-4a3e-aa6f-09c6010d73b6"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "a0d25cda-6bb3-4e3e-8143-3b2a08840814",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "3213b87d-2dc7-47b0-b75d-1acb3863a84e"
            }
          }
        ]
      },
      {
        "id": "e2c8570d-bb67-4b62-95c2-f58c36057557",
        "name": "Presentations - Present",
        "item": [
          {
            "id": "1aa20a71-d0f2-4642-b26a-036db47da4ff",
            "name": "Negative Testing",
            "item": [
              {
                "id": "363c922c-70e3-4df6-b052-ab0678002fe4",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "33207f3f-11a0-4697-9e4d-60af3c724ab4",
                    "name": "presentations:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4be2a597-e28d-4ad2-b8b4-178b9d55bda4",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "ff17e920-0c48-4a38-883e-1cf0b75821a8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6c61b56b-1ceb-4a4d-b754-29274fbf1a54",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "70009776-36b1-4a3a-9d57-c45b3b1e779a"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "a3e24af1-d92e-4070-820b-58b931d1d6f5",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "070232bc-e5d9-429a-821f-8e11c92e876c"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "8e7df122-937f-4093-8cdc-2588b795ddbc",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "dbe9f50b-149e-4aeb-b3e3-dfc3fc42b337"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "bd7725ab-91dc-4a03-af2a-2794fb629bfb",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "c3997cf7-5a3e-4f23-a81e-d7e2f414ed9b"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "96b9ec22-5641-42b1-951a-e3c9532a2831",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "fc27f4ab-2d7f-45c4-8db9-cf156ff60c42"
            }
          }
        ]
      },
      {
        "id": "1d1c5d72-a36a-4c88-a089-85deef5359a1",
        "name": "Presentations - Create",
        "item": [
          {
            "id": "755bdc47-f37d-4f6c-9152-d38e18abb9d0",
            "name": "Negative Testing",
            "item": [
              {
                "id": "00a761c0-7297-4c30-8b34-4b2869598c37",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "72ecec51-c8d8-438b-a4cc-a8185017cd48",
                    "name": "presentations_prove:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "74811193-62f7-4939-83aa-97bc6c7aa80f",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "ed9f32a8-42d2-44b4-8640-8a8b2ec11f37"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b7d71d6f-b7bc-4452-8bdc-ca4692ce2972",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "2385f0d4-e15b-4717-9f86-34a2d03a8e1b"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "9f35effd-1cc4-4f2d-b57a-9200966b075b",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "679c9235-73f2-4bc8-b34b-6d04136eff10"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "3656e13e-550f-4db2-8b98-bb31d7937fc0",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "9bd9cbc9-e7a9-4ac8-bb24-3872dbb09c24"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "63db9f7c-2b95-4f8a-af96-f54186f02fed",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "fc01b12e-bddf-4e08-b254-42deeb73783d"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "d98d6b4d-1039-419d-b899-028f07d663ef",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "b95f5c84-59b8-4778-8b35-b96949e3006d"
            }
          }
        ]
      },
      {
        "id": "87c1be69-370a-46ac-a4be-f4d35d456c12",
        "name": "Presentations - Verify",
        "item": [
          {
            "id": "8e6e1f57-e9de-45bd-afae-73dc1828345c",
            "name": "Negative Testing",
            "item": [
              {
                "id": "a5319f88-6942-4156-8f9b-2d9b34cce53c",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "cb7cffe4-d1d5-405c-b83e-72f6f5aaafae",
                    "name": "presentations_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "af92e8ff-c8de-48d1-b41f-44d4b04ad1b8",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "cc3918f2-d054-42ea-9721-98f4c38a9656"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "197c6329-a934-46b2-ae24-6a9d21f3c3b3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "8b0d69e5-7512-4119-bf6c-49c8e384dd52"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "b911ce67-dccc-4a40-9b25-df2a9c0cd26b",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "c85ece28-1082-425e-b735-080c7bc05de8"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "d067ce77-db37-4eba-bca1-d3edbb809642",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "cf62febe-4623-4e61-8893-382d115da024"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "52a095c0-a189-479b-b208-1fe90271b2f3",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "3c257b97-eb6a-4fdd-8f7b-82a946e1374b"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "961e2d81-570b-43c7-8ef9-3ecbdfd589db",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "67782928-07b6-4796-b254-3d7e973da6e9"
            }
          }
        ]
      },
      {
        "id": "8c2fa236-1a36-4fc6-88ac-e5fb0f4bd150",
        "name": "Presentations - Notify",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "bdab82ff-7e71-403a-b465-7ebea449d811",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "4837ee24-f4f8-415f-9648-4114411c2058",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      },
      {
        "id": "7520a07b-6f76-46ed-a625-2d4d64e1bc9c",
        "name": "Presentations - Submit",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "9a95c932-7b1a-4cfb-9ce0-d90171c84c2c",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "9c78be1b-b0f4-4cdc-bde8-08d6c0af0a2f",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      }
    ]
  },
  "run": {
    "stats": {
      "iterations": {
        "total": 1,
        "pending": 0,
        "failed": 0
      },
      "items": {
        "total": 250,
        "pending": 0,
        "failed": 0
      },
      "scripts": {
        "total": 1891,
        "pending": 0,
        "failed": 0
      },
      "prerequests": {
        "total": 250,
        "pending": 0,
        "failed": 0
      },
      "requests": {
        "total": 252,
        "pending": 0,
        "failed": 0
      },
      "tests": {
        "total": 250,
        "pending": 0,
        "failed": 0
      },
      "assertions": {
        "total": 507,
        "pending": 0,
        "failed": 71
      },
      "testScripts": {
        "total": 950,
        "pending": 0,
        "failed": 0
      },
      "prerequestScripts": {
        "total": 941,
        "pending": 0,
        "failed": 0
      }
    },
    "timings": {
      "responseAverage": 58.65873015873017,
      "responseMin": 5,
      "responseMax": 664,
      "responseSd": 80.99913410260406,
      "dnsAverage": 0,
      "dnsMin": 0,
      "dnsMax": 0,
      "dnsSd": 0,
      "firstByteAverage": 0,
      "firstByteMin": 0,
      "firstByteMax": 0,
      "firstByteSd": 0,
      "started": 1716943219237,
      "completed": 1716943242302
    },
    "executions": [
      {
        "id": "e506fbe1-700f-42c3-a5ac-dcad83cba074",
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 250,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "021a2225-1a80-47e7-a16b-74a74723c370",
          "httpRequestId": "61887f9e-e073-41b4-b6d2-b8a21e6c7735"
        },
        "item": {
          "id": "e506fbe1-700f-42c3-a5ac-dcad83cba074",
          "name": "Clear Token Cache"
        },
        "response": {
          "id": "22217622-9e28-466b-ad99-1b9f0efd3508",
          "status": "OK",
          "code": 200,
          "responseTime": 54,
          "responseSize": 0
        }
      },
      {
        "id": "ac397068-8288-4aef-8df4-878923e97713",
        "cursor": {
          "ref": "ce5dbc46-e50b-4d31-a635-20a8d1cdc4aa",
          "length": 250,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "46f6c610-be87-46ec-a948-baa520bb9049"
        },
        "item": {
          "id": "ac397068-8288-4aef-8df4-878923e97713",
          "name": "Clear DID Web Cache"
        },
        "response": {
          "id": "de78fd44-fbc3-4c47-b286-0771a3b633a8",
          "status": "OK",
          "code": 200,
          "responseTime": 5,
          "responseSize": 0
        }
      },
      {
        "id": "d273f55b-463c-48a9-8d16-c21ab258690a",
        "cursor": {
          "ref": "e6a371a1-b701-4b5b-bd73-79712d6ea028",
          "length": 250,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "09a14584-68e2-4c18-811c-9ab4717d9320"
        },
        "item": {
          "id": "d273f55b-463c-48a9-8d16-c21ab258690a",
          "name": "did_json"
        },
        "response": {
          "id": "3925f764-794a-4e8c-8ff4-14ff2cb5666d",
          "status": "OK",
          "code": 200,
          "responseTime": 78,
          "responseSize": 1446
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "382c8ced-ff38-4435-817f-ed86a6c44642",
        "cursor": {
          "ref": "c6c11d21-463c-4621-b901-1ecd8eb43c53",
          "length": 250,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "5580e64f-5c69-4801-96ca-a5ff99a696b6"
        },
        "item": {
          "id": "382c8ced-ff38-4435-817f-ed86a6c44642",
          "name": "did:invalid"
        },
        "response": {
          "id": "fb368196-bf67-4534-8847-8228c9128e62",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "382c8ced-ff38-4435-817f-ed86a6c44642",
        "cursor": {
          "ref": "c6c11d21-463c-4621-b901-1ecd8eb43c53",
          "length": 250,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "5580e64f-5c69-4801-96ca-a5ff99a696b6"
        },
        "item": {
          "id": "382c8ced-ff38-4435-817f-ed86a6c44642",
          "name": "did:invalid"
        },
        "response": {
          "id": "fb368196-bf67-4534-8847-8228c9128e62",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cbae89ef-c468-4dad-b542-10e77306aa6d",
        "cursor": {
          "ref": "b2fdceff-c85a-4a30-97a9-c62546d86923",
          "length": 250,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "d7273d2f-8a18-4328-bdaa-4cded6efd5f5"
        },
        "item": {
          "id": "cbae89ef-c468-4dad-b542-10e77306aa6d",
          "name": "did:not_found:did_web"
        },
        "response": {
          "id": "98b21fa4-846d-4274-87aa-c5d08eec335d",
          "status": "Not Found",
          "code": 404,
          "responseTime": 316,
          "responseSize": 49
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1c4ad6e6-1b75-4659-ad07-fd668fbffd10",
        "cursor": {
          "ref": "5c0ec71c-b9ae-4ba2-9cb0-2822c6430440",
          "length": 250,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "20d93dac-7460-47c4-9ee4-0d4c594daf32"
        },
        "item": {
          "id": "1c4ad6e6-1b75-4659-ad07-fd668fbffd10",
          "name": "did:not_found:urn"
        },
        "response": {
          "id": "a2f69595-0b75-4b42-91a2-6c0a9ee2ca96",
          "status": "Not Found",
          "code": 404,
          "responseTime": 26,
          "responseSize": 82
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fbe8e957-327f-4dac-9031-1cfbefab1061",
        "cursor": {
          "ref": "a9d99d02-0f65-408c-912a-6c642720c794",
          "length": 250,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "e2c5a4e7-617b-436a-bd93-6a21132664d5"
        },
        "item": {
          "id": "fbe8e957-327f-4dac-9031-1cfbefab1061",
          "name": "identifiers:missing_auth"
        },
        "response": {
          "id": "a52de6ce-0c2d-463f-9bd8-ce8dd53e4900",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 18,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "984b006b-87cc-4cbf-aadb-cd7e4d625486",
        "cursor": {
          "ref": "30f1d917-5032-4105-b5d0-67e43a93be0b",
          "length": 250,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "6a41a5dd-97ad-4762-b3b9-5b339afaa639"
        },
        "item": {
          "id": "984b006b-87cc-4cbf-aadb-cd7e4d625486",
          "name": "identifiers"
        },
        "response": {
          "id": "c2254794-3353-46a2-8239-c260b4d4495a",
          "status": "OK",
          "code": 200,
          "responseTime": 58,
          "responseSize": 1462
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9a1969a3-b8ac-476c-94e0-fcde9bdb13cd",
        "cursor": {
          "ref": "95fff700-89de-4090-8039-e18ff1dc717b",
          "length": 250,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "9650126c-c1a6-41c6-8373-0115a8fed83d"
        },
        "item": {
          "id": "9a1969a3-b8ac-476c-94e0-fcde9bdb13cd",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "5a288282-7c2d-4d5c-b3f6-dd8591f1e9e1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "33c90ee5-78c5-429a-b355-89e4c3d2f249",
        "cursor": {
          "ref": "9228e3fc-8a9f-4758-bbe2-e76dfefeac51",
          "length": 250,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "cd9eba39-cd80-499d-83cd-4f2c8c12e8df"
        },
        "item": {
          "id": "33c90ee5-78c5-429a-b355-89e4c3d2f249",
          "name": "credentials_issue:credential.@context:missing"
        },
        "response": {
          "id": "7fab9ab6-c46c-4be3-b201-604f17a87f96",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f91e04c2-c765-4d1a-bcff-0d68e6634899",
        "cursor": {
          "ref": "2f152ccf-025f-4b1d-9a2f-e763f3a90311",
          "length": 250,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "bfcbda71-b005-4e35-949a-6a7c547f28cb"
        },
        "item": {
          "id": "f91e04c2-c765-4d1a-bcff-0d68e6634899",
          "name": "credentials_issue:credential.@context:boolean"
        },
        "response": {
          "id": "3a58448a-e6e8-4bd7-b586-6f771be26db2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f8697df8-027e-4a5e-a242-622caee9e2be",
        "cursor": {
          "ref": "0d062d20-2f85-4807-bc36-6f59874f030c",
          "length": 250,
          "cycles": 1,
          "position": 11,
          "iteration": 0,
          "httpRequestId": "96f02549-2cfd-4000-a2ba-9a84923cd93e"
        },
        "item": {
          "id": "f8697df8-027e-4a5e-a242-622caee9e2be",
          "name": "credentials_issue:credential.@context:integer Copy"
        },
        "response": {
          "id": "448b42f5-0a2f-43b8-87d6-5894eccb96de",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ed693cc5-fb58-443f-97d3-1a45e2a7e369",
        "cursor": {
          "ref": "9f8a1707-f00f-442d-b083-536945d1adcb",
          "length": 250,
          "cycles": 1,
          "position": 12,
          "iteration": 0,
          "httpRequestId": "a2099b16-e624-4ffe-9262-f261fa8d5d8d"
        },
        "item": {
          "id": "ed693cc5-fb58-443f-97d3-1a45e2a7e369",
          "name": "credentials_issue:credential.@context:null"
        },
        "response": {
          "id": "f6e7f925-5edb-47b9-ac76-5b850a2d2a40",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a51522f7-a910-4ff0-97fb-56f6ef1a96c6",
        "cursor": {
          "ref": "4ac0ee03-1df2-4d05-a122-80bb00b8173f",
          "length": 250,
          "cycles": 1,
          "position": 13,
          "iteration": 0,
          "httpRequestId": "e7fd7a19-a023-4e88-8305-b375d27c9ec9"
        },
        "item": {
          "id": "a51522f7-a910-4ff0-97fb-56f6ef1a96c6",
          "name": "credentials_issue:credential.@context:object"
        },
        "response": {
          "id": "64c60454-1a58-4d07-b347-af9bbe042866",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5416a427-cbd2-43dc-956d-67ec39ef2db4",
        "cursor": {
          "ref": "12e7d7c0-fdbb-4546-993d-99cf35db4d9a",
          "length": 250,
          "cycles": 1,
          "position": 14,
          "iteration": 0,
          "httpRequestId": "bac72aa7-e3dd-4f35-9785-0730df1ad7ef"
        },
        "item": {
          "id": "5416a427-cbd2-43dc-956d-67ec39ef2db4",
          "name": "credentials_issue:credential.@context:string"
        },
        "response": {
          "id": "aac4e70e-0abf-45d5-aacf-96419074e383",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "57d5f863-e79c-438e-a13f-996aae64404f",
        "cursor": {
          "ref": "7fa3b25e-4e1f-4022-bbd9-30df5bc7d0bf",
          "length": 250,
          "cycles": 1,
          "position": 15,
          "iteration": 0,
          "httpRequestId": "41814f6b-1b8d-4c58-8d93-7acda33db77a"
        },
        "item": {
          "id": "57d5f863-e79c-438e-a13f-996aae64404f",
          "name": "credentials_issue:credential.@context.item.array"
        },
        "response": {
          "id": "b1d79610-b364-4c6c-9077-3e79d8d127d4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "40bd2cec-3217-4cbf-ae43-8c91dbda822d",
        "cursor": {
          "ref": "46d415aa-7d28-488b-8ab2-c2de1018758a",
          "length": 250,
          "cycles": 1,
          "position": 16,
          "iteration": 0,
          "httpRequestId": "b2a2011f-dacc-442d-b0f9-0fba9eb7ca9b"
        },
        "item": {
          "id": "40bd2cec-3217-4cbf-ae43-8c91dbda822d",
          "name": "credentials_issue:credential.@context.item.boolean"
        },
        "response": {
          "id": "9cde9ae2-40e1-47c7-9be4-ddf09af1c733",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "304634a9-4f90-447e-a25a-59e058a3a068",
        "cursor": {
          "ref": "4dc69d88-8fd6-4f61-aa4d-7ab7043f5f28",
          "length": 250,
          "cycles": 1,
          "position": 17,
          "iteration": 0,
          "httpRequestId": "b167f05f-1bd2-405c-9825-dd1e5c6c9db4"
        },
        "item": {
          "id": "304634a9-4f90-447e-a25a-59e058a3a068",
          "name": "credentials_issue:credential.@context.item.integer"
        },
        "response": {
          "id": "8cc7dce1-0b1c-4c8b-baec-893197e636fb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "33747d92-b48a-40cd-be9d-3426bde01866",
        "cursor": {
          "ref": "c2bb4f0f-f46b-4832-98ab-571bf0d4e3e0",
          "length": 250,
          "cycles": 1,
          "position": 18,
          "iteration": 0,
          "httpRequestId": "de7698f3-db17-4b4e-af9e-5e40ef787eab"
        },
        "item": {
          "id": "33747d92-b48a-40cd-be9d-3426bde01866",
          "name": "credentials_issue:credential.@context.item.null"
        },
        "response": {
          "id": "b2ebe156-d877-4860-a069-da30766f8f05",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cf4a950f-d1cd-42aa-9205-871717170114",
        "cursor": {
          "ref": "21954f6c-551c-41b3-914d-649ce5fbcbc8",
          "length": 250,
          "cycles": 1,
          "position": 19,
          "iteration": 0,
          "httpRequestId": "b49674ad-558f-43cc-8375-5ef66a91179a"
        },
        "item": {
          "id": "cf4a950f-d1cd-42aa-9205-871717170114",
          "name": "credentials_issue:credential.@context.item.object"
        },
        "response": {
          "id": "b722baec-b8f3-46b5-a469-e1ade755bd23",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1fe5eb06-b3a9-4651-8593-9a5ee991129d",
        "cursor": {
          "ref": "d9311fb4-9899-4624-9506-41513510875b",
          "length": 250,
          "cycles": 1,
          "position": 20,
          "iteration": 0,
          "httpRequestId": "ab5c52b1-aea8-4ac2-9c2f-549cc4b8a79c"
        },
        "item": {
          "id": "1fe5eb06-b3a9-4651-8593-9a5ee991129d",
          "name": "credentials_issue:credential.id:array"
        },
        "response": {
          "id": "18108afa-e8cf-45f4-a09b-e9dedf86875d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3b93b81a-222c-4e61-85ff-30785e647f6a",
        "cursor": {
          "ref": "a27c2976-accb-4d41-bfa3-80fd6bed38aa",
          "length": 250,
          "cycles": 1,
          "position": 21,
          "iteration": 0,
          "httpRequestId": "9edd2e39-12a0-4a83-8916-124b713d892c"
        },
        "item": {
          "id": "3b93b81a-222c-4e61-85ff-30785e647f6a",
          "name": "credentials_issue:credential.id:boolean"
        },
        "response": {
          "id": "b16bd1b4-335c-4693-90be-5f3ec2d451f1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d74d31c2-febc-4ed8-a70a-afa0550ab00e",
        "cursor": {
          "ref": "c712b2bf-2648-40cf-b8bc-994f0b1c4fde",
          "length": 250,
          "cycles": 1,
          "position": 22,
          "iteration": 0,
          "httpRequestId": "1119c15e-a40e-4180-8fd9-0892e3569edb"
        },
        "item": {
          "id": "d74d31c2-febc-4ed8-a70a-afa0550ab00e",
          "name": "credentials_issue:credential.id:integer"
        },
        "response": {
          "id": "19bac9a5-40b0-43d8-9d4f-656bd380a3a3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cccb3039-bd14-4ed9-9058-fa8a02b66f48",
        "cursor": {
          "ref": "b59e6052-2e25-484e-9f2e-8770c4ccb7e9",
          "length": 250,
          "cycles": 1,
          "position": 23,
          "iteration": 0,
          "httpRequestId": "f824bc02-8e6e-4252-8904-12a30a01b7c1"
        },
        "item": {
          "id": "cccb3039-bd14-4ed9-9058-fa8a02b66f48",
          "name": "credentials_issue:credential.id:null"
        },
        "response": {
          "id": "358d5a2f-486b-4786-b64e-7f88b0413ebd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "90beb3ff-e17a-48d8-aaa0-782eb372458d",
        "cursor": {
          "ref": "11661df9-669b-4d76-b16a-ae2cc974e092",
          "length": 250,
          "cycles": 1,
          "position": 24,
          "iteration": 0,
          "httpRequestId": "cfb52e2f-d1c7-49b8-8e14-6de9ca11542a"
        },
        "item": {
          "id": "90beb3ff-e17a-48d8-aaa0-782eb372458d",
          "name": "credentials_issue:credential.id:object"
        },
        "response": {
          "id": "48dec032-f9e0-4280-8a8f-f870017cf523",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8f07d8e3-1c6c-4e7a-a449-3d5d942ac37d",
        "cursor": {
          "ref": "f4d3eb11-14c6-4a7c-b662-32019abd2a4f",
          "length": 250,
          "cycles": 1,
          "position": 25,
          "iteration": 0,
          "httpRequestId": "5364c14b-a461-4b70-8c33-d162b8ba5ad8"
        },
        "item": {
          "id": "8f07d8e3-1c6c-4e7a-a449-3d5d942ac37d",
          "name": "credentials_issue:credential.type:missing"
        },
        "response": {
          "id": "ed4b1c3b-6ab8-40e5-8987-8301439998ab",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 25,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f1eb8826-21cb-47fa-901b-13962b9aec8a",
        "cursor": {
          "ref": "b7e1c7e5-18bc-4586-845a-f40f856a0e7a",
          "length": 250,
          "cycles": 1,
          "position": 26,
          "iteration": 0,
          "httpRequestId": "46b34f15-bcae-4194-a527-ff0e3f255b75"
        },
        "item": {
          "id": "f1eb8826-21cb-47fa-901b-13962b9aec8a",
          "name": "credentials_issue:credential.type:boolean"
        },
        "response": {
          "id": "186ea474-6e90-40fe-ab51-5599bc81fb52",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "837b0b84-bfc2-45fb-a328-d2bd17378821",
        "cursor": {
          "ref": "ed1f56ae-10c1-4cae-b590-a89d911e29d1",
          "length": 250,
          "cycles": 1,
          "position": 27,
          "iteration": 0,
          "httpRequestId": "695e5315-3984-4a5c-94c9-44c1cf57627a"
        },
        "item": {
          "id": "837b0b84-bfc2-45fb-a328-d2bd17378821",
          "name": "credentials_issue:credential.type:integer"
        },
        "response": {
          "id": "5bcf0c72-ca4c-42b6-b07a-dfde2dc8c5ba",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "625a04a3-07b7-43b7-974d-1c113409a212",
        "cursor": {
          "ref": "52d83e90-57ac-4c74-97f5-505e5a15d932",
          "length": 250,
          "cycles": 1,
          "position": 28,
          "iteration": 0,
          "httpRequestId": "440b7530-1b83-415b-bd1f-e79d2aab780a"
        },
        "item": {
          "id": "625a04a3-07b7-43b7-974d-1c113409a212",
          "name": "credentials_issue:credential.type:null"
        },
        "response": {
          "id": "3d375578-2a39-4001-8fa8-3c6d1964648d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 25,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d6018487-7435-455b-8b5d-08e77ccff623",
        "cursor": {
          "ref": "21a4399b-8232-4293-8d76-70884794427b",
          "length": 250,
          "cycles": 1,
          "position": 29,
          "iteration": 0,
          "httpRequestId": "1c6d80bf-cb1a-4382-b5f2-805572ad1c41"
        },
        "item": {
          "id": "d6018487-7435-455b-8b5d-08e77ccff623",
          "name": "credentials_issue:credential.type:object"
        },
        "response": {
          "id": "ebcad526-b6f3-400d-853b-d179a1358b13",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 26,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8792c975-29db-4abb-9ce2-72e6f08b4127",
        "cursor": {
          "ref": "0af691c9-c740-407f-ad82-e3595f7e281d",
          "length": 250,
          "cycles": 1,
          "position": 30,
          "iteration": 0,
          "httpRequestId": "f81ea4b3-f0c4-4bec-81fc-6131ec6f8bad"
        },
        "item": {
          "id": "8792c975-29db-4abb-9ce2-72e6f08b4127",
          "name": "credentials_issue:credential.type:string"
        },
        "response": {
          "id": "1db1e067-4f27-40ec-ae9e-6a271588408c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 107
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c5d6540f-7b1e-482f-b429-991b47940e6f",
        "cursor": {
          "ref": "bb89f628-f9da-4edd-8423-2413ced31838",
          "length": 250,
          "cycles": 1,
          "position": 31,
          "iteration": 0,
          "httpRequestId": "d4c55a6b-e657-4db3-8c56-c883cee832af"
        },
        "item": {
          "id": "c5d6540f-7b1e-482f-b429-991b47940e6f",
          "name": "credentials_issue:credential.type.item:missing"
        },
        "response": {
          "id": "0c7d717d-3389-4e85-8526-efbc630c3a22",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 107
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "847a228d-21db-455e-a186-a4c9f967b7d0",
        "cursor": {
          "ref": "556e9661-90b8-46fa-bc6d-66656869dd1f",
          "length": 250,
          "cycles": 1,
          "position": 32,
          "iteration": 0,
          "httpRequestId": "46b87aa0-ea0d-43b3-8f7f-c75c71f85dd6"
        },
        "item": {
          "id": "847a228d-21db-455e-a186-a4c9f967b7d0",
          "name": "credentials_issue:credential.type.item:array"
        },
        "response": {
          "id": "ddcb6d3f-6a03-46fd-a2c8-3692709f37a6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "99bf0c8d-850d-403c-8e9e-6f2a429cf96d",
        "cursor": {
          "ref": "cd9f71d2-8056-4794-83d3-c5fbec17831c",
          "length": 250,
          "cycles": 1,
          "position": 33,
          "iteration": 0,
          "httpRequestId": "7630026b-a992-4bf0-98fb-37fdd651fb9f"
        },
        "item": {
          "id": "99bf0c8d-850d-403c-8e9e-6f2a429cf96d",
          "name": "credentials_issue:credential.type.item:boolean"
        },
        "response": {
          "id": "eac6e501-c190-4897-8977-20d5cf5e4672",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4bbc9505-91cb-4170-a0e1-9605ca78e3cb",
        "cursor": {
          "ref": "a35feea3-13d7-4b4d-83ec-44e61585590e",
          "length": 250,
          "cycles": 1,
          "position": 34,
          "iteration": 0,
          "httpRequestId": "86da768e-96f3-4ffc-85eb-3e4779fa3efd"
        },
        "item": {
          "id": "4bbc9505-91cb-4170-a0e1-9605ca78e3cb",
          "name": "credentials_issue:credential.type.item:integer"
        },
        "response": {
          "id": "c92a280c-024f-497c-9df8-e0a61b63d9cd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 26,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7085414f-0068-44c1-ac91-1e37aa517cb4",
        "cursor": {
          "ref": "7d67b27d-5967-44e7-bdd7-cb8efc36bef9",
          "length": 250,
          "cycles": 1,
          "position": 35,
          "iteration": 0,
          "httpRequestId": "9cc5ddda-46df-45af-833a-4d41ccb0539a"
        },
        "item": {
          "id": "7085414f-0068-44c1-ac91-1e37aa517cb4",
          "name": "credentials_issue:credential.type.item:null"
        },
        "response": {
          "id": "1454ecc6-a98f-4c25-8603-c759d5a2d786",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "41f1ba3b-f672-4ec5-adb9-2ca02ce3e7fc",
        "cursor": {
          "ref": "01927b4a-cad5-4704-9a2a-a7c73ee05dd4",
          "length": 250,
          "cycles": 1,
          "position": 36,
          "iteration": 0,
          "httpRequestId": "63dc99d3-c129-46ee-af5d-6b1b10284711"
        },
        "item": {
          "id": "41f1ba3b-f672-4ec5-adb9-2ca02ce3e7fc",
          "name": "credentials_issue:credential.type.item:object"
        },
        "response": {
          "id": "c7fde0ac-713b-47a0-b49f-3bc177c25743",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c67ac5e1-13ac-4e20-a249-b41753f85cc3",
        "cursor": {
          "ref": "c0d1b23f-9424-43ce-b7c4-a0ec1560abf1",
          "length": 250,
          "cycles": 1,
          "position": 37,
          "iteration": 0,
          "httpRequestId": "2cd7a2af-05da-439c-943a-b9e0f18192ef"
        },
        "item": {
          "id": "c67ac5e1-13ac-4e20-a249-b41753f85cc3",
          "name": "credentials_issue:credential.issuer:missing"
        },
        "response": {
          "id": "95c2499b-de43-4806-b123-70a7f1ff0839",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 25,
          "responseSize": 96
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bd222340-faa7-4bee-a649-8d098b36a505",
        "cursor": {
          "ref": "07bcfa50-4732-47a9-a77f-69e50566e381",
          "length": 250,
          "cycles": 1,
          "position": 38,
          "iteration": 0,
          "httpRequestId": "e8c15871-7a39-442e-aaba-49d34737db91"
        },
        "item": {
          "id": "bd222340-faa7-4bee-a649-8d098b36a505",
          "name": "credentials_issue:credential.issuer:array"
        },
        "response": {
          "id": "de4621d2-72f0-4de0-8e02-d7644c31ab09",
          "status": "Created",
          "code": 201,
          "responseTime": 664,
          "responseSize": 691
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:39)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:39)"
            }
          }
        ]
      },
      {
        "id": "9dcd34b0-7a94-47bf-abda-1811baa71f9f",
        "cursor": {
          "ref": "875c8778-3afd-404b-8d14-52aeafde7e3b",
          "length": 250,
          "cycles": 1,
          "position": 39,
          "iteration": 0,
          "httpRequestId": "6f3e7e35-42bc-475b-b075-d812c634ae94"
        },
        "item": {
          "id": "9dcd34b0-7a94-47bf-abda-1811baa71f9f",
          "name": "credentials_issue:credential.issuer:boolean"
        },
        "response": {
          "id": "b32d3975-706c-4226-b135-a55e5296d952",
          "status": "Created",
          "code": 201,
          "responseTime": 266,
          "responseSize": 650
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:40)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:40)"
            }
          }
        ]
      },
      {
        "id": "dfd518e5-8f83-460b-adf7-ef186609a3ed",
        "cursor": {
          "ref": "1c460aea-9748-43a5-80e8-374ba360ad18",
          "length": 250,
          "cycles": 1,
          "position": 40,
          "iteration": 0,
          "httpRequestId": "ff2f7639-f227-4a12-b663-fdc4d7fb951f"
        },
        "item": {
          "id": "dfd518e5-8f83-460b-adf7-ef186609a3ed",
          "name": "credentials_issue:credential.issuer:integer"
        },
        "response": {
          "id": "56ccb9c4-7591-44cb-bcc7-f4edb5ab148d",
          "status": "Created",
          "code": 201,
          "responseTime": 243,
          "responseSize": 647
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:41)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:41)"
            }
          }
        ]
      },
      {
        "id": "e5260a97-7075-4dc0-956f-c7701e07a9a7",
        "cursor": {
          "ref": "38eb5cb8-24bf-41ed-949d-1817fb82d626",
          "length": 250,
          "cycles": 1,
          "position": 41,
          "iteration": 0,
          "httpRequestId": "43d2c124-ceed-4f6f-8269-d553ef7ea540"
        },
        "item": {
          "id": "e5260a97-7075-4dc0-956f-c7701e07a9a7",
          "name": "credentials_issue:credential.issuer:null"
        },
        "response": {
          "id": "a7abca41-5f34-426b-a855-b658ab93d22c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 96
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3a3c5a95-bfc7-4c9e-a936-4fb266813049",
        "cursor": {
          "ref": "cbb5c456-8f50-41a0-8015-799b523577fc",
          "length": 250,
          "cycles": 1,
          "position": 42,
          "iteration": 0,
          "httpRequestId": "13f33d86-bfb4-40df-a34f-dea330e9eaa1"
        },
        "item": {
          "id": "3a3c5a95-bfc7-4c9e-a936-4fb266813049",
          "name": "credentials_issue.credential.issuer:invalid"
        },
        "response": {
          "id": "1821d3f3-16c0-4a46-8d31-1ab77a9c0924",
          "status": "Created",
          "code": 201,
          "responseTime": 274,
          "responseSize": 656
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:43)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:43)"
            }
          }
        ]
      },
      {
        "id": "54a569fb-347f-420d-b82c-07c96dad7b0d",
        "cursor": {
          "ref": "7d248a6d-44d8-42c5-862f-3f803e0bc879",
          "length": 250,
          "cycles": 1,
          "position": 43,
          "iteration": 0,
          "httpRequestId": "2d92bdc9-b888-4605-8d3b-527930236a4f"
        },
        "item": {
          "id": "54a569fb-347f-420d-b82c-07c96dad7b0d",
          "name": "credentials_issue.credential.issuer:unknown"
        },
        "response": {
          "id": "acfe1775-0d81-4f6b-9c32-8dc35c7a6d64",
          "status": "Created",
          "code": 201,
          "responseTime": 384,
          "responseSize": 692
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 201",
              "stack": "AssertionError: expected response to have status code 422 but got 201\n   at Object.eval sandbox-script.js:1:44)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:44)"
            }
          }
        ]
      },
      {
        "id": "93911dca-fa55-4b8c-8596-c56d9e3c8199",
        "cursor": {
          "ref": "5e1792ad-772f-4d59-add1-0a0a0f27b21b",
          "length": 250,
          "cycles": 1,
          "position": 44,
          "iteration": 0,
          "httpRequestId": "2ca7e880-384d-4aa8-8a1e-ba263d7cd1f4"
        },
        "item": {
          "id": "93911dca-fa55-4b8c-8596-c56d9e3c8199",
          "name": "credentials_issue:credential.issuer.id:missing"
        },
        "response": {
          "id": "7f8c3405-2780-497f-b400-809666948e69",
          "status": "Created",
          "code": 201,
          "responseTime": 235,
          "responseSize": 647
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:45)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:45)"
            }
          }
        ]
      },
      {
        "id": "3dc0a7a5-f9c4-4821-9b35-1f7973fabef0",
        "cursor": {
          "ref": "2d8154b9-68c1-4ed0-96e7-6adfc5da40e5",
          "length": 250,
          "cycles": 1,
          "position": 45,
          "iteration": 0,
          "httpRequestId": "42cb5004-9fad-4bb0-b6b5-63128ac0fc23"
        },
        "item": {
          "id": "3dc0a7a5-f9c4-4821-9b35-1f7973fabef0",
          "name": "credentials_issue:credential.issuer.id:array"
        },
        "response": {
          "id": "01ba0dc9-42fd-408b-828e-997e0c71ed71",
          "status": "Created",
          "code": 201,
          "responseTime": 230,
          "responseSize": 698
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:46)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:46)"
            }
          }
        ]
      },
      {
        "id": "fd43256a-e9aa-4814-9337-f8193af0bab9",
        "cursor": {
          "ref": "9d69c193-e605-4349-b444-ac5395a90f7b",
          "length": 250,
          "cycles": 1,
          "position": 46,
          "iteration": 0,
          "httpRequestId": "3fe686fa-ddda-42fb-95af-b37d0aba3342"
        },
        "item": {
          "id": "fd43256a-e9aa-4814-9337-f8193af0bab9",
          "name": "credentials_issue:credential.issuer.id:boolean"
        },
        "response": {
          "id": "e448af87-1413-40e6-9f4c-6fe42a950410",
          "status": "Created",
          "code": 201,
          "responseTime": 271,
          "responseSize": 657
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:47)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:47)"
            }
          }
        ]
      },
      {
        "id": "2f090255-8b79-4c11-a8a2-92748e9e675c",
        "cursor": {
          "ref": "2cc5a23e-1e6e-447d-a42f-ad9dc7e4b51d",
          "length": 250,
          "cycles": 1,
          "position": 47,
          "iteration": 0,
          "httpRequestId": "a9a81435-4298-4fd1-a7fd-b4922c3e47c2"
        },
        "item": {
          "id": "2f090255-8b79-4c11-a8a2-92748e9e675c",
          "name": "credentials_issue:credential.issuer.id:integer"
        },
        "response": {
          "id": "a7f9d6da-82d6-44fd-8e65-8af9277f1c5b",
          "status": "Created",
          "code": 201,
          "responseTime": 251,
          "responseSize": 654
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:48)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:48)"
            }
          }
        ]
      },
      {
        "id": "e99ab4d1-3e7b-41ef-ad6b-5d41f3a9aee4",
        "cursor": {
          "ref": "fd9b0751-3a6a-427a-8220-2451f1bce6dc",
          "length": 250,
          "cycles": 1,
          "position": 48,
          "iteration": 0,
          "httpRequestId": "842f4b1f-a29c-46f3-84aa-131f307d197b"
        },
        "item": {
          "id": "e99ab4d1-3e7b-41ef-ad6b-5d41f3a9aee4",
          "name": "credentials_issue:credential.issuer.id:null"
        },
        "response": {
          "id": "d48c625c-41ff-4f2a-b4fe-3500b9adde26",
          "status": "Created",
          "code": 201,
          "responseTime": 241,
          "responseSize": 656
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:49)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:49)"
            }
          }
        ]
      },
      {
        "id": "5755a728-6604-4851-956f-990a9f486a0b",
        "cursor": {
          "ref": "5865526b-749d-4974-adf1-20ef8da5271b",
          "length": 250,
          "cycles": 1,
          "position": 49,
          "iteration": 0,
          "httpRequestId": "685b2f71-755f-44d5-be86-14edeec0d50e"
        },
        "item": {
          "id": "5755a728-6604-4851-956f-990a9f486a0b",
          "name": "credentials_issue.credential.issuer.id:invalid"
        },
        "response": {
          "id": "e3db27f4-f91e-49da-9d0a-fdbc74a95f00",
          "status": "Created",
          "code": 201,
          "responseTime": 311,
          "responseSize": 663
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:50)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:50)"
            }
          }
        ]
      },
      {
        "id": "d20b10d1-486b-412b-93d7-34770d3d23d6",
        "cursor": {
          "ref": "b32e6bb4-2446-4fd3-a38c-3870d6d726e3",
          "length": 250,
          "cycles": 1,
          "position": 50,
          "iteration": 0,
          "httpRequestId": "1b0745ce-68d9-464d-ad32-d91cd8a1f873"
        },
        "item": {
          "id": "d20b10d1-486b-412b-93d7-34770d3d23d6",
          "name": "credentials_issue.credential.issuer.id:unknown"
        },
        "response": {
          "id": "4eb81404-ff11-42fa-97ea-b00d4b863245",
          "status": "Created",
          "code": 201,
          "responseTime": 252,
          "responseSize": 699
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 201",
              "stack": "AssertionError: expected response to have status code 422 but got 201\n   at Object.eval sandbox-script.js:1:51)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:51)"
            }
          }
        ]
      },
      {
        "id": "74810113-e6c9-49b8-b7c8-b58e6c7ff2cb",
        "cursor": {
          "ref": "2cfcce57-8e62-44ff-8d68-e3e499caabd4",
          "length": 250,
          "cycles": 1,
          "position": 51,
          "iteration": 0,
          "httpRequestId": "cb50136f-c260-4765-b19a-7d4b7e5f5a75"
        },
        "item": {
          "id": "74810113-e6c9-49b8-b7c8-b58e6c7ff2cb",
          "name": "credentials_issue:credential.issuanceDate.missing"
        },
        "response": {
          "id": "f84e718f-56d0-4d8b-b7dd-2eb086c75f20",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 25,
          "responseSize": 167
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d1d8ff44-9e9e-460c-9b06-5777b0496df6",
        "cursor": {
          "ref": "92d78ea3-8ff2-496a-b1ac-2da129e5daf5",
          "length": 250,
          "cycles": 1,
          "position": 52,
          "iteration": 0,
          "httpRequestId": "8887a278-85b3-467f-8d81-fbb1dc8846fd"
        },
        "item": {
          "id": "d1d8ff44-9e9e-460c-9b06-5777b0496df6",
          "name": "credentials_issue:credential.issuanceDate:array"
        },
        "response": {
          "id": "b3d9207a-6c77-413d-889d-46977f9dc3b2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b0452ed8-aa6e-4286-91f6-cceb72ead5e2",
        "cursor": {
          "ref": "5bef8f22-fc7b-4d83-bc33-fe87dc412f6e",
          "length": 250,
          "cycles": 1,
          "position": 53,
          "iteration": 0,
          "httpRequestId": "0c797b4c-0434-4132-8f1c-92cd228a40b2"
        },
        "item": {
          "id": "b0452ed8-aa6e-4286-91f6-cceb72ead5e2",
          "name": "credentials_issue:credential.issuanceDate:boolean"
        },
        "response": {
          "id": "b3bb54e4-c4b2-48dc-8f56-f9e79f2ab737",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8651f53e-d7b1-4f0c-a44d-2f49bc7531cf",
        "cursor": {
          "ref": "5d80e4f9-fe76-44b0-9ac2-c9639b237dd7",
          "length": 250,
          "cycles": 1,
          "position": 54,
          "iteration": 0,
          "httpRequestId": "591e7ba9-7ce2-482f-9648-95fd16281d4e"
        },
        "item": {
          "id": "8651f53e-d7b1-4f0c-a44d-2f49bc7531cf",
          "name": "credentials_issue:credential.issuanceDate:integer"
        },
        "response": {
          "id": "b4d5ad83-79a5-4702-918d-eb77de60c451",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "93981ca4-d6fe-4d45-9a59-97a28d5dd40f",
        "cursor": {
          "ref": "1dc5be3f-6b61-4dad-9911-5c034f2c0d74",
          "length": 250,
          "cycles": 1,
          "position": 55,
          "iteration": 0,
          "httpRequestId": "df0ea741-7d33-489c-a5f5-2ff23f738469"
        },
        "item": {
          "id": "93981ca4-d6fe-4d45-9a59-97a28d5dd40f",
          "name": "credentials_issue:credential.issuanceDate:null"
        },
        "response": {
          "id": "e92b341c-059b-4d0d-a4b6-a7c4760a0af6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 167
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c9f6bdfc-2b20-4603-9f74-37b94f568396",
        "cursor": {
          "ref": "c004b145-8239-425d-b0b6-8fc6b4a39a44",
          "length": 250,
          "cycles": 1,
          "position": 56,
          "iteration": 0,
          "httpRequestId": "80007dea-0d63-4ae7-94a7-63aeec635efe"
        },
        "item": {
          "id": "c9f6bdfc-2b20-4603-9f74-37b94f568396",
          "name": "credentials_issue:credential.issuanceDate:object"
        },
        "response": {
          "id": "c9ca7133-ecef-4d10-8bcd-8da7d4336340",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9d3828a4-3251-41db-b522-1291073ff141",
        "cursor": {
          "ref": "d9a20960-80d0-4e11-a044-a665cfe16702",
          "length": 250,
          "cycles": 1,
          "position": 57,
          "iteration": 0,
          "httpRequestId": "5d1b86f9-aa8d-4c8a-8168-2faf7d63d44c"
        },
        "item": {
          "id": "9d3828a4-3251-41db-b522-1291073ff141",
          "name": "credentials_issue:credential.issuanceDate:invalid_value"
        },
        "response": {
          "id": "7ae14de8-9d7b-4a98-8737-2bfc75a7d3e6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2f9d766f-ede5-4b95-aeff-3f0c6657007b",
        "cursor": {
          "ref": "b68eb24b-f7d8-4c3e-8f74-db607e6c34a7",
          "length": 250,
          "cycles": 1,
          "position": 58,
          "iteration": 0,
          "httpRequestId": "ccc0fd50-b372-4cd3-848b-5c7d46631bff"
        },
        "item": {
          "id": "2f9d766f-ede5-4b95-aeff-3f0c6657007b",
          "name": "credentials_issue:credential.credentialSubject:missing"
        },
        "response": {
          "id": "db12f1f3-cfe2-4d96-97ad-b56c8e39760f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a0d5991f-2376-4036-a9d9-aafc1168158d",
        "cursor": {
          "ref": "ac01ea95-e8bd-449a-918f-0cb77b9b52a2",
          "length": 250,
          "cycles": 1,
          "position": 59,
          "iteration": 0,
          "httpRequestId": "ce4628d9-65f1-44f8-bbbd-9775ed221e52"
        },
        "item": {
          "id": "a0d5991f-2376-4036-a9d9-aafc1168158d",
          "name": "credentials_issue:credential.credentialSubject:array"
        },
        "response": {
          "id": "282fdf0c-c2dd-4dd7-a9b8-96c17c382628",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 203
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0bb9650f-08e1-4ec1-941d-6448b06c1943",
        "cursor": {
          "ref": "513bad36-12c5-4b9a-a37d-5681609fed50",
          "length": 250,
          "cycles": 1,
          "position": 60,
          "iteration": 0,
          "httpRequestId": "cd8c15b2-a339-4592-acf8-a564434af3b7"
        },
        "item": {
          "id": "0bb9650f-08e1-4ec1-941d-6448b06c1943",
          "name": "credentials_issue:credential.credentialSubject:boolean"
        },
        "response": {
          "id": "46531af9-194f-484f-9f71-b7a9ebffb8fd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 185
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8b6eb082-8019-4471-8517-19bd565820e9",
        "cursor": {
          "ref": "baf2c7ad-b68e-4640-90b7-45130799ef80",
          "length": 250,
          "cycles": 1,
          "position": 61,
          "iteration": 0,
          "httpRequestId": "2ccf4cf6-6c96-44e3-a106-6dd638f31115"
        },
        "item": {
          "id": "8b6eb082-8019-4471-8517-19bd565820e9",
          "name": "credentials_issue:credential.credentialSubject:integer"
        },
        "response": {
          "id": "83acaa9e-5a34-4b8f-aadd-d90a2e6ae7b3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 185
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4fe179e2-81da-46ac-b3ef-58149d26365b",
        "cursor": {
          "ref": "fafb18dd-1a6f-478f-953b-1dafdc86f06a",
          "length": 250,
          "cycles": 1,
          "position": 62,
          "iteration": 0,
          "httpRequestId": "c91eb668-b3f1-4293-bb02-260a0b5fc834"
        },
        "item": {
          "id": "4fe179e2-81da-46ac-b3ef-58149d26365b",
          "name": "credentials_issue:credential.credentialSubject:null"
        },
        "response": {
          "id": "ce7ff194-208f-4032-9cd2-7958aed84cb9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 238
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e31c1e8a-92a1-46ec-99e4-61238a36d4e3",
        "cursor": {
          "ref": "f647a5c8-a8dd-474e-a032-ef8b7131f035",
          "length": 250,
          "cycles": 1,
          "position": 63,
          "iteration": 0,
          "httpRequestId": "acbf3eb7-9186-4bb5-86ad-725dd9528da8"
        },
        "item": {
          "id": "e31c1e8a-92a1-46ec-99e4-61238a36d4e3",
          "name": "credentials_issue:credential.credentialSubject:string"
        },
        "response": {
          "id": "4ce1554e-454c-44dc-8a47-5923a2b5276f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 25,
          "responseSize": 185
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "32343464-a8d8-4306-9020-08f4613d261a",
        "cursor": {
          "ref": "d7750cc0-f9b8-4484-a345-b936d7401213",
          "length": 250,
          "cycles": 1,
          "position": 64,
          "iteration": 0,
          "httpRequestId": "d3272239-3e1c-4eea-91e7-e9d25348c781"
        },
        "item": {
          "id": "32343464-a8d8-4306-9020-08f4613d261a",
          "name": "credentials_issue:credential.credentialSubject.id:array"
        },
        "response": {
          "id": "29231aae-2245-4ef9-992e-fad1bbe76837",
          "status": "Created",
          "code": 201,
          "responseTime": 275,
          "responseSize": 702
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:65)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:65)"
            }
          }
        ]
      },
      {
        "id": "3fd065f5-d10d-4a51-8928-33d2261eaac8",
        "cursor": {
          "ref": "1ed13bfd-3d5d-45f3-bc76-628e7ace8ce3",
          "length": 250,
          "cycles": 1,
          "position": 65,
          "iteration": 0,
          "httpRequestId": "268acbd9-7525-4b47-a33f-751b330c7d67"
        },
        "item": {
          "id": "3fd065f5-d10d-4a51-8928-33d2261eaac8",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy"
        },
        "response": {
          "id": "36f4d0be-a8f6-4ee6-9034-153498dbc13c",
          "status": "Created",
          "code": 201,
          "responseTime": 256,
          "responseSize": 688
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:66)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:66)"
            }
          }
        ]
      },
      {
        "id": "34ed6cb9-4ba4-4af2-a11a-33338ae4fb51",
        "cursor": {
          "ref": "97441c57-ae00-49b9-85c4-f1f79dbd41ce",
          "length": 250,
          "cycles": 1,
          "position": 66,
          "iteration": 0,
          "httpRequestId": "df6c2723-9973-4b70-98a7-bb8e7a16122d"
        },
        "item": {
          "id": "34ed6cb9-4ba4-4af2-a11a-33338ae4fb51",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 2"
        },
        "response": {
          "id": "b6262a09-b7cf-46d8-8b9b-6874b300372c",
          "status": "Created",
          "code": 201,
          "responseTime": 244,
          "responseSize": 685
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:67)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:67)"
            }
          }
        ]
      },
      {
        "id": "43d03990-c60b-4a9a-8cb0-bc372b6174a9",
        "cursor": {
          "ref": "862c928e-f419-438f-8133-85f53aa22e42",
          "length": 250,
          "cycles": 1,
          "position": 67,
          "iteration": 0,
          "httpRequestId": "a8ea2b33-8b59-458d-a3c0-afdfd009e5e7"
        },
        "item": {
          "id": "43d03990-c60b-4a9a-8cb0-bc372b6174a9",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 3"
        },
        "response": {
          "id": "0a210e61-d22a-4161-bdef-35245556e2b7",
          "status": "Created",
          "code": 201,
          "responseTime": 295,
          "responseSize": 687
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:68)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:68)"
            }
          }
        ]
      },
      {
        "id": "6748c66e-e95a-4cf9-9a75-2de0082b5437",
        "cursor": {
          "ref": "52dbb8cb-73d4-473e-9c44-432a6b3cf5e7",
          "length": 250,
          "cycles": 1,
          "position": 68,
          "iteration": 0,
          "httpRequestId": "94e8b959-6100-4d90-a855-4db174698628"
        },
        "item": {
          "id": "6748c66e-e95a-4cf9-9a75-2de0082b5437",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 4"
        },
        "response": {
          "id": "71bbcdf6-6536-4e1e-ad72-9705e7f1560f",
          "status": "Created",
          "code": 201,
          "responseTime": 241,
          "responseSize": 685
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:69)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:69)"
            }
          }
        ]
      },
      {
        "id": "b0d30679-aa20-4b46-a075-783b35ee7927",
        "cursor": {
          "ref": "434bed24-ad0b-4285-8986-fe4b18655452",
          "length": 250,
          "cycles": 1,
          "position": 69,
          "iteration": 0,
          "httpRequestId": "d6878082-718f-47bc-a830-c1992348d6e9"
        },
        "item": {
          "id": "b0d30679-aa20-4b46-a075-783b35ee7927",
          "name": "credentials_issue:options:missing"
        },
        "response": {
          "id": "db2154d6-cbea-4b6e-96e3-93091d5c1847",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 24,
          "responseSize": 116
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6c395d02-bfbd-46b1-9baa-f37fcc90b01c",
        "cursor": {
          "ref": "4997bb65-ab21-4e51-b898-80d8cee53022",
          "length": 250,
          "cycles": 1,
          "position": 70,
          "iteration": 0,
          "httpRequestId": "26e70749-2b1b-463c-9453-8c054df3667e"
        },
        "item": {
          "id": "6c395d02-bfbd-46b1-9baa-f37fcc90b01c",
          "name": "credentials_issue:options:array"
        },
        "response": {
          "id": "9771e31f-63b8-4193-befb-dd364b3390c8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 24,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4dcafc62-a845-48e9-bfd5-95b8f71b0202",
        "cursor": {
          "ref": "4563b4f7-a581-46d4-a58d-baf4ca27c19a",
          "length": 250,
          "cycles": 1,
          "position": 71,
          "iteration": 0,
          "httpRequestId": "dcfe0e8c-aff8-4adb-80f8-99d98f91582e"
        },
        "item": {
          "id": "4dcafc62-a845-48e9-bfd5-95b8f71b0202",
          "name": "credentials_issue:options:boolean"
        },
        "response": {
          "id": "fbd300d6-b56c-42a6-a69a-8f5023ad889b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 157
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c451a2ec-9701-4b95-82b6-f8fafba04182",
        "cursor": {
          "ref": "6a9363eb-aa4f-479c-9c48-62add569df39",
          "length": 250,
          "cycles": 1,
          "position": 72,
          "iteration": 0,
          "httpRequestId": "ff19d6cf-5c16-4fb2-a006-aea20c954448"
        },
        "item": {
          "id": "c451a2ec-9701-4b95-82b6-f8fafba04182",
          "name": "credentials_issue:options:integer"
        },
        "response": {
          "id": "26c16a98-0195-4365-a356-8539e79a46bc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 157
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "75e48998-1512-4b97-9ddb-578bec081a88",
        "cursor": {
          "ref": "c7629fab-b325-4805-bcaf-5576c18f89a7",
          "length": 250,
          "cycles": 1,
          "position": 73,
          "iteration": 0,
          "httpRequestId": "a39b702e-9f08-46e5-a717-464181c20fea"
        },
        "item": {
          "id": "75e48998-1512-4b97-9ddb-578bec081a88",
          "name": "credentials_issue:options:null"
        },
        "response": {
          "id": "9dcfbfdb-b62f-42bd-b3df-5fdf67a567ad",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 189
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "159ebd51-84fd-482d-acaa-cf24236ba606",
        "cursor": {
          "ref": "1024a15e-2053-4571-a2eb-718ab59fd911",
          "length": 250,
          "cycles": 1,
          "position": 74,
          "iteration": 0,
          "httpRequestId": "2c19ef28-d9ff-4fcf-9f0f-e80afd8146e8"
        },
        "item": {
          "id": "159ebd51-84fd-482d-acaa-cf24236ba606",
          "name": "credentials_issue:options:string"
        },
        "response": {
          "id": "9f592571-63e3-494c-a9b6-4865b738d9b6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 24,
          "responseSize": 189
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "00e558dd-d398-45f9-b2ec-d77ee9591824",
        "cursor": {
          "ref": "2ad79ffd-a0a8-4d49-8596-99210604623c",
          "length": 250,
          "cycles": 1,
          "position": 75,
          "iteration": 0,
          "httpRequestId": "24389a4b-ef8d-4a61-a554-7dd1d11f5ed3"
        },
        "item": {
          "id": "00e558dd-d398-45f9-b2ec-d77ee9591824",
          "name": "credentials_issue:options.type:missing"
        },
        "response": {
          "id": "ac2d2d4b-e4e0-44cc-9ea3-849b4b0a382c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 278
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "63e8bfe0-fb96-4475-b6dc-12046384ba04",
        "cursor": {
          "ref": "764a0d70-7623-48df-aa8c-cb3d2a0870fd",
          "length": 250,
          "cycles": 1,
          "position": 76,
          "iteration": 0,
          "httpRequestId": "90dccb01-5b1f-4f5d-8308-dde2f078f260"
        },
        "item": {
          "id": "63e8bfe0-fb96-4475-b6dc-12046384ba04",
          "name": "credentials_issue:options.type:array"
        },
        "response": {
          "id": "1abf764d-8e96-4f76-894b-b128d6732dfa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e03f8e6b-5fa4-4d56-98fb-468e19045522",
        "cursor": {
          "ref": "e086cf5d-9cdc-4e68-8609-31ccb155c241",
          "length": 250,
          "cycles": 1,
          "position": 77,
          "iteration": 0,
          "httpRequestId": "258d3380-a87e-4969-81fb-ef8e99114998"
        },
        "item": {
          "id": "e03f8e6b-5fa4-4d56-98fb-468e19045522",
          "name": "credentials_issue:options.type:boolean"
        },
        "response": {
          "id": "1dae610f-1fa3-4c5f-8f4e-a7a00fddb394",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 26,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ea11c752-4226-4a82-b8a6-c49c7e6f5fc8",
        "cursor": {
          "ref": "9411cdfb-fdc9-469d-8181-ff8a0fc73e4f",
          "length": 250,
          "cycles": 1,
          "position": 78,
          "iteration": 0,
          "httpRequestId": "a161acc4-e2d9-4909-ace6-60655e72c72a"
        },
        "item": {
          "id": "ea11c752-4226-4a82-b8a6-c49c7e6f5fc8",
          "name": "credentials_issue:options.type:integer"
        },
        "response": {
          "id": "08a2b837-0804-47c5-9b1a-b594d65254bb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "58451740-c5fb-4cce-bc23-30ab9814c181",
        "cursor": {
          "ref": "e0e5dff4-8224-4454-8cc5-57b5989918e2",
          "length": 250,
          "cycles": 1,
          "position": 79,
          "iteration": 0,
          "httpRequestId": "b224875d-f037-4479-af71-0e7422de14fe"
        },
        "item": {
          "id": "58451740-c5fb-4cce-bc23-30ab9814c181",
          "name": "credentials_issue:options.type:null"
        },
        "response": {
          "id": "f6f770ef-94f0-45c6-8002-22bae3790a85",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 278
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1b1f9d90-b4b0-40b2-ad6f-be2e78384465",
        "cursor": {
          "ref": "b1b8d236-66ef-4137-926c-e9b2ba13d572",
          "length": 250,
          "cycles": 1,
          "position": 80,
          "iteration": 0,
          "httpRequestId": "41e6679b-6604-496c-bfbd-0d2e5fe16892"
        },
        "item": {
          "id": "1b1f9d90-b4b0-40b2-ad6f-be2e78384465",
          "name": "credentials_issue:options.type:object"
        },
        "response": {
          "id": "9c319365-e1e3-4897-8b19-36242e593fd0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 24,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6edec91d-18f2-4704-af26-72a38a0ea430",
        "cursor": {
          "ref": "bd547c91-52c5-4d6d-8866-f3be19b68242",
          "length": 250,
          "cycles": 1,
          "position": 81,
          "iteration": 0,
          "httpRequestId": "b9e2924a-47b6-4d7a-ad3f-32fa613a1513"
        },
        "item": {
          "id": "6edec91d-18f2-4704-af26-72a38a0ea430",
          "name": "credentials_issue:options.type:invalid_value"
        },
        "response": {
          "id": "37ca6394-9a6d-4cb6-83fb-637953801748",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 207
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a514888b-9913-4327-acb4-767d5b5edae0",
        "cursor": {
          "ref": "da23699b-d545-4874-a279-623a45adcedf",
          "length": 250,
          "cycles": 1,
          "position": 82,
          "iteration": 0,
          "httpRequestId": "461f1c66-c9a9-4825-8776-0b885d0b492d"
        },
        "item": {
          "id": "a514888b-9913-4327-acb4-767d5b5edae0",
          "name": "credentials_issue:options.created:array"
        },
        "response": {
          "id": "cd22c02b-4f43-4aaa-b6e9-d9010c80801f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "50ef6bcb-e5ef-4451-8206-badd4d09db7e",
        "cursor": {
          "ref": "f89128e3-37a2-4a4d-960f-2bcc963a0919",
          "length": 250,
          "cycles": 1,
          "position": 83,
          "iteration": 0,
          "httpRequestId": "0123fbe0-2ac5-4edc-a956-44dd42a81500"
        },
        "item": {
          "id": "50ef6bcb-e5ef-4451-8206-badd4d09db7e",
          "name": "credentials_issue:options.created:boolean"
        },
        "response": {
          "id": "55a59b53-92b3-47a6-875a-83a696bda483",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 25,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a6e3fd78-b5f6-46ce-a498-c9e937235bff",
        "cursor": {
          "ref": "ff1bd1e4-0d32-4b87-aa0e-1fb56cff2c64",
          "length": 250,
          "cycles": 1,
          "position": 84,
          "iteration": 0,
          "httpRequestId": "c7ad4f13-8397-47aa-9858-79f759d9107b"
        },
        "item": {
          "id": "a6e3fd78-b5f6-46ce-a498-c9e937235bff",
          "name": "credentials_issue:options.created:integer"
        },
        "response": {
          "id": "881aa118-2fe4-464e-b79b-dc1d78d4126e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0575b429-3fea-4c44-bbfc-ba6f132f4c9f",
        "cursor": {
          "ref": "f8959528-184d-48d7-bfb5-5b9dcf18d61a",
          "length": 250,
          "cycles": 1,
          "position": 85,
          "iteration": 0,
          "httpRequestId": "0179dd1d-cc24-4feb-bd5d-89e8d3a50f3f"
        },
        "item": {
          "id": "0575b429-3fea-4c44-bbfc-ba6f132f4c9f",
          "name": "credentials_issue:options.created:null"
        },
        "response": {
          "id": "91275143-ff75-4926-a718-52da52e80d23",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 25,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a5bfa881-ca23-4548-b179-5dd77c463c92",
        "cursor": {
          "ref": "d772cb2b-fa5a-4324-a3ee-5f4697d0ff95",
          "length": 250,
          "cycles": 1,
          "position": 86,
          "iteration": 0,
          "httpRequestId": "12a536d8-b2f3-4c7f-9d70-f01b9507284f"
        },
        "item": {
          "id": "a5bfa881-ca23-4548-b179-5dd77c463c92",
          "name": "credentials_issue:options.created:object"
        },
        "response": {
          "id": "11d7a221-a898-4a88-8c28-b8383053b1b8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "898c668d-8f36-43ba-a7c9-5aac2f9738e1",
        "cursor": {
          "ref": "aaaa86c6-9418-4afe-85af-a8304574caec",
          "length": 250,
          "cycles": 1,
          "position": 87,
          "iteration": 0,
          "httpRequestId": "59b66d4c-8b0b-4036-a2a4-07bb471e9576"
        },
        "item": {
          "id": "898c668d-8f36-43ba-a7c9-5aac2f9738e1",
          "name": "credentials_issue:options.created:invalid"
        },
        "response": {
          "id": "73315a13-5b65-41b7-9a5b-d5ceb4d5d203",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "37e7cd18-3b14-4326-922f-a77fb720ccba",
        "cursor": {
          "ref": "13775802-cd09-40e2-b1f0-3040fae9ad16",
          "length": 250,
          "cycles": 1,
          "position": 88,
          "iteration": 0,
          "httpRequestId": "91db554d-feac-433f-90b5-a07c1f8a813a"
        },
        "item": {
          "id": "37e7cd18-3b14-4326-922f-a77fb720ccba",
          "name": "credentials_issue:options.credentialStatus:array"
        },
        "response": {
          "id": "38033050-f147-4767-a4dc-b974e77f0ca6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3733f06b-6cc6-4325-a134-a6453d7ff0dc",
        "cursor": {
          "ref": "e76bf2c7-efcf-4bb7-899b-e90e95e53be6",
          "length": 250,
          "cycles": 1,
          "position": 89,
          "iteration": 0,
          "httpRequestId": "a61a2ec6-3176-4bd3-8e1d-7c3e50acaa75"
        },
        "item": {
          "id": "3733f06b-6cc6-4325-a134-a6453d7ff0dc",
          "name": "credentials_issue:options.credentialStatus:boolean"
        },
        "response": {
          "id": "67ac2b74-7a46-4f1b-a467-7bccac85cff6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 26,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "88fd7501-651e-465a-8603-f46669dde818",
        "cursor": {
          "ref": "0a19303e-11ec-41bb-bc89-ab8864962a0e",
          "length": 250,
          "cycles": 1,
          "position": 90,
          "iteration": 0,
          "httpRequestId": "512909b2-6720-4dd7-bdd2-ab76d999775a"
        },
        "item": {
          "id": "88fd7501-651e-465a-8603-f46669dde818",
          "name": "credentials_issue:options.credentialStatus:integer"
        },
        "response": {
          "id": "c22dbaa5-9095-48da-af29-f28317d7ff5f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "427f6dc0-1427-412f-b645-e8a193fdbea4",
        "cursor": {
          "ref": "0d12c348-083c-49ce-98e3-9eb9c6e132b4",
          "length": 250,
          "cycles": 1,
          "position": 91,
          "iteration": 0,
          "httpRequestId": "dd9b3c78-d69d-4437-90cf-2668a40932e7"
        },
        "item": {
          "id": "427f6dc0-1427-412f-b645-e8a193fdbea4",
          "name": "credentials_issue:options.credentialStatus:null"
        },
        "response": {
          "id": "b3a7509e-ea63-4dfe-9749-2dda0a6c04d7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0d9dfcdc-6808-4871-ab8b-b186d661187e",
        "cursor": {
          "ref": "b99093d5-064e-4e81-a8af-9f903890a4f9",
          "length": 250,
          "cycles": 1,
          "position": 92,
          "iteration": 0,
          "httpRequestId": "eb61122c-9e94-4604-8e7e-9a76c577007c"
        },
        "item": {
          "id": "0d9dfcdc-6808-4871-ab8b-b186d661187e",
          "name": "credentials_issue:options.credentialStatus:string"
        },
        "response": {
          "id": "e9392428-b1c7-4154-9ad8-d68df3231534",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 25,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f3e2afe6-6d1e-4835-b5a6-ade0ec6cc71f",
        "cursor": {
          "ref": "fdc467f2-32f2-4fcc-887f-45ba5b567f22",
          "length": 250,
          "cycles": 1,
          "position": 93,
          "iteration": 0,
          "httpRequestId": "3b54aacf-fefe-4181-a8ed-04fc6da2afa0"
        },
        "item": {
          "id": "f3e2afe6-6d1e-4835-b5a6-ade0ec6cc71f",
          "name": "credentials_issue:options.credentialStatus.type:missing"
        },
        "response": {
          "id": "67c2d5ff-17a5-4b77-8467-f98128fabc01",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 25,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "35a54df0-6003-4338-a051-694046e438a0",
        "cursor": {
          "ref": "ddd2a541-0ec7-49a2-a620-ef60625b0160",
          "length": 250,
          "cycles": 1,
          "position": 94,
          "iteration": 0,
          "httpRequestId": "a1c36e7d-4579-4ae9-a5f7-27da63a0662f"
        },
        "item": {
          "id": "35a54df0-6003-4338-a051-694046e438a0",
          "name": "credentials_issue:options.credentialStatus.type:array"
        },
        "response": {
          "id": "5077be40-5550-49ec-aab5-e19d42e19122",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "da94f43d-bc4f-4c3e-8244-f631731f82e1",
        "cursor": {
          "ref": "7d9249af-638a-403f-84c7-555d96fde716",
          "length": 250,
          "cycles": 1,
          "position": 95,
          "iteration": 0,
          "httpRequestId": "d2a1cc26-4dbc-4045-816f-d13fc2d473f2"
        },
        "item": {
          "id": "da94f43d-bc4f-4c3e-8244-f631731f82e1",
          "name": "credentials_issue:options.credentialStatus.type:boolean"
        },
        "response": {
          "id": "cf476249-80af-4ed9-a57e-72007066a00a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8be8383c-4d22-41fe-aa7f-1baabadfc14c",
        "cursor": {
          "ref": "a1fcca16-0ca5-4ccd-8f4f-657f9b27d9be",
          "length": 250,
          "cycles": 1,
          "position": 96,
          "iteration": 0,
          "httpRequestId": "7c175309-b87e-4583-838a-77c178dc40ed"
        },
        "item": {
          "id": "8be8383c-4d22-41fe-aa7f-1baabadfc14c",
          "name": "credentials_issue:options.credentialStatus.type:integer"
        },
        "response": {
          "id": "bcd8bd63-8187-4fdd-b5c3-5a2e90c93447",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3515895e-0d41-43ec-80d0-28d8918a2c57",
        "cursor": {
          "ref": "ce10f856-df90-4070-8bae-43ed77d5f0ee",
          "length": 250,
          "cycles": 1,
          "position": 97,
          "iteration": 0,
          "httpRequestId": "3f6e06fb-8dbe-4f39-93c5-69554850c696"
        },
        "item": {
          "id": "3515895e-0d41-43ec-80d0-28d8918a2c57",
          "name": "credentials_issue:options.credentialStatus.type:null"
        },
        "response": {
          "id": "4b10bc79-7b81-4c8f-9013-9705f6edd12f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "420f5516-7196-48c7-b354-a56ee4bf59f2",
        "cursor": {
          "ref": "da99b0d6-5228-4a16-9630-880e40963d24",
          "length": 250,
          "cycles": 1,
          "position": 98,
          "iteration": 0,
          "httpRequestId": "1c630772-e481-4e4d-af02-0b8e6924973a"
        },
        "item": {
          "id": "420f5516-7196-48c7-b354-a56ee4bf59f2",
          "name": "credentials_issue:options.credentialStatus.type:null Copy"
        },
        "response": {
          "id": "f151366c-c5f7-4ac5-96bd-cbe7ddbcd08f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2fce058a-5fbb-4afd-9647-0431c0f64b03",
        "cursor": {
          "ref": "a8119220-c249-4053-8fb1-943cf873e84b",
          "length": 250,
          "cycles": 1,
          "position": 99,
          "iteration": 0,
          "httpRequestId": "55314f19-8ba2-4dc7-b488-cf3c2d9f01b9"
        },
        "item": {
          "id": "2fce058a-5fbb-4afd-9647-0431c0f64b03",
          "name": "credentials_issue:options.credentialStatus.type:invalid"
        },
        "response": {
          "id": "29622efd-80df-47e5-a18b-df09ed89aa17",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 26,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8a52e113-07c4-451f-9721-6a926f9e62fa",
        "cursor": {
          "ref": "ebb7ef4f-ad61-4dd8-bd94-1615286969e2",
          "length": 250,
          "cycles": 1,
          "position": 100,
          "iteration": 0,
          "httpRequestId": "d99b3234-1c1d-4605-be36-ed1507c29276"
        },
        "item": {
          "id": "8a52e113-07c4-451f-9721-6a926f9e62fa",
          "name": "credentials_issue:missing_auth"
        },
        "response": {
          "id": "16dce3d7-9efe-4ea9-8835-3630960f9a75",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 25,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a0a6dfeb-b941-4299-9854-ffa15bcb602f",
        "cursor": {
          "ref": "767fefae-4e81-4999-a5f6-9f656ff11b4e",
          "length": 250,
          "cycles": 1,
          "position": 101,
          "iteration": 0,
          "httpRequestId": "76ea02ec-093d-4e7f-ac10-20daed03d330"
        },
        "item": {
          "id": "a0a6dfeb-b941-4299-9854-ffa15bcb602f",
          "name": "credentials_issue.credential.issuer:dup"
        },
        "response": {
          "id": "9bdcbe60-5c67-40c6-bfd6-8378fdd55c8d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 400",
              "stack": "AssertionError: expected response to have status code 201 but got 400\n   at Object.eval sandbox-script.js:1:102)"
            }
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 1,
              "test": "response issuer matches request credential.issuer",
              "message": "Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.",
              "stack": "TypeError: Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.\n   at Object.eval sandbox-script.js:2:102)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:3:102)"
            }
          }
        ]
      },
      {
        "id": "383f1c29-028a-467e-b1ac-3a01c55dab58",
        "cursor": {
          "ref": "7ed0a7a4-a540-402b-9771-3ac5ce5f915a",
          "length": 250,
          "cycles": 1,
          "position": 102,
          "iteration": 0,
          "httpRequestId": "7eaffb62-565d-44c5-809f-08107b05c59b"
        },
        "item": {
          "id": "383f1c29-028a-467e-b1ac-3a01c55dab58",
          "name": "credentials_issue"
        },
        "response": {
          "id": "5f863277-5c9b-4877-ae0b-6400a4ac22c0",
          "status": "Created",
          "code": 201,
          "responseTime": 316,
          "responseSize": 689
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false
          },
          {
            "assertion": "response issuanceDate matches request credential.issuanceDate",
            "skipped": false
          },
          {
            "assertion": "response proof.created is close to 'now'",
            "skipped": false
          }
        ]
      },
      {
        "id": "4422c3e6-8b96-4625-a395-36dbf0f62b61",
        "cursor": {
          "ref": "dd083c94-f39a-44c8-9947-3b061ffe1076",
          "length": 250,
          "cycles": 1,
          "position": 103,
          "iteration": 0,
          "httpRequestId": "ecd78316-3464-41de-8635-4084d97e275b"
        },
        "item": {
          "id": "4422c3e6-8b96-4625-a395-36dbf0f62b61",
          "name": "credentials_issue:credential.opt.id"
        },
        "response": {
          "id": "c17525b4-1b05-4971-942d-3c7208e3feae",
          "status": "Created",
          "code": 201,
          "responseTime": 257,
          "responseSize": 643
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verifiableCredential.id matches request credential.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "81304a76-8ce0-49ad-81ed-676224866854",
        "cursor": {
          "ref": "ee3181d8-433c-4428-89e7-791e96dbff90",
          "length": 250,
          "cycles": 1,
          "position": 104,
          "iteration": 0,
          "httpRequestId": "e8a633c3-2625-4b71-bf94-ddac91bd4312"
        },
        "item": {
          "id": "81304a76-8ce0-49ad-81ed-676224866854",
          "name": "credentials_issue:credential:alt.issuer.object"
        },
        "response": {
          "id": "1b7f2931-340c-4ac5-be87-ca27ce50aaa9",
          "status": "Created",
          "code": 201,
          "responseTime": 246,
          "responseSize": 696
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "d006e041-ba2b-48cb-8f09-f1a831bd37de",
        "cursor": {
          "ref": "73d7fdd8-9a05-4ef6-8ead-629c712daaff",
          "length": 250,
          "cycles": 1,
          "position": 105,
          "iteration": 0,
          "httpRequestId": "e1d68519-1aaa-4ffc-9540-6c1fe9bb7ed7"
        },
        "item": {
          "id": "d006e041-ba2b-48cb-8f09-f1a831bd37de",
          "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id"
        },
        "response": {
          "id": "ac2ac0e6-63dd-4845-ab17-2f8fbb1387b3",
          "status": "Created",
          "code": 201,
          "responseTime": 277,
          "responseSize": 700
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response credentialSubject.id matches request credential.credentialSubject.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "e91153ca-94fe-4896-8d75-4475c10d5133",
        "cursor": {
          "ref": "5cfcb317-de2c-4982-b6c9-a12d1e701831",
          "length": 250,
          "cycles": 1,
          "position": 106,
          "iteration": 0,
          "httpRequestId": "eb3eb153-6342-4285-a647-2534b2b0f4a7"
        },
        "item": {
          "id": "e91153ca-94fe-4896-8d75-4475c10d5133",
          "name": "credentials_issue:options:opt.created"
        },
        "response": {
          "id": "132af9f8-6296-4af9-93c6-71af1b4b0c07",
          "status": "Created",
          "code": 201,
          "responseTime": 269,
          "responseSize": 689
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response proof.created matches request options.created",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response proof.created matches request options.created",
              "message": "expected '2024-05-29T00:40:32.472Z' to equal '2006-01-02T15:04:05Z'",
              "stack": "AssertionError: expected '2024-05-29T00:40:32.472Z' to equal '2006-01-02T15:04:05Z'\n   at Object.eval sandbox-script.js:3:107)"
            }
          }
        ]
      },
      {
        "id": "7973f9b5-4f93-4f49-b13f-efdd60332140",
        "cursor": {
          "ref": "4c8f0102-507b-4ade-8e5e-895fd634cf3e",
          "length": 250,
          "cycles": 1,
          "position": 107,
          "iteration": 0,
          "httpRequestId": "2a977971-8a8e-4c48-858f-0c08be1d7b7e"
        },
        "item": {
          "id": "7973f9b5-4f93-4f49-b13f-efdd60332140",
          "name": "credentials_issue:options:opt.credentialStatus"
        },
        "response": {
          "id": "d813fc2e-3023-42b0-85e2-0f5bdd5fd5cf",
          "status": "Created",
          "code": 201,
          "responseTime": 243,
          "responseSize": 689
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e7ac1ccd-4c51-4f38-99a4-7d091ac3aef4",
        "cursor": {
          "ref": "f365d52d-dbc8-445f-b597-50efed826cbb",
          "length": 250,
          "cycles": 1,
          "position": 108,
          "iteration": 0,
          "httpRequestId": "a96ede30-770b-46fb-bf01-772343034355"
        },
        "item": {
          "id": "e7ac1ccd-4c51-4f38-99a4-7d091ac3aef4",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "ca1b1bd4-73cb-4350-8fce-2b91d4f27ac1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f166c9ec-b6f8-4978-a96f-c71680090587",
        "cursor": {
          "ref": "d93e940a-6ae7-4da8-a742-b904db959a68",
          "length": 250,
          "cycles": 1,
          "position": 109,
          "iteration": 0,
          "httpRequestId": "ef693ec2-2e8d-4e46-9854-1261beee1412"
        },
        "item": {
          "id": "f166c9ec-b6f8-4978-a96f-c71680090587",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "31e70c7e-97d4-46c5-87c0-453b7c2bb5e3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 57,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "522d593b-0e8a-4d2a-822d-89366fccf39f",
        "cursor": {
          "ref": "3948f4e2-66ec-4e7a-8084-f0a33a5d951e",
          "length": 250,
          "cycles": 1,
          "position": 110,
          "iteration": 0,
          "httpRequestId": "228216d2-45f0-4429-8d4c-5552d915f4bc"
        },
        "item": {
          "id": "522d593b-0e8a-4d2a-822d-89366fccf39f",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "432240b0-f99f-49a3-89cd-22235cb21a5d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 24,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4b22aabf-aa2d-4906-ae07-e2e462e684cd",
        "cursor": {
          "ref": "ad6f46b0-582d-44b9-8cb0-b1b87eb3db68",
          "length": 250,
          "cycles": 1,
          "position": 111,
          "iteration": 0,
          "httpRequestId": "962b61dc-d1fe-4701-8812-02a119fc34d7"
        },
        "item": {
          "id": "4b22aabf-aa2d-4906-ae07-e2e462e684cd",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "19067b47-1d0a-43d7-90b4-8ed1ffb4f3f7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3272db06-20d9-4170-87c2-309eab046938",
        "cursor": {
          "ref": "b1425a21-fece-4514-ad59-a1c12206ce37",
          "length": 250,
          "cycles": 1,
          "position": 112,
          "iteration": 0,
          "httpRequestId": "5af209b6-8280-4468-91f1-16c6c3561003"
        },
        "item": {
          "id": "3272db06-20d9-4170-87c2-309eab046938",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "09d6c804-8063-44d7-9e65-0e1c2d31207c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7dd755bc-a0da-4587-bc30-4c6ca7c4aeb2",
        "cursor": {
          "ref": "9183a835-618d-4b21-8b33-25a37f30c0b5",
          "length": 250,
          "cycles": 1,
          "position": 113,
          "iteration": 0,
          "httpRequestId": "df5431af-d91b-4483-b7a3-480d474af790"
        },
        "item": {
          "id": "7dd755bc-a0da-4587-bc30-4c6ca7c4aeb2",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "052b08bb-1856-4401-aec3-5164b6e1d4b7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 24,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "690b0977-af9e-467f-9530-85fda849778f",
        "cursor": {
          "ref": "1914774a-5a75-4811-ba17-f7f7f78ce73e",
          "length": 250,
          "cycles": 1,
          "position": 114,
          "iteration": 0,
          "httpRequestId": "d97a327d-7408-4a45-a085-efd4fa4fe8f8"
        },
        "item": {
          "id": "690b0977-af9e-467f-9530-85fda849778f",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "f33ae708-516b-41b5-aebe-60a43009d5f6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 146
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b3ffcee6-95f5-402d-884c-91c81732672e",
        "cursor": {
          "ref": "b6d85bd8-17cc-428c-aca2-2046644f79d6",
          "length": 250,
          "cycles": 1,
          "position": 115,
          "iteration": 0,
          "httpRequestId": "55ed8283-d6b7-49bb-b040-9c40632e1277"
        },
        "item": {
          "id": "b3ffcee6-95f5-402d-884c-91c81732672e",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "5cfc131a-8990-4328-9f10-b74259f7afc0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 26,
          "responseSize": 228
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b1d38695-a289-4369-8f3a-faa6f3f5b74c",
        "cursor": {
          "ref": "5d88d9cc-5ff4-442e-92b0-4d4fcde322fd",
          "length": 250,
          "cycles": 1,
          "position": 116,
          "iteration": 0,
          "httpRequestId": "898e12d2-dd56-4537-99e9-87705b5d6518"
        },
        "item": {
          "id": "b1d38695-a289-4369-8f3a-faa6f3f5b74c",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "0ba917ad-8232-4264-b636-4aad7870d5e0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 25,
          "responseSize": 228
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "06ae2acf-3ddb-497b-97f8-04603437c844",
        "cursor": {
          "ref": "5e0c5a92-40fb-466b-9fa8-0c31e48a4b37",
          "length": 250,
          "cycles": 1,
          "position": 117,
          "iteration": 0,
          "httpRequestId": "b0d6e80d-5ac7-4a56-aed8-26f9760d1cad"
        },
        "item": {
          "id": "06ae2acf-3ddb-497b-97f8-04603437c844",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "0e3a21d1-ef50-4511-b4d1-a26fe626a694",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 22,
          "responseSize": 228
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b14ce581-8ead-4412-b68d-567a6ce6b608",
        "cursor": {
          "ref": "d907eef9-b94f-404c-b6c2-dab212c5ce6f",
          "length": 250,
          "cycles": 1,
          "position": 118,
          "iteration": 0,
          "httpRequestId": "04f70501-8c36-447d-92bb-e1a4cdfaefdd"
        },
        "item": {
          "id": "b14ce581-8ead-4412-b68d-567a6ce6b608",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "ed36a9e5-7e1f-4a2d-8465-72a3600495aa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 23,
          "responseSize": 122
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "678bacbf-c9c6-4156-a214-eeefa8781445",
        "cursor": {
          "ref": "d9286ba8-5dc9-41d6-b195-807834b5a994",
          "length": 250,
          "cycles": 1,
          "position": 119,
          "iteration": 0,
          "httpRequestId": "5667b671-f64c-429c-98df-cf384fb45a09"
        },
        "item": {
          "id": "678bacbf-c9c6-4156-a214-eeefa8781445",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "388053cd-ad96-4255-bafc-578118ac5b0c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 228
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3aad51ca-cbf5-44a3-b75d-9e73b605a4f9",
        "cursor": {
          "ref": "9511e2a1-49ae-4da4-b27d-b3e7289dae6d",
          "length": 250,
          "cycles": 1,
          "position": 120,
          "iteration": 0,
          "httpRequestId": "1313edd7-b77b-4c32-a8d6-c7d04366f329"
        },
        "item": {
          "id": "3aad51ca-cbf5-44a3-b75d-9e73b605a4f9",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "c565eab0-3cca-471a-a99b-b9d2e4ec2f19",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 194
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4c3c7512-82d1-4d24-af58-c3bf77307445",
        "cursor": {
          "ref": "b2f48a35-da35-47f4-a8b4-bf27e3586704",
          "length": 250,
          "cycles": 1,
          "position": 121,
          "iteration": 0,
          "httpRequestId": "7ee3cfbd-2de1-42d9-9478-2463006c91fd"
        },
        "item": {
          "id": "4c3c7512-82d1-4d24-af58-c3bf77307445",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "ba34a665-46cf-4e70-8306-7a636cd7436e",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 55,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:122)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:122)"
            }
          }
        ]
      },
      {
        "id": "5fd740d9-7dbf-46c5-a405-cc1dfca88c6c",
        "cursor": {
          "ref": "d88b7810-89e4-498a-84d4-31d004e9481b",
          "length": 250,
          "cycles": 1,
          "position": 122,
          "iteration": 0,
          "httpRequestId": "d14a61e8-6aa3-47d7-ba71-d904bc38b302"
        },
        "item": {
          "id": "5fd740d9-7dbf-46c5-a405-cc1dfca88c6c",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "004da880-00ad-43e6-9c51-56a27229f8d3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8d7c4184-3b0f-4408-9cd3-d1f381fa0ec9",
        "cursor": {
          "ref": "27a7eb3d-3c8b-4610-ad9a-57142030534d",
          "length": 250,
          "cycles": 1,
          "position": 123,
          "iteration": 0,
          "httpRequestId": "b86d1682-5217-4add-bfce-64f12ed248f4"
        },
        "item": {
          "id": "8d7c4184-3b0f-4408-9cd3-d1f381fa0ec9",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "d6c9b32d-6462-40eb-91cd-7c24787e07fc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7fab7d28-8cc8-4e15-b6ae-48f9f8397ae3",
        "cursor": {
          "ref": "424b3365-27c4-4e48-b03a-2ebcc987be28",
          "length": 250,
          "cycles": 1,
          "position": 124,
          "iteration": 0,
          "httpRequestId": "6f33d6db-a2f8-4148-bed4-53be14bb2930"
        },
        "item": {
          "id": "7fab7d28-8cc8-4e15-b6ae-48f9f8397ae3",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "ba4df71b-9d28-44fe-8778-d6262ea12a7a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 24,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8f60dc41-a1fe-43a7-b490-f0664060f84f",
        "cursor": {
          "ref": "6f950e49-8753-4059-aacc-5c0fd99bc64c",
          "length": 250,
          "cycles": 1,
          "position": 125,
          "iteration": 0,
          "httpRequestId": "d9c0b746-0c6e-4f29-a507-86f9dbaeccbb"
        },
        "item": {
          "id": "8f60dc41-a1fe-43a7-b490-f0664060f84f",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "246348d6-3337-4c34-b5a9-ca5055b109ed",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 23,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3ee4c387-8b3f-4ef6-8ce9-f3bc9aab859c",
        "cursor": {
          "ref": "e506855c-1e1b-4fa6-91d2-585e3bdcd49f",
          "length": 250,
          "cycles": 1,
          "position": 126,
          "iteration": 0,
          "httpRequestId": "472f3374-a7f6-49eb-b29d-42a46704d155"
        },
        "item": {
          "id": "3ee4c387-8b3f-4ef6-8ce9-f3bc9aab859c",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "60dc0b47-2cfe-470c-9456-d832b26f8d79",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5873383b-9103-444c-867c-0c9c8ea642ec",
        "cursor": {
          "ref": "2ed72cc9-568a-4005-9a2a-fba0adc0751c",
          "length": 250,
          "cycles": 1,
          "position": 127,
          "iteration": 0,
          "httpRequestId": "b867b522-d2e1-4fb7-b874-01898495f25c"
        },
        "item": {
          "id": "5873383b-9103-444c-867c-0c9c8ea642ec",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "2a5e84c1-ed96-47f0-9e9e-f82703bfa9c1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 24,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ef1879a6-c537-44f2-aa28-51a002269f33",
        "cursor": {
          "ref": "36f98421-9662-48cf-a13e-795c72e8e8d8",
          "length": 250,
          "cycles": 1,
          "position": 128,
          "iteration": 0,
          "httpRequestId": "54366f2b-73dc-4204-82d9-b30e8813410d"
        },
        "item": {
          "id": "ef1879a6-c537-44f2-aa28-51a002269f33",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "9e7b4252-9edc-415e-82bf-fe83bbb5f6ae",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 25,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "559f01e4-2240-4264-9bf8-2697b1fb3c3c",
        "cursor": {
          "ref": "6e9bc140-1c72-45b4-a4f2-1d84a94922cc",
          "length": 250,
          "cycles": 1,
          "position": 129,
          "iteration": 0,
          "httpRequestId": "9017a4f6-1605-42a8-ba4f-8e53963c040f"
        },
        "item": {
          "id": "559f01e4-2240-4264-9bf8-2697b1fb3c3c",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "670cb534-733c-4580-86b9-dace89c07eac",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 24,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f9979c1d-f21c-4e47-a437-28d59f0d6841",
        "cursor": {
          "ref": "75700212-b971-4627-a38d-2d24fe8a0487",
          "length": 250,
          "cycles": 1,
          "position": 130,
          "iteration": 0,
          "httpRequestId": "18aff392-8091-4761-b517-5d9388f4b662"
        },
        "item": {
          "id": "f9979c1d-f21c-4e47-a437-28d59f0d6841",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "ead915e0-9afd-4173-a6bc-8d43edad292b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 22,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8539da2c-45c2-41f7-ad64-1d800920a4a1",
        "cursor": {
          "ref": "41851cb3-23e4-4852-aa54-d0700d0f1af6",
          "length": 250,
          "cycles": 1,
          "position": 131,
          "iteration": 0,
          "httpRequestId": "c1598e05-4c3b-4a70-8c09-e610a9f0d016"
        },
        "item": {
          "id": "8539da2c-45c2-41f7-ad64-1d800920a4a1",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "b56a2105-3cdb-44c9-9451-3603b81a2c7e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "153322bd-272d-4d90-afbe-7a30e77fb19f",
        "cursor": {
          "ref": "3ddd97e8-2957-4e57-975f-17d703fa8e54",
          "length": 250,
          "cycles": 1,
          "position": 132,
          "iteration": 0,
          "httpRequestId": "6366dd31-aeb7-45e2-8364-ae65a37fbdd7"
        },
        "item": {
          "id": "153322bd-272d-4d90-afbe-7a30e77fb19f",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "2e70e286-4f56-47ae-9c51-23f822423bec",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "65f1b494-7da5-456d-9025-7b488b7b5330",
        "cursor": {
          "ref": "c552f3ce-3dd5-448b-9419-7690783b425a",
          "length": 250,
          "cycles": 1,
          "position": 133,
          "iteration": 0,
          "httpRequestId": "a5bd65ba-afaf-4274-8e0a-05b78d7eebf0"
        },
        "item": {
          "id": "65f1b494-7da5-456d-9025-7b488b7b5330",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "bde8e137-77fa-41fc-8cc1-71f8219fecb9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 221
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "20dea589-279b-4f80-8eb3-00bb63437106",
        "cursor": {
          "ref": "8d0df0cc-934d-443b-87cd-d25db36a8066",
          "length": 250,
          "cycles": 1,
          "position": 134,
          "iteration": 0,
          "httpRequestId": "bdd61b16-d5a0-42c0-8f16-533fee4490d5"
        },
        "item": {
          "id": "20dea589-279b-4f80-8eb3-00bb63437106",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "5be95708-da25-4761-a29e-df14c24cc189",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 22,
          "responseSize": 171
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "262bb59e-de07-409c-8e43-370a5d413f5d",
        "cursor": {
          "ref": "ed136e79-48de-4490-939b-af1122c93e82",
          "length": 250,
          "cycles": 1,
          "position": 135,
          "iteration": 0,
          "httpRequestId": "ac422d56-d987-4c50-a41a-671e2c96af16"
        },
        "item": {
          "id": "262bb59e-de07-409c-8e43-370a5d413f5d",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "1fa131c8-8030-438a-ac02-38c49ece92e6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 23,
          "responseSize": 171
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3d1629e7-26cb-43bd-ba64-2321861e77d7",
        "cursor": {
          "ref": "28a19358-74a6-464b-8952-cbd42baa88f3",
          "length": 250,
          "cycles": 1,
          "position": 136,
          "iteration": 0,
          "httpRequestId": "ff587c75-86cc-4ac3-bea6-70a0f90f2b90"
        },
        "item": {
          "id": "3d1629e7-26cb-43bd-ba64-2321861e77d7",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "6ad4db21-3216-4369-9502-7da035f6995f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 171
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "43124b06-68ad-48f5-9fa6-8dc3838711c5",
        "cursor": {
          "ref": "a7a10a80-7565-4dbf-b6f8-56b1c643a200",
          "length": 250,
          "cycles": 1,
          "position": 137,
          "iteration": 0,
          "httpRequestId": "6b3b43ea-3fb2-4f86-be3c-728108616553"
        },
        "item": {
          "id": "43124b06-68ad-48f5-9fa6-8dc3838711c5",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "ece97902-cdd6-4aa6-863c-e859700c9c79",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 25,
          "responseSize": 221
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1fa33f79-2813-46a0-9beb-04f4742d3056",
        "cursor": {
          "ref": "acb7a75b-cb9e-4d54-a4e8-fe8f2906ef3c",
          "length": 250,
          "cycles": 1,
          "position": 138,
          "iteration": 0,
          "httpRequestId": "dd718d81-a921-4cb6-a22d-43e9a31c4219"
        },
        "item": {
          "id": "1fa33f79-2813-46a0-9beb-04f4742d3056",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "8e019b99-ec4d-4aea-b869-d943407cf9d3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 23,
          "responseSize": 171
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "16a42ec7-4f0c-461a-8b1a-e497fc4a081a",
        "cursor": {
          "ref": "459bc57c-19d6-4579-8960-de905a8e2eb8",
          "length": 250,
          "cycles": 1,
          "position": 139,
          "iteration": 0,
          "httpRequestId": "8cea933b-0faa-4f5a-9b50-40c3e17c66f5"
        },
        "item": {
          "id": "16a42ec7-4f0c-461a-8b1a-e497fc4a081a",
          "name": "credentials_status:credentialStatus:item:purpose:missing"
        },
        "response": {
          "id": "acba357c-ed94-4523-b7da-867d02272d66",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9ad8532c-4db2-4ae8-9bf5-b8d72e2745ec",
        "cursor": {
          "ref": "7c7de424-f4ea-4ddf-9bf3-092a0cfda591",
          "length": 250,
          "cycles": 1,
          "position": 140,
          "iteration": 0,
          "httpRequestId": "6a398f38-27e4-4d9b-a6df-007b9154c39a"
        },
        "item": {
          "id": "9ad8532c-4db2-4ae8-9bf5-b8d72e2745ec",
          "name": "credentials_status:credentialStatus:item:purpose:array"
        },
        "response": {
          "id": "6c52fc95-2a2c-4777-b522-2b64562028c5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "928bbc1f-8cd2-4d2f-9716-d579f7e7cd71",
        "cursor": {
          "ref": "bf7874fb-5c97-4c61-92f4-eddef71e1e89",
          "length": 250,
          "cycles": 1,
          "position": 141,
          "iteration": 0,
          "httpRequestId": "6bbf04f4-d8fe-4252-808f-6f44188af902"
        },
        "item": {
          "id": "928bbc1f-8cd2-4d2f-9716-d579f7e7cd71",
          "name": "credentials_status:credentialStatus:item:purpose:boolean"
        },
        "response": {
          "id": "c45be3a8-4f35-41cd-b13b-bf2130ffd58a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2c6f803c-9ab4-459a-acd8-4a742fc9890e",
        "cursor": {
          "ref": "fef83568-049d-490c-8110-8dabf2394d04",
          "length": 250,
          "cycles": 1,
          "position": 142,
          "iteration": 0,
          "httpRequestId": "4aecfda7-4083-46e2-bae4-ffbaa5a456ff"
        },
        "item": {
          "id": "2c6f803c-9ab4-459a-acd8-4a742fc9890e",
          "name": "credentials_status:credentialStatus:item:purpose:integer"
        },
        "response": {
          "id": "b40d61b1-f158-4142-83fd-5cc5f82abc7d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "10b8a5e1-e519-4da1-a65e-4e3dbabbac3e",
        "cursor": {
          "ref": "78feabc1-d986-4048-98ff-e92297e001e5",
          "length": 250,
          "cycles": 1,
          "position": 143,
          "iteration": 0,
          "httpRequestId": "d9b287a7-c9f9-4ccf-83ea-3ec4efec5c85"
        },
        "item": {
          "id": "10b8a5e1-e519-4da1-a65e-4e3dbabbac3e",
          "name": "credentials_status:credentialStatus:item:purpose:null"
        },
        "response": {
          "id": "68d5d747-decd-4cdf-9fbe-10dc65a03635",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 26,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "41673fb8-5697-4d21-9f3a-6158ae07582e",
        "cursor": {
          "ref": "47b911c0-06c0-4e8c-9a23-aa26c9763446",
          "length": 250,
          "cycles": 1,
          "position": 144,
          "iteration": 0,
          "httpRequestId": "74254b4e-814d-456a-b6f7-2c310085abe1"
        },
        "item": {
          "id": "41673fb8-5697-4d21-9f3a-6158ae07582e",
          "name": "credentials_status:credentialStatus:item:purpose:object"
        },
        "response": {
          "id": "4e6b457a-178f-4586-b117-fcd49cdd31c3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5942f64b-c769-4a23-b6cc-3e995c172584",
        "cursor": {
          "ref": "04290a77-70b4-4fec-86c5-084c1a5df40a",
          "length": 250,
          "cycles": 1,
          "position": 145,
          "iteration": 0,
          "httpRequestId": "56d1d5fa-e4af-4f76-b67b-c83604d1b3f0"
        },
        "item": {
          "id": "5942f64b-c769-4a23-b6cc-3e995c172584",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "283de985-b906-4f11-882a-34ecd1b61df6",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 16,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4bd886c7-b828-4e6b-848e-0f2f50b32000",
        "cursor": {
          "ref": "d346a5cf-3eb8-4483-a854-b4da293ab69c",
          "length": 250,
          "cycles": 1,
          "position": 146,
          "iteration": 0,
          "httpRequestId": "0ad050c0-9337-4d60-9855-76e5816b8d63"
        },
        "item": {
          "id": "4bd886c7-b828-4e6b-848e-0f2f50b32000",
          "name": "credentials_verify:vc:missing"
        },
        "response": {
          "id": "782644f4-8f8e-4ac4-a923-82ba0eb162b8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6daaaedd-51a7-49f2-9066-b051cf013253",
        "cursor": {
          "ref": "2075630c-3a3c-4a91-9cc3-f7c0c69a0f7c",
          "length": 250,
          "cycles": 1,
          "position": 147,
          "iteration": 0,
          "httpRequestId": "9e5b3cfb-6eba-4495-9849-95829726eb6a"
        },
        "item": {
          "id": "6daaaedd-51a7-49f2-9066-b051cf013253",
          "name": "credentials_verify:vc:string"
        },
        "response": {
          "id": "93a5e43e-11a3-4ae7-9f12-4f02fd267020",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ed9778b8-caf9-4136-9b2e-bab91d0b860e",
        "cursor": {
          "ref": "68eac1fe-8c15-4f5b-9efd-d5933c925ec9",
          "length": 250,
          "cycles": 1,
          "position": 148,
          "iteration": 0,
          "httpRequestId": "34ddb1c6-ec5e-484a-bed1-4a231e827129"
        },
        "item": {
          "id": "ed9778b8-caf9-4136-9b2e-bab91d0b860e",
          "name": "credentials_verify:vc:null"
        },
        "response": {
          "id": "e54bbb7b-8c82-4df5-841f-be4f639d85cd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 25,
          "responseSize": 171
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "becb3411-8653-492d-bdf2-2cefa964845b",
        "cursor": {
          "ref": "6ad60611-8410-469d-88dd-618db58a589f",
          "length": 250,
          "cycles": 1,
          "position": 149,
          "iteration": 0,
          "httpRequestId": "26d4a1a3-72a8-40ce-ac1b-e5855640427c"
        },
        "item": {
          "id": "becb3411-8653-492d-bdf2-2cefa964845b",
          "name": "credentials_verify:vc:integer"
        },
        "response": {
          "id": "992e6acb-9c94-41ac-9400-39fee3c1c7d5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8a7d6f7f-5ed1-466d-9bae-0a82fc6d3753",
        "cursor": {
          "ref": "fd09e0ca-df81-48aa-939b-fc41b56a324b",
          "length": 250,
          "cycles": 1,
          "position": 150,
          "iteration": 0,
          "httpRequestId": "3428f580-8a04-4282-8bb3-900abef640d3"
        },
        "item": {
          "id": "8a7d6f7f-5ed1-466d-9bae-0a82fc6d3753",
          "name": "credentials_verify:vc:boolean"
        },
        "response": {
          "id": "9252c2ee-b02d-4ebd-8384-5ebbbdd2a39d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b6eea00a-a563-4d1a-8ea5-acefbba0864d",
        "cursor": {
          "ref": "5bd911be-c61f-417a-91b6-46887c612c6f",
          "length": 250,
          "cycles": 1,
          "position": 151,
          "iteration": 0,
          "httpRequestId": "b7973602-a47d-443e-b404-0298936d2cb1"
        },
        "item": {
          "id": "b6eea00a-a563-4d1a-8ea5-acefbba0864d",
          "name": "credentials_verify:vc:array"
        },
        "response": {
          "id": "fc8a0163-1a55-45d9-98d6-fcb267ae7e69",
          "status": "OK",
          "code": 200,
          "responseTime": 78,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:152)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:152)"
            }
          }
        ]
      },
      {
        "id": "422d28b1-0d0a-4dc0-8b62-b348d3dce66e",
        "cursor": {
          "ref": "ba7c878e-36bc-4d2b-b3ac-a6c79a7983f1",
          "length": 250,
          "cycles": 1,
          "position": 152,
          "iteration": 0,
          "httpRequestId": "effce6a1-b8bf-4f70-9a3a-fa8be5af6439"
        },
        "item": {
          "id": "422d28b1-0d0a-4dc0-8b62-b348d3dce66e",
          "name": "credentials_verify:vc:@context:missing"
        },
        "response": {
          "id": "c7014412-5650-41eb-a19a-608d69359fa4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 24,
          "responseSize": 242
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c653ab14-dba6-4bdb-b69d-22b56443dbdc",
        "cursor": {
          "ref": "98fcf637-e2d8-4387-9d2a-e38ec4e5a08d",
          "length": 250,
          "cycles": 1,
          "position": 153,
          "iteration": 0,
          "httpRequestId": "7f8fce8a-d1a1-4fd9-8161-f31bce49d4b9"
        },
        "item": {
          "id": "c653ab14-dba6-4bdb-b69d-22b56443dbdc",
          "name": "credentials_verify:vc:@context:boolean"
        },
        "response": {
          "id": "87b39dcb-69db-4664-bac3-77a190e208cb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 26,
          "responseSize": 305
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5311cea4-13ee-4e90-817f-17a198dd4eb1",
        "cursor": {
          "ref": "5918e8ce-c051-47af-8c79-d46478c07714",
          "length": 250,
          "cycles": 1,
          "position": 154,
          "iteration": 0,
          "httpRequestId": "542d45bf-b835-43a2-9818-dbcb413c5b8a"
        },
        "item": {
          "id": "5311cea4-13ee-4e90-817f-17a198dd4eb1",
          "name": "credentials_verify:vc:@context:integer"
        },
        "response": {
          "id": "44e2f331-cfed-40fd-9d4f-74767b9a5ab2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 26,
          "responseSize": 305
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c396e959-0252-45c7-ae47-d13ff6c9bfc2",
        "cursor": {
          "ref": "ef9c4843-114a-4325-a335-9b288fceab93",
          "length": 250,
          "cycles": 1,
          "position": 155,
          "iteration": 0,
          "httpRequestId": "b58ee2c2-46fb-4c79-a09a-ce7dc9467678"
        },
        "item": {
          "id": "c396e959-0252-45c7-ae47-d13ff6c9bfc2",
          "name": "credentials_verify:vc:@context:null"
        },
        "response": {
          "id": "8492e45b-ebc0-4d16-bd3c-49e0b9aeb3b5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 26,
          "responseSize": 305
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6212adad-4931-4283-925c-5d73cd5bd0ac",
        "cursor": {
          "ref": "cd5c0058-600e-449d-9c1c-823d2e9f47ba",
          "length": 250,
          "cycles": 1,
          "position": 156,
          "iteration": 0,
          "httpRequestId": "50053d27-68af-422a-b3c3-96f86d23c05f"
        },
        "item": {
          "id": "6212adad-4931-4283-925c-5d73cd5bd0ac",
          "name": "credentials_verify:vc:@context:object"
        },
        "response": {
          "id": "5a4cdbd9-cbf6-4961-974c-125481a8ea44",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 242
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9baf360f-58b1-4910-803a-3cbd01ed3964",
        "cursor": {
          "ref": "0edf6c19-2ccb-4f16-98a6-00f5ad90f1c9",
          "length": 250,
          "cycles": 1,
          "position": 157,
          "iteration": 0,
          "httpRequestId": "97a8563b-672c-4626-a1ab-baae8497147b"
        },
        "item": {
          "id": "9baf360f-58b1-4910-803a-3cbd01ed3964",
          "name": "credentials_verify:vc:@context:string"
        },
        "response": {
          "id": "739e8e26-5cdf-4e0c-bd2c-274dd97a3094",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 25,
          "responseSize": 172
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7bd52224-7245-4ff3-abd0-a54c8fddb230",
        "cursor": {
          "ref": "fd0916d5-6b65-4bcf-a75e-924ee1c2119b",
          "length": 250,
          "cycles": 1,
          "position": 158,
          "iteration": 0,
          "httpRequestId": "6cf1b410-b658-4822-91de-9af22f7bb7c4"
        },
        "item": {
          "id": "7bd52224-7245-4ff3-abd0-a54c8fddb230",
          "name": "credentials_verify:vc:@context:item:array"
        },
        "response": {
          "id": "252a8afd-b28e-4144-acce-e05f297c14d0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ba806c42-aee7-4417-9461-7c6c3289c610",
        "cursor": {
          "ref": "4f85d339-e79f-4b9d-a464-2f4b6d2b7325",
          "length": 250,
          "cycles": 1,
          "position": 159,
          "iteration": 0,
          "httpRequestId": "f74f5e6c-926b-477f-bc53-c4c1c815ea4f"
        },
        "item": {
          "id": "ba806c42-aee7-4417-9461-7c6c3289c610",
          "name": "credentials_verify:vc:@context:item:boolean"
        },
        "response": {
          "id": "d640fa5c-f518-4d52-a6b2-f0dd1af43d8d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d3a003d7-e7c6-4e88-8768-f0186e4651e6",
        "cursor": {
          "ref": "3365011d-55b7-412f-a0a4-e7e90c7998c0",
          "length": 250,
          "cycles": 1,
          "position": 160,
          "iteration": 0,
          "httpRequestId": "ee460c9d-02de-47a8-9889-9db382a338e3"
        },
        "item": {
          "id": "d3a003d7-e7c6-4e88-8768-f0186e4651e6",
          "name": "credentials_verify:vc:@context:item:integer"
        },
        "response": {
          "id": "ad1adacc-9863-4ef6-a4ee-03da59596bac",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 26,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2e368299-f1ed-49a2-985c-d0a588af2b1f",
        "cursor": {
          "ref": "018d4a11-d5e5-4910-9c79-250f4f42c1b0",
          "length": 250,
          "cycles": 1,
          "position": 161,
          "iteration": 0,
          "httpRequestId": "8170c197-3a13-4832-882a-44ba2d028bd8"
        },
        "item": {
          "id": "2e368299-f1ed-49a2-985c-d0a588af2b1f",
          "name": "credentials_verify:vc:@context:item:null"
        },
        "response": {
          "id": "dfbd27c4-4c60-4fb8-9292-f5acd4db22de",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 24,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a19271d0-4616-46f8-8374-1fbf9bdd2f04",
        "cursor": {
          "ref": "ea4f991a-3ede-4359-93d4-a293b4cbb49c",
          "length": 250,
          "cycles": 1,
          "position": 162,
          "iteration": 0,
          "httpRequestId": "ead2d2d3-a448-4660-a4c3-8970a03c95c0"
        },
        "item": {
          "id": "a19271d0-4616-46f8-8374-1fbf9bdd2f04",
          "name": "credentials_verify:vc:@context:item:object"
        },
        "response": {
          "id": "2166f2ad-2b37-403d-87e2-af06288e8ffe",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8ab1a39a-a254-4fb9-aa36-a3030ac5257e",
        "cursor": {
          "ref": "535ff610-958e-4d34-91b5-14ed8ece6235",
          "length": 250,
          "cycles": 1,
          "position": 163,
          "iteration": 0,
          "httpRequestId": "a7d213f0-9630-4a4c-9b96-5cb5412d6421"
        },
        "item": {
          "id": "8ab1a39a-a254-4fb9-aa36-a3030ac5257e",
          "name": "credentials_verify:vc:id:array"
        },
        "response": {
          "id": "e356e10f-8932-472c-8b6d-9998b36acc1c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d8562185-c19f-4bf9-8512-dfca2b8bd657",
        "cursor": {
          "ref": "91357836-ddbd-4562-bb91-1959a0f8c45e",
          "length": 250,
          "cycles": 1,
          "position": 164,
          "iteration": 0,
          "httpRequestId": "2a8286a1-78f8-425b-b5e0-5cd642a0de32"
        },
        "item": {
          "id": "d8562185-c19f-4bf9-8512-dfca2b8bd657",
          "name": "credentials_verify:vc:id:boolean"
        },
        "response": {
          "id": "3f4537f7-dbac-434f-bc1a-8d5398180dae",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "24406f5b-696b-44b0-9115-bd17222b5310",
        "cursor": {
          "ref": "c0c66c8e-b63e-4166-b4e0-f7a423b3ac9b",
          "length": 250,
          "cycles": 1,
          "position": 165,
          "iteration": 0,
          "httpRequestId": "71624d37-e0de-4e5f-bd62-afb405cc592b"
        },
        "item": {
          "id": "24406f5b-696b-44b0-9115-bd17222b5310",
          "name": "credentials_verify:vc:id:integer"
        },
        "response": {
          "id": "c12575c2-2e78-49c5-93ec-9e4e5ecd47d0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6af935c4-a0f6-4b80-ae66-258753b51a51",
        "cursor": {
          "ref": "b46b8b97-066e-4109-b615-d5fd21341d69",
          "length": 250,
          "cycles": 1,
          "position": 166,
          "iteration": 0,
          "httpRequestId": "e32a721d-6728-4955-b227-0f99ab844664"
        },
        "item": {
          "id": "6af935c4-a0f6-4b80-ae66-258753b51a51",
          "name": "credentials_verify:vc:id:null"
        },
        "response": {
          "id": "f402e830-7c6d-4bbe-bd91-49c7a4e9b974",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 26,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5893f59d-b119-41ca-ad8e-c69b165710c8",
        "cursor": {
          "ref": "422b6e8a-726e-4ff6-87ea-4d986b9a9b1b",
          "length": 250,
          "cycles": 1,
          "position": 167,
          "iteration": 0,
          "httpRequestId": "c4955ae2-4a1d-4f3a-8c5b-0f28f4ecda80"
        },
        "item": {
          "id": "5893f59d-b119-41ca-ad8e-c69b165710c8",
          "name": "credentials_verify:vc:id:object"
        },
        "response": {
          "id": "fbbd37fd-949b-49ce-b911-125211237c58",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c61fee8c-010d-4196-bc63-620b5f8c7ec9",
        "cursor": {
          "ref": "e4a36fb5-8915-4500-ab1d-6acd0946a046",
          "length": 250,
          "cycles": 1,
          "position": 168,
          "iteration": 0,
          "httpRequestId": "e83926fe-26b3-4cb9-83d5-c6d497b28d1e"
        },
        "item": {
          "id": "c61fee8c-010d-4196-bc63-620b5f8c7ec9",
          "name": "credentials_verify:vc:type:missing"
        },
        "response": {
          "id": "a6611daa-556b-436e-b921-53a7ae43dc90",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 26,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7501aa59-faeb-4f62-8d63-52e853a3907f",
        "cursor": {
          "ref": "e3618684-cbc4-404d-821b-c0c2c19d3e75",
          "length": 250,
          "cycles": 1,
          "position": 169,
          "iteration": 0,
          "httpRequestId": "e24c9457-df00-4c3e-83dc-9dde03b81f2e"
        },
        "item": {
          "id": "7501aa59-faeb-4f62-8d63-52e853a3907f",
          "name": "credentials_verify:vc:type:boolean"
        },
        "response": {
          "id": "b79df7de-d050-46d6-a522-eecdfceb2f32",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e1154499-a024-4173-a4f7-a54b3f968366",
        "cursor": {
          "ref": "d3dbbe55-2f9a-4726-ae6b-82488c642f10",
          "length": 250,
          "cycles": 1,
          "position": 170,
          "iteration": 0,
          "httpRequestId": "88499040-5a3a-4740-ad3e-6bb4586855b3"
        },
        "item": {
          "id": "e1154499-a024-4173-a4f7-a54b3f968366",
          "name": "credentials_verify:vc:type:integer"
        },
        "response": {
          "id": "dea3f52a-fbca-4be3-8f72-5a76bccfebb7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "aa52cfa2-7402-429f-919b-8fee87875499",
        "cursor": {
          "ref": "78addae1-4392-4a7b-b263-32c7b6db40b7",
          "length": 250,
          "cycles": 1,
          "position": 171,
          "iteration": 0,
          "httpRequestId": "e86d67f4-bf08-4391-8b79-8e2785e4575e"
        },
        "item": {
          "id": "aa52cfa2-7402-429f-919b-8fee87875499",
          "name": "credentials_verify:vc:type:null"
        },
        "response": {
          "id": "11cdae2d-da0f-441a-89fc-9fb1ab96172f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c90a0804-c933-4669-812d-7b936cbc2867",
        "cursor": {
          "ref": "e183a8ca-5699-40aa-b4f5-7162f4cd5ebf",
          "length": 250,
          "cycles": 1,
          "position": 172,
          "iteration": 0,
          "httpRequestId": "d2da5843-7c1f-49a8-b30f-b0582c16cadc"
        },
        "item": {
          "id": "c90a0804-c933-4669-812d-7b936cbc2867",
          "name": "credentials_verify:vc:type:object"
        },
        "response": {
          "id": "4de34474-4ef9-41fb-8ba7-eb320a16b24d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9718d225-4dd9-4645-8254-f368bec2b8e6",
        "cursor": {
          "ref": "381af050-abc0-4b55-90bd-808520ca3148",
          "length": 250,
          "cycles": 1,
          "position": 173,
          "iteration": 0,
          "httpRequestId": "85941ab7-17ce-4e52-8078-cd2e975db61e"
        },
        "item": {
          "id": "9718d225-4dd9-4645-8254-f368bec2b8e6",
          "name": "credentials_verify:vc:type:string"
        },
        "response": {
          "id": "afe2116d-8bb8-4cfd-a9e6-39ba8efa457f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3fa0dd9b-24ce-4905-8c47-5b5442bf6141",
        "cursor": {
          "ref": "c64d2721-54a6-46e5-ad16-c08325f7f688",
          "length": 250,
          "cycles": 1,
          "position": 174,
          "iteration": 0,
          "httpRequestId": "eb4b7928-0d46-4910-9013-c50cf9d6f704"
        },
        "item": {
          "id": "3fa0dd9b-24ce-4905-8c47-5b5442bf6141",
          "name": "credentials_verify:vc:type:item:missing"
        },
        "response": {
          "id": "52a0a8f4-ba8a-4b1a-95c4-0154aa3c1a6a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "89bb0383-d4fb-4b0c-b599-68dbdc38138a",
        "cursor": {
          "ref": "03b884e3-1a90-405f-a23b-2384a9fb4b95",
          "length": 250,
          "cycles": 1,
          "position": 175,
          "iteration": 0,
          "httpRequestId": "42b158a5-e549-4928-b762-5b213cbe5fce"
        },
        "item": {
          "id": "89bb0383-d4fb-4b0c-b599-68dbdc38138a",
          "name": "credentials_verify:vc:type:item:array"
        },
        "response": {
          "id": "4b7193dd-ec98-4dfe-a691-c4b225781afd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 26,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2ff5513a-c441-4eef-8639-49a769e9d5ed",
        "cursor": {
          "ref": "1339fa37-195a-4108-bc34-6fb53f623b63",
          "length": 250,
          "cycles": 1,
          "position": 176,
          "iteration": 0,
          "httpRequestId": "016f78db-031f-44aa-ba8b-fab56e4f8494"
        },
        "item": {
          "id": "2ff5513a-c441-4eef-8639-49a769e9d5ed",
          "name": "credentials_verify:vc:type:item:boolean"
        },
        "response": {
          "id": "37e601ac-a835-4d10-9bd2-439b79c15532",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 25,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "82b9fe21-e911-432f-9698-028692743d15",
        "cursor": {
          "ref": "8c42494b-0464-415c-9e4d-fd37ca9e0b0a",
          "length": 250,
          "cycles": 1,
          "position": 177,
          "iteration": 0,
          "httpRequestId": "ca88e369-0bdb-4b5b-9bda-7f47f574c9fd"
        },
        "item": {
          "id": "82b9fe21-e911-432f-9698-028692743d15",
          "name": "credentials_verify:vc:type:item:integer"
        },
        "response": {
          "id": "d0052a43-a363-4ebd-bebc-f03760036d0b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 24,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4d534d0a-3175-4265-9269-2bc5f272cd70",
        "cursor": {
          "ref": "b68bf5ff-ae33-4955-941a-3e9e12dcb3df",
          "length": 250,
          "cycles": 1,
          "position": 178,
          "iteration": 0,
          "httpRequestId": "192c350e-67ec-4e01-8c31-9192d543fd5a"
        },
        "item": {
          "id": "4d534d0a-3175-4265-9269-2bc5f272cd70",
          "name": "credentials_verify:vc:type:item:null"
        },
        "response": {
          "id": "fd8bac47-0c1d-441f-aa31-6ec4e0e8e9ee",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 23,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5d9af14b-9774-44b3-9ca8-e56a9c774b2c",
        "cursor": {
          "ref": "c73fb01a-71b9-49b2-8afb-455eb55d0b18",
          "length": 250,
          "cycles": 1,
          "position": 179,
          "iteration": 0,
          "httpRequestId": "1b557f23-8473-487a-9e71-b2e683fd5b3b"
        },
        "item": {
          "id": "5d9af14b-9774-44b3-9ca8-e56a9c774b2c",
          "name": "credentials_verify:vc:type:item:object"
        },
        "response": {
          "id": "57974d43-0d0c-44b4-bc80-4c4981bc5721",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1da8459a-ccea-4fcd-8386-a01653107bf0",
        "cursor": {
          "ref": "07f57c5e-a6c7-47ff-beab-ec63486fbbb7",
          "length": 250,
          "cycles": 1,
          "position": 180,
          "iteration": 0,
          "httpRequestId": "1e3cd51e-48ab-40d0-bde9-bdf264896479"
        },
        "item": {
          "id": "1da8459a-ccea-4fcd-8386-a01653107bf0",
          "name": "credentials_verify:vc:issuer:missing"
        },
        "response": {
          "id": "4d15eb77-7c5e-43b6-84ca-8005b547c106",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 25,
          "responseSize": 106
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ceb29ed8-0d96-4138-9512-e88b0cc10c95",
        "cursor": {
          "ref": "4b770343-5256-43a7-86bf-7f4089e4b6af",
          "length": 250,
          "cycles": 1,
          "position": 181,
          "iteration": 0,
          "httpRequestId": "6358ce92-6db9-4c1e-8c82-13b5acf13367"
        },
        "item": {
          "id": "ceb29ed8-0d96-4138-9512-e88b0cc10c95",
          "name": "credentials_verify:vc:issuer:array"
        },
        "response": {
          "id": "2311cbd5-a399-468c-9859-c46b3211cf7d",
          "status": "OK",
          "code": 200,
          "responseTime": 80,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:182)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:182)"
            }
          }
        ]
      },
      {
        "id": "e254d05d-bab3-4c00-915c-0669cb1f97f9",
        "cursor": {
          "ref": "23f77996-394c-4ebc-96e9-63980c3b45a0",
          "length": 250,
          "cycles": 1,
          "position": 182,
          "iteration": 0,
          "httpRequestId": "5ebb2522-72a4-4494-b08a-9ab9bda949b9"
        },
        "item": {
          "id": "e254d05d-bab3-4c00-915c-0669cb1f97f9",
          "name": "credentials_verify:vc:issuer:boolean"
        },
        "response": {
          "id": "26e2a873-860a-4196-8b9e-26b152432d71",
          "status": "OK",
          "code": 200,
          "responseTime": 72,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:183)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:183)"
            }
          }
        ]
      },
      {
        "id": "71016389-24d6-4f0e-ab83-cf6424863d64",
        "cursor": {
          "ref": "6bbb55a4-ae65-47a3-8239-314a2d560b1f",
          "length": 250,
          "cycles": 1,
          "position": 183,
          "iteration": 0,
          "httpRequestId": "3fd4626d-28ba-40f4-917a-4f22f6423ea1"
        },
        "item": {
          "id": "71016389-24d6-4f0e-ab83-cf6424863d64",
          "name": "credentials_verify:vc:issuer:integer"
        },
        "response": {
          "id": "191ec2db-5bb2-415b-9ccb-57f2a1050fcd",
          "status": "OK",
          "code": 200,
          "responseTime": 67,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:184)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:184)"
            }
          }
        ]
      },
      {
        "id": "ec72ae58-0a8b-44d8-945b-c1b2ccb04f07",
        "cursor": {
          "ref": "a696b910-6ac5-40d5-898a-8682e344781d",
          "length": 250,
          "cycles": 1,
          "position": 184,
          "iteration": 0,
          "httpRequestId": "bb794f81-a652-4a4b-a1e1-f8fc8f417aa5"
        },
        "item": {
          "id": "ec72ae58-0a8b-44d8-945b-c1b2ccb04f07",
          "name": "credentials_verify:vc:issuer:null"
        },
        "response": {
          "id": "dddf39e1-9d60-4997-b973-8095189871ac",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 106
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7408de18-3766-4bb8-bee2-febe99bab7a7",
        "cursor": {
          "ref": "a7096588-60e5-4091-8215-d7d3c606273f",
          "length": 250,
          "cycles": 1,
          "position": 185,
          "iteration": 0,
          "httpRequestId": "656cf5de-ab0a-495a-a565-85f2a10ada30"
        },
        "item": {
          "id": "7408de18-3766-4bb8-bee2-febe99bab7a7",
          "name": "credentials_verify:vc:issuer:id:missing"
        },
        "response": {
          "id": "488206f5-ffce-4b26-b044-5c497a2ef2b9",
          "status": "OK",
          "code": 200,
          "responseTime": 70,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:186)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:186)"
            }
          }
        ]
      },
      {
        "id": "aa57049f-adc1-4a34-8a36-446013f6495b",
        "cursor": {
          "ref": "48f2385c-4748-4e14-9150-cbb6f743bf8f",
          "length": 250,
          "cycles": 1,
          "position": 186,
          "iteration": 0,
          "httpRequestId": "66a46ab9-19e5-45c1-8424-c52b291643e8"
        },
        "item": {
          "id": "aa57049f-adc1-4a34-8a36-446013f6495b",
          "name": "credentials_verify:vc:issuer:id:array"
        },
        "response": {
          "id": "39b14328-3fc3-4e01-a976-1ccf606c52f4",
          "status": "OK",
          "code": 200,
          "responseTime": 81,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:187)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:187)"
            }
          }
        ]
      },
      {
        "id": "304c4e12-b771-45ba-932a-27ac779161ca",
        "cursor": {
          "ref": "8e81cc46-ad51-4f27-b814-c3b66362df87",
          "length": 250,
          "cycles": 1,
          "position": 187,
          "iteration": 0,
          "httpRequestId": "cb58394c-7ed8-44ad-9d22-466430b7a474"
        },
        "item": {
          "id": "304c4e12-b771-45ba-932a-27ac779161ca",
          "name": "credentials_verify:vc:issuer:id:boolean"
        },
        "response": {
          "id": "326b6015-f29c-4c7f-8e1c-68fd1fc54235",
          "status": "OK",
          "code": 200,
          "responseTime": 103,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:188)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:188)"
            }
          }
        ]
      },
      {
        "id": "89c64a54-dfb4-48fe-b72f-bc13c6de9819",
        "cursor": {
          "ref": "5aab1219-353c-4d1a-88e8-b695d27e845e",
          "length": 250,
          "cycles": 1,
          "position": 188,
          "iteration": 0,
          "httpRequestId": "91655724-c5dc-44b8-bef2-df2f795cb9c6"
        },
        "item": {
          "id": "89c64a54-dfb4-48fe-b72f-bc13c6de9819",
          "name": "credentials_verify:vc:issuer:id:integer"
        },
        "response": {
          "id": "dc585ed6-13a8-4682-b5be-cf038c9c987e",
          "status": "OK",
          "code": 200,
          "responseTime": 65,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:189)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:189)"
            }
          }
        ]
      },
      {
        "id": "e01aa7b7-94d8-487d-9853-5d749ebf9102",
        "cursor": {
          "ref": "819064ce-3874-4772-a94b-3859bbf93141",
          "length": 250,
          "cycles": 1,
          "position": 189,
          "iteration": 0,
          "httpRequestId": "2236c3b7-1485-4a3e-859e-70c43d4c863b"
        },
        "item": {
          "id": "e01aa7b7-94d8-487d-9853-5d749ebf9102",
          "name": "credentials_verify:vc:issuer:id:null"
        },
        "response": {
          "id": "c0dc48cb-787f-481d-b809-b72561ca72b3",
          "status": "OK",
          "code": 200,
          "responseTime": 66,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:190)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:190)"
            }
          }
        ]
      },
      {
        "id": "f7375c7c-da12-4116-b587-43d15640e454",
        "cursor": {
          "ref": "9f307663-dafd-44ec-b322-d017d7de907b",
          "length": 250,
          "cycles": 1,
          "position": 190,
          "iteration": 0,
          "httpRequestId": "820012ef-f4f0-4cc9-8eef-00e2435b4646"
        },
        "item": {
          "id": "f7375c7c-da12-4116-b587-43d15640e454",
          "name": "credentials_verify:vc:issuer:id:object"
        },
        "response": {
          "id": "a7e9a699-d3c1-46ea-8a3e-324373f577df",
          "status": "OK",
          "code": 200,
          "responseTime": 77,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:191)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:191)"
            }
          }
        ]
      },
      {
        "id": "854dc857-e7be-4580-8c96-b585b978db46",
        "cursor": {
          "ref": "f562dceb-ccb5-4f1d-8e05-54ce143b75ce",
          "length": 250,
          "cycles": 1,
          "position": 191,
          "iteration": 0,
          "httpRequestId": "4e67bbef-8b71-42f3-8872-0fc0add6ed74"
        },
        "item": {
          "id": "854dc857-e7be-4580-8c96-b585b978db46",
          "name": "credentials_verify:vc:issuanceDate:missing"
        },
        "response": {
          "id": "5ef1a069-f5c5-4b8b-b19b-7aed1fadbac1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9538938c-d725-47ae-936a-a406e0d4e0fe",
        "cursor": {
          "ref": "75dcae06-c4cc-469c-a50a-84763f5b362a",
          "length": 250,
          "cycles": 1,
          "position": 192,
          "iteration": 0,
          "httpRequestId": "5d6cd1b1-d945-4891-b3e6-d4705577e04c"
        },
        "item": {
          "id": "9538938c-d725-47ae-936a-a406e0d4e0fe",
          "name": "credentials_verify:vc:issuanceDate:array"
        },
        "response": {
          "id": "1bb03f0b-bdc1-41c2-ab62-0bc6e9649f56",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 25,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "70b285ff-9a61-4b0f-8b2e-b2cf6a39acc2",
        "cursor": {
          "ref": "2f34a364-a38f-4552-859a-43013512df06",
          "length": 250,
          "cycles": 1,
          "position": 193,
          "iteration": 0,
          "httpRequestId": "a140cd97-de65-4234-9fe1-7cc9f03a7a1d"
        },
        "item": {
          "id": "70b285ff-9a61-4b0f-8b2e-b2cf6a39acc2",
          "name": "credentials_verify:vc:issuanceDate:boolean"
        },
        "response": {
          "id": "0b5d9328-ec57-45e5-aafc-33536610d53b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a07a8db7-f55b-4fbf-814d-ab6e0a8d5333",
        "cursor": {
          "ref": "fb621ed4-9fc3-4985-88bb-89f62e46c8e5",
          "length": 250,
          "cycles": 1,
          "position": 194,
          "iteration": 0,
          "httpRequestId": "f6e4cb97-545d-4028-8f43-1190a7d83d61"
        },
        "item": {
          "id": "a07a8db7-f55b-4fbf-814d-ab6e0a8d5333",
          "name": "credentials_verify:vc:issuanceDate:integer"
        },
        "response": {
          "id": "1d11e844-41ba-413e-9c20-3f98df8bc031",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 26,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "242379bf-afa1-45b4-a662-65fb23a1d4d8",
        "cursor": {
          "ref": "237b275f-1fe7-43c4-932e-faad1eb8f2cf",
          "length": 250,
          "cycles": 1,
          "position": 195,
          "iteration": 0,
          "httpRequestId": "634d1274-80b5-4ef2-85bc-f0bda6022fa8"
        },
        "item": {
          "id": "242379bf-afa1-45b4-a662-65fb23a1d4d8",
          "name": "credentials_verify:vc:issuanceDate:null"
        },
        "response": {
          "id": "d1448dcc-3785-44b6-a4ff-971c1f4d01b3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "461c9788-e180-42c3-a836-7a0154f75a1c",
        "cursor": {
          "ref": "dccf0eec-637a-402f-8056-747c05f5bed1",
          "length": 250,
          "cycles": 1,
          "position": 196,
          "iteration": 0,
          "httpRequestId": "559427b1-9b63-4855-ac99-f4d42cf73c62"
        },
        "item": {
          "id": "461c9788-e180-42c3-a836-7a0154f75a1c",
          "name": "credentials_verify:vc:issuanceDate:object"
        },
        "response": {
          "id": "424231cd-f77a-48d8-b864-40b22af22915",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5dbd9781-db58-4eeb-bebd-ff43de86c79c",
        "cursor": {
          "ref": "477b83d6-8644-4788-9825-34ddab4afd0b",
          "length": 250,
          "cycles": 1,
          "position": 197,
          "iteration": 0,
          "httpRequestId": "4f207313-c9c1-41e7-97cf-c9ac370a7cdd"
        },
        "item": {
          "id": "5dbd9781-db58-4eeb-bebd-ff43de86c79c",
          "name": "credentials_verify:vc:issuanceDate:string"
        },
        "response": {
          "id": "8cc29ff6-1a3d-4ad6-ad49-29f42220dd42",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 26,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "30ff2766-538d-44b0-8bdd-51afcf73fdea",
        "cursor": {
          "ref": "94af2115-b3bb-48ac-8466-7407aa57dbdd",
          "length": 250,
          "cycles": 1,
          "position": 198,
          "iteration": 0,
          "httpRequestId": "dbc9dc66-3363-4fdd-ae50-cf2a799630ee"
        },
        "item": {
          "id": "30ff2766-538d-44b0-8bdd-51afcf73fdea",
          "name": "credentials_verify:vc:credentialSubject:missing"
        },
        "response": {
          "id": "cc0cbad2-51b9-4af7-ad12-2be7e0e4cbcd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dd159bea-6f70-4472-81ea-dc0fef047b97",
        "cursor": {
          "ref": "dfcd0717-e213-4021-98ca-1b06bf554e49",
          "length": 250,
          "cycles": 1,
          "position": 199,
          "iteration": 0,
          "httpRequestId": "7037d262-259b-455a-adb6-48aa2790a27f"
        },
        "item": {
          "id": "dd159bea-6f70-4472-81ea-dc0fef047b97",
          "name": "credentials_verify:vc:credentialSubject:array"
        },
        "response": {
          "id": "9921903d-ca39-426d-9a76-3e413663a930",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 25,
          "responseSize": 223
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1f371ee4-96ff-4d47-b0f6-8f95f2b5fa5c",
        "cursor": {
          "ref": "484e8f6a-de63-4466-99f7-02eaee4d8dd4",
          "length": 250,
          "cycles": 1,
          "position": 200,
          "iteration": 0,
          "httpRequestId": "b08f8e38-d5fb-49c7-bc1e-7465aaec01e7"
        },
        "item": {
          "id": "1f371ee4-96ff-4d47-b0f6-8f95f2b5fa5c",
          "name": "credentials_verify:vc:credentialSubject:boolean"
        },
        "response": {
          "id": "39baee78-fb13-44fb-8b1e-c9f823ed5645",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 26,
          "responseSize": 205
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a83d09cc-75b2-4f8f-a182-62a8622589fa",
        "cursor": {
          "ref": "6a3a20c7-bab5-47aa-88fb-6a7b26f09051",
          "length": 250,
          "cycles": 1,
          "position": 201,
          "iteration": 0,
          "httpRequestId": "a2d3ee0c-248a-4c58-bc0c-8845828f6471"
        },
        "item": {
          "id": "a83d09cc-75b2-4f8f-a182-62a8622589fa",
          "name": "credentials_verify:vc:credentialSubject:integer"
        },
        "response": {
          "id": "7cf23b0b-43da-4647-97a8-7cf917ff7487",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 205
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "91a69772-deae-4508-a248-44e58afc212a",
        "cursor": {
          "ref": "0143919f-b41f-4c96-b5eb-9562d4ac0a0f",
          "length": 250,
          "cycles": 1,
          "position": 202,
          "iteration": 0,
          "httpRequestId": "4bb96cce-0e3f-4493-a646-f1da73c4fa0b"
        },
        "item": {
          "id": "91a69772-deae-4508-a248-44e58afc212a",
          "name": "credentials_verify:vc:credentialSubject:null"
        },
        "response": {
          "id": "9a8443e4-0acb-42e2-ae53-96b879cfd126",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 26,
          "responseSize": 268
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "66cc5aa7-e3d1-459d-b232-af2648baf244",
        "cursor": {
          "ref": "3abe404f-03bc-4ce4-906a-e4dac37d8a1e",
          "length": 250,
          "cycles": 1,
          "position": 203,
          "iteration": 0,
          "httpRequestId": "e2f01c72-4f56-407a-becc-c09dfc0d0538"
        },
        "item": {
          "id": "66cc5aa7-e3d1-459d-b232-af2648baf244",
          "name": "credentials_verify:vc:credentialSubject:string"
        },
        "response": {
          "id": "2dd29380-755f-4c7e-be7e-b7496aca712a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 205
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3fddc0bf-7107-4b37-b994-856b55223a24",
        "cursor": {
          "ref": "73e93d43-dadd-48c7-8c72-667059cec807",
          "length": 250,
          "cycles": 1,
          "position": 204,
          "iteration": 0,
          "httpRequestId": "77824c9f-63f8-49c4-aa3b-a576ff3d3c94"
        },
        "item": {
          "id": "3fddc0bf-7107-4b37-b994-856b55223a24",
          "name": "credentials_verify:vc:credentialSubject:id:array"
        },
        "response": {
          "id": "68ae7bfb-0862-49c6-b369-304ad2b173f5",
          "status": "OK",
          "code": 200,
          "responseTime": 103,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:205)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:205)"
            }
          }
        ]
      },
      {
        "id": "0a52d89b-5b2d-4ea0-9dac-047d60627353",
        "cursor": {
          "ref": "f912b044-3508-4bac-9490-a9789cd3262d",
          "length": 250,
          "cycles": 1,
          "position": 205,
          "iteration": 0,
          "httpRequestId": "255e2c85-cf45-4f4f-87f8-0047f285b895"
        },
        "item": {
          "id": "0a52d89b-5b2d-4ea0-9dac-047d60627353",
          "name": "credentials_verify:vc:credentialSubject:id:boolean"
        },
        "response": {
          "id": "cd78e6bc-f781-42d0-bb14-6c2c7f7af746",
          "status": "OK",
          "code": 200,
          "responseTime": 75,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:206)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:206)"
            }
          }
        ]
      },
      {
        "id": "25c91c90-4c01-4763-8183-bea787cc1760",
        "cursor": {
          "ref": "f919fb49-c2d8-474d-8ecd-28346d9851c0",
          "length": 250,
          "cycles": 1,
          "position": 206,
          "iteration": 0,
          "httpRequestId": "0495c6ff-7095-4993-b69a-f5a83cb9923b"
        },
        "item": {
          "id": "25c91c90-4c01-4763-8183-bea787cc1760",
          "name": "credentials_verify:vc:credentialSubject:id:integer"
        },
        "response": {
          "id": "fc90f156-ed2b-4cc1-8df4-038a94ee2e4f",
          "status": "OK",
          "code": 200,
          "responseTime": 68,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:207)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:207)"
            }
          }
        ]
      },
      {
        "id": "5d415106-d0c1-4709-8d1e-b9d3f16d8533",
        "cursor": {
          "ref": "e5709275-0899-4167-81ed-12536aa45ed6",
          "length": 250,
          "cycles": 1,
          "position": 207,
          "iteration": 0,
          "httpRequestId": "1b2dc3a6-94f6-480d-95f9-a853bf0b26d4"
        },
        "item": {
          "id": "5d415106-d0c1-4709-8d1e-b9d3f16d8533",
          "name": "credentials_verify:vc:credentialSubject:id:null"
        },
        "response": {
          "id": "9a87183b-449c-44b7-b477-289bdb4a7c94",
          "status": "OK",
          "code": 200,
          "responseTime": 81,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:208)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:208)"
            }
          }
        ]
      },
      {
        "id": "6bc5e7f2-7538-4480-8068-a536de5eeba6",
        "cursor": {
          "ref": "fef6bc0e-e349-44fb-84dc-dacddcaf4633",
          "length": 250,
          "cycles": 1,
          "position": 208,
          "iteration": 0,
          "httpRequestId": "c65b9f86-55ad-4a77-b9ea-295906e9f52f"
        },
        "item": {
          "id": "6bc5e7f2-7538-4480-8068-a536de5eeba6",
          "name": "credentials_verify:vc:credentialSubject:id:object"
        },
        "response": {
          "id": "3ef1fba1-5a0a-4ecd-ac69-a6451df7a4f0",
          "status": "OK",
          "code": 200,
          "responseTime": 75,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:209)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:209)"
            }
          }
        ]
      },
      {
        "id": "621a74e6-c7b5-4653-95ec-e341146d2759",
        "cursor": {
          "ref": "74f40938-ef90-4b21-81c1-0152ff2413af",
          "length": 250,
          "cycles": 1,
          "position": 209,
          "iteration": 0,
          "httpRequestId": "2d743748-ed86-4c45-8369-a132cf144508"
        },
        "item": {
          "id": "621a74e6-c7b5-4653-95ec-e341146d2759",
          "name": "credentials_verify:proof:missing"
        },
        "response": {
          "id": "76570843-814d-45dc-9b28-c2cef82fa361",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 217
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6f753bf6-062c-4a57-bfad-d8481855c56b",
        "cursor": {
          "ref": "45d25b15-2811-405f-9793-a6e81a6fac3b",
          "length": 250,
          "cycles": 1,
          "position": 210,
          "iteration": 0,
          "httpRequestId": "09a9a7f7-fcf7-4366-9911-697eb2f558e3"
        },
        "item": {
          "id": "6f753bf6-062c-4a57-bfad-d8481855c56b",
          "name": "credentials_verify:proof:array"
        },
        "response": {
          "id": "f0b3f132-9dfc-4b81-99e3-112fc45cfc5e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 166
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ba937760-4f1f-4dce-a971-1de5fc3417d3",
        "cursor": {
          "ref": "84d44f1b-6194-4e53-980f-c58bd0883a74",
          "length": 250,
          "cycles": 1,
          "position": 211,
          "iteration": 0,
          "httpRequestId": "ca65b420-b1d0-4362-9e8e-a29519a756dc"
        },
        "item": {
          "id": "ba937760-4f1f-4dce-a971-1de5fc3417d3",
          "name": "credentials_verify:proof:boolean"
        },
        "response": {
          "id": "ffe93c1a-c24f-419c-a18b-476429f53e85",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 23,
          "responseSize": 244
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0a74bce9-c26b-4965-bdfa-4788e0b41755",
        "cursor": {
          "ref": "8b58215d-fd37-402c-a3a1-1eb70275744d",
          "length": 250,
          "cycles": 1,
          "position": 212,
          "iteration": 0,
          "httpRequestId": "e6be710c-3eaf-4cf1-b2b9-2bed92b734ee"
        },
        "item": {
          "id": "0a74bce9-c26b-4965-bdfa-4788e0b41755",
          "name": "credentials_verify:proof:integer"
        },
        "response": {
          "id": "a11e5590-ad62-4963-bac6-ad18ee604c76",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 23,
          "responseSize": 244
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ee9ad8c6-2e02-4ff4-841e-4f3749859ee8",
        "cursor": {
          "ref": "7e6a7aff-c625-4265-a3fe-4f8b6178358e",
          "length": 250,
          "cycles": 1,
          "position": 213,
          "iteration": 0,
          "httpRequestId": "bc63966e-410b-4b8f-a024-7a80723f3996"
        },
        "item": {
          "id": "ee9ad8c6-2e02-4ff4-841e-4f3749859ee8",
          "name": "credentials_verify:proof:null"
        },
        "response": {
          "id": "5ba04c73-e051-45df-b135-3493888fad66",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 295
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "35e5f79f-d571-4721-a4ad-1b50cc8d4e14",
        "cursor": {
          "ref": "33c7df67-1376-4985-8bca-cfb44fec018e",
          "length": 250,
          "cycles": 1,
          "position": 214,
          "iteration": 0,
          "httpRequestId": "2985b1ca-8cf1-4a93-8ded-b1ba9f7818fc"
        },
        "item": {
          "id": "35e5f79f-d571-4721-a4ad-1b50cc8d4e14",
          "name": "credentials_verify:proof:string"
        },
        "response": {
          "id": "fdc47175-7255-463d-a3a5-c9df048d9e85",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 26,
          "responseSize": 244
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5143e496-9454-4c20-82ad-d1246b2a8041",
        "cursor": {
          "ref": "a50c7d05-30c1-4453-bee5-0ba7e5b5a94d",
          "length": 250,
          "cycles": 1,
          "position": 215,
          "iteration": 0,
          "httpRequestId": "5b286ae0-78e8-4960-a404-294d4098943c"
        },
        "item": {
          "id": "5143e496-9454-4c20-82ad-d1246b2a8041",
          "name": "credentials_verify:proof:type:missing"
        },
        "response": {
          "id": "43f60468-043c-479a-820e-54183e31c325",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 345
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cd5f034e-6c9e-4e2f-9064-171cbafabddb",
        "cursor": {
          "ref": "e3420186-2b40-4e1f-b326-0d109c5d02aa",
          "length": 250,
          "cycles": 1,
          "position": 216,
          "iteration": 0,
          "httpRequestId": "8cd88e3c-f0f7-41e6-aecf-9fd7217c43f5"
        },
        "item": {
          "id": "cd5f034e-6c9e-4e2f-9064-171cbafabddb",
          "name": "credentials_verify:proof:type:array"
        },
        "response": {
          "id": "65ee9a86-a316-475b-a2f3-d64890d3e0b0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 25,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "79f35c14-d005-4b6f-bbcb-51cea168f72f",
        "cursor": {
          "ref": "c7d93c9d-7ba8-4cba-a861-2d2f9cdb986e",
          "length": 250,
          "cycles": 1,
          "position": 217,
          "iteration": 0,
          "httpRequestId": "5ee9b391-5f2d-4892-8783-1a924366bedd"
        },
        "item": {
          "id": "79f35c14-d005-4b6f-bbcb-51cea168f72f",
          "name": "credentials_verify:proof:type:boolean"
        },
        "response": {
          "id": "a4d82c89-aba8-4224-b6da-5a488de32088",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 25,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9019e63b-2763-4877-ab7e-f940db89df1d",
        "cursor": {
          "ref": "008d77d8-b63a-49a8-bc81-2c873b8b7f71",
          "length": 250,
          "cycles": 1,
          "position": 218,
          "iteration": 0,
          "httpRequestId": "7cd1e112-dcc7-46c7-8148-8fab7854ef98"
        },
        "item": {
          "id": "9019e63b-2763-4877-ab7e-f940db89df1d",
          "name": "credentials_verify:proof:type:integer"
        },
        "response": {
          "id": "e8d97739-9203-4d02-8d1d-9c5507506307",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "10c6a7ed-19e3-414c-9f25-976b13820d97",
        "cursor": {
          "ref": "1a9badce-4fab-4f51-a5fc-11c8c220b782",
          "length": 250,
          "cycles": 1,
          "position": 219,
          "iteration": 0,
          "httpRequestId": "2aa75cae-09bb-4262-afbc-d6ee0d5fac14"
        },
        "item": {
          "id": "10c6a7ed-19e3-414c-9f25-976b13820d97",
          "name": "credentials_verify:proof:type:null"
        },
        "response": {
          "id": "49379750-49cd-4b1a-b786-d1bbef8ac109",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 26,
          "responseSize": 345
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7d923722-6c13-4899-8d8f-bd176804442f",
        "cursor": {
          "ref": "a44785d0-863d-4209-8926-0691639c3292",
          "length": 250,
          "cycles": 1,
          "position": 220,
          "iteration": 0,
          "httpRequestId": "a407b072-6d3d-46a3-9ce6-494a1378c576"
        },
        "item": {
          "id": "7d923722-6c13-4899-8d8f-bd176804442f",
          "name": "credentials_verify:proof:type:object"
        },
        "response": {
          "id": "8d6fa037-434a-4b28-98b6-ff212442f98f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c6116b94-14fa-4a34-971a-b4d36b22340c",
        "cursor": {
          "ref": "86c8458d-beb8-411c-b976-1b90e5e658a3",
          "length": 250,
          "cycles": 1,
          "position": 221,
          "iteration": 0,
          "httpRequestId": "170e45c3-f082-46bf-80c1-264c7c5a3f72"
        },
        "item": {
          "id": "c6116b94-14fa-4a34-971a-b4d36b22340c",
          "name": "credentials_verify:proof:type:string"
        },
        "response": {
          "id": "4d27e389-39bd-446c-8b78-7fbe08dc2de0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "460c1b33-66b5-4dab-8ffd-26757985aef7",
        "cursor": {
          "ref": "0037137f-c822-4ef2-8946-2c6592283566",
          "length": 250,
          "cycles": 1,
          "position": 222,
          "iteration": 0,
          "httpRequestId": "a77490bb-40f0-4b31-a1e0-681310c780c7"
        },
        "item": {
          "id": "460c1b33-66b5-4dab-8ffd-26757985aef7",
          "name": "credentials_verify:proof:created:array"
        },
        "response": {
          "id": "48f8b48b-1c47-4566-8e1f-108678ac4629",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ebf6f719-7e44-49bc-ba3d-f27f823f9f4a",
        "cursor": {
          "ref": "d4c2de58-d222-4046-ba36-88a9ab774d93",
          "length": 250,
          "cycles": 1,
          "position": 223,
          "iteration": 0,
          "httpRequestId": "ca000b9f-6912-4fdc-b5fa-734d0bef6d47"
        },
        "item": {
          "id": "ebf6f719-7e44-49bc-ba3d-f27f823f9f4a",
          "name": "credentials_verify:proof:created:boolean"
        },
        "response": {
          "id": "c65d9146-c152-49e6-b37c-d463d3cf934c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 25,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6883cd88-8b95-43cf-aa62-a93e1e73a9ba",
        "cursor": {
          "ref": "ce4bbcbf-e597-4429-a5cd-93a157e48f4a",
          "length": 250,
          "cycles": 1,
          "position": 224,
          "iteration": 0,
          "httpRequestId": "efd93f3a-5250-4c22-8470-c17975f01dfc"
        },
        "item": {
          "id": "6883cd88-8b95-43cf-aa62-a93e1e73a9ba",
          "name": "credentials_verify:proof:created:integer"
        },
        "response": {
          "id": "4a5521a0-4808-4bc6-b8b0-f784ff612d15",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "473b4775-5c78-49a5-964f-c4aa2ab5bf32",
        "cursor": {
          "ref": "675a5ab2-a542-4872-849e-c15b48c27217",
          "length": 250,
          "cycles": 1,
          "position": 225,
          "iteration": 0,
          "httpRequestId": "cd70af03-14e3-42cc-9375-74ae69e0fcb9"
        },
        "item": {
          "id": "473b4775-5c78-49a5-964f-c4aa2ab5bf32",
          "name": "credentials_verify:proof:created:null"
        },
        "response": {
          "id": "190507f4-a1ba-4355-a8de-4007924c3b2e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 252
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "50aebb5c-c995-439d-bf2e-7c7455e5f3bb",
        "cursor": {
          "ref": "b75f47d1-5af2-4773-bd79-dc22eb8a0022",
          "length": 250,
          "cycles": 1,
          "position": 226,
          "iteration": 0,
          "httpRequestId": "82bdfd6e-c6ac-43ff-a20e-20e6f938d17b"
        },
        "item": {
          "id": "50aebb5c-c995-439d-bf2e-7c7455e5f3bb",
          "name": "credentials_verify:proof:created:object"
        },
        "response": {
          "id": "c3667fa1-5ec0-4d50-95ec-6cf6e74c818b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 26,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6b15dbca-e291-4a5e-bc13-89066c4a5c23",
        "cursor": {
          "ref": "3a90baa1-8268-4f51-b84d-9e4b0fbb492d",
          "length": 250,
          "cycles": 1,
          "position": 227,
          "iteration": 0,
          "httpRequestId": "14c17107-ab9c-4509-b349-ddff1d4c3c09"
        },
        "item": {
          "id": "6b15dbca-e291-4a5e-bc13-89066c4a5c23",
          "name": "credentials_verify:proof:verificationMethod:array"
        },
        "response": {
          "id": "813af967-1a04-4258-b688-8f48258de5d5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "aa37441a-c1e1-4a20-9aa2-e08d9704d461",
        "cursor": {
          "ref": "d570d5e2-17eb-4e49-b68c-de5e53e2b169",
          "length": 250,
          "cycles": 1,
          "position": 228,
          "iteration": 0,
          "httpRequestId": "8e091894-34e6-478a-8e7b-077024696328"
        },
        "item": {
          "id": "aa37441a-c1e1-4a20-9aa2-e08d9704d461",
          "name": "credentials_verify:proof:verificationMethod:boolean"
        },
        "response": {
          "id": "003ecf47-bf3e-486f-aeb7-77ab3f6f56bf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 24,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "df4492f1-08a1-403b-9285-5c99563c5b05",
        "cursor": {
          "ref": "fe4c34a8-b9f0-437b-a283-e59fca89cb1c",
          "length": 250,
          "cycles": 1,
          "position": 229,
          "iteration": 0,
          "httpRequestId": "cabb023e-ed99-4ddb-bb45-fbff7622f7d9"
        },
        "item": {
          "id": "df4492f1-08a1-403b-9285-5c99563c5b05",
          "name": "credentials_verify:proof:verificationMethod:integer"
        },
        "response": {
          "id": "357be824-ade6-4983-a63c-e6b7bb346926",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 26,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5e796a1b-1847-4855-9807-e3effc142521",
        "cursor": {
          "ref": "412cb715-8b8d-4905-a4d5-a6cd8f154bb1",
          "length": 250,
          "cycles": 1,
          "position": 230,
          "iteration": 0,
          "httpRequestId": "fb0940da-37f6-4efa-b513-75a56d6c4e51"
        },
        "item": {
          "id": "5e796a1b-1847-4855-9807-e3effc142521",
          "name": "credentials_verify:proof:verificationMethod:null"
        },
        "response": {
          "id": "fb9af8cf-5eaf-4de4-90fc-eecd4a2d9e91",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 26,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "06fd4a95-2ec9-4883-8545-bcd2713e0470",
        "cursor": {
          "ref": "2abce83d-29b9-4a6b-80ea-1bb6e7ef0c0b",
          "length": 250,
          "cycles": 1,
          "position": 231,
          "iteration": 0,
          "httpRequestId": "1873cad0-5004-4f43-9291-9fe79d46aa21"
        },
        "item": {
          "id": "06fd4a95-2ec9-4883-8545-bcd2713e0470",
          "name": "credentials_verify:proof:verificationMethod:object"
        },
        "response": {
          "id": "701b942c-349e-4c3e-b3fa-3b75d9880d19",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 25,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2eed640f-68b2-4c68-b47b-5619867eb458",
        "cursor": {
          "ref": "2d0b024e-0cb0-4362-83f2-5ad72130d531",
          "length": 250,
          "cycles": 1,
          "position": 232,
          "iteration": 0,
          "httpRequestId": "8acb2d19-79a4-4c21-b1fb-faca53a76ad3"
        },
        "item": {
          "id": "2eed640f-68b2-4c68-b47b-5619867eb458",
          "name": "credentials_verify:proof:jws:array"
        },
        "response": {
          "id": "40198b5e-d886-4a12-9612-46f89a1d1a9b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 23,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "17c684ac-01cb-4924-a66e-489e5b15a63f",
        "cursor": {
          "ref": "75bc4c04-5df6-465b-9610-c2c7b482791c",
          "length": 250,
          "cycles": 1,
          "position": 233,
          "iteration": 0,
          "httpRequestId": "f60c74b2-fe75-446f-861c-22effc31a2cc"
        },
        "item": {
          "id": "17c684ac-01cb-4924-a66e-489e5b15a63f",
          "name": "credentials_verify:proof:jws:boolean"
        },
        "response": {
          "id": "247cd410-23fa-4379-b2cd-5718df23fa16",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "18cd2610-db87-4269-ab12-8c82b1ec79a4",
        "cursor": {
          "ref": "7241b84c-bdb2-44a4-ae56-fd0d76becbfe",
          "length": 250,
          "cycles": 1,
          "position": 234,
          "iteration": 0,
          "httpRequestId": "12ee9f13-2e51-4f77-8691-bbe649317318"
        },
        "item": {
          "id": "18cd2610-db87-4269-ab12-8c82b1ec79a4",
          "name": "credentials_verify:proof:jws:integer"
        },
        "response": {
          "id": "7ca73bd6-097e-47ef-a254-00589a5e88a1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "df545795-788a-45ec-950a-14e6236d8582",
        "cursor": {
          "ref": "83076f04-9596-4531-90e1-55efc31e74b1",
          "length": 250,
          "cycles": 1,
          "position": 235,
          "iteration": 0,
          "httpRequestId": "f6f06c88-517b-45af-a43d-42c37420d371"
        },
        "item": {
          "id": "df545795-788a-45ec-950a-14e6236d8582",
          "name": "credentials_verify:proof:jws:null"
        },
        "response": {
          "id": "8e153bef-258c-4c73-b913-13b8ea3f77ae",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 172
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0d57e77e-ebdb-4389-8d15-f6f00db201f2",
        "cursor": {
          "ref": "0ee593f0-4fce-43c4-a181-2c465a07ebfd",
          "length": 250,
          "cycles": 1,
          "position": 236,
          "iteration": 0,
          "httpRequestId": "20ebffd5-e832-468a-9bce-06624da10f68"
        },
        "item": {
          "id": "0d57e77e-ebdb-4389-8d15-f6f00db201f2",
          "name": "credentials_verify:proof:jws:object"
        },
        "response": {
          "id": "b28626cb-674d-479f-a76c-7db5c37a1bc5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5f6ac033-e127-4c9d-95d4-098d3ed603a1",
        "cursor": {
          "ref": "621125e8-4d80-49b3-8efa-18469eb60b36",
          "length": 250,
          "cycles": 1,
          "position": 237,
          "iteration": 0,
          "httpRequestId": "4750cd2b-983c-44ce-a625-6a869a0fd3df"
        },
        "item": {
          "id": "5f6ac033-e127-4c9d-95d4-098d3ed603a1",
          "name": "credentials_verify:proof:proofPurpose:array"
        },
        "response": {
          "id": "05fa3555-3bd2-4308-b3b3-33397f400c84",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "82d9fd2d-2d44-4494-832e-1768f4991f8a",
        "cursor": {
          "ref": "1dd7d81a-04e1-45a9-bf5a-62713169d955",
          "length": 250,
          "cycles": 1,
          "position": 238,
          "iteration": 0,
          "httpRequestId": "da00f9b1-2fc9-43f7-9d9c-2bbe0af791fa"
        },
        "item": {
          "id": "82d9fd2d-2d44-4494-832e-1768f4991f8a",
          "name": "credentials_verify:proof:proofPurpose:boolean"
        },
        "response": {
          "id": "85d77aaa-306c-451e-9020-3d8be14e49b6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e3b1a6c8-091f-4af4-98a4-1c5002cbb46a",
        "cursor": {
          "ref": "e2b60eb2-0317-4336-afaa-137ee8ecf440",
          "length": 250,
          "cycles": 1,
          "position": 239,
          "iteration": 0,
          "httpRequestId": "21990c92-2799-4e40-9d85-d16ea2854e27"
        },
        "item": {
          "id": "e3b1a6c8-091f-4af4-98a4-1c5002cbb46a",
          "name": "credentials_verify:proof:proofPurpose:integer"
        },
        "response": {
          "id": "db2dfcf8-1963-458a-b338-5ad9b1b9f4eb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "feefa92f-ddcc-4483-b5af-16d6a04e6f72",
        "cursor": {
          "ref": "29780de7-ff52-4948-adfd-e1425ddf60ac",
          "length": 250,
          "cycles": 1,
          "position": 240,
          "iteration": 0,
          "httpRequestId": "35ca50e6-d0f6-416b-aaed-719fda3e6cf1"
        },
        "item": {
          "id": "feefa92f-ddcc-4483-b5af-16d6a04e6f72",
          "name": "credentials_verify:proof:proofPurpose:null"
        },
        "response": {
          "id": "d8b74471-2e8c-4e9b-8383-049d4a084fb5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 24,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6dc2ab52-4ef0-4f53-82db-c3f2a2f8c16e",
        "cursor": {
          "ref": "ba91ae5d-9c81-4fd5-8445-a646899c146f",
          "length": 250,
          "cycles": 1,
          "position": 241,
          "iteration": 0,
          "httpRequestId": "6dcd8191-2cd1-4eca-be0d-3bc8a414f667"
        },
        "item": {
          "id": "6dc2ab52-4ef0-4f53-82db-c3f2a2f8c16e",
          "name": "credentials_verify:proof:proofPurpose:object"
        },
        "response": {
          "id": "16d66bc7-d613-40b0-9fd7-363f4aa95d63",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 24,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "54b7e00a-0aa8-40d8-963c-fa79e0e0b28a",
        "cursor": {
          "ref": "0099c77d-8d35-4c6c-85bc-b7600994eb8e",
          "length": 250,
          "cycles": 1,
          "position": 242,
          "iteration": 0,
          "httpRequestId": "3dd37ef7-2f1f-4b17-a2dd-3cf9db13fe01"
        },
        "item": {
          "id": "54b7e00a-0aa8-40d8-963c-fa79e0e0b28a",
          "name": "credentials_verify:proof:proofPurpose:string"
        },
        "response": {
          "id": "39000784-4c54-4db5-a5f2-20f1420eafbe",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 24,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2b4c3a04-4aae-4287-8c3f-3cd75df08826",
        "cursor": {
          "ref": "d4ad0acf-bbd5-494f-92ba-0e9fe40bc0ce",
          "length": 250,
          "cycles": 1,
          "position": 243,
          "iteration": 0,
          "httpRequestId": "a95c1609-a8f1-49b4-a151-1c0671ed5c8c"
        },
        "item": {
          "id": "2b4c3a04-4aae-4287-8c3f-3cd75df08826",
          "name": "credentials_verify:missing_auth"
        },
        "response": {
          "id": "f34b0995-53d2-43ba-abf8-e31f319d57cb",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 19,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "58b9ac59-a028-499c-a747-aa5ecd28cef7",
        "cursor": {
          "ref": "4456226f-6ca9-446f-b576-711a1cf48194",
          "length": 250,
          "cycles": 1,
          "position": 244,
          "iteration": 0,
          "httpRequestId": "315fabfe-a0d2-499b-9a8c-fd7b804cfee9"
        },
        "item": {
          "id": "58b9ac59-a028-499c-a747-aa5ecd28cef7",
          "name": "credentials_verify:bad_signature"
        },
        "response": {
          "id": "8443fc51-e6de-4042-b365-3201993bc48f",
          "status": "OK",
          "code": 200,
          "responseTime": 89,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is false",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response verified is false",
              "message": "expected true to be false",
              "stack": "AssertionError: expected true to be false\n   at Object.eval sandbox-script.js:3:245)"
            }
          }
        ]
      },
      {
        "id": "a9e554c8-3bd4-4eef-9fcb-549fd7dfdb64",
        "cursor": {
          "ref": "c2d18236-630a-4c67-b6ce-ee5f92a85394",
          "length": 250,
          "cycles": 1,
          "position": 245,
          "iteration": 0,
          "httpRequestId": "5b8b40c9-19d5-4826-a754-9ade732d8a85"
        },
        "item": {
          "id": "a9e554c8-3bd4-4eef-9fcb-549fd7dfdb64",
          "name": "credentials_verify"
        },
        "response": {
          "id": "7c83aae4-6ccf-41fb-940e-45f8bb07af3d",
          "status": "OK",
          "code": 200,
          "responseTime": 93,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "ac4c81b4-0b54-42b0-94cd-c1fef45c2828",
        "cursor": {
          "ref": "be26f5a3-2d6b-48c2-b207-de7c0b49ed9a",
          "length": 250,
          "cycles": 1,
          "position": 246,
          "iteration": 0,
          "httpRequestId": "1a19073d-8c48-464c-bea3-7a971fcee753"
        },
        "item": {
          "id": "ac4c81b4-0b54-42b0-94cd-c1fef45c2828",
          "name": "credentials_verify:issuer:object"
        },
        "response": {
          "id": "1198d7f7-d0a4-4fd2-b47d-3a720e168d08",
          "status": "OK",
          "code": 200,
          "responseTime": 67,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "33207f3f-11a0-4697-9e4d-60af3c724ab4",
        "cursor": {
          "ref": "03dff789-618f-4dd5-8265-1315501a7f6a",
          "length": 250,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "614463c1-639d-4fda-ad5e-9ac695099e35"
        },
        "item": {
          "id": "33207f3f-11a0-4697-9e4d-60af3c724ab4",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "25102dd5-2c65-4f65-b79b-57c18767aad2",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 19,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "33207f3f-11a0-4697-9e4d-60af3c724ab4",
        "cursor": {
          "ref": "03dff789-618f-4dd5-8265-1315501a7f6a",
          "length": 250,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "614463c1-639d-4fda-ad5e-9ac695099e35"
        },
        "item": {
          "id": "33207f3f-11a0-4697-9e4d-60af3c724ab4",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "25102dd5-2c65-4f65-b79b-57c18767aad2",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 19,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "72ecec51-c8d8-438b-a4cc-a8185017cd48",
        "cursor": {
          "ref": "98e4feab-6da7-421a-926d-b1e0b5dad6bd",
          "length": 250,
          "cycles": 1,
          "position": 248,
          "iteration": 0,
          "httpRequestId": "7c063b98-416e-4ab4-8f87-9418cf412eff"
        },
        "item": {
          "id": "72ecec51-c8d8-438b-a4cc-a8185017cd48",
          "name": "presentations_prove:missing_auth"
        },
        "response": {
          "id": "db553daf-1566-4a10-9d45-0ad29d1fdcc3",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 23,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cb7cffe4-d1d5-405c-b83e-72f6f5aaafae",
        "cursor": {
          "ref": "53d09b16-cc36-45cf-a075-fa793093cb4f",
          "length": 250,
          "cycles": 1,
          "position": 249,
          "iteration": 0,
          "httpRequestId": "0fbf2bf9-7152-42fa-bff9-6c32d2358b80"
        },
        "item": {
          "id": "cb7cffe4-d1d5-405c-b83e-72f6f5aaafae",
          "name": "presentations_verify:missing_auth"
        },
        "response": {
          "id": "58910d12-ff8a-45f4-ac5b-c606d75bd7db",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 18,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      }
    ]
  }
}